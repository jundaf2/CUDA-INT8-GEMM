# 1 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
# 1
# 61 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/home/poweruser/junda.feng/anaconda3/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/home/poweruser/junda.feng/anaconda3/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef long ptrdiff_t; 
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
struct { 
# 427
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 428
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
} max_align_t; 
# 444
typedef __decltype((nullptr)) nullptr_t; 
# 204 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 204
enum cudaError { 
# 211
cudaSuccess, 
# 217
cudaErrorInvalidValue, 
# 223
cudaErrorMemoryAllocation, 
# 229
cudaErrorInitializationError, 
# 236
cudaErrorCudartUnloading, 
# 243
cudaErrorProfilerDisabled, 
# 251
cudaErrorProfilerNotInitialized, 
# 258
cudaErrorProfilerAlreadyStarted, 
# 265
cudaErrorProfilerAlreadyStopped, 
# 274 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 280
cudaErrorInvalidPitchValue = 12, 
# 286
cudaErrorInvalidSymbol, 
# 294
cudaErrorInvalidHostPointer = 16, 
# 302
cudaErrorInvalidDevicePointer, 
# 308
cudaErrorInvalidTexture, 
# 314
cudaErrorInvalidTextureBinding, 
# 321
cudaErrorInvalidChannelDescriptor, 
# 327
cudaErrorInvalidMemcpyDirection, 
# 337 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 346 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 355 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorTextureNotBound, 
# 364 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorSynchronizationError, 
# 370
cudaErrorInvalidFilterSetting, 
# 376
cudaErrorInvalidNormSetting, 
# 384
cudaErrorMixedDeviceExecution, 
# 392
cudaErrorNotYetImplemented = 31, 
# 401 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 408
cudaErrorStubLibrary = 34, 
# 415
cudaErrorInsufficientDriver, 
# 422
cudaErrorCallRequiresNewerDriver, 
# 428
cudaErrorInvalidSurface, 
# 434
cudaErrorDuplicateVariableName = 43, 
# 440
cudaErrorDuplicateTextureName, 
# 446
cudaErrorDuplicateSurfaceName, 
# 456 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 469 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 475
cudaErrorMissingConfiguration = 52, 
# 484 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 491
cudaErrorLaunchMaxDepthExceeded = 65, 
# 499
cudaErrorLaunchFileScopedTex, 
# 507
cudaErrorLaunchFileScopedSurf, 
# 522 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 534 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 540
cudaErrorInvalidDeviceFunction = 98, 
# 546
cudaErrorNoDevice = 100, 
# 553
cudaErrorInvalidDevice, 
# 558
cudaErrorDeviceNotLicensed, 
# 567 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 572
cudaErrorStartupFailure = 127, 
# 577
cudaErrorInvalidKernelImage = 200, 
# 587 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 592
cudaErrorMapBufferObjectFailed = 205, 
# 597
cudaErrorUnmapBufferObjectFailed, 
# 603
cudaErrorArrayIsMapped, 
# 608
cudaErrorAlreadyMapped, 
# 616
cudaErrorNoKernelImageForDevice, 
# 621
cudaErrorAlreadyAcquired, 
# 626
cudaErrorNotMapped, 
# 632
cudaErrorNotMappedAsArray, 
# 638
cudaErrorNotMappedAsPointer, 
# 644
cudaErrorECCUncorrectable, 
# 650
cudaErrorUnsupportedLimit, 
# 656
cudaErrorDeviceAlreadyInUse, 
# 662
cudaErrorPeerAccessUnsupported, 
# 668
cudaErrorInvalidPtx, 
# 673
cudaErrorInvalidGraphicsContext, 
# 679
cudaErrorNvlinkUncorrectable, 
# 686
cudaErrorJitCompilerNotFound, 
# 693
cudaErrorUnsupportedPtxVersion, 
# 700
cudaErrorJitCompilationDisabled, 
# 705
cudaErrorUnsupportedExecAffinity, 
# 710
cudaErrorInvalidSource = 300, 
# 715
cudaErrorFileNotFound, 
# 720
cudaErrorSharedObjectSymbolNotFound, 
# 725
cudaErrorSharedObjectInitFailed, 
# 730
cudaErrorOperatingSystem, 
# 737
cudaErrorInvalidResourceHandle = 400, 
# 743
cudaErrorIllegalState, 
# 750
cudaErrorSymbolNotFound = 500, 
# 758
cudaErrorNotReady = 600, 
# 766
cudaErrorIllegalAddress = 700, 
# 775 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 786 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 792
cudaErrorLaunchIncompatibleTexturing, 
# 799
cudaErrorPeerAccessAlreadyEnabled, 
# 806
cudaErrorPeerAccessNotEnabled, 
# 819 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 826
cudaErrorContextIsDestroyed, 
# 833
cudaErrorAssert, 
# 840
cudaErrorTooManyPeers, 
# 846
cudaErrorHostMemoryAlreadyRegistered, 
# 852
cudaErrorHostMemoryNotRegistered, 
# 861 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorHardwareStackError, 
# 869
cudaErrorIllegalInstruction, 
# 878 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 889 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 897
cudaErrorInvalidPc, 
# 908 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorLaunchFailure, 
# 917 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 922
cudaErrorNotPermitted = 800, 
# 928
cudaErrorNotSupported, 
# 937 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorSystemNotReady, 
# 944
cudaErrorSystemDriverMismatch, 
# 953 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 958
cudaErrorMpsConnectionFailed, 
# 963
cudaErrorMpsRpcFailure, 
# 969
cudaErrorMpsServerNotReady, 
# 974
cudaErrorMpsMaxClientsReached, 
# 979
cudaErrorMpsMaxConnectionsReached, 
# 984
cudaErrorStreamCaptureUnsupported = 900, 
# 990
cudaErrorStreamCaptureInvalidated, 
# 996
cudaErrorStreamCaptureMerge, 
# 1001
cudaErrorStreamCaptureUnmatched, 
# 1007
cudaErrorStreamCaptureUnjoined, 
# 1014
cudaErrorStreamCaptureIsolation, 
# 1020
cudaErrorStreamCaptureImplicit, 
# 1026
cudaErrorCapturedEvent, 
# 1033
cudaErrorStreamCaptureWrongThread, 
# 1038
cudaErrorTimeout, 
# 1044
cudaErrorGraphExecUpdateFailure, 
# 1054 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorExternalDevice, 
# 1067 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaErrorUnknown = 999, 
# 1075
cudaErrorApiFailureBase = 10000
# 1076
}; 
#endif
# 1081 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1081
enum cudaChannelFormatKind { 
# 1083
cudaChannelFormatKindSigned, 
# 1084
cudaChannelFormatKindUnsigned, 
# 1085
cudaChannelFormatKindFloat, 
# 1086
cudaChannelFormatKindNone, 
# 1087
cudaChannelFormatKindNV12, 
# 1088
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1089
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1090
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1091
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1092
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1093
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1094
cudaChannelFormatKindSignedNormalized8X1, 
# 1095
cudaChannelFormatKindSignedNormalized8X2, 
# 1096
cudaChannelFormatKindSignedNormalized8X4, 
# 1097
cudaChannelFormatKindSignedNormalized16X1, 
# 1098
cudaChannelFormatKindSignedNormalized16X2, 
# 1099
cudaChannelFormatKindSignedNormalized16X4, 
# 1100
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1101
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1102
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1103
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1104
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1105
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1106
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1107
cudaChannelFormatKindSignedBlockCompressed4, 
# 1108
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1109
cudaChannelFormatKindSignedBlockCompressed5, 
# 1110
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1111
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1112
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1113
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1114
}; 
#endif
# 1119 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1119
struct cudaChannelFormatDesc { 
# 1121
int x; 
# 1122
int y; 
# 1123
int z; 
# 1124
int w; 
# 1125
cudaChannelFormatKind f; 
# 1126
}; 
#endif
# 1131 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1136
typedef const cudaArray *cudaArray_const_t; 
# 1138
struct cudaArray; 
# 1143
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1148
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1150
struct cudaMipmappedArray; 
# 1160 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1160
struct cudaArraySparseProperties { 
# 1161
struct { 
# 1162
unsigned width; 
# 1163
unsigned height; 
# 1164
unsigned depth; 
# 1165
} tileExtent; 
# 1166
unsigned miptailFirstLevel; 
# 1167
unsigned long long miptailSize; 
# 1168
unsigned flags; 
# 1169
unsigned reserved[4]; 
# 1170
}; 
#endif
# 1176 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1176
struct cudaArrayMemoryRequirements { 
# 1177
::size_t size; 
# 1178
::size_t alignment; 
# 1179
unsigned reserved[4]; 
# 1180
}; 
#endif
# 1186 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1186
enum cudaMemoryType { 
# 1188
cudaMemoryTypeUnregistered, 
# 1189
cudaMemoryTypeHost, 
# 1190
cudaMemoryTypeDevice, 
# 1191
cudaMemoryTypeManaged
# 1192
}; 
#endif
# 1197 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1197
enum cudaMemcpyKind { 
# 1199
cudaMemcpyHostToHost, 
# 1200
cudaMemcpyHostToDevice, 
# 1201
cudaMemcpyDeviceToHost, 
# 1202
cudaMemcpyDeviceToDevice, 
# 1203
cudaMemcpyDefault
# 1204
}; 
#endif
# 1211 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1211
struct cudaPitchedPtr { 
# 1213
void *ptr; 
# 1214
::size_t pitch; 
# 1215
::size_t xsize; 
# 1216
::size_t ysize; 
# 1217
}; 
#endif
# 1224 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1224
struct cudaExtent { 
# 1226
::size_t width; 
# 1227
::size_t height; 
# 1228
::size_t depth; 
# 1229
}; 
#endif
# 1236 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1236
struct cudaPos { 
# 1238
::size_t x; 
# 1239
::size_t y; 
# 1240
::size_t z; 
# 1241
}; 
#endif
# 1246 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1246
struct cudaMemcpy3DParms { 
# 1248
cudaArray_t srcArray; 
# 1249
cudaPos srcPos; 
# 1250
cudaPitchedPtr srcPtr; 
# 1252
cudaArray_t dstArray; 
# 1253
cudaPos dstPos; 
# 1254
cudaPitchedPtr dstPtr; 
# 1256
cudaExtent extent; 
# 1257
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1258
}; 
#endif
# 1263 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1263
struct cudaMemcpy3DPeerParms { 
# 1265
cudaArray_t srcArray; 
# 1266
cudaPos srcPos; 
# 1267
cudaPitchedPtr srcPtr; 
# 1268
int srcDevice; 
# 1270
cudaArray_t dstArray; 
# 1271
cudaPos dstPos; 
# 1272
cudaPitchedPtr dstPtr; 
# 1273
int dstDevice; 
# 1275
cudaExtent extent; 
# 1276
}; 
#endif
# 1281 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1281
struct cudaMemsetParams { 
# 1282
void *dst; 
# 1283
::size_t pitch; 
# 1284
unsigned value; 
# 1285
unsigned elementSize; 
# 1286
::size_t width; 
# 1287
::size_t height; 
# 1288
}; 
#endif
# 1293 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1293
enum cudaAccessProperty { 
# 1294
cudaAccessPropertyNormal, 
# 1295
cudaAccessPropertyStreaming, 
# 1296
cudaAccessPropertyPersisting
# 1297
}; 
#endif
# 1310 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1310
struct cudaAccessPolicyWindow { 
# 1311
void *base_ptr; 
# 1312
::size_t num_bytes; 
# 1313
float hitRatio; 
# 1314
cudaAccessProperty hitProp; 
# 1315
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1316
}; 
#endif
# 1328 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1333
#if 0
# 1333
struct cudaHostNodeParams { 
# 1334
cudaHostFn_t fn; 
# 1335
void *userData; 
# 1336
}; 
#endif
# 1341 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1341
enum cudaStreamCaptureStatus { 
# 1342
cudaStreamCaptureStatusNone, 
# 1343
cudaStreamCaptureStatusActive, 
# 1344
cudaStreamCaptureStatusInvalidated
# 1346
}; 
#endif
# 1352 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1352
enum cudaStreamCaptureMode { 
# 1353
cudaStreamCaptureModeGlobal, 
# 1354
cudaStreamCaptureModeThreadLocal, 
# 1355
cudaStreamCaptureModeRelaxed
# 1356
}; 
#endif
# 1358 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1358
enum cudaSynchronizationPolicy { 
# 1359
cudaSyncPolicyAuto = 1, 
# 1360
cudaSyncPolicySpin, 
# 1361
cudaSyncPolicyYield, 
# 1362
cudaSyncPolicyBlockingSync
# 1363
}; 
#endif
# 1368 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1368
enum cudaStreamAttrID { 
# 1369
cudaStreamAttributeAccessPolicyWindow = 1, 
# 1370
cudaStreamAttributeSynchronizationPolicy = 3
# 1371
}; 
#endif
# 1376 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1376
union cudaStreamAttrValue { 
# 1377
cudaAccessPolicyWindow accessPolicyWindow; 
# 1378
cudaSynchronizationPolicy syncPolicy; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1379
}; 
#endif
# 1384 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1384
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1385
cudaStreamAddCaptureDependencies, 
# 1386
cudaStreamSetCaptureDependencies
# 1387
}; 
#endif
# 1392 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1392
enum cudaUserObjectFlags { 
# 1393
cudaUserObjectNoDestructorSync = 1
# 1394
}; 
#endif
# 1399 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1399
enum cudaUserObjectRetainFlags { 
# 1400
cudaGraphUserObjectMove = 1
# 1401
}; 
#endif
# 1406 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
struct cudaGraphicsResource; 
# 1411
#if 0
# 1411
enum cudaGraphicsRegisterFlags { 
# 1413
cudaGraphicsRegisterFlagsNone, 
# 1414
cudaGraphicsRegisterFlagsReadOnly, 
# 1415
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1416
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1417
cudaGraphicsRegisterFlagsTextureGather = 8
# 1418
}; 
#endif
# 1423 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1423
enum cudaGraphicsMapFlags { 
# 1425
cudaGraphicsMapFlagsNone, 
# 1426
cudaGraphicsMapFlagsReadOnly, 
# 1427
cudaGraphicsMapFlagsWriteDiscard
# 1428
}; 
#endif
# 1433 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1433
enum cudaGraphicsCubeFace { 
# 1435
cudaGraphicsCubeFacePositiveX, 
# 1436
cudaGraphicsCubeFaceNegativeX, 
# 1437
cudaGraphicsCubeFacePositiveY, 
# 1438
cudaGraphicsCubeFaceNegativeY, 
# 1439
cudaGraphicsCubeFacePositiveZ, 
# 1440
cudaGraphicsCubeFaceNegativeZ
# 1441
}; 
#endif
# 1446 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1446
enum cudaKernelNodeAttrID { 
# 1447
cudaKernelNodeAttributeAccessPolicyWindow = 1, 
# 1448
cudaKernelNodeAttributeCooperative
# 1449
}; 
#endif
# 1454 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1454
union cudaKernelNodeAttrValue { 
# 1455
cudaAccessPolicyWindow accessPolicyWindow; 
# 1456
int cooperative; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1457
}; 
#endif
# 1462 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1462
enum cudaResourceType { 
# 1464
cudaResourceTypeArray, 
# 1465
cudaResourceTypeMipmappedArray, 
# 1466
cudaResourceTypeLinear, 
# 1467
cudaResourceTypePitch2D
# 1468
}; 
#endif
# 1473 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1473
enum cudaResourceViewFormat { 
# 1475
cudaResViewFormatNone, 
# 1476
cudaResViewFormatUnsignedChar1, 
# 1477
cudaResViewFormatUnsignedChar2, 
# 1478
cudaResViewFormatUnsignedChar4, 
# 1479
cudaResViewFormatSignedChar1, 
# 1480
cudaResViewFormatSignedChar2, 
# 1481
cudaResViewFormatSignedChar4, 
# 1482
cudaResViewFormatUnsignedShort1, 
# 1483
cudaResViewFormatUnsignedShort2, 
# 1484
cudaResViewFormatUnsignedShort4, 
# 1485
cudaResViewFormatSignedShort1, 
# 1486
cudaResViewFormatSignedShort2, 
# 1487
cudaResViewFormatSignedShort4, 
# 1488
cudaResViewFormatUnsignedInt1, 
# 1489
cudaResViewFormatUnsignedInt2, 
# 1490
cudaResViewFormatUnsignedInt4, 
# 1491
cudaResViewFormatSignedInt1, 
# 1492
cudaResViewFormatSignedInt2, 
# 1493
cudaResViewFormatSignedInt4, 
# 1494
cudaResViewFormatHalf1, 
# 1495
cudaResViewFormatHalf2, 
# 1496
cudaResViewFormatHalf4, 
# 1497
cudaResViewFormatFloat1, 
# 1498
cudaResViewFormatFloat2, 
# 1499
cudaResViewFormatFloat4, 
# 1500
cudaResViewFormatUnsignedBlockCompressed1, 
# 1501
cudaResViewFormatUnsignedBlockCompressed2, 
# 1502
cudaResViewFormatUnsignedBlockCompressed3, 
# 1503
cudaResViewFormatUnsignedBlockCompressed4, 
# 1504
cudaResViewFormatSignedBlockCompressed4, 
# 1505
cudaResViewFormatUnsignedBlockCompressed5, 
# 1506
cudaResViewFormatSignedBlockCompressed5, 
# 1507
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1508
cudaResViewFormatSignedBlockCompressed6H, 
# 1509
cudaResViewFormatUnsignedBlockCompressed7
# 1510
}; 
#endif
# 1515 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1515
struct cudaResourceDesc { 
# 1516
cudaResourceType resType; 
# 1518
union { 
# 1519
struct { 
# 1520
cudaArray_t array; 
# 1521
} array; 
# 1522
struct { 
# 1523
cudaMipmappedArray_t mipmap; 
# 1524
} mipmap; 
# 1525
struct { 
# 1526
void *devPtr; 
# 1527
cudaChannelFormatDesc desc; 
# 1528
::size_t sizeInBytes; 
# 1529
} linear; 
# 1530
struct { 
# 1531
void *devPtr; 
# 1532
cudaChannelFormatDesc desc; 
# 1533
::size_t width; 
# 1534
::size_t height; 
# 1535
::size_t pitchInBytes; 
# 1536
} pitch2D; 
# 1537
} res; 
# 1538
}; 
#endif
# 1543 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1543
struct cudaResourceViewDesc { 
# 1545
cudaResourceViewFormat format; 
# 1546
::size_t width; 
# 1547
::size_t height; 
# 1548
::size_t depth; 
# 1549
unsigned firstMipmapLevel; 
# 1550
unsigned lastMipmapLevel; 
# 1551
unsigned firstLayer; 
# 1552
unsigned lastLayer; 
# 1553
}; 
#endif
# 1558 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1558
struct cudaPointerAttributes { 
# 1564
cudaMemoryType type; 
# 1575 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
int device; 
# 1581
void *devicePointer; 
# 1590 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
void *hostPointer; 
# 1591
}; 
#endif
# 1596 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1596
struct cudaFuncAttributes { 
# 1603
::size_t sharedSizeBytes; 
# 1609
::size_t constSizeBytes; 
# 1614
::size_t localSizeBytes; 
# 1621
int maxThreadsPerBlock; 
# 1626
int numRegs; 
# 1633
int ptxVersion; 
# 1640
int binaryVersion; 
# 1646
int cacheModeCA; 
# 1653
int maxDynamicSharedSizeBytes; 
# 1662 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
int preferredShmemCarveout; 
# 1712 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
}; 
#endif
# 1717 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1717
enum cudaFuncAttribute { 
# 1719
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1720
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1729 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaFuncAttributeMax
# 1730
}; 
#endif
# 1735 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1735
enum cudaFuncCache { 
# 1737
cudaFuncCachePreferNone, 
# 1738
cudaFuncCachePreferShared, 
# 1739
cudaFuncCachePreferL1, 
# 1740
cudaFuncCachePreferEqual
# 1741
}; 
#endif
# 1747 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1747
enum cudaSharedMemConfig { 
# 1749
cudaSharedMemBankSizeDefault, 
# 1750
cudaSharedMemBankSizeFourByte, 
# 1751
cudaSharedMemBankSizeEightByte
# 1752
}; 
#endif
# 1757 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1757
enum cudaSharedCarveout { 
# 1758
cudaSharedmemCarveoutDefault = (-1), 
# 1759
cudaSharedmemCarveoutMaxShared = 100, 
# 1760
cudaSharedmemCarveoutMaxL1 = 0
# 1761
}; 
#endif
# 1777 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1777
enum cudaComputeMode { 
# 1779
cudaComputeModeDefault, 
# 1780
cudaComputeModeExclusive, 
# 1781
cudaComputeModeProhibited, 
# 1782
cudaComputeModeExclusiveProcess
# 1783
}; 
#endif
# 1788 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1788
enum cudaLimit { 
# 1790
cudaLimitStackSize, 
# 1791
cudaLimitPrintfFifoSize, 
# 1792
cudaLimitMallocHeapSize, 
# 1793
cudaLimitDevRuntimeSyncDepth, 
# 1794
cudaLimitDevRuntimePendingLaunchCount, 
# 1795
cudaLimitMaxL2FetchGranularity, 
# 1796
cudaLimitPersistingL2CacheSize
# 1797
}; 
#endif
# 1802 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1802
enum cudaMemoryAdvise { 
# 1804
cudaMemAdviseSetReadMostly = 1, 
# 1805
cudaMemAdviseUnsetReadMostly, 
# 1806
cudaMemAdviseSetPreferredLocation, 
# 1807
cudaMemAdviseUnsetPreferredLocation, 
# 1808
cudaMemAdviseSetAccessedBy, 
# 1809
cudaMemAdviseUnsetAccessedBy
# 1810
}; 
#endif
# 1815 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1815
enum cudaMemRangeAttribute { 
# 1817
cudaMemRangeAttributeReadMostly = 1, 
# 1818
cudaMemRangeAttributePreferredLocation, 
# 1819
cudaMemRangeAttributeAccessedBy, 
# 1820
cudaMemRangeAttributeLastPrefetchLocation
# 1821
}; 
#endif
# 1826 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1826
enum cudaOutputMode { 
# 1828
cudaKeyValuePair, 
# 1829
cudaCSV
# 1830
}; 
#endif
# 1835 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1835
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1836
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1837
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1838
}; 
#endif
# 1843 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1843
enum cudaGPUDirectRDMAWritesOrdering { 
# 1844
cudaGPUDirectRDMAWritesOrderingNone, 
# 1845
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1846
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1847
}; 
#endif
# 1852 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1852
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1853
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1854
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1855
}; 
#endif
# 1860 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1860
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1861
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1862
}; 
#endif
# 1868 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1868
enum cudaDeviceAttr { 
# 1870
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1871
cudaDevAttrMaxBlockDimX, 
# 1872
cudaDevAttrMaxBlockDimY, 
# 1873
cudaDevAttrMaxBlockDimZ, 
# 1874
cudaDevAttrMaxGridDimX, 
# 1875
cudaDevAttrMaxGridDimY, 
# 1876
cudaDevAttrMaxGridDimZ, 
# 1877
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1878
cudaDevAttrTotalConstantMemory, 
# 1879
cudaDevAttrWarpSize, 
# 1880
cudaDevAttrMaxPitch, 
# 1881
cudaDevAttrMaxRegistersPerBlock, 
# 1882
cudaDevAttrClockRate, 
# 1883
cudaDevAttrTextureAlignment, 
# 1884
cudaDevAttrGpuOverlap, 
# 1885
cudaDevAttrMultiProcessorCount, 
# 1886
cudaDevAttrKernelExecTimeout, 
# 1887
cudaDevAttrIntegrated, 
# 1888
cudaDevAttrCanMapHostMemory, 
# 1889
cudaDevAttrComputeMode, 
# 1890
cudaDevAttrMaxTexture1DWidth, 
# 1891
cudaDevAttrMaxTexture2DWidth, 
# 1892
cudaDevAttrMaxTexture2DHeight, 
# 1893
cudaDevAttrMaxTexture3DWidth, 
# 1894
cudaDevAttrMaxTexture3DHeight, 
# 1895
cudaDevAttrMaxTexture3DDepth, 
# 1896
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1897
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1898
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1899
cudaDevAttrSurfaceAlignment, 
# 1900
cudaDevAttrConcurrentKernels, 
# 1901
cudaDevAttrEccEnabled, 
# 1902
cudaDevAttrPciBusId, 
# 1903
cudaDevAttrPciDeviceId, 
# 1904
cudaDevAttrTccDriver, 
# 1905
cudaDevAttrMemoryClockRate, 
# 1906
cudaDevAttrGlobalMemoryBusWidth, 
# 1907
cudaDevAttrL2CacheSize, 
# 1908
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1909
cudaDevAttrAsyncEngineCount, 
# 1910
cudaDevAttrUnifiedAddressing, 
# 1911
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1912
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1913
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1914
cudaDevAttrMaxTexture2DGatherHeight, 
# 1915
cudaDevAttrMaxTexture3DWidthAlt, 
# 1916
cudaDevAttrMaxTexture3DHeightAlt, 
# 1917
cudaDevAttrMaxTexture3DDepthAlt, 
# 1918
cudaDevAttrPciDomainId, 
# 1919
cudaDevAttrTexturePitchAlignment, 
# 1920
cudaDevAttrMaxTextureCubemapWidth, 
# 1921
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1922
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1923
cudaDevAttrMaxSurface1DWidth, 
# 1924
cudaDevAttrMaxSurface2DWidth, 
# 1925
cudaDevAttrMaxSurface2DHeight, 
# 1926
cudaDevAttrMaxSurface3DWidth, 
# 1927
cudaDevAttrMaxSurface3DHeight, 
# 1928
cudaDevAttrMaxSurface3DDepth, 
# 1929
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1930
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1931
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1932
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1933
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1934
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1935
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1936
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1937
cudaDevAttrMaxTexture1DLinearWidth, 
# 1938
cudaDevAttrMaxTexture2DLinearWidth, 
# 1939
cudaDevAttrMaxTexture2DLinearHeight, 
# 1940
cudaDevAttrMaxTexture2DLinearPitch, 
# 1941
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1942
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1943
cudaDevAttrComputeCapabilityMajor, 
# 1944
cudaDevAttrComputeCapabilityMinor, 
# 1945
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1946
cudaDevAttrStreamPrioritiesSupported, 
# 1947
cudaDevAttrGlobalL1CacheSupported, 
# 1948
cudaDevAttrLocalL1CacheSupported, 
# 1949
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1950
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1951
cudaDevAttrManagedMemory, 
# 1952
cudaDevAttrIsMultiGpuBoard, 
# 1953
cudaDevAttrMultiGpuBoardGroupID, 
# 1954
cudaDevAttrHostNativeAtomicSupported, 
# 1955
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1956
cudaDevAttrPageableMemoryAccess, 
# 1957
cudaDevAttrConcurrentManagedAccess, 
# 1958
cudaDevAttrComputePreemptionSupported, 
# 1959
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1960
cudaDevAttrReserved92, 
# 1961
cudaDevAttrReserved93, 
# 1962
cudaDevAttrReserved94, 
# 1963
cudaDevAttrCooperativeLaunch, 
# 1964
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1965
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1966
cudaDevAttrCanFlushRemoteWrites, 
# 1967
cudaDevAttrHostRegisterSupported, 
# 1968
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1969
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1970
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1971
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1972
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1973
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1974
cudaDevAttrSparseCudaArraySupported, 
# 1975
cudaDevAttrHostRegisterReadOnlySupported, 
# 1976
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 1977
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 1978
cudaDevAttrMemoryPoolsSupported, 
# 1979
cudaDevAttrGPUDirectRDMASupported, 
# 1980
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1981
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1982
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1987
cudaDevAttrDeferredMappingCudaArraySupported = 121, 
# 1989
cudaDevAttrMax
# 1990
}; 
#endif
# 1995 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 1995
enum cudaMemPoolAttr { 
# 2005 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 2012
cudaMemPoolReuseAllowOpportunistic, 
# 2020
cudaMemPoolReuseAllowInternalDependencies, 
# 2031 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 2037
cudaMemPoolAttrReservedMemCurrent, 
# 2044
cudaMemPoolAttrReservedMemHigh, 
# 2050
cudaMemPoolAttrUsedMemCurrent, 
# 2057
cudaMemPoolAttrUsedMemHigh
# 2058
}; 
#endif
# 2063 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2063
enum cudaMemLocationType { 
# 2064
cudaMemLocationTypeInvalid, 
# 2065
cudaMemLocationTypeDevice
# 2066
}; 
#endif
# 2073 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2073
struct cudaMemLocation { 
# 2074
cudaMemLocationType type; 
# 2075
int id; 
# 2076
}; 
#endif
# 2081 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2081
enum cudaMemAccessFlags { 
# 2082
cudaMemAccessFlagsProtNone, 
# 2083
cudaMemAccessFlagsProtRead, 
# 2084
cudaMemAccessFlagsProtReadWrite = 3
# 2085
}; 
#endif
# 2090 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2090
struct cudaMemAccessDesc { 
# 2091
cudaMemLocation location; 
# 2092
cudaMemAccessFlags flags; 
# 2093
}; 
#endif
# 2098 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2098
enum cudaMemAllocationType { 
# 2099
cudaMemAllocationTypeInvalid, 
# 2103
cudaMemAllocationTypePinned, 
# 2104
cudaMemAllocationTypeMax = 2147483647
# 2105
}; 
#endif
# 2110 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2110
enum cudaMemAllocationHandleType { 
# 2111
cudaMemHandleTypeNone, 
# 2112
cudaMemHandleTypePosixFileDescriptor, 
# 2113
cudaMemHandleTypeWin32, 
# 2114
cudaMemHandleTypeWin32Kmt = 4
# 2115
}; 
#endif
# 2120 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2120
struct cudaMemPoolProps { 
# 2121
cudaMemAllocationType allocType; 
# 2122
cudaMemAllocationHandleType handleTypes; 
# 2123
cudaMemLocation location; 
# 2130
void *win32SecurityAttributes; 
# 2131
unsigned char reserved[64]; 
# 2132
}; 
#endif
# 2137 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2137
struct cudaMemPoolPtrExportData { 
# 2138
unsigned char reserved[64]; 
# 2139
}; 
#endif
# 2144 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2144
struct cudaMemAllocNodeParams { 
# 2149
cudaMemPoolProps poolProps; 
# 2150
const cudaMemAccessDesc *accessDescs; 
# 2151
::size_t accessDescCount; 
# 2152
::size_t bytesize; 
# 2153
void *dptr; 
# 2154
}; 
#endif
# 2159 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2159
enum cudaGraphMemAttributeType { 
# 2164
cudaGraphMemAttrUsedMemCurrent, 
# 2171
cudaGraphMemAttrUsedMemHigh, 
# 2178
cudaGraphMemAttrReservedMemCurrent, 
# 2185
cudaGraphMemAttrReservedMemHigh
# 2186
}; 
#endif
# 2192 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2192
enum cudaDeviceP2PAttr { 
# 2193
cudaDevP2PAttrPerformanceRank = 1, 
# 2194
cudaDevP2PAttrAccessSupported, 
# 2195
cudaDevP2PAttrNativeAtomicSupported, 
# 2196
cudaDevP2PAttrCudaArrayAccessSupported
# 2197
}; 
#endif
# 2204 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2204
struct CUuuid_st { 
# 2205
char bytes[16]; 
# 2206
}; 
#endif
# 2207 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2207
CUuuid; 
#endif
# 2209 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2209
cudaUUID_t; 
#endif
# 2214 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2214
struct cudaDeviceProp { 
# 2216
char name[256]; 
# 2217
cudaUUID_t uuid; 
# 2218
char luid[8]; 
# 2219
unsigned luidDeviceNodeMask; 
# 2220
::size_t totalGlobalMem; 
# 2221
::size_t sharedMemPerBlock; 
# 2222
int regsPerBlock; 
# 2223
int warpSize; 
# 2224
::size_t memPitch; 
# 2225
int maxThreadsPerBlock; 
# 2226
int maxThreadsDim[3]; 
# 2227
int maxGridSize[3]; 
# 2228
int clockRate; 
# 2229
::size_t totalConstMem; 
# 2230
int major; 
# 2231
int minor; 
# 2232
::size_t textureAlignment; 
# 2233
::size_t texturePitchAlignment; 
# 2234
int deviceOverlap; 
# 2235
int multiProcessorCount; 
# 2236
int kernelExecTimeoutEnabled; 
# 2237
int integrated; 
# 2238
int canMapHostMemory; 
# 2239
int computeMode; 
# 2240
int maxTexture1D; 
# 2241
int maxTexture1DMipmap; 
# 2242
int maxTexture1DLinear; 
# 2243
int maxTexture2D[2]; 
# 2244
int maxTexture2DMipmap[2]; 
# 2245
int maxTexture2DLinear[3]; 
# 2246
int maxTexture2DGather[2]; 
# 2247
int maxTexture3D[3]; 
# 2248
int maxTexture3DAlt[3]; 
# 2249
int maxTextureCubemap; 
# 2250
int maxTexture1DLayered[2]; 
# 2251
int maxTexture2DLayered[3]; 
# 2252
int maxTextureCubemapLayered[2]; 
# 2253
int maxSurface1D; 
# 2254
int maxSurface2D[2]; 
# 2255
int maxSurface3D[3]; 
# 2256
int maxSurface1DLayered[2]; 
# 2257
int maxSurface2DLayered[3]; 
# 2258
int maxSurfaceCubemap; 
# 2259
int maxSurfaceCubemapLayered[2]; 
# 2260
::size_t surfaceAlignment; 
# 2261
int concurrentKernels; 
# 2262
int ECCEnabled; 
# 2263
int pciBusID; 
# 2264
int pciDeviceID; 
# 2265
int pciDomainID; 
# 2266
int tccDriver; 
# 2267
int asyncEngineCount; 
# 2268
int unifiedAddressing; 
# 2269
int memoryClockRate; 
# 2270
int memoryBusWidth; 
# 2271
int l2CacheSize; 
# 2272
int persistingL2CacheMaxSize; 
# 2273
int maxThreadsPerMultiProcessor; 
# 2274
int streamPrioritiesSupported; 
# 2275
int globalL1CacheSupported; 
# 2276
int localL1CacheSupported; 
# 2277
::size_t sharedMemPerMultiprocessor; 
# 2278
int regsPerMultiprocessor; 
# 2279
int managedMemory; 
# 2280
int isMultiGpuBoard; 
# 2281
int multiGpuBoardGroupID; 
# 2282
int hostNativeAtomicSupported; 
# 2283
int singleToDoublePrecisionPerfRatio; 
# 2284
int pageableMemoryAccess; 
# 2285
int concurrentManagedAccess; 
# 2286
int computePreemptionSupported; 
# 2287
int canUseHostPointerForRegisteredMem; 
# 2288
int cooperativeLaunch; 
# 2289
int cooperativeMultiDeviceLaunch; 
# 2290
::size_t sharedMemPerBlockOptin; 
# 2291
int pageableMemoryAccessUsesHostPageTables; 
# 2292
int directManagedMemAccessFromHost; 
# 2293
int maxBlocksPerMultiProcessor; 
# 2294
int accessPolicyMaxWindowSize; 
# 2295
::size_t reservedSharedMemPerBlock; 
# 2296
}; 
#endif
# 2397 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef 
# 2394
struct cudaIpcEventHandle_st { 
# 2396
char reserved[64]; 
# 2397
} cudaIpcEventHandle_t; 
#endif
# 2405 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef 
# 2402
struct cudaIpcMemHandle_st { 
# 2404
char reserved[64]; 
# 2405
} cudaIpcMemHandle_t; 
#endif
# 2410 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2410
enum cudaExternalMemoryHandleType { 
# 2414
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2418
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2422
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2426
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2430
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2434
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2438
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2442
cudaExternalMemoryHandleTypeNvSciBuf
# 2443
}; 
#endif
# 2485 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2485
struct cudaExternalMemoryHandleDesc { 
# 2489
cudaExternalMemoryHandleType type; 
# 2490
union { 
# 2496
int fd; 
# 2512 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
struct { 
# 2516
void *handle; 
# 2521
const void *name; 
# 2522
} win32; 
# 2527
const void *nvSciBufObject; 
# 2528
} handle; 
# 2532
unsigned long long size; 
# 2536
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2537
}; 
#endif
# 2542 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2542
struct cudaExternalMemoryBufferDesc { 
# 2546
unsigned long long offset; 
# 2550
unsigned long long size; 
# 2554
unsigned flags; 
# 2555
}; 
#endif
# 2560 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2560
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2565
unsigned long long offset; 
# 2569
cudaChannelFormatDesc formatDesc; 
# 2573
cudaExtent extent; 
# 2578
unsigned flags; 
# 2582
unsigned numLevels; 
# 2583
}; 
#endif
# 2588 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2588
enum cudaExternalSemaphoreHandleType { 
# 2592
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2596
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2600
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2604
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2608
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2612
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2616
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2620
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2624
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2628
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2629
}; 
#endif
# 2634 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2634
struct cudaExternalSemaphoreHandleDesc { 
# 2638
cudaExternalSemaphoreHandleType type; 
# 2639
union { 
# 2646
int fd; 
# 2662 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
struct { 
# 2666
void *handle; 
# 2671
const void *name; 
# 2672
} win32; 
# 2676
const void *nvSciSyncObj; 
# 2677
} handle; 
# 2681
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2682
}; 
#endif
# 2687 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2687
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2688
struct { 
# 2692
struct { 
# 2696
unsigned long long value; 
# 2697
} fence; 
# 2698
union { 
# 2703
void *fence; 
# 2704
unsigned long long reserved; 
# 2705
} nvSciSync; 
# 2709
struct { 
# 2713
unsigned long long key; 
# 2714
} keyedMutex; 
# 2715
} params; 
# 2726 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
unsigned flags; 
# 2727
}; 
#endif
# 2732 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2732
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2733
struct { 
# 2737
struct { 
# 2741
unsigned long long value; 
# 2742
} fence; 
# 2743
union { 
# 2748
void *fence; 
# 2749
unsigned long long reserved; 
# 2750
} nvSciSync; 
# 2754
struct { 
# 2758
unsigned long long key; 
# 2762
unsigned timeoutMs; 
# 2763
} keyedMutex; 
# 2764
} params; 
# 2775 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
unsigned flags; 
# 2776
}; 
#endif
# 2781 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2781
struct cudaExternalSemaphoreSignalParams { 
# 2782
struct { 
# 2786
struct { 
# 2790
unsigned long long value; 
# 2791
} fence; 
# 2792
union { 
# 2797
void *fence; 
# 2798
unsigned long long reserved; 
# 2799
} nvSciSync; 
# 2803
struct { 
# 2807
unsigned long long key; 
# 2808
} keyedMutex; 
# 2809
unsigned reserved[12]; 
# 2810
} params; 
# 2821 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
unsigned flags; 
# 2822
unsigned reserved[16]; 
# 2823
}; 
#endif
# 2828 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2828
struct cudaExternalSemaphoreWaitParams { 
# 2829
struct { 
# 2833
struct { 
# 2837
unsigned long long value; 
# 2838
} fence; 
# 2839
union { 
# 2844
void *fence; 
# 2845
unsigned long long reserved; 
# 2846
} nvSciSync; 
# 2850
struct { 
# 2854
unsigned long long key; 
# 2858
unsigned timeoutMs; 
# 2859
} keyedMutex; 
# 2860
unsigned reserved[10]; 
# 2861
} params; 
# 2872 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
unsigned flags; 
# 2873
unsigned reserved[16]; 
# 2874
}; 
#endif
# 2886 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef cudaError 
# 2886
cudaError_t; 
#endif
# 2891 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2891
cudaStream_t; 
#endif
# 2896 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2896
cudaEvent_t; 
#endif
# 2901 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2901
cudaGraphicsResource_t; 
#endif
# 2906 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 2906
cudaOutputMode_t; 
#endif
# 2911 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2911
cudaExternalMemory_t; 
#endif
# 2916 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2916
cudaExternalSemaphore_t; 
#endif
# 2921 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2921
cudaGraph_t; 
#endif
# 2926 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2926
cudaGraphNode_t; 
#endif
# 2931 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2931
cudaUserObject_t; 
#endif
# 2936 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2936
cudaFunction_t; 
#endif
# 2941 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2941
cudaMemPool_t; 
#endif
# 2946 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2946
enum cudaCGScope { 
# 2947
cudaCGScopeInvalid, 
# 2948
cudaCGScopeGrid, 
# 2949
cudaCGScopeMultiGrid
# 2950
}; 
#endif
# 2955 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2955
struct cudaLaunchParams { 
# 2957
void *func; 
# 2958
dim3 gridDim; 
# 2959
dim3 blockDim; 
# 2960
void **args; 
# 2961
::size_t sharedMem; 
# 2962
cudaStream_t stream; 
# 2963
}; 
#endif
# 2968 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2968
struct cudaKernelNodeParams { 
# 2969
void *func; 
# 2970
dim3 gridDim; 
# 2971
dim3 blockDim; 
# 2972
unsigned sharedMemBytes; 
# 2973
void **kernelParams; 
# 2974
void **extra; 
# 2975
}; 
#endif
# 2980 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2980
struct cudaExternalSemaphoreSignalNodeParams { 
# 2981
cudaExternalSemaphore_t *extSemArray; 
# 2982
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2983
unsigned numExtSems; 
# 2984
}; 
#endif
# 2989 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2989
struct cudaExternalSemaphoreWaitNodeParams { 
# 2990
cudaExternalSemaphore_t *extSemArray; 
# 2991
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2992
unsigned numExtSems; 
# 2993
}; 
#endif
# 2998 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 2998
enum cudaGraphNodeType { 
# 2999
cudaGraphNodeTypeKernel, 
# 3000
cudaGraphNodeTypeMemcpy, 
# 3001
cudaGraphNodeTypeMemset, 
# 3002
cudaGraphNodeTypeHost, 
# 3003
cudaGraphNodeTypeGraph, 
# 3004
cudaGraphNodeTypeEmpty, 
# 3005
cudaGraphNodeTypeWaitEvent, 
# 3006
cudaGraphNodeTypeEventRecord, 
# 3007
cudaGraphNodeTypeExtSemaphoreSignal, 
# 3008
cudaGraphNodeTypeExtSemaphoreWait, 
# 3009
cudaGraphNodeTypeMemAlloc, 
# 3010
cudaGraphNodeTypeMemFree, 
# 3011
cudaGraphNodeTypeCount
# 3012
}; 
#endif
# 3017 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 3022
#if 0
# 3022
enum cudaGraphExecUpdateResult { 
# 3023
cudaGraphExecUpdateSuccess, 
# 3024
cudaGraphExecUpdateError, 
# 3025
cudaGraphExecUpdateErrorTopologyChanged, 
# 3026
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 3027
cudaGraphExecUpdateErrorFunctionChanged, 
# 3028
cudaGraphExecUpdateErrorParametersChanged, 
# 3029
cudaGraphExecUpdateErrorNotSupported, 
# 3030
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 3031
cudaGraphExecUpdateErrorAttributesChanged
# 3032
}; 
#endif
# 3038 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 3038
enum cudaGetDriverEntryPointFlags { 
# 3039
cudaEnableDefault, 
# 3040
cudaEnableLegacyStream, 
# 3041
cudaEnablePerThreadDefaultStream
# 3042
}; 
#endif
# 3047 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 3047
enum cudaGraphDebugDotFlags { 
# 3048
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3049
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3050
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3051
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3052
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3053
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3054
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3055
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3056
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3057
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 3058
}; 
#endif
# 3063 "/home/poweruser/junda.feng/anaconda3/include/driver_types.h"
#if 0
# 3063
enum cudaGraphInstantiateFlags { 
# 3064
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
# 3065
}; 
#endif
# 84 "/home/poweruser/junda.feng/anaconda3/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/home/poweruser/junda.feng/anaconda3/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/home/poweruser/junda.feng/anaconda3/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/home/poweruser/junda.feng/anaconda3/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 158
int disableTrilinearOptimization; 
# 159
int __cudaReserved[14]; 
# 160
}; 
#endif
# 165 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
# 165
struct cudaTextureDesc { 
# 170
cudaTextureAddressMode addressMode[3]; 
# 174
cudaTextureFilterMode filterMode; 
# 178
cudaTextureReadMode readMode; 
# 182
int sRGB; 
# 186
float borderColor[4]; 
# 190
int normalizedCoords; 
# 194
unsigned maxAnisotropy; 
# 198
cudaTextureFilterMode mipmapFilterMode; 
# 202
float mipmapLevelBias; 
# 206
float minMipmapLevelClamp; 
# 210
float maxMipmapLevelClamp; 
# 214
int disableTrilinearOptimization; 
# 218
int seamlessCubemap; 
# 219
}; 
#endif
# 224 "/home/poweruser/junda.feng/anaconda3/include/texture_types.h"
#if 0
typedef unsigned long long 
# 224
cudaTextureObject_t; 
#endif
# 84 "/home/poweruser/junda.feng/anaconda3/include/library_types.h"
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_16BF = 14, 
# 59
CUDA_C_16BF, 
# 60
CUDA_R_32F = 0, 
# 61
CUDA_C_32F = 4, 
# 62
CUDA_R_64F = 1, 
# 63
CUDA_C_64F = 5, 
# 64
CUDA_R_4I = 16, 
# 65
CUDA_C_4I, 
# 66
CUDA_R_4U, 
# 67
CUDA_C_4U, 
# 68
CUDA_R_8I = 3, 
# 69
CUDA_C_8I = 7, 
# 70
CUDA_R_8U, 
# 71
CUDA_C_8U, 
# 72
CUDA_R_16I = 20, 
# 73
CUDA_C_16I, 
# 74
CUDA_R_16U, 
# 75
CUDA_C_16U, 
# 76
CUDA_R_32I = 10, 
# 77
CUDA_C_32I, 
# 78
CUDA_R_32U, 
# 79
CUDA_C_32U, 
# 80
CUDA_R_64I = 24, 
# 81
CUDA_C_64I, 
# 82
CUDA_R_64U, 
# 83
CUDA_C_64U
# 84
} cudaDataType; 
# 92
typedef 
# 87
enum libraryPropertyType_t { 
# 89
MAJOR_VERSION, 
# 90
MINOR_VERSION, 
# 91
PATCH_LEVEL
# 92
} libraryPropertyType; 
# 131 "/home/poweruser/junda.feng/anaconda3/include/cuda_device_runtime_api.h"
extern "C" {
# 133
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 134
extern cudaError_t cudaDeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 135
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 136
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 137
extern cudaError_t cudaDeviceSynchronize(); 
# 138
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 139
extern cudaError_t cudaGetLastError(); 
# 140
extern cudaError_t cudaPeekAtLastError(); 
# 141
extern const char *cudaGetErrorString(cudaError_t error); 
# 142
extern const char *cudaGetErrorName(cudaError_t error); 
# 143
extern cudaError_t cudaGetDeviceCount(int * count); 
# 144
extern cudaError_t cudaGetDevice(int * device); 
# 145
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 146
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 147
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 148
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 149
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 150
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 151
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 152
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 153
__attribute__((unused)) extern cudaError_t cudaEventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 154
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 155
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 156
extern cudaError_t cudaFree(void * devPtr); 
# 157
extern cudaError_t cudaMalloc(void ** devPtr, ::size_t size); 
# 158
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 159
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 160
extern cudaError_t cudaMemcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 161
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 162
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 163
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 164
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 165
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 166
extern cudaError_t cudaMemset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 167
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 168
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 169
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 170
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBuffer(::size_t alignment, ::size_t size); 
# 219 "/home/poweruser/junda.feng/anaconda3/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 220
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 221
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 239 "/home/poweruser/junda.feng/anaconda3/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 240
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 243
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize); 
# 244
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 246
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 247
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 248
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 249
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 250
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 251
}
# 253
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, ::size_t size); 
# 254
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 255
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize); 
# 256
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 266 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern "C" {
# 306 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 328 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 415 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, ::size_t value); 
# 450 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 473 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(::size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 507 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 544 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 588 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 619 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 663 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 690 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 720 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 768 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 809 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 852 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 916 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 952 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 984 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1028 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1054 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1103 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, ::size_t value); 
# 1136 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(::size_t * pValue, cudaLimit limit); 
# 1172 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1219 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1282 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1330 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1346 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1362 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1390 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1668 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1872 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1890 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1914 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1934 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 1982 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2022 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2043 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2084 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2105 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2136 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2201 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2245 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2285 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2317 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2363 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2390 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2415 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2430 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2450 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2471 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue * value_out); 
# 2495 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue * value); 
# 2529 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2560 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2568
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2635 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2659 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2684 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2768 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, ::size_t length = 0, unsigned flags = 4); 
# 2807 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2858 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 2886 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 2924 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 2956 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned long long * pId); 
# 3011 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, ::size_t * numDependencies_out = 0); 
# 3044 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, ::size_t numDependencies, unsigned flags = 0); 
# 3081 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3118 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3158 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3205 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3237 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3267 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3296 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3339 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3519 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3574 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3634 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3658 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3811 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3878 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3954 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3977 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4044 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, ::size_t sharedMem, cudaStream_t stream); 
# 4101 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, ::size_t sharedMem, cudaStream_t stream); 
# 4202 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4249 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4304 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4337 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4374 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4400 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4424 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4492 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4549 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize); 
# 4578 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(::size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4623 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize, unsigned flags); 
# 4744 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, ::size_t size, unsigned flags = 1); 
# 4777 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, ::size_t size); 
# 4810 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, ::size_t size); 
# 4853 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, ::size_t * pitch, ::size_t width, ::size_t height); 
# 4907 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, ::size_t width, ::size_t height = 0, unsigned flags = 0); 
# 4936 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 4959 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 4982 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5005 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5071 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, ::size_t size, unsigned flags); 
# 5164 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, ::size_t size, unsigned flags); 
# 5187 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5232 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5254 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5293 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5440 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5587 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5620 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5725 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 5756 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 5874 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 5900 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 5934 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(::size_t * free, ::size_t * total); 
# 5960 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 5989 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6013 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6037 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6066 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6096 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6141 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 6176 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count); 
# 6225 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6275 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6325 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6372 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t width, ::size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6415 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6458 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6515 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6550 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count, cudaStream_t stream = 0); 
# 6613 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6671 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6728 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6779 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6830 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6859 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, ::size_t count); 
# 6893 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height); 
# 6939 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 6975 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream = 0); 
# 7016 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream = 0); 
# 7069 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7097 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7124 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(::size_t * size, const void * symbol); 
# 7194 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, ::size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7310 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, ::size_t count, cudaMemoryAdvise advice, int device); 
# 7369 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, ::size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, ::size_t count); 
# 7408 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, ::size_t * dataSizes, cudaMemRangeAttribute * attributes, ::size_t numAttributes, const void * devPtr, ::size_t count); 
# 7468 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 7510 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind); 
# 7553 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7604 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7654 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7723 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, ::size_t size, cudaStream_t hStream); 
# 7749 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 7774 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, ::size_t minBytesToKeep); 
# 7818 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7866 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7881 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, ::size_t count); 
# 7894 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 7914 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 7936 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 7972 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, ::size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 7997 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8024 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8047 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8076 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8228 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8269 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8311 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8333 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8397 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8432 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8471 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8506 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8538 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, ::size_t * size, cudaGraphicsResource_t resource); 
# 8576 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8605 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8676 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture(::size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, ::size_t size = ((2147483647) * 2U) + 1U); 
# 8735 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture2D(::size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, ::size_t width, ::size_t height, ::size_t pitch); 
# 8773 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8813 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 8839 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 8868 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureAlignmentOffset(::size_t * offset, const textureReference * texref); 
# 8898 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 8943 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8968 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 9003 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 9033 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9257 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9277 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9297 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9317 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9338 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9383 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9403 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9422 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9456 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9481 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9528 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9625 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9658 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9683 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9703 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9726 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue * value_out); 
# 9750 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue * value); 
# 9800 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9859 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 9928 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 9996 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 10028 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 10054 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 10093 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 10139 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 10185 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 10232 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10255 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10278 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10319 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10342 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10365 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10405 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaGraph_t childGraph); 
# 10432 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10469 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies); 
# 10512 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaEvent_t event); 
# 10539 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10566 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10612 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaEvent_t event); 
# 10639 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10666 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10715 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10748 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10775 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10824 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10857 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10884 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10961 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10988 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 11048 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dptr); 
# 11072 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 11100 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11137 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11171 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11199 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11227 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11258 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11289 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, ::size_t * numNodes); 
# 11320 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, ::size_t * pNumRootNodes); 
# 11354 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, ::size_t * numEdges); 
# 11385 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, ::size_t * pNumDependencies); 
# 11417 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, ::size_t * pNumDependentNodes); 
# 11448 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, ::size_t numDependencies); 
# 11479 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, ::size_t numDependencies); 
# 11509 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11547 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, ::size_t bufferSize); 
# 11590 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags); 
# 11634 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11684 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11739 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 11802 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 11863 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 11917 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 11956 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12002 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12046 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12090 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12137 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12184 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12224 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 12258 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 12336 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t * hErrorNode_out, cudaGraphExecUpdateResult * updateResult_out); 
# 12361 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12392 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12415 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12436 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12455 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12491 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12515 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12543 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12571 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12596 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12662 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags); 
# 12667
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12843 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12985 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime_api.h"
}
# 124 "/home/poweruser/junda.feng/anaconda3/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 125
{ 
# 126
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 148
} 
# 150
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 151
{ 
# 152
int e = (((int)sizeof(unsigned short)) * 8); 
# 154
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 155
} 
# 157
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 158
{ 
# 159
int e = (((int)sizeof(char)) * 8); 
# 164
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 169
{ 
# 170
int e = (((int)sizeof(signed char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 176
{ 
# 177
int e = (((int)sizeof(unsigned char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 183
{ 
# 184
int e = (((int)sizeof(signed char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 190
{ 
# 191
int e = (((int)sizeof(unsigned char)) * 8); 
# 193
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 197
{ 
# 198
int e = (((int)sizeof(signed char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 204
{ 
# 205
int e = (((int)sizeof(unsigned char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 211
{ 
# 212
int e = (((int)sizeof(signed char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 218
{ 
# 219
int e = (((int)sizeof(unsigned char)) * 8); 
# 221
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 225
{ 
# 226
int e = (((int)sizeof(short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 232
{ 
# 233
int e = (((int)sizeof(unsigned short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 239
{ 
# 240
int e = (((int)sizeof(short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 246
{ 
# 247
int e = (((int)sizeof(unsigned short)) * 8); 
# 249
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 253
{ 
# 254
int e = (((int)sizeof(short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 260
{ 
# 261
int e = (((int)sizeof(unsigned short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 267
{ 
# 268
int e = (((int)sizeof(short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 274
{ 
# 275
int e = (((int)sizeof(unsigned short)) * 8); 
# 277
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 281
{ 
# 282
int e = (((int)sizeof(int)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 288
{ 
# 289
int e = (((int)sizeof(unsigned)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 295
{ 
# 296
int e = (((int)sizeof(int)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 302
{ 
# 303
int e = (((int)sizeof(unsigned)) * 8); 
# 305
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 309
{ 
# 310
int e = (((int)sizeof(int)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 316
{ 
# 317
int e = (((int)sizeof(unsigned)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 323
{ 
# 324
int e = (((int)sizeof(int)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 327
} 
# 329
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 330
{ 
# 331
int e = (((int)sizeof(unsigned)) * 8); 
# 333
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 334
} 
# 396 "/home/poweruser/junda.feng/anaconda3/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 415
} 
# 417
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 418
{ 
# 419
int e = (((int)sizeof(float)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 422
} 
# 424
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 425
{ 
# 426
int e = (((int)sizeof(char)) * 8); 
# 428
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 429
} 
# 431
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 432
{ 
# 433
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 434
} 
# 437
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 438
{ 
# 439
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 440
} 
# 442
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 443
{ 
# 444
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 445
} 
# 447
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 448
{ 
# 449
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 450
} 
# 453
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 454
{ 
# 455
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 456
} 
# 458
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 459
{ 
# 460
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 461
} 
# 463
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 464
{ 
# 465
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 466
} 
# 469
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 470
{ 
# 471
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 472
} 
# 474
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 475
{ 
# 476
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 477
} 
# 479
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 480
{ 
# 481
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 482
} 
# 485
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 486
{ 
# 487
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 488
} 
# 490
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 491
{ 
# 492
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 493
} 
# 495
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 496
{ 
# 497
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 498
} 
# 501
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 502
{ 
# 503
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 504
} 
# 507
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 508
{ 
# 509
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 510
} 
# 513
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 514
{ 
# 515
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 516
} 
# 519
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 520
{ 
# 521
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 522
} 
# 525
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 526
{ 
# 527
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 528
} 
# 531
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 532
{ 
# 533
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 534
} 
# 537
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 538
{ 
# 539
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 540
} 
# 543
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 544
{ 
# 545
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 546
} 
# 549
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 550
{ 
# 551
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 552
} 
# 555
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 556
{ 
# 557
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 558
} 
# 561
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 562
{ 
# 563
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 564
} 
# 567
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 568
{ 
# 569
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 570
} 
# 573
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 574
{ 
# 575
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 576
} 
# 579
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 580
{ 
# 581
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 582
} 
# 585
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 586
{ 
# 587
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 588
} 
# 79 "/home/poweruser/junda.feng/anaconda3/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, ::size_t p, ::size_t xsz, ::size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/home/poweruser/junda.feng/anaconda3/include/driver_functions.h"
static inline cudaPos make_cudaPos(::size_t x, ::size_t y, ::size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/home/poweruser/junda.feng/anaconda3/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(::size_t w, ::size_t h, ::size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/home/poweruser/junda.feng/anaconda3/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/home/poweruser/junda.feng/anaconda3/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 42 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 43
 __attribute((__nonnull__(1, 2))); 
# 46
extern void *memmove(void * __dest, const void * __src, ::size_t __n) throw()
# 47
 __attribute((__nonnull__(1, 2))); 
# 53
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, ::size_t __n) throw()
# 55
 __attribute((__nonnull__(1, 2))); 
# 60
extern void *memset(void * __s, int __c, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 63
extern int memcmp(const void * __s1, const void * __s2, ::size_t __n) throw()
# 64
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 68
extern "C++" {
# 70
extern void *memchr(void * __s, int __c, ::size_t __n) throw() __asm__("memchr")
# 71
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 72
extern const void *memchr(const void * __s, int __c, ::size_t __n) throw() __asm__("memchr")
# 73
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 88 "/usr/include/string.h" 3
}
# 98 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 99
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 100
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 101
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 109
extern "C++" void *memrchr(void * __s, int __c, ::size_t __n) throw() __asm__("memrchr")
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 111
extern "C++" const void *memrchr(const void * __s, int __c, ::size_t __n) throw() __asm__("memrchr")
# 112
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 121 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 122
 __attribute((__nonnull__(1, 2))); 
# 124
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 126
 __attribute((__nonnull__(1, 2))); 
# 129
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 130
 __attribute((__nonnull__(1, 2))); 
# 132
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 133
 __attribute((__nonnull__(1, 2))); 
# 136
extern int strcmp(const char * __s1, const char * __s2) throw()
# 137
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 139
extern int strncmp(const char * __s1, const char * __s2, ::size_t __n) throw()
# 140
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 143
extern int strcoll(const char * __s1, const char * __s2) throw()
# 144
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 146
extern ::size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 148
 __attribute((__nonnull__(2))); 
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
}; 
# 42
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 155 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) throw()
# 156
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 159
extern ::size_t strxfrm_l(char * __dest, const char * __src, ::size_t __n, locale_t __l) throw()
# 160
 __attribute((__nonnull__(2, 4))); 
# 166
extern char *strdup(const char * __s) throw()
# 167
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 174
extern char *strndup(const char * __string, ::size_t __n) throw()
# 175
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 203 "/usr/include/string.h" 3
extern "C++" {
# 205
extern char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 206
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 207
extern const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 208
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 223 "/usr/include/string.h" 3
}
# 230
extern "C++" {
# 232
extern char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 233
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 234
extern const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 235
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 250 "/usr/include/string.h" 3
}
# 260 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 261
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 262
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 263
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 272 "/usr/include/string.h" 3
extern ::size_t strcspn(const char * __s, const char * __reject) throw()
# 273
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 276
extern ::size_t strspn(const char * __s, const char * __accept) throw()
# 277
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 280
extern "C++" {
# 282
extern char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 283
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 284
extern const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 285
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 300 "/usr/include/string.h" 3
}
# 307
extern "C++" {
# 309
extern char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 310
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 311
extern const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 312
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 327 "/usr/include/string.h" 3
}
# 335
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 336
 __attribute((__nonnull__(2))); 
# 340
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 343
 __attribute((__nonnull__(2, 3))); 
# 345
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 347
 __attribute((__nonnull__(2, 3))); 
# 353
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 354
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 355
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 357
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 368 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, ::size_t __haystacklen, const void * __needle, ::size_t __needlelen) throw()
# 370
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 374
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 376
 __attribute((__nonnull__(1, 2))); 
# 377
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 379
 __attribute((__nonnull__(1, 2))); 
# 384
extern ::size_t strlen(const char * __s) throw()
# 385
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 390
extern ::size_t strnlen(const char * __string, ::size_t __maxlen) throw()
# 391
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 396
extern char *strerror(int __errnum) throw(); 
# 420 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, ::size_t __buflen) throw()
# 421
 __attribute((__nonnull__(2))); 
# 427
extern char *strerror_l(int __errnum, locale_t __l) throw(); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, ::size_t __n) throw()
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, ::size_t __n) throw()
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) throw() __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) throw() __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) throw() __attribute((const)); 
# 110
extern int ffsl(long __l) throw() __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) throw()
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, ::size_t __n) throw()
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) throw()
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, ::size_t __n, locale_t __loc) throw()
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 435 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 439
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 441
 __attribute((__nonnull__(1, 2))); 
# 446
extern char *strsignal(int __sig) throw(); 
# 449
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 450
 __attribute((__nonnull__(1, 2))); 
# 451
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 452
 __attribute((__nonnull__(1, 2))); 
# 456
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 458
 __attribute((__nonnull__(1, 2))); 
# 459
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 461
 __attribute((__nonnull__(1, 2))); 
# 466
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 467
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 470
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 473
extern void *memfrob(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 481
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 482
 __attribute((__nonnull__(1))); 
# 483
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 484
 __attribute((__nonnull__(1))); 
# 498 "/usr/include/string.h" 3
}
# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 31
typedef unsigned short __u_short; 
# 32
typedef unsigned __u_int; 
# 33
typedef unsigned long __u_long; 
# 36
typedef signed char __int8_t; 
# 37
typedef unsigned char __uint8_t; 
# 38
typedef signed short __int16_t; 
# 39
typedef unsigned short __uint16_t; 
# 40
typedef signed int __int32_t; 
# 41
typedef unsigned __uint32_t; 
# 43
typedef signed long __int64_t; 
# 44
typedef unsigned long __uint64_t; 
# 52
typedef long __quad_t; 
# 53
typedef unsigned long __u_quad_t; 
# 61
typedef long __intmax_t; 
# 62
typedef unsigned long __uintmax_t; 
# 133 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 134
typedef unsigned __uid_t; 
# 135
typedef unsigned __gid_t; 
# 136
typedef unsigned long __ino_t; 
# 137
typedef unsigned long __ino64_t; 
# 138
typedef unsigned __mode_t; 
# 139
typedef unsigned long __nlink_t; 
# 140
typedef long __off_t; 
# 141
typedef long __off64_t; 
# 142
typedef int __pid_t; 
# 143
typedef struct { int __val[2]; } __fsid_t; 
# 144
typedef long __clock_t; 
# 145
typedef unsigned long __rlim_t; 
# 146
typedef unsigned long __rlim64_t; 
# 147
typedef unsigned __id_t; 
# 148
typedef long __time_t; 
# 149
typedef unsigned __useconds_t; 
# 150
typedef long __suseconds_t; 
# 152
typedef int __daddr_t; 
# 153
typedef int __key_t; 
# 156
typedef int __clockid_t; 
# 159
typedef void *__timer_t; 
# 162
typedef long __blksize_t; 
# 167
typedef long __blkcnt_t; 
# 168
typedef long __blkcnt64_t; 
# 171
typedef unsigned long __fsblkcnt_t; 
# 172
typedef unsigned long __fsblkcnt64_t; 
# 175
typedef unsigned long __fsfilcnt_t; 
# 176
typedef unsigned long __fsfilcnt64_t; 
# 179
typedef long __fsword_t; 
# 181
typedef long __ssize_t; 
# 184
typedef long __syscall_slong_t; 
# 186
typedef unsigned long __syscall_ulong_t; 
# 190
typedef __off64_t __loff_t; 
# 191
typedef char *__caddr_t; 
# 194
typedef long __intptr_t; 
# 197
typedef unsigned __socklen_t; 
# 202
typedef int __sig_atomic_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 10
__time_t tv_sec; 
# 11
__suseconds_t tv_usec; 
# 12
}; 
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 28
unsigned modes; 
# 29
__syscall_slong_t offset; 
# 30
__syscall_slong_t freq; 
# 31
__syscall_slong_t maxerror; 
# 32
__syscall_slong_t esterror; 
# 33
int status; 
# 34
__syscall_slong_t constant; 
# 35
__syscall_slong_t precision; 
# 36
__syscall_slong_t tolerance; 
# 37
timeval time; 
# 38
__syscall_slong_t tick; 
# 39
__syscall_slong_t ppsfreq; 
# 40
__syscall_slong_t jitter; 
# 41
int shift; 
# 42
__syscall_slong_t stabil; 
# 43
__syscall_slong_t jitcnt; 
# 44
__syscall_slong_t calcnt; 
# 45
__syscall_slong_t errcnt; 
# 46
__syscall_slong_t stbcnt; 
# 48
int tai; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; int:32; 
# 53
int:32; int:32; int:32; 
# 54
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 80
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 9 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 11
__time_t tv_sec; 
# 12
__syscall_slong_t tv_nsec; 
# 13
}; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 54
typedef __pid_t pid_t; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() throw(); 
# 75
extern time_t time(time_t * __timer) throw(); 
# 78
extern double difftime(time_t __time1, time_t __time0) throw()
# 79
 __attribute((const)); 
# 82
extern time_t mktime(tm * __tp) throw(); 
# 88
extern ::size_t strftime(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 95
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 104
extern ::size_t strftime_l(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 111
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) throw(); 
# 119
extern tm *gmtime(const time_t * __timer) throw(); 
# 123
extern tm *localtime(const time_t * __timer) throw(); 
# 128
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 133
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 139
extern char *asctime(const tm * __tp) throw(); 
# 142
extern char *ctime(const time_t * __timer) throw(); 
# 149
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 153
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 159
extern char *__tzname[2]; 
# 160
extern int __daylight; 
# 161
extern long __timezone; 
# 166
extern char *tzname[2]; 
# 170
extern void tzset() throw(); 
# 174
extern int daylight; 
# 175
extern long timezone; 
# 181
extern int stime(const time_t * __when) throw(); 
# 196 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw(); 
# 199
extern time_t timelocal(tm * __tp) throw(); 
# 202
extern int dysize(int __year) throw() __attribute((const)); 
# 211 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 216
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 219
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 222
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 230
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 235
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 240
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 245
extern int timer_delete(timer_t __timerid) throw(); 
# 248
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 253
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 257
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 263
extern int timespec_get(timespec * __ts, int __base) throw()
# 264
 __attribute((__nonnull__(1))); 
# 280 "/usr/include/time.h" 3
extern int getdate_err; 
# 289 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 303 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 307
}
# 88 "/home/poweruser/junda.feng/anaconda3/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() throw(); 
# 96 "/home/poweruser/junda.feng/anaconda3/include/crt/common_functions.h"
extern void *memset(void *, int, ::size_t) throw(); 
# 97 "/home/poweruser/junda.feng/anaconda3/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, ::size_t) throw(); 
# 99 "/home/poweruser/junda.feng/anaconda3/include/crt/common_functions.h"
}
# 115 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern "C" {
# 213 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int abs(int a) throw(); 
# 221 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long labs(long a) throw(); 
# 229 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long long llabs(long long a) throw(); 
# 279 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fabs(double x) throw(); 
# 320 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fabsf(float x) throw(); 
# 330 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 337
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 344
extern inline long long llmin(const long long a, const long long b); 
# 351
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 372 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fminf(float x, float y) throw(); 
# 392 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fmin(double x, double y) throw(); 
# 405 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 413
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 420
extern inline long long llmax(const long long a, const long long b); 
# 427
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 448 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fmaxf(float x, float y) throw(); 
# 468 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fmax(double, double) throw(); 
# 512 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double sin(double x) throw(); 
# 545 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double cos(double x) throw(); 
# 564 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 580 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 625 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double tan(double x) throw(); 
# 694 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double sqrt(double x) throw(); 
# 766 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 836 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 892 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double log2(double x) throw(); 
# 917 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double exp2(double x) throw(); 
# 942 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float exp2f(float x) throw(); 
# 969 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double exp10(double x) throw(); 
# 992 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float exp10f(float x) throw(); 
# 1038 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double expm1(double x) throw(); 
# 1083 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float expm1f(float x) throw(); 
# 1139 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float log2f(float x) throw(); 
# 1193 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double log10(double x) throw(); 
# 1264 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double log(double x) throw(); 
# 1367 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double log1p(double x) throw(); 
# 1473 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float log1pf(float x) throw(); 
# 1537 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double floor(double x) throw(); 
# 1576 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double exp(double x) throw(); 
# 1607 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double cosh(double x) throw(); 
# 1657 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double sinh(double x) throw(); 
# 1687 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double tanh(double x) throw(); 
# 1722 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double acosh(double x) throw(); 
# 1760 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float acoshf(float x) throw(); 
# 1813 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double asinh(double x) throw(); 
# 1865 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float asinhf(float x) throw(); 
# 1919 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double atanh(double x) throw(); 
# 1973 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float atanhf(float x) throw(); 
# 2032 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double ldexp(double x, int exp) throw(); 
# 2088 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) throw(); 
# 2140 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double logb(double x) throw(); 
# 2195 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float logbf(float x) throw(); 
# 2226 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int ilogb(double x) throw(); 
# 2257 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int ilogbf(float x) throw(); 
# 2333 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double scalbn(double x, int n) throw(); 
# 2409 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float scalbnf(float x, int n) throw(); 
# 2485 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double scalbln(double x, long n) throw(); 
# 2561 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float scalblnf(float x, long n) throw(); 
# 2639 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) throw(); 
# 2714 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) throw(); 
# 2728 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double round(double x) throw(); 
# 2745 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float roundf(float x) throw(); 
# 2763 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long lround(double x) throw(); 
# 2781 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long lroundf(float x) throw(); 
# 2799 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long long llround(double x) throw(); 
# 2817 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long long llroundf(float x) throw(); 
# 2869 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float rintf(float x) throw(); 
# 2886 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long lrint(double x) throw(); 
# 2903 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long lrintf(float x) throw(); 
# 2920 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long long llrint(double x) throw(); 
# 2937 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern long long llrintf(float x) throw(); 
# 2990 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double nearbyint(double x) throw(); 
# 3043 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float nearbyintf(float x) throw(); 
# 3105 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double ceil(double x) throw(); 
# 3117 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double trunc(double x) throw(); 
# 3132 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float truncf(float x) throw(); 
# 3158 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fdim(double x, double y) throw(); 
# 3184 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fdimf(float x, float y) throw(); 
# 3220 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double atan2(double y, double x) throw(); 
# 3251 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double atan(double x) throw(); 
# 3274 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double acos(double x) throw(); 
# 3306 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double asin(double x) throw(); 
# 3352 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double hypot(double x, double y) throw(); 
# 3450 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float hypotf(float x, float y) throw(); 
# 4182 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double cbrt(double x) throw(); 
# 4268 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float cbrtf(float x) throw(); 
# 4323 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 4373 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 4433 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double sinpi(double x); 
# 4493 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float sinpif(float x); 
# 4545 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double cospi(double x); 
# 4597 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float cospif(float x); 
# 4627 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 4657 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 4990 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double pow(double x, double y) throw(); 
# 5046 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double modf(double x, double * iptr) throw(); 
# 5105 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fmod(double x, double y) throw(); 
# 5191 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double remainder(double x, double y) throw(); 
# 5281 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float remainderf(float x, float y) throw(); 
# 5335 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) throw(); 
# 5389 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) throw(); 
# 5430 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double j0(double x) throw(); 
# 5472 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float j0f(float x) throw(); 
# 5541 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double j1(double x) throw(); 
# 5610 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float j1f(float x) throw(); 
# 5653 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double jn(int n, double x) throw(); 
# 5696 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float jnf(int n, float x) throw(); 
# 5748 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double y0(double x) throw(); 
# 5800 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float y0f(float x) throw(); 
# 5852 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double y1(double x) throw(); 
# 5904 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float y1f(float x) throw(); 
# 5957 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double yn(int n, double x) throw(); 
# 6010 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float ynf(int n, float x) throw(); 
# 6199 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double erf(double x) throw(); 
# 6281 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float erff(float x) throw(); 
# 6345 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double erfinv(double y); 
# 6402 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float erfinvf(float y); 
# 6441 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double erfc(double x) throw(); 
# 6479 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float erfcf(float x) throw(); 
# 6606 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double lgamma(double x) throw(); 
# 6669 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double erfcinv(double y); 
# 6725 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float erfcinvf(float y); 
# 6783 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double normcdfinv(double y); 
# 6841 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float normcdfinvf(float y); 
# 6884 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double normcdf(double y); 
# 6927 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float normcdff(float y); 
# 7002 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double erfcx(double x); 
# 7077 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 7210 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float lgammaf(float x) throw(); 
# 7319 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double tgamma(double x) throw(); 
# 7428 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float tgammaf(float x) throw(); 
# 7441 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double copysign(double x, double y) throw(); 
# 7454 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float copysignf(float x, float y) throw(); 
# 7473 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double nextafter(double x, double y) throw(); 
# 7492 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float nextafterf(float x, float y) throw(); 
# 7508 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double nan(const char * tagp) throw(); 
# 7524 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float nanf(const char * tagp) throw(); 
# 7531 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isinff(float) throw(); 
# 7532 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isnanf(float) throw(); 
# 7542 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __finite(double) throw(); 
# 7543 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __finitef(float) throw(); 
# 7544 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __signbit(double) throw(); 
# 7545 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isnan(double) throw(); 
# 7546 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isinf(double) throw(); 
# 7549 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __signbitf(float) throw(); 
# 7708 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern double fma(double x, double y, double z) throw(); 
# 7866 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) throw(); 
# 7877 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __signbitl(long double) throw(); 
# 7883 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __finitel(long double) throw(); 
# 7884 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isinfl(long double) throw(); 
# 7885 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern int __isnanl(long double) throw(); 
# 7935 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float acosf(float x) throw(); 
# 7975 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float asinf(float x) throw(); 
# 8015 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float atanf(float x) throw(); 
# 8048 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float atan2f(float y, float x) throw(); 
# 8072 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float cosf(float x) throw(); 
# 8114 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float sinf(float x) throw(); 
# 8156 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float tanf(float x) throw(); 
# 8187 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float coshf(float x) throw(); 
# 8237 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float sinhf(float x) throw(); 
# 8267 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float tanhf(float x) throw(); 
# 8319 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float logf(float x) throw(); 
# 8369 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float expf(float x) throw(); 
# 8421 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float log10f(float x) throw(); 
# 8476 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float modff(float x, float * iptr) throw(); 
# 8806 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float powf(float x, float y) throw(); 
# 8875 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float sqrtf(float x) throw(); 
# 8934 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float ceilf(float x) throw(); 
# 8995 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float floorf(float x) throw(); 
# 9053 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern float fmodf(float x, float y) throw(); 
# 9068 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
}
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std { 
# 231
typedef unsigned long size_t; 
# 232
typedef long ptrdiff_t; 
# 235
typedef __decltype((nullptr)) nullptr_t; 
# 237
}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std { 
# 253
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 254
}
# 255
namespace __gnu_cxx { 
# 257
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 258
}
# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 176
template<> struct __is_integer< char16_t>  { 
# 178
enum { __value = 1}; 
# 179
typedef __true_type __type; 
# 180
}; 
# 183
template<> struct __is_integer< char32_t>  { 
# 185
enum { __value = 1}; 
# 186
typedef __true_type __type; 
# 187
}; 
# 191
template<> struct __is_integer< short>  { 
# 193
enum { __value = 1}; 
# 194
typedef __true_type __type; 
# 195
}; 
# 198
template<> struct __is_integer< unsigned short>  { 
# 200
enum { __value = 1}; 
# 201
typedef __true_type __type; 
# 202
}; 
# 205
template<> struct __is_integer< int>  { 
# 207
enum { __value = 1}; 
# 208
typedef __true_type __type; 
# 209
}; 
# 212
template<> struct __is_integer< unsigned>  { 
# 214
enum { __value = 1}; 
# 215
typedef __true_type __type; 
# 216
}; 
# 219
template<> struct __is_integer< long>  { 
# 221
enum { __value = 1}; 
# 222
typedef __true_type __type; 
# 223
}; 
# 226
template<> struct __is_integer< unsigned long>  { 
# 228
enum { __value = 1}; 
# 229
typedef __true_type __type; 
# 230
}; 
# 233
template<> struct __is_integer< long long>  { 
# 235
enum { __value = 1}; 
# 236
typedef __true_type __type; 
# 237
}; 
# 240
template<> struct __is_integer< unsigned long long>  { 
# 242
enum { __value = 1}; 
# 243
typedef __true_type __type; 
# 244
}; 
# 278 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 279
struct __is_floating { 
# 281
enum { __value}; 
# 282
typedef __false_type __type; 
# 283
}; 
# 287
template<> struct __is_floating< float>  { 
# 289
enum { __value = 1}; 
# 290
typedef __true_type __type; 
# 291
}; 
# 294
template<> struct __is_floating< double>  { 
# 296
enum { __value = 1}; 
# 297
typedef __true_type __type; 
# 298
}; 
# 301
template<> struct __is_floating< long double>  { 
# 303
enum { __value = 1}; 
# 304
typedef __true_type __type; 
# 305
}; 
# 310
template< class _Tp> 
# 311
struct __is_pointer { 
# 313
enum { __value}; 
# 314
typedef __false_type __type; 
# 315
}; 
# 317
template< class _Tp> 
# 318
struct __is_pointer< _Tp *>  { 
# 320
enum { __value = 1}; 
# 321
typedef __true_type __type; 
# 322
}; 
# 327
template< class _Tp> 
# 328
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 330
}; 
# 335
template< class _Tp> 
# 336
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 338
}; 
# 343
template< class _Tp> 
# 344
struct __is_char { 
# 346
enum { __value}; 
# 347
typedef __false_type __type; 
# 348
}; 
# 351
template<> struct __is_char< char>  { 
# 353
enum { __value = 1}; 
# 354
typedef __true_type __type; 
# 355
}; 
# 359
template<> struct __is_char< wchar_t>  { 
# 361
enum { __value = 1}; 
# 362
typedef __true_type __type; 
# 363
}; 
# 366
template< class _Tp> 
# 367
struct __is_byte { 
# 369
enum { __value}; 
# 370
typedef __false_type __type; 
# 371
}; 
# 374
template<> struct __is_byte< char>  { 
# 376
enum { __value = 1}; 
# 377
typedef __true_type __type; 
# 378
}; 
# 381
template<> struct __is_byte< signed char>  { 
# 383
enum { __value = 1}; 
# 384
typedef __true_type __type; 
# 385
}; 
# 388
template<> struct __is_byte< unsigned char>  { 
# 390
enum { __value = 1}; 
# 391
typedef __true_type __type; 
# 392
}; 
# 397
template< class _Tp> 
# 398
struct __is_move_iterator { 
# 400
enum { __value}; 
# 401
typedef __false_type __type; 
# 402
}; 
# 406
template< class _Iterator> inline _Iterator 
# 408
__miter_base(_Iterator __it) 
# 409
{ return __it; } 
# 412
}
# 413
}
# 37 "/usr/include/c++/7/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 167
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 168
struct __promote { 
# 169
typedef double __type; }; 
# 174
template< class _Tp> 
# 175
struct __promote< _Tp, false>  { 
# 176
}; 
# 179
template<> struct __promote< long double>  { 
# 180
typedef long double __type; }; 
# 183
template<> struct __promote< double>  { 
# 184
typedef double __type; }; 
# 187
template<> struct __promote< float>  { 
# 188
typedef float __type; }; 
# 190
template< class _Tp, class _Up, class 
# 191
_Tp2 = typename __promote< _Tp> ::__type, class 
# 192
_Up2 = typename __promote< _Up> ::__type> 
# 193
struct __promote_2 { 
# 195
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 196
}; 
# 198
template< class _Tp, class _Up, class _Vp, class 
# 199
_Tp2 = typename __promote< _Tp> ::__type, class 
# 200
_Up2 = typename __promote< _Up> ::__type, class 
# 201
_Vp2 = typename __promote< _Vp> ::__type> 
# 202
struct __promote_3 { 
# 204
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 205
}; 
# 207
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 208
_Tp2 = typename __promote< _Tp> ::__type, class 
# 209
_Up2 = typename __promote< _Up> ::__type, class 
# 210
_Vp2 = typename __promote< _Vp> ::__type, class 
# 211
_Wp2 = typename __promote< _Wp> ::__type> 
# 212
struct __promote_4 { 
# 214
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 215
}; 
# 218
}
# 219
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 149 "/usr/include/math.h" 3
typedef float float_t; 
# 150
typedef double double_t; 
# 238 "/usr/include/math.h" 3
enum { 
# 239
FP_INT_UPWARD, 
# 242
FP_INT_DOWNWARD, 
# 245
FP_INT_TOWARDZERO, 
# 248
FP_INT_TONEARESTFROMZERO, 
# 251
FP_INT_TONEAREST
# 254
}; 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbit(double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinf(double __value) throw() __attribute((const)); 
# 33
extern int __finite(double __value) throw() __attribute((const)); 
# 36
extern int __isnan(double __value) throw() __attribute((const)); 
# 39
extern int __iseqsig(double __x, double __y) throw(); 
# 42
extern int __issignaling(double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 55
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 57
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 59
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 62
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 64
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 66
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 71
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 73
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 75
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 85
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 87
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 89
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 95
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 98
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 101
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 104
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 107
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 110
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 119
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 122
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 125
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 130
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 133
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 140
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 143
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 147
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 152
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 159
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 162
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 165
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 168
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) throw() __attribute((const)); 
# 185
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 189
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 196
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 201
extern double nan(const char * __tagb) throw() __attribute((const)); extern double __nan(const char * __tagb) throw() __attribute((const)); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 218
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 219
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 220
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 221
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 222
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 228
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 229
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 230
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 235
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 241
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 249
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 256
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 259
extern double nextafter(double __x, double __y) throw(); extern double __nextafter(double __x, double __y) throw(); 
# 261
extern double nexttoward(double __x, long double __y) throw(); extern double __nexttoward(double __x, long double __y) throw(); 
# 266
extern double nextdown(double __x) throw(); extern double __nextdown(double __x) throw(); 
# 268
extern double nextup(double __x) throw(); extern double __nextup(double __x) throw(); 
# 272
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 276
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 280
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 285
extern long llogb(double __x) throw(); extern long __llogb(double __x) throw(); 
# 290
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 294
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 298
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 302
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 307
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 314
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 316
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 320
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 322
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 326
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 329
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 332
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 335
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 340
extern double roundeven(double __x) throw() __attribute((const)); extern double __roundeven(double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfp(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) throw(); 
# 365
extern double fmaxmag(double __x, double __y) throw() __attribute((const)); extern double __fmaxmag(double __x, double __y) throw() __attribute((const)); 
# 368
extern double fminmag(double __x, double __y) throw() __attribute((const)); extern double __fminmag(double __x, double __y) throw() __attribute((const)); 
# 371
extern int totalorder(double __x, double __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermag(double __x, double __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalize(double * __cx, const double * __x) throw(); 
# 382
extern double getpayload(const double * __x) throw(); extern double __getpayload(const double * __x) throw(); 
# 385
extern int setpayload(double * __x, double __payload) throw(); 
# 388
extern int setpayloadsig(double * __x, double __payload) throw(); 
# 396
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitf(float __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinff(float __value) throw() __attribute((const)); 
# 33
extern int __finitef(float __value) throw() __attribute((const)); 
# 36
extern int __isnanf(float __value) throw() __attribute((const)); 
# 39
extern int __iseqsigf(float __x, float __y) throw(); 
# 42
extern int __issignalingf(float __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 55
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 57
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 59
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 62
extern float cosf(float __x) throw(); 
# 64
extern float sinf(float __x) throw(); 
# 66
extern float tanf(float __x) throw(); 
# 71
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 73
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 75
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 85
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 87
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 89
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 95
extern float expf(float __x) throw(); 
# 98
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 101
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 104
extern float logf(float __x) throw(); 
# 107
extern float log10f(float __x) throw(); 
# 110
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) throw(); 
# 119
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 122
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 125
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 130
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 133
extern float log2f(float __x) throw(); 
# 140
extern float powf(float __x, float __y) throw(); 
# 143
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 147
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 152
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 159
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 162
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 165
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) throw() __attribute((const)); 
# 182
extern int finitef(float __value) throw() __attribute((const)); 
# 185
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 189
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 196
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 201
extern float nanf(const char * __tagb) throw() __attribute((const)); extern float __nanf(const char * __tagb) throw() __attribute((const)); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) throw() __attribute((const)); 
# 217
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 218
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 219
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 220
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 221
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 222
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 228
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 229
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 230
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 235
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 241
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 249
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 256
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 259
extern float nextafterf(float __x, float __y) throw(); extern float __nextafterf(float __x, float __y) throw(); 
# 261
extern float nexttowardf(float __x, long double __y) throw(); extern float __nexttowardf(float __x, long double __y) throw(); 
# 266
extern float nextdownf(float __x) throw(); extern float __nextdownf(float __x) throw(); 
# 268
extern float nextupf(float __x) throw(); extern float __nextupf(float __x) throw(); 
# 272
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 276
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 280
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 285
extern long llogbf(float __x) throw(); extern long __llogbf(float __x) throw(); 
# 290
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 294
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 298
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 302
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 307
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 314
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 316
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 320
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 322
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 326
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 329
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 332
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 335
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 340
extern float roundevenf(float __x) throw() __attribute((const)); extern float __roundevenf(float __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) throw(); 
# 365
extern float fmaxmagf(float __x, float __y) throw() __attribute((const)); extern float __fmaxmagf(float __x, float __y) throw() __attribute((const)); 
# 368
extern float fminmagf(float __x, float __y) throw() __attribute((const)); extern float __fminmagf(float __x, float __y) throw() __attribute((const)); 
# 371
extern int totalorderf(float __x, float __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagf(float __x, float __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizef(float * __cx, const float * __x) throw(); 
# 382
extern float getpayloadf(const float * __x) throw(); extern float __getpayloadf(const float * __x) throw(); 
# 385
extern int setpayloadf(float * __x, float __payload) throw(); 
# 388
extern int setpayloadsigf(float * __x, float __payload) throw(); 
# 396
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitl(long double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 33
extern int __finitel(long double __value) throw() __attribute((const)); 
# 36
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 39
extern int __iseqsigl(long double __x, long double __y) throw(); 
# 42
extern int __issignalingl(long double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 55
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 57
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 59
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 62
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 64
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 66
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 71
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 73
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 75
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 85
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 87
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 89
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 95
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 98
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 101
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 104
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 107
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 110
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 119
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 122
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 125
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 130
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 133
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 140
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 143
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 147
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 152
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 159
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 162
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 165
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) throw() __attribute((const)); 
# 182
extern int finitel(long double __value) throw() __attribute((const)); 
# 185
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 189
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 196
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 201
extern long double nanl(const char * __tagb) throw() __attribute((const)); extern long double __nanl(const char * __tagb) throw() __attribute((const)); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) throw() __attribute((const)); 
# 217
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 218
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 219
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 220
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 221
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 222
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 228
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 229
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 230
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 235
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 241
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 249
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 256
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 259
extern long double nextafterl(long double __x, long double __y) throw(); extern long double __nextafterl(long double __x, long double __y) throw(); 
# 261
extern long double nexttowardl(long double __x, long double __y) throw(); extern long double __nexttowardl(long double __x, long double __y) throw(); 
# 266
extern long double nextdownl(long double __x) throw(); extern long double __nextdownl(long double __x) throw(); 
# 268
extern long double nextupl(long double __x) throw(); extern long double __nextupl(long double __x) throw(); 
# 272
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 276
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 280
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 285
extern long llogbl(long double __x) throw(); extern long __llogbl(long double __x) throw(); 
# 290
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 294
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 298
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 302
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 307
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 314
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 316
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 320
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 322
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 326
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 329
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 332
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 335
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 340
extern long double roundevenl(long double __x) throw() __attribute((const)); extern long double __roundevenl(long double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 365
extern long double fmaxmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) throw() __attribute((const)); 
# 368
extern long double fminmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminmagl(long double __x, long double __y) throw() __attribute((const)); 
# 371
extern int totalorderl(long double __x, long double __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagl(long double __x, long double __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizel(long double * __cx, const long double * __x) throw(); 
# 382
extern long double getpayloadl(const long double * __x) throw(); extern long double __getpayloadl(const long double * __x) throw(); 
# 385
extern int setpayloadl(long double * __x, long double __payload) throw(); 
# 388
extern int setpayloadsigl(long double * __x, long double __payload) throw(); 
# 396
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) throw(); extern _Float32 __acosf32(_Float32 __x) throw(); 
# 55
extern _Float32 asinf32(_Float32 __x) throw(); extern _Float32 __asinf32(_Float32 __x) throw(); 
# 57
extern _Float32 atanf32(_Float32 __x) throw(); extern _Float32 __atanf32(_Float32 __x) throw(); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) throw(); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) throw(); 
# 62
extern _Float32 cosf32(_Float32 __x) throw(); extern _Float32 __cosf32(_Float32 __x) throw(); 
# 64
extern _Float32 sinf32(_Float32 __x) throw(); extern _Float32 __sinf32(_Float32 __x) throw(); 
# 66
extern _Float32 tanf32(_Float32 __x) throw(); extern _Float32 __tanf32(_Float32 __x) throw(); 
# 71
extern _Float32 coshf32(_Float32 __x) throw(); extern _Float32 __coshf32(_Float32 __x) throw(); 
# 73
extern _Float32 sinhf32(_Float32 __x) throw(); extern _Float32 __sinhf32(_Float32 __x) throw(); 
# 75
extern _Float32 tanhf32(_Float32 __x) throw(); extern _Float32 __tanhf32(_Float32 __x) throw(); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); 
# 85
extern _Float32 acoshf32(_Float32 __x) throw(); extern _Float32 __acoshf32(_Float32 __x) throw(); 
# 87
extern _Float32 asinhf32(_Float32 __x) throw(); extern _Float32 __asinhf32(_Float32 __x) throw(); 
# 89
extern _Float32 atanhf32(_Float32 __x) throw(); extern _Float32 __atanhf32(_Float32 __x) throw(); 
# 95
extern _Float32 expf32(_Float32 __x) throw(); extern _Float32 __expf32(_Float32 __x) throw(); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) throw(); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) throw(); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) throw(); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) throw(); 
# 104
extern _Float32 logf32(_Float32 __x) throw(); extern _Float32 __logf32(_Float32 __x) throw(); 
# 107
extern _Float32 log10f32(_Float32 __x) throw(); extern _Float32 __log10f32(_Float32 __x) throw(); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) throw(); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) throw(); extern _Float32 __exp10f32(_Float32 __x) throw(); 
# 119
extern _Float32 expm1f32(_Float32 __x) throw(); extern _Float32 __expm1f32(_Float32 __x) throw(); 
# 122
extern _Float32 log1pf32(_Float32 __x) throw(); extern _Float32 __log1pf32(_Float32 __x) throw(); 
# 125
extern _Float32 logbf32(_Float32 __x) throw(); extern _Float32 __logbf32(_Float32 __x) throw(); 
# 130
extern _Float32 exp2f32(_Float32 __x) throw(); extern _Float32 __exp2f32(_Float32 __x) throw(); 
# 133
extern _Float32 log2f32(_Float32 __x) throw(); extern _Float32 __log2f32(_Float32 __x) throw(); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __powf32(_Float32 __x, _Float32 __y) throw(); 
# 143
extern _Float32 sqrtf32(_Float32 __x) throw(); extern _Float32 __sqrtf32(_Float32 __x) throw(); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) throw(); 
# 152
extern _Float32 cbrtf32(_Float32 __x) throw(); extern _Float32 __cbrtf32(_Float32 __x) throw(); 
# 159
extern _Float32 ceilf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) throw() __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) throw() __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __floorf32(_Float32 __x) throw() __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 201
extern _Float32 nanf32(const char * __tagb) throw() __attribute((const)); extern _Float32 __nanf32(const char * __tagb) throw() __attribute((const)); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) throw(); extern _Float32 __j0f32(_Float32) throw(); 
# 218
extern _Float32 j1f32(_Float32) throw(); extern _Float32 __j1f32(_Float32) throw(); 
# 219
extern _Float32 jnf32(int, _Float32) throw(); extern _Float32 __jnf32(int, _Float32) throw(); 
# 220
extern _Float32 y0f32(_Float32) throw(); extern _Float32 __y0f32(_Float32) throw(); 
# 221
extern _Float32 y1f32(_Float32) throw(); extern _Float32 __y1f32(_Float32) throw(); 
# 222
extern _Float32 ynf32(int, _Float32) throw(); extern _Float32 __ynf32(int, _Float32) throw(); 
# 228
extern _Float32 erff32(_Float32) throw(); extern _Float32 __erff32(_Float32) throw(); 
# 229
extern _Float32 erfcf32(_Float32) throw(); extern _Float32 __erfcf32(_Float32) throw(); 
# 230
extern _Float32 lgammaf32(_Float32) throw(); extern _Float32 __lgammaf32(_Float32) throw(); 
# 235
extern _Float32 tgammaf32(_Float32) throw(); extern _Float32 __tgammaf32(_Float32) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) throw(); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) throw(); 
# 256
extern _Float32 rintf32(_Float32 __x) throw(); extern _Float32 __rintf32(_Float32 __x) throw(); 
# 259
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) throw(); 
# 266
extern _Float32 nextdownf32(_Float32 __x) throw(); extern _Float32 __nextdownf32(_Float32 __x) throw(); 
# 268
extern _Float32 nextupf32(_Float32 __x) throw(); extern _Float32 __nextupf32(_Float32 __x) throw(); 
# 272
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) throw(); 
# 276
extern _Float32 scalbnf32(_Float32 __x, int __n) throw(); extern _Float32 __scalbnf32(_Float32 __x, int __n) throw(); 
# 280
extern int ilogbf32(_Float32 __x) throw(); extern int __ilogbf32(_Float32 __x) throw(); 
# 285
extern long llogbf32(_Float32 __x) throw(); extern long __llogbf32(_Float32 __x) throw(); 
# 290
extern _Float32 scalblnf32(_Float32 __x, long __n) throw(); extern _Float32 __scalblnf32(_Float32 __x, long __n) throw(); 
# 294
extern _Float32 nearbyintf32(_Float32 __x) throw(); extern _Float32 __nearbyintf32(_Float32 __x) throw(); 
# 298
extern _Float32 roundf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundf32(_Float32 __x) throw() __attribute((const)); 
# 302
extern _Float32 truncf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __truncf32(_Float32 __x) throw() __attribute((const)); 
# 307
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); 
# 314
extern long lrintf32(_Float32 __x) throw(); extern long __lrintf32(_Float32 __x) throw(); 
# 316
__extension__ extern long long llrintf32(_Float32 __x) throw(); extern long long __llrintf32(_Float32 __x) throw(); 
# 320
extern long lroundf32(_Float32 __x) throw(); extern long __lroundf32(_Float32 __x) throw(); 
# 322
__extension__ extern long long llroundf32(_Float32 __x) throw(); extern long long __llroundf32(_Float32 __x) throw(); 
# 326
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) throw(); 
# 329
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 332
extern _Float32 fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 335
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); 
# 340
extern _Float32 roundevenf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 368
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 371
extern int totalorderf32(_Float32 __x, _Float32 __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagf32(_Float32 __x, _Float32 __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) throw(); 
# 382
extern _Float32 getpayloadf32(const _Float32 * __x) throw(); extern _Float32 __getpayloadf32(const _Float32 * __x) throw(); 
# 385
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) throw(); 
# 388
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) throw(); extern _Float64 __acosf64(_Float64 __x) throw(); 
# 55
extern _Float64 asinf64(_Float64 __x) throw(); extern _Float64 __asinf64(_Float64 __x) throw(); 
# 57
extern _Float64 atanf64(_Float64 __x) throw(); extern _Float64 __atanf64(_Float64 __x) throw(); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) throw(); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) throw(); 
# 62
extern _Float64 cosf64(_Float64 __x) throw(); extern _Float64 __cosf64(_Float64 __x) throw(); 
# 64
extern _Float64 sinf64(_Float64 __x) throw(); extern _Float64 __sinf64(_Float64 __x) throw(); 
# 66
extern _Float64 tanf64(_Float64 __x) throw(); extern _Float64 __tanf64(_Float64 __x) throw(); 
# 71
extern _Float64 coshf64(_Float64 __x) throw(); extern _Float64 __coshf64(_Float64 __x) throw(); 
# 73
extern _Float64 sinhf64(_Float64 __x) throw(); extern _Float64 __sinhf64(_Float64 __x) throw(); 
# 75
extern _Float64 tanhf64(_Float64 __x) throw(); extern _Float64 __tanhf64(_Float64 __x) throw(); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); 
# 85
extern _Float64 acoshf64(_Float64 __x) throw(); extern _Float64 __acoshf64(_Float64 __x) throw(); 
# 87
extern _Float64 asinhf64(_Float64 __x) throw(); extern _Float64 __asinhf64(_Float64 __x) throw(); 
# 89
extern _Float64 atanhf64(_Float64 __x) throw(); extern _Float64 __atanhf64(_Float64 __x) throw(); 
# 95
extern _Float64 expf64(_Float64 __x) throw(); extern _Float64 __expf64(_Float64 __x) throw(); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) throw(); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) throw(); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) throw(); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) throw(); 
# 104
extern _Float64 logf64(_Float64 __x) throw(); extern _Float64 __logf64(_Float64 __x) throw(); 
# 107
extern _Float64 log10f64(_Float64 __x) throw(); extern _Float64 __log10f64(_Float64 __x) throw(); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) throw(); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) throw(); extern _Float64 __exp10f64(_Float64 __x) throw(); 
# 119
extern _Float64 expm1f64(_Float64 __x) throw(); extern _Float64 __expm1f64(_Float64 __x) throw(); 
# 122
extern _Float64 log1pf64(_Float64 __x) throw(); extern _Float64 __log1pf64(_Float64 __x) throw(); 
# 125
extern _Float64 logbf64(_Float64 __x) throw(); extern _Float64 __logbf64(_Float64 __x) throw(); 
# 130
extern _Float64 exp2f64(_Float64 __x) throw(); extern _Float64 __exp2f64(_Float64 __x) throw(); 
# 133
extern _Float64 log2f64(_Float64 __x) throw(); extern _Float64 __log2f64(_Float64 __x) throw(); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __powf64(_Float64 __x, _Float64 __y) throw(); 
# 143
extern _Float64 sqrtf64(_Float64 __x) throw(); extern _Float64 __sqrtf64(_Float64 __x) throw(); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) throw(); 
# 152
extern _Float64 cbrtf64(_Float64 __x) throw(); extern _Float64 __cbrtf64(_Float64 __x) throw(); 
# 159
extern _Float64 ceilf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) throw() __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) throw() __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __floorf64(_Float64 __x) throw() __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 201
extern _Float64 nanf64(const char * __tagb) throw() __attribute((const)); extern _Float64 __nanf64(const char * __tagb) throw() __attribute((const)); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) throw(); extern _Float64 __j0f64(_Float64) throw(); 
# 218
extern _Float64 j1f64(_Float64) throw(); extern _Float64 __j1f64(_Float64) throw(); 
# 219
extern _Float64 jnf64(int, _Float64) throw(); extern _Float64 __jnf64(int, _Float64) throw(); 
# 220
extern _Float64 y0f64(_Float64) throw(); extern _Float64 __y0f64(_Float64) throw(); 
# 221
extern _Float64 y1f64(_Float64) throw(); extern _Float64 __y1f64(_Float64) throw(); 
# 222
extern _Float64 ynf64(int, _Float64) throw(); extern _Float64 __ynf64(int, _Float64) throw(); 
# 228
extern _Float64 erff64(_Float64) throw(); extern _Float64 __erff64(_Float64) throw(); 
# 229
extern _Float64 erfcf64(_Float64) throw(); extern _Float64 __erfcf64(_Float64) throw(); 
# 230
extern _Float64 lgammaf64(_Float64) throw(); extern _Float64 __lgammaf64(_Float64) throw(); 
# 235
extern _Float64 tgammaf64(_Float64) throw(); extern _Float64 __tgammaf64(_Float64) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) throw(); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) throw(); 
# 256
extern _Float64 rintf64(_Float64 __x) throw(); extern _Float64 __rintf64(_Float64 __x) throw(); 
# 259
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) throw(); 
# 266
extern _Float64 nextdownf64(_Float64 __x) throw(); extern _Float64 __nextdownf64(_Float64 __x) throw(); 
# 268
extern _Float64 nextupf64(_Float64 __x) throw(); extern _Float64 __nextupf64(_Float64 __x) throw(); 
# 272
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) throw(); 
# 276
extern _Float64 scalbnf64(_Float64 __x, int __n) throw(); extern _Float64 __scalbnf64(_Float64 __x, int __n) throw(); 
# 280
extern int ilogbf64(_Float64 __x) throw(); extern int __ilogbf64(_Float64 __x) throw(); 
# 285
extern long llogbf64(_Float64 __x) throw(); extern long __llogbf64(_Float64 __x) throw(); 
# 290
extern _Float64 scalblnf64(_Float64 __x, long __n) throw(); extern _Float64 __scalblnf64(_Float64 __x, long __n) throw(); 
# 294
extern _Float64 nearbyintf64(_Float64 __x) throw(); extern _Float64 __nearbyintf64(_Float64 __x) throw(); 
# 298
extern _Float64 roundf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundf64(_Float64 __x) throw() __attribute((const)); 
# 302
extern _Float64 truncf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __truncf64(_Float64 __x) throw() __attribute((const)); 
# 307
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); 
# 314
extern long lrintf64(_Float64 __x) throw(); extern long __lrintf64(_Float64 __x) throw(); 
# 316
__extension__ extern long long llrintf64(_Float64 __x) throw(); extern long long __llrintf64(_Float64 __x) throw(); 
# 320
extern long lroundf64(_Float64 __x) throw(); extern long __lroundf64(_Float64 __x) throw(); 
# 322
__extension__ extern long long llroundf64(_Float64 __x) throw(); extern long long __llroundf64(_Float64 __x) throw(); 
# 326
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) throw(); 
# 329
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 332
extern _Float64 fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 335
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); 
# 340
extern _Float64 roundevenf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 368
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 371
extern int totalorderf64(_Float64 __x, _Float64 __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagf64(_Float64 __x, _Float64 __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) throw(); 
# 382
extern _Float64 getpayloadf64(const _Float64 * __x) throw(); extern _Float64 __getpayloadf64(const _Float64 * __x) throw(); 
# 385
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) throw(); 
# 388
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) throw(); extern _Float32x __acosf32x(_Float32x __x) throw(); 
# 55
extern _Float32x asinf32x(_Float32x __x) throw(); extern _Float32x __asinf32x(_Float32x __x) throw(); 
# 57
extern _Float32x atanf32x(_Float32x __x) throw(); extern _Float32x __atanf32x(_Float32x __x) throw(); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) throw(); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) throw(); 
# 62
extern _Float32x cosf32x(_Float32x __x) throw(); extern _Float32x __cosf32x(_Float32x __x) throw(); 
# 64
extern _Float32x sinf32x(_Float32x __x) throw(); extern _Float32x __sinf32x(_Float32x __x) throw(); 
# 66
extern _Float32x tanf32x(_Float32x __x) throw(); extern _Float32x __tanf32x(_Float32x __x) throw(); 
# 71
extern _Float32x coshf32x(_Float32x __x) throw(); extern _Float32x __coshf32x(_Float32x __x) throw(); 
# 73
extern _Float32x sinhf32x(_Float32x __x) throw(); extern _Float32x __sinhf32x(_Float32x __x) throw(); 
# 75
extern _Float32x tanhf32x(_Float32x __x) throw(); extern _Float32x __tanhf32x(_Float32x __x) throw(); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); 
# 85
extern _Float32x acoshf32x(_Float32x __x) throw(); extern _Float32x __acoshf32x(_Float32x __x) throw(); 
# 87
extern _Float32x asinhf32x(_Float32x __x) throw(); extern _Float32x __asinhf32x(_Float32x __x) throw(); 
# 89
extern _Float32x atanhf32x(_Float32x __x) throw(); extern _Float32x __atanhf32x(_Float32x __x) throw(); 
# 95
extern _Float32x expf32x(_Float32x __x) throw(); extern _Float32x __expf32x(_Float32x __x) throw(); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) throw(); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) throw(); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) throw(); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) throw(); 
# 104
extern _Float32x logf32x(_Float32x __x) throw(); extern _Float32x __logf32x(_Float32x __x) throw(); 
# 107
extern _Float32x log10f32x(_Float32x __x) throw(); extern _Float32x __log10f32x(_Float32x __x) throw(); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) throw(); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) throw(); extern _Float32x __exp10f32x(_Float32x __x) throw(); 
# 119
extern _Float32x expm1f32x(_Float32x __x) throw(); extern _Float32x __expm1f32x(_Float32x __x) throw(); 
# 122
extern _Float32x log1pf32x(_Float32x __x) throw(); extern _Float32x __log1pf32x(_Float32x __x) throw(); 
# 125
extern _Float32x logbf32x(_Float32x __x) throw(); extern _Float32x __logbf32x(_Float32x __x) throw(); 
# 130
extern _Float32x exp2f32x(_Float32x __x) throw(); extern _Float32x __exp2f32x(_Float32x __x) throw(); 
# 133
extern _Float32x log2f32x(_Float32x __x) throw(); extern _Float32x __log2f32x(_Float32x __x) throw(); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) throw(); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) throw(); extern _Float32x __sqrtf32x(_Float32x __x) throw(); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) throw(); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) throw(); extern _Float32x __cbrtf32x(_Float32x __x) throw(); 
# 159
extern _Float32x ceilf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) throw() __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) throw() __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) throw() __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 201
extern _Float32x nanf32x(const char * __tagb) throw() __attribute((const)); extern _Float32x __nanf32x(const char * __tagb) throw() __attribute((const)); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) throw(); extern _Float32x __j0f32x(_Float32x) throw(); 
# 218
extern _Float32x j1f32x(_Float32x) throw(); extern _Float32x __j1f32x(_Float32x) throw(); 
# 219
extern _Float32x jnf32x(int, _Float32x) throw(); extern _Float32x __jnf32x(int, _Float32x) throw(); 
# 220
extern _Float32x y0f32x(_Float32x) throw(); extern _Float32x __y0f32x(_Float32x) throw(); 
# 221
extern _Float32x y1f32x(_Float32x) throw(); extern _Float32x __y1f32x(_Float32x) throw(); 
# 222
extern _Float32x ynf32x(int, _Float32x) throw(); extern _Float32x __ynf32x(int, _Float32x) throw(); 
# 228
extern _Float32x erff32x(_Float32x) throw(); extern _Float32x __erff32x(_Float32x) throw(); 
# 229
extern _Float32x erfcf32x(_Float32x) throw(); extern _Float32x __erfcf32x(_Float32x) throw(); 
# 230
extern _Float32x lgammaf32x(_Float32x) throw(); extern _Float32x __lgammaf32x(_Float32x) throw(); 
# 235
extern _Float32x tgammaf32x(_Float32x) throw(); extern _Float32x __tgammaf32x(_Float32x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) throw(); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) throw(); 
# 256
extern _Float32x rintf32x(_Float32x __x) throw(); extern _Float32x __rintf32x(_Float32x __x) throw(); 
# 259
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) throw(); 
# 266
extern _Float32x nextdownf32x(_Float32x __x) throw(); extern _Float32x __nextdownf32x(_Float32x __x) throw(); 
# 268
extern _Float32x nextupf32x(_Float32x __x) throw(); extern _Float32x __nextupf32x(_Float32x __x) throw(); 
# 272
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) throw(); 
# 276
extern _Float32x scalbnf32x(_Float32x __x, int __n) throw(); extern _Float32x __scalbnf32x(_Float32x __x, int __n) throw(); 
# 280
extern int ilogbf32x(_Float32x __x) throw(); extern int __ilogbf32x(_Float32x __x) throw(); 
# 285
extern long llogbf32x(_Float32x __x) throw(); extern long __llogbf32x(_Float32x __x) throw(); 
# 290
extern _Float32x scalblnf32x(_Float32x __x, long __n) throw(); extern _Float32x __scalblnf32x(_Float32x __x, long __n) throw(); 
# 294
extern _Float32x nearbyintf32x(_Float32x __x) throw(); extern _Float32x __nearbyintf32x(_Float32x __x) throw(); 
# 298
extern _Float32x roundf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) throw() __attribute((const)); 
# 302
extern _Float32x truncf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) throw() __attribute((const)); 
# 307
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); 
# 314
extern long lrintf32x(_Float32x __x) throw(); extern long __lrintf32x(_Float32x __x) throw(); 
# 316
__extension__ extern long long llrintf32x(_Float32x __x) throw(); extern long long __llrintf32x(_Float32x __x) throw(); 
# 320
extern long lroundf32x(_Float32x __x) throw(); extern long __lroundf32x(_Float32x __x) throw(); 
# 322
__extension__ extern long long llroundf32x(_Float32x __x) throw(); extern long long __llroundf32x(_Float32x __x) throw(); 
# 326
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) throw(); 
# 329
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 332
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 335
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); 
# 340
extern _Float32x roundevenf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 368
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 371
extern int totalorderf32x(_Float32x __x, _Float32x __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagf32x(_Float32x __x, _Float32x __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) throw(); 
# 382
extern _Float32x getpayloadf32x(const _Float32x * __x) throw(); extern _Float32x __getpayloadf32x(const _Float32x * __x) throw(); 
# 385
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 388
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) throw(); extern _Float64x __acosf64x(_Float64x __x) throw(); 
# 55
extern _Float64x asinf64x(_Float64x __x) throw(); extern _Float64x __asinf64x(_Float64x __x) throw(); 
# 57
extern _Float64x atanf64x(_Float64x __x) throw(); extern _Float64x __atanf64x(_Float64x __x) throw(); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) throw(); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) throw(); 
# 62
extern _Float64x cosf64x(_Float64x __x) throw(); extern _Float64x __cosf64x(_Float64x __x) throw(); 
# 64
extern _Float64x sinf64x(_Float64x __x) throw(); extern _Float64x __sinf64x(_Float64x __x) throw(); 
# 66
extern _Float64x tanf64x(_Float64x __x) throw(); extern _Float64x __tanf64x(_Float64x __x) throw(); 
# 71
extern _Float64x coshf64x(_Float64x __x) throw(); extern _Float64x __coshf64x(_Float64x __x) throw(); 
# 73
extern _Float64x sinhf64x(_Float64x __x) throw(); extern _Float64x __sinhf64x(_Float64x __x) throw(); 
# 75
extern _Float64x tanhf64x(_Float64x __x) throw(); extern _Float64x __tanhf64x(_Float64x __x) throw(); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); 
# 85
extern _Float64x acoshf64x(_Float64x __x) throw(); extern _Float64x __acoshf64x(_Float64x __x) throw(); 
# 87
extern _Float64x asinhf64x(_Float64x __x) throw(); extern _Float64x __asinhf64x(_Float64x __x) throw(); 
# 89
extern _Float64x atanhf64x(_Float64x __x) throw(); extern _Float64x __atanhf64x(_Float64x __x) throw(); 
# 95
extern _Float64x expf64x(_Float64x __x) throw(); extern _Float64x __expf64x(_Float64x __x) throw(); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) throw(); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) throw(); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) throw(); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) throw(); 
# 104
extern _Float64x logf64x(_Float64x __x) throw(); extern _Float64x __logf64x(_Float64x __x) throw(); 
# 107
extern _Float64x log10f64x(_Float64x __x) throw(); extern _Float64x __log10f64x(_Float64x __x) throw(); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) throw(); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) throw(); extern _Float64x __exp10f64x(_Float64x __x) throw(); 
# 119
extern _Float64x expm1f64x(_Float64x __x) throw(); extern _Float64x __expm1f64x(_Float64x __x) throw(); 
# 122
extern _Float64x log1pf64x(_Float64x __x) throw(); extern _Float64x __log1pf64x(_Float64x __x) throw(); 
# 125
extern _Float64x logbf64x(_Float64x __x) throw(); extern _Float64x __logbf64x(_Float64x __x) throw(); 
# 130
extern _Float64x exp2f64x(_Float64x __x) throw(); extern _Float64x __exp2f64x(_Float64x __x) throw(); 
# 133
extern _Float64x log2f64x(_Float64x __x) throw(); extern _Float64x __log2f64x(_Float64x __x) throw(); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) throw(); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) throw(); extern _Float64x __sqrtf64x(_Float64x __x) throw(); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) throw(); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) throw(); extern _Float64x __cbrtf64x(_Float64x __x) throw(); 
# 159
extern _Float64x ceilf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) throw() __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) throw() __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) throw() __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 201
extern _Float64x nanf64x(const char * __tagb) throw() __attribute((const)); extern _Float64x __nanf64x(const char * __tagb) throw() __attribute((const)); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) throw(); extern _Float64x __j0f64x(_Float64x) throw(); 
# 218
extern _Float64x j1f64x(_Float64x) throw(); extern _Float64x __j1f64x(_Float64x) throw(); 
# 219
extern _Float64x jnf64x(int, _Float64x) throw(); extern _Float64x __jnf64x(int, _Float64x) throw(); 
# 220
extern _Float64x y0f64x(_Float64x) throw(); extern _Float64x __y0f64x(_Float64x) throw(); 
# 221
extern _Float64x y1f64x(_Float64x) throw(); extern _Float64x __y1f64x(_Float64x) throw(); 
# 222
extern _Float64x ynf64x(int, _Float64x) throw(); extern _Float64x __ynf64x(int, _Float64x) throw(); 
# 228
extern _Float64x erff64x(_Float64x) throw(); extern _Float64x __erff64x(_Float64x) throw(); 
# 229
extern _Float64x erfcf64x(_Float64x) throw(); extern _Float64x __erfcf64x(_Float64x) throw(); 
# 230
extern _Float64x lgammaf64x(_Float64x) throw(); extern _Float64x __lgammaf64x(_Float64x) throw(); 
# 235
extern _Float64x tgammaf64x(_Float64x) throw(); extern _Float64x __tgammaf64x(_Float64x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) throw(); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) throw(); 
# 256
extern _Float64x rintf64x(_Float64x __x) throw(); extern _Float64x __rintf64x(_Float64x __x) throw(); 
# 259
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) throw(); 
# 266
extern _Float64x nextdownf64x(_Float64x __x) throw(); extern _Float64x __nextdownf64x(_Float64x __x) throw(); 
# 268
extern _Float64x nextupf64x(_Float64x __x) throw(); extern _Float64x __nextupf64x(_Float64x __x) throw(); 
# 272
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) throw(); 
# 276
extern _Float64x scalbnf64x(_Float64x __x, int __n) throw(); extern _Float64x __scalbnf64x(_Float64x __x, int __n) throw(); 
# 280
extern int ilogbf64x(_Float64x __x) throw(); extern int __ilogbf64x(_Float64x __x) throw(); 
# 285
extern long llogbf64x(_Float64x __x) throw(); extern long __llogbf64x(_Float64x __x) throw(); 
# 290
extern _Float64x scalblnf64x(_Float64x __x, long __n) throw(); extern _Float64x __scalblnf64x(_Float64x __x, long __n) throw(); 
# 294
extern _Float64x nearbyintf64x(_Float64x __x) throw(); extern _Float64x __nearbyintf64x(_Float64x __x) throw(); 
# 298
extern _Float64x roundf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) throw() __attribute((const)); 
# 302
extern _Float64x truncf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) throw() __attribute((const)); 
# 307
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); 
# 314
extern long lrintf64x(_Float64x __x) throw(); extern long __lrintf64x(_Float64x __x) throw(); 
# 316
__extension__ extern long long llrintf64x(_Float64x __x) throw(); extern long long __llrintf64x(_Float64x __x) throw(); 
# 320
extern long lroundf64x(_Float64x __x) throw(); extern long __lroundf64x(_Float64x __x) throw(); 
# 322
__extension__ extern long long llroundf64x(_Float64x __x) throw(); extern long long __llroundf64x(_Float64x __x) throw(); 
# 326
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) throw(); 
# 329
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 332
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 335
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); 
# 340
extern _Float64x roundevenf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 368
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 371
extern int totalorderf64x(_Float64x __x, _Float64x __y) throw()
# 372
 __attribute((const)); 
# 375
extern int totalordermagf64x(_Float64x __x, _Float64x __y) throw()
# 376
 __attribute((const)); 
# 379
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) throw(); 
# 382
extern _Float64x getpayloadf64x(const _Float64x * __x) throw(); extern _Float64x __getpayloadf64x(const _Float64x * __x) throw(); 
# 385
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 388
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 489 "/usr/include/math.h" 3
extern int signgam; 
# 570 "/usr/include/math.h" 3
enum { 
# 571
FP_NAN, 
# 574
FP_INFINITE, 
# 577
FP_ZERO, 
# 580
FP_SUBNORMAL, 
# 583
FP_NORMAL
# 586
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) throw()
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 53
}
# 696 "/usr/include/math.h" 3
extern "C++" {
# 697
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 698
inline int issignaling(double __val) { return __issignaling(__val); } 
# 700
inline int issignaling(long double __val) 
# 701
{ 
# 705
return __issignalingl(__val); 
# 707
} 
# 711
}
# 725 "/usr/include/math.h" 3
extern "C++" {
# 754 "/usr/include/math.h" 3
template< class __T> inline bool 
# 755
iszero(__T __val) 
# 756
{ 
# 757
return __val == 0; 
# 758
} 
# 760
}
# 1205 "/usr/include/math.h" 3
extern "C++" {
# 1206
template< class > struct __iseqsig_type; 
# 1208
template<> struct __iseqsig_type< float>  { 
# 1210
static int __call(float __x, float __y) throw() 
# 1211
{ 
# 1212
return __iseqsigf(__x, __y); 
# 1213
} 
# 1214
}; 
# 1216
template<> struct __iseqsig_type< double>  { 
# 1218
static int __call(double __x, double __y) throw() 
# 1219
{ 
# 1220
return __iseqsig(__x, __y); 
# 1221
} 
# 1222
}; 
# 1224
template<> struct __iseqsig_type< long double>  { 
# 1226
static int __call(long double __x, long double __y) throw() 
# 1227
{ 
# 1229
return __iseqsigl(__x, __y); 
# 1233
} 
# 1234
}; 
# 1246 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1248
iseqsig(_T1 __x, _T2 __y) throw() 
# 1249
{ 
# 1251
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1255
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1256
} 
# 1258
}
# 1263
}
# 33 "/usr/include/stdlib.h" 3
extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
typedef 
# 53
enum { 
# 54
P_ALL, 
# 55
P_PID, 
# 56
P_PGID
# 57
} idtype_t; 
# 62 "/usr/include/stdlib.h" 3
typedef 
# 59
struct { 
# 60
int quot; 
# 61
int rem; 
# 62
} div_t; 
# 70
typedef 
# 67
struct { 
# 68
long quot; 
# 69
long rem; 
# 70
} ldiv_t; 
# 80
__extension__ typedef 
# 77
struct { 
# 78
long long quot; 
# 79
long long rem; 
# 80
} lldiv_t; 
# 97 "/usr/include/stdlib.h" 3
extern ::size_t __ctype_get_mb_cur_max() throw(); 
# 101
extern double atof(const char * __nptr) throw()
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 104
extern int atoi(const char * __nptr) throw()
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 107
extern long atol(const char * __nptr) throw()
# 108
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
__extension__ extern long long atoll(const char * __nptr) throw()
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 119
 __attribute((__nonnull__(1))); 
# 123
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 124
 __attribute((__nonnull__(1))); 
# 126
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 128
 __attribute((__nonnull__(1))); 
# 140 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 142
 __attribute((__nonnull__(1))); 
# 146
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 148
 __attribute((__nonnull__(1))); 
# 158 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 160
 __attribute((__nonnull__(1))); 
# 164
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 176 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 178
 __attribute((__nonnull__(1))); 
# 180
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 182
 __attribute((__nonnull__(1))); 
# 187
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 192
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 194
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 205
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 207
 __attribute((__nonnull__(1))); 
# 212
extern int strfromd(char * __dest, ::size_t __size, const char * __format, double __f) throw()
# 214
 __attribute((__nonnull__(3))); 
# 216
extern int strfromf(char * __dest, ::size_t __size, const char * __format, float __f) throw()
# 218
 __attribute((__nonnull__(3))); 
# 220
extern int strfroml(char * __dest, ::size_t __size, const char * __format, long double __f) throw()
# 222
 __attribute((__nonnull__(3))); 
# 232 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, ::size_t __size, const char * __format, _Float32 __f) throw()
# 234
 __attribute((__nonnull__(3))); 
# 238
extern int strfromf64(char * __dest, ::size_t __size, const char * __format, _Float64 __f) throw()
# 240
 __attribute((__nonnull__(3))); 
# 250 "/usr/include/stdlib.h" 3
extern int strfromf32x(char * __dest, ::size_t __size, const char * __format, _Float32x __f) throw()
# 252
 __attribute((__nonnull__(3))); 
# 256
extern int strfromf64x(char * __dest, ::size_t __size, const char * __format, _Float64x __f) throw()
# 258
 __attribute((__nonnull__(3))); 
# 274 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 276
 __attribute((__nonnull__(1, 4))); 
# 278
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 281
 __attribute((__nonnull__(1, 4))); 
# 284
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 287
 __attribute((__nonnull__(1, 4))); 
# 290
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 293
 __attribute((__nonnull__(1, 4))); 
# 295
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 297
 __attribute((__nonnull__(1, 3))); 
# 299
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 301
 __attribute((__nonnull__(1, 3))); 
# 303
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 306
 __attribute((__nonnull__(1, 3))); 
# 316 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 319
 __attribute((__nonnull__(1, 3))); 
# 323
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 326
 __attribute((__nonnull__(1, 3))); 
# 337 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 340
 __attribute((__nonnull__(1, 3))); 
# 344
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 347
 __attribute((__nonnull__(1, 3))); 
# 385 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw(); 
# 388
extern long a64l(const char * __s) throw()
# 389
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 44
typedef __loff_t loff_t; 
# 48
typedef __ino_t ino_t; 
# 55
typedef __ino64_t ino64_t; 
# 60
typedef __dev_t dev_t; 
# 65
typedef __gid_t gid_t; 
# 70
typedef __mode_t mode_t; 
# 75
typedef __nlink_t nlink_t; 
# 80
typedef __uid_t uid_t; 
# 86
typedef __off_t off_t; 
# 93
typedef __off64_t off64_t; 
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __id_t id_t; 
# 109
typedef __ssize_t ssize_t; 
# 115
typedef __daddr_t daddr_t; 
# 116
typedef __caddr_t caddr_t; 
# 122
typedef __key_t key_t; 
# 135 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 139
typedef __suseconds_t suseconds_t; 
# 149 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 150
typedef unsigned short ushort; 
# 151
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); 
# 179
typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); 
# 180
typedef unsigned u_int32_t __attribute((__mode__(__SI__))); 
# 181
typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); 
# 183
typedef long register_t __attribute((__mode__(__word__))); 
# 45 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline unsigned __bswap_32(unsigned __bsx) 
# 46
{ 
# 47
return __builtin_bswap32(__bsx); 
# 48
} 
# 109 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 110
{ 
# 111
return __builtin_bswap64(__bsx); 
# 112
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
extern "C" {
# 73
extern unsigned gnu_dev_major(__dev_t __dev) throw() __attribute((const)); 
# 74
extern unsigned gnu_dev_minor(__dev_t __dev) throw() __attribute((const)); 
# 75
extern __dev_t gnu_dev_makedev(unsigned __major, unsigned __minor) throw() __attribute((const)); 
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
}
# 212 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 219
typedef __blkcnt_t blkcnt_t; 
# 223
typedef __fsblkcnt_t fsblkcnt_t; 
# 227
typedef __fsfilcnt_t fsfilcnt_t; 
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 247
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 248
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3
struct __pthread_rwlock_arch_t { 
# 67
unsigned __readers; 
# 68
unsigned __writers; 
# 69
unsigned __wrphase_futex; 
# 70
unsigned __writers_futex; 
# 71
unsigned __pad3; 
# 72
unsigned __pad4; 
# 74
int __cur_writer; 
# 75
int __shared; 
# 76
signed char __rwelision; 
# 81
unsigned char __pad1[7]; 
# 84
unsigned long __pad2; 
# 87
unsigned __flags; 
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3
}; 
# 86 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 82
struct __pthread_internal_list { 
# 84
__pthread_internal_list *__prev; 
# 85
__pthread_internal_list *__next; 
# 86
} __pthread_list_t; 
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_mutex_s { 
# 120
int __lock; 
# 121
unsigned __count; 
# 122
int __owner; 
# 124
unsigned __nusers; 
# 148 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
int __kind; 
# 154
short __spins; short __elision; 
# 155
__pthread_list_t __list; 
# 166 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
}; 
# 171
struct __pthread_cond_s { 
# 174
__extension__ union { 
# 175
__extension__ unsigned long long __wseq; 
# 177
struct { 
# 178
unsigned __low; 
# 179
unsigned __high; 
# 180
} __wseq32; 
# 181
}; 
# 183
__extension__ union { 
# 184
__extension__ unsigned long long __g1_start; 
# 186
struct { 
# 187
unsigned __low; 
# 188
unsigned __high; 
# 189
} __g1_start32; 
# 190
}; 
# 191
unsigned __g_refs[2]; 
# 192
unsigned __g_size[2]; 
# 193
unsigned __g1_orig_size; 
# 194
unsigned __wrefs; 
# 195
unsigned __g_signals[2]; 
# 196
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 257 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 401 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 404
extern void srandom(unsigned __seed) throw(); 
# 410
extern char *initstate(unsigned __seed, char * __statebuf, ::size_t __statelen) throw()
# 411
 __attribute((__nonnull__(2))); 
# 415
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 423
struct random_data { 
# 425
int32_t *fptr; 
# 426
int32_t *rptr; 
# 427
int32_t *state; 
# 428
int rand_type; 
# 429
int rand_deg; 
# 430
int rand_sep; 
# 431
int32_t *end_ptr; 
# 432
}; 
# 434
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 435
 __attribute((__nonnull__(1, 2))); 
# 437
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 438
 __attribute((__nonnull__(2))); 
# 440
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, ::size_t __statelen, random_data *__restrict__ __buf) throw()
# 443
 __attribute((__nonnull__(2, 4))); 
# 445
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 447
 __attribute((__nonnull__(1, 2))); 
# 453
extern int rand() throw(); 
# 455
extern void srand(unsigned __seed) throw(); 
# 459
extern int rand_r(unsigned * __seed) throw(); 
# 467
extern double drand48() throw(); 
# 468
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 471
extern long lrand48() throw(); 
# 472
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 473
 __attribute((__nonnull__(1))); 
# 476
extern long mrand48() throw(); 
# 477
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 478
 __attribute((__nonnull__(1))); 
# 481
extern void srand48(long __seedval) throw(); 
# 482
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 483
 __attribute((__nonnull__(1))); 
# 484
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 490
struct drand48_data { 
# 492
unsigned short __x[3]; 
# 493
unsigned short __old_x[3]; 
# 494
unsigned short __c; 
# 495
unsigned short __init; 
# 496
__extension__ unsigned long long __a; 
# 498
}; 
# 501
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 502
 __attribute((__nonnull__(1, 2))); 
# 503
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 505
 __attribute((__nonnull__(1, 2))); 
# 508
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 510
 __attribute((__nonnull__(1, 2))); 
# 511
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 514
 __attribute((__nonnull__(1, 2))); 
# 517
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 519
 __attribute((__nonnull__(1, 2))); 
# 520
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 523
 __attribute((__nonnull__(1, 2))); 
# 526
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 527
 __attribute((__nonnull__(2))); 
# 529
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 530
 __attribute((__nonnull__(1, 2))); 
# 532
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 534
 __attribute((__nonnull__(1, 2))); 
# 539
extern void *malloc(::size_t __size) throw() __attribute((__malloc__)); 
# 541
extern void *calloc(::size_t __nmemb, ::size_t __size) throw()
# 542
 __attribute((__malloc__)); 
# 549
extern void *realloc(void * __ptr, ::size_t __size) throw()
# 550
 __attribute((__warn_unused_result__)); 
# 558
extern void *reallocarray(void * __ptr, ::size_t __nmemb, ::size_t __size) throw()
# 559
 __attribute((__warn_unused_result__)); 
# 563
extern void free(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(::size_t __size) throw(); 
# 38
}
# 572 "/usr/include/stdlib.h" 3
extern void *valloc(::size_t __size) throw() __attribute((__malloc__)); 
# 577
extern int posix_memalign(void ** __memptr, ::size_t __alignment, ::size_t __size) throw()
# 578
 __attribute((__nonnull__(1))); 
# 583
extern void *aligned_alloc(::size_t __alignment, ::size_t __size) throw()
# 584
 __attribute((__malloc__)) __attribute((__alloc_size__(2))); 
# 588
extern void abort() throw() __attribute((__noreturn__)); 
# 592
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 597
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 598
 __attribute((__nonnull__(1))); 
# 607 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 608
 __attribute((__nonnull__(1))); 
# 614
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 620
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 626
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 631
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 636
extern char *secure_getenv(const char * __name) throw()
# 637
 __attribute((__nonnull__(1))); 
# 644
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 650
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 651
 __attribute((__nonnull__(2))); 
# 654
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 661
extern int clearenv() throw(); 
# 672 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 685 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 695 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 707 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 717 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 718
 __attribute((__nonnull__(1))); 
# 728 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 739 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 749 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 759 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 760
 __attribute((__nonnull__(1))); 
# 771 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 772
 __attribute((__nonnull__(1))); 
# 781 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 787
extern char *canonicalize_file_name(const char * __name) throw()
# 788
 __attribute((__nonnull__(1))); 
# 797 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw(); 
# 805
typedef int (*__compar_fn_t)(const void *, const void *); 
# 808
typedef __compar_fn_t comparison_fn_t; 
# 812
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 817
extern void *bsearch(const void * __key, const void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 819
 __attribute((__nonnull__(1, 2, 5))); 
# 827
extern void qsort(void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 828
 __attribute((__nonnull__(1, 4))); 
# 830
extern void qsort_r(void * __base, ::size_t __nmemb, ::size_t __size, __compar_d_fn_t __compar, void * __arg)
# 832
 __attribute((__nonnull__(1, 4))); 
# 837
extern int abs(int __x) throw() __attribute((const)); 
# 838
extern long labs(long __x) throw() __attribute((const)); 
# 841
__extension__ extern long long llabs(long long __x) throw()
# 842
 __attribute((const)); 
# 849
extern div_t div(int __numer, int __denom) throw()
# 850
 __attribute((const)); 
# 851
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 852
 __attribute((const)); 
# 855
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 857
 __attribute((const)); 
# 869 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 870
 __attribute((__nonnull__(3, 4))); 
# 875
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 876
 __attribute((__nonnull__(3, 4))); 
# 881
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 882
 __attribute((__nonnull__(3))); 
# 887
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 889
 __attribute((__nonnull__(3, 4))); 
# 890
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 892
 __attribute((__nonnull__(3, 4))); 
# 893
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 894
 __attribute((__nonnull__(3))); 
# 899
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 901
 __attribute((__nonnull__(3, 4, 5))); 
# 902
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 904
 __attribute((__nonnull__(3, 4, 5))); 
# 906
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 909
 __attribute((__nonnull__(3, 4, 5))); 
# 910
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 913
 __attribute((__nonnull__(3, 4, 5))); 
# 919
extern int mblen(const char * __s, ::size_t __n) throw(); 
# 922
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n) throw(); 
# 926
extern int wctomb(char * __s, wchar_t __wchar) throw(); 
# 930
extern ::size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, ::size_t __n) throw(); 
# 933
extern ::size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, ::size_t __n) throw(); 
# 943
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))); 
# 954 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 957
 __attribute((__nonnull__(1, 2, 3))); 
# 963
extern void setkey(const char * __key) throw() __attribute((__nonnull__(1))); 
# 971
extern int posix_openpt(int __oflag); 
# 979
extern int grantpt(int __fd) throw(); 
# 983
extern int unlockpt(int __fd) throw(); 
# 988
extern char *ptsname(int __fd) throw(); 
# 995
extern int ptsname_r(int __fd, char * __buf, ::size_t __buflen) throw()
# 996
 __attribute((__nonnull__(2))); 
# 999
extern int getpt(); 
# 1006
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 1007
 __attribute((__nonnull__(1))); 
# 1026 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 70
constexpr double abs(double __x) 
# 71
{ return __builtin_fabs(__x); } 
# 74
constexpr float abs(float __x) 
# 75
{ return __builtin_fabsf(__x); } 
# 78
constexpr long double abs(long double __x) 
# 79
{ return __builtin_fabsl(__x); } 
# 107 "/usr/include/c++/7/bits/std_abs.h" 3
}
# 108
}
# 77 "/usr/include/c++/7/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/7/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 517
}
# 536 "/usr/include/c++/7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 544
constexpr int fpclassify(float __x) 
# 545
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 546
} 
# 549
constexpr int fpclassify(double __x) 
# 550
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 551
} 
# 554
constexpr int fpclassify(long double __x) 
# 555
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 556
} 
# 560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 563
fpclassify(_Tp __x) 
# 564
{ return (__x != 0) ? 4 : 2; } 
# 569
constexpr bool isfinite(float __x) 
# 570
{ return __builtin_isfinite(__x); } 
# 573
constexpr bool isfinite(double __x) 
# 574
{ return __builtin_isfinite(__x); } 
# 577
constexpr bool isfinite(long double __x) 
# 578
{ return __builtin_isfinite(__x); } 
# 582
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 585
isfinite(_Tp __x) 
# 586
{ return true; } 
# 591
constexpr bool isinf(float __x) 
# 592
{ return __builtin_isinf(__x); } 
# 599
constexpr bool isinf(double __x) 
# 600
{ return __builtin_isinf(__x); } 
# 604
constexpr bool isinf(long double __x) 
# 605
{ return __builtin_isinf(__x); } 
# 609
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 612
isinf(_Tp __x) 
# 613
{ return false; } 
# 618
constexpr bool isnan(float __x) 
# 619
{ return __builtin_isnan(__x); } 
# 626
constexpr bool isnan(double __x) 
# 627
{ return __builtin_isnan(__x); } 
# 631
constexpr bool isnan(long double __x) 
# 632
{ return __builtin_isnan(__x); } 
# 636
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 639
isnan(_Tp __x) 
# 640
{ return false; } 
# 645
constexpr bool isnormal(float __x) 
# 646
{ return __builtin_isnormal(__x); } 
# 649
constexpr bool isnormal(double __x) 
# 650
{ return __builtin_isnormal(__x); } 
# 653
constexpr bool isnormal(long double __x) 
# 654
{ return __builtin_isnormal(__x); } 
# 658
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 661
isnormal(_Tp __x) 
# 662
{ return (__x != 0) ? true : false; } 
# 668
constexpr bool signbit(float __x) 
# 669
{ return __builtin_signbit(__x); } 
# 672
constexpr bool signbit(double __x) 
# 673
{ return __builtin_signbit(__x); } 
# 676
constexpr bool signbit(long double __x) 
# 677
{ return __builtin_signbit(__x); } 
# 681
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 684
signbit(_Tp __x) 
# 685
{ return (__x < 0) ? true : false; } 
# 690
constexpr bool isgreater(float __x, float __y) 
# 691
{ return __builtin_isgreater(__x, __y); } 
# 694
constexpr bool isgreater(double __x, double __y) 
# 695
{ return __builtin_isgreater(__x, __y); } 
# 698
constexpr bool isgreater(long double __x, long double __y) 
# 699
{ return __builtin_isgreater(__x, __y); } 
# 703
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 707
isgreater(_Tp __x, _Up __y) 
# 708
{ 
# 709
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 710
return __builtin_isgreater((__type)__x, (__type)__y); 
# 711
} 
# 716
constexpr bool isgreaterequal(float __x, float __y) 
# 717
{ return __builtin_isgreaterequal(__x, __y); } 
# 720
constexpr bool isgreaterequal(double __x, double __y) 
# 721
{ return __builtin_isgreaterequal(__x, __y); } 
# 724
constexpr bool isgreaterequal(long double __x, long double __y) 
# 725
{ return __builtin_isgreaterequal(__x, __y); } 
# 729
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 733
isgreaterequal(_Tp __x, _Up __y) 
# 734
{ 
# 735
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 736
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 737
} 
# 742
constexpr bool isless(float __x, float __y) 
# 743
{ return __builtin_isless(__x, __y); } 
# 746
constexpr bool isless(double __x, double __y) 
# 747
{ return __builtin_isless(__x, __y); } 
# 750
constexpr bool isless(long double __x, long double __y) 
# 751
{ return __builtin_isless(__x, __y); } 
# 755
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 759
isless(_Tp __x, _Up __y) 
# 760
{ 
# 761
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 762
return __builtin_isless((__type)__x, (__type)__y); 
# 763
} 
# 768
constexpr bool islessequal(float __x, float __y) 
# 769
{ return __builtin_islessequal(__x, __y); } 
# 772
constexpr bool islessequal(double __x, double __y) 
# 773
{ return __builtin_islessequal(__x, __y); } 
# 776
constexpr bool islessequal(long double __x, long double __y) 
# 777
{ return __builtin_islessequal(__x, __y); } 
# 781
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 785
islessequal(_Tp __x, _Up __y) 
# 786
{ 
# 787
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 788
return __builtin_islessequal((__type)__x, (__type)__y); 
# 789
} 
# 794
constexpr bool islessgreater(float __x, float __y) 
# 795
{ return __builtin_islessgreater(__x, __y); } 
# 798
constexpr bool islessgreater(double __x, double __y) 
# 799
{ return __builtin_islessgreater(__x, __y); } 
# 802
constexpr bool islessgreater(long double __x, long double __y) 
# 803
{ return __builtin_islessgreater(__x, __y); } 
# 807
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 811
islessgreater(_Tp __x, _Up __y) 
# 812
{ 
# 813
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 814
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 815
} 
# 820
constexpr bool isunordered(float __x, float __y) 
# 821
{ return __builtin_isunordered(__x, __y); } 
# 824
constexpr bool isunordered(double __x, double __y) 
# 825
{ return __builtin_isunordered(__x, __y); } 
# 828
constexpr bool isunordered(long double __x, long double __y) 
# 829
{ return __builtin_isunordered(__x, __y); } 
# 833
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 837
isunordered(_Tp __x, _Up __y) 
# 838
{ 
# 839
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 840
return __builtin_isunordered((__type)__x, (__type)__y); 
# 841
} 
# 958 "/usr/include/c++/7/cmath" 3
}
# 1075 "/usr/include/c++/7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 1080
using ::double_t;
# 1081
using ::float_t;
# 1084
using ::acosh;
# 1085
using ::acoshf;
# 1086
using ::acoshl;
# 1088
using ::asinh;
# 1089
using ::asinhf;
# 1090
using ::asinhl;
# 1092
using ::atanh;
# 1093
using ::atanhf;
# 1094
using ::atanhl;
# 1096
using ::cbrt;
# 1097
using ::cbrtf;
# 1098
using ::cbrtl;
# 1100
using ::copysign;
# 1101
using ::copysignf;
# 1102
using ::copysignl;
# 1104
using ::erf;
# 1105
using ::erff;
# 1106
using ::erfl;
# 1108
using ::erfc;
# 1109
using ::erfcf;
# 1110
using ::erfcl;
# 1112
using ::exp2;
# 1113
using ::exp2f;
# 1114
using ::exp2l;
# 1116
using ::expm1;
# 1117
using ::expm1f;
# 1118
using ::expm1l;
# 1120
using ::fdim;
# 1121
using ::fdimf;
# 1122
using ::fdiml;
# 1124
using ::fma;
# 1125
using ::fmaf;
# 1126
using ::fmal;
# 1128
using ::fmax;
# 1129
using ::fmaxf;
# 1130
using ::fmaxl;
# 1132
using ::fmin;
# 1133
using ::fminf;
# 1134
using ::fminl;
# 1136
using ::hypot;
# 1137
using ::hypotf;
# 1138
using ::hypotl;
# 1140
using ::ilogb;
# 1141
using ::ilogbf;
# 1142
using ::ilogbl;
# 1144
using ::lgamma;
# 1145
using ::lgammaf;
# 1146
using ::lgammal;
# 1149
using ::llrint;
# 1150
using ::llrintf;
# 1151
using ::llrintl;
# 1153
using ::llround;
# 1154
using ::llroundf;
# 1155
using ::llroundl;
# 1158
using ::log1p;
# 1159
using ::log1pf;
# 1160
using ::log1pl;
# 1162
using ::log2;
# 1163
using ::log2f;
# 1164
using ::log2l;
# 1166
using ::logb;
# 1167
using ::logbf;
# 1168
using ::logbl;
# 1170
using ::lrint;
# 1171
using ::lrintf;
# 1172
using ::lrintl;
# 1174
using ::lround;
# 1175
using ::lroundf;
# 1176
using ::lroundl;
# 1178
using ::nan;
# 1179
using ::nanf;
# 1180
using ::nanl;
# 1182
using ::nearbyint;
# 1183
using ::nearbyintf;
# 1184
using ::nearbyintl;
# 1186
using ::nextafter;
# 1187
using ::nextafterf;
# 1188
using ::nextafterl;
# 1190
using ::nexttoward;
# 1191
using ::nexttowardf;
# 1192
using ::nexttowardl;
# 1194
using ::remainder;
# 1195
using ::remainderf;
# 1196
using ::remainderl;
# 1198
using ::remquo;
# 1199
using ::remquof;
# 1200
using ::remquol;
# 1202
using ::rint;
# 1203
using ::rintf;
# 1204
using ::rintl;
# 1206
using ::round;
# 1207
using ::roundf;
# 1208
using ::roundl;
# 1210
using ::scalbln;
# 1211
using ::scalblnf;
# 1212
using ::scalblnl;
# 1214
using ::scalbn;
# 1215
using ::scalbnf;
# 1216
using ::scalbnl;
# 1218
using ::tgamma;
# 1219
using ::tgammaf;
# 1220
using ::tgammal;
# 1222
using ::trunc;
# 1223
using ::truncf;
# 1224
using ::truncl;
# 1229
constexpr float acosh(float __x) 
# 1230
{ return __builtin_acoshf(__x); } 
# 1233
constexpr long double acosh(long double __x) 
# 1234
{ return __builtin_acoshl(__x); } 
# 1238
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1241
acosh(_Tp __x) 
# 1242
{ return __builtin_acosh(__x); } 
# 1247
constexpr float asinh(float __x) 
# 1248
{ return __builtin_asinhf(__x); } 
# 1251
constexpr long double asinh(long double __x) 
# 1252
{ return __builtin_asinhl(__x); } 
# 1256
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1259
asinh(_Tp __x) 
# 1260
{ return __builtin_asinh(__x); } 
# 1265
constexpr float atanh(float __x) 
# 1266
{ return __builtin_atanhf(__x); } 
# 1269
constexpr long double atanh(long double __x) 
# 1270
{ return __builtin_atanhl(__x); } 
# 1274
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1277
atanh(_Tp __x) 
# 1278
{ return __builtin_atanh(__x); } 
# 1283
constexpr float cbrt(float __x) 
# 1284
{ return __builtin_cbrtf(__x); } 
# 1287
constexpr long double cbrt(long double __x) 
# 1288
{ return __builtin_cbrtl(__x); } 
# 1292
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1295
cbrt(_Tp __x) 
# 1296
{ return __builtin_cbrt(__x); } 
# 1301
constexpr float copysign(float __x, float __y) 
# 1302
{ return __builtin_copysignf(__x, __y); } 
# 1305
constexpr long double copysign(long double __x, long double __y) 
# 1306
{ return __builtin_copysignl(__x, __y); } 
# 1310
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1312
copysign(_Tp __x, _Up __y) 
# 1313
{ 
# 1314
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1315
return copysign((__type)__x, (__type)__y); 
# 1316
} 
# 1321
constexpr float erf(float __x) 
# 1322
{ return __builtin_erff(__x); } 
# 1325
constexpr long double erf(long double __x) 
# 1326
{ return __builtin_erfl(__x); } 
# 1330
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1333
erf(_Tp __x) 
# 1334
{ return __builtin_erf(__x); } 
# 1339
constexpr float erfc(float __x) 
# 1340
{ return __builtin_erfcf(__x); } 
# 1343
constexpr long double erfc(long double __x) 
# 1344
{ return __builtin_erfcl(__x); } 
# 1348
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1351
erfc(_Tp __x) 
# 1352
{ return __builtin_erfc(__x); } 
# 1357
constexpr float exp2(float __x) 
# 1358
{ return __builtin_exp2f(__x); } 
# 1361
constexpr long double exp2(long double __x) 
# 1362
{ return __builtin_exp2l(__x); } 
# 1366
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1369
exp2(_Tp __x) 
# 1370
{ return __builtin_exp2(__x); } 
# 1375
constexpr float expm1(float __x) 
# 1376
{ return __builtin_expm1f(__x); } 
# 1379
constexpr long double expm1(long double __x) 
# 1380
{ return __builtin_expm1l(__x); } 
# 1384
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1387
expm1(_Tp __x) 
# 1388
{ return __builtin_expm1(__x); } 
# 1393
constexpr float fdim(float __x, float __y) 
# 1394
{ return __builtin_fdimf(__x, __y); } 
# 1397
constexpr long double fdim(long double __x, long double __y) 
# 1398
{ return __builtin_fdiml(__x, __y); } 
# 1402
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1404
fdim(_Tp __x, _Up __y) 
# 1405
{ 
# 1406
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1407
return fdim((__type)__x, (__type)__y); 
# 1408
} 
# 1413
constexpr float fma(float __x, float __y, float __z) 
# 1414
{ return __builtin_fmaf(__x, __y, __z); } 
# 1417
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1418
{ return __builtin_fmal(__x, __y, __z); } 
# 1422
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1424
fma(_Tp __x, _Up __y, _Vp __z) 
# 1425
{ 
# 1426
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1427
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1428
} 
# 1433
constexpr float fmax(float __x, float __y) 
# 1434
{ return __builtin_fmaxf(__x, __y); } 
# 1437
constexpr long double fmax(long double __x, long double __y) 
# 1438
{ return __builtin_fmaxl(__x, __y); } 
# 1442
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1444
fmax(_Tp __x, _Up __y) 
# 1445
{ 
# 1446
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1447
return fmax((__type)__x, (__type)__y); 
# 1448
} 
# 1453
constexpr float fmin(float __x, float __y) 
# 1454
{ return __builtin_fminf(__x, __y); } 
# 1457
constexpr long double fmin(long double __x, long double __y) 
# 1458
{ return __builtin_fminl(__x, __y); } 
# 1462
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1464
fmin(_Tp __x, _Up __y) 
# 1465
{ 
# 1466
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1467
return fmin((__type)__x, (__type)__y); 
# 1468
} 
# 1473
constexpr float hypot(float __x, float __y) 
# 1474
{ return __builtin_hypotf(__x, __y); } 
# 1477
constexpr long double hypot(long double __x, long double __y) 
# 1478
{ return __builtin_hypotl(__x, __y); } 
# 1482
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1484
hypot(_Tp __x, _Up __y) 
# 1485
{ 
# 1486
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1487
return hypot((__type)__x, (__type)__y); 
# 1488
} 
# 1493
constexpr int ilogb(float __x) 
# 1494
{ return __builtin_ilogbf(__x); } 
# 1497
constexpr int ilogb(long double __x) 
# 1498
{ return __builtin_ilogbl(__x); } 
# 1502
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1506
ilogb(_Tp __x) 
# 1507
{ return __builtin_ilogb(__x); } 
# 1512
constexpr float lgamma(float __x) 
# 1513
{ return __builtin_lgammaf(__x); } 
# 1516
constexpr long double lgamma(long double __x) 
# 1517
{ return __builtin_lgammal(__x); } 
# 1521
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1524
lgamma(_Tp __x) 
# 1525
{ return __builtin_lgamma(__x); } 
# 1530
constexpr long long llrint(float __x) 
# 1531
{ return __builtin_llrintf(__x); } 
# 1534
constexpr long long llrint(long double __x) 
# 1535
{ return __builtin_llrintl(__x); } 
# 1539
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1542
llrint(_Tp __x) 
# 1543
{ return __builtin_llrint(__x); } 
# 1548
constexpr long long llround(float __x) 
# 1549
{ return __builtin_llroundf(__x); } 
# 1552
constexpr long long llround(long double __x) 
# 1553
{ return __builtin_llroundl(__x); } 
# 1557
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1560
llround(_Tp __x) 
# 1561
{ return __builtin_llround(__x); } 
# 1566
constexpr float log1p(float __x) 
# 1567
{ return __builtin_log1pf(__x); } 
# 1570
constexpr long double log1p(long double __x) 
# 1571
{ return __builtin_log1pl(__x); } 
# 1575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1578
log1p(_Tp __x) 
# 1579
{ return __builtin_log1p(__x); } 
# 1585
constexpr float log2(float __x) 
# 1586
{ return __builtin_log2f(__x); } 
# 1589
constexpr long double log2(long double __x) 
# 1590
{ return __builtin_log2l(__x); } 
# 1594
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1597
log2(_Tp __x) 
# 1598
{ return __builtin_log2(__x); } 
# 1603
constexpr float logb(float __x) 
# 1604
{ return __builtin_logbf(__x); } 
# 1607
constexpr long double logb(long double __x) 
# 1608
{ return __builtin_logbl(__x); } 
# 1612
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1615
logb(_Tp __x) 
# 1616
{ return __builtin_logb(__x); } 
# 1621
constexpr long lrint(float __x) 
# 1622
{ return __builtin_lrintf(__x); } 
# 1625
constexpr long lrint(long double __x) 
# 1626
{ return __builtin_lrintl(__x); } 
# 1630
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1633
lrint(_Tp __x) 
# 1634
{ return __builtin_lrint(__x); } 
# 1639
constexpr long lround(float __x) 
# 1640
{ return __builtin_lroundf(__x); } 
# 1643
constexpr long lround(long double __x) 
# 1644
{ return __builtin_lroundl(__x); } 
# 1648
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1651
lround(_Tp __x) 
# 1652
{ return __builtin_lround(__x); } 
# 1657
constexpr float nearbyint(float __x) 
# 1658
{ return __builtin_nearbyintf(__x); } 
# 1661
constexpr long double nearbyint(long double __x) 
# 1662
{ return __builtin_nearbyintl(__x); } 
# 1666
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1669
nearbyint(_Tp __x) 
# 1670
{ return __builtin_nearbyint(__x); } 
# 1675
constexpr float nextafter(float __x, float __y) 
# 1676
{ return __builtin_nextafterf(__x, __y); } 
# 1679
constexpr long double nextafter(long double __x, long double __y) 
# 1680
{ return __builtin_nextafterl(__x, __y); } 
# 1684
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1686
nextafter(_Tp __x, _Up __y) 
# 1687
{ 
# 1688
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1689
return nextafter((__type)__x, (__type)__y); 
# 1690
} 
# 1695
constexpr float nexttoward(float __x, long double __y) 
# 1696
{ return __builtin_nexttowardf(__x, __y); } 
# 1699
constexpr long double nexttoward(long double __x, long double __y) 
# 1700
{ return __builtin_nexttowardl(__x, __y); } 
# 1704
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1707
nexttoward(_Tp __x, long double __y) 
# 1708
{ return __builtin_nexttoward(__x, __y); } 
# 1713
constexpr float remainder(float __x, float __y) 
# 1714
{ return __builtin_remainderf(__x, __y); } 
# 1717
constexpr long double remainder(long double __x, long double __y) 
# 1718
{ return __builtin_remainderl(__x, __y); } 
# 1722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1724
remainder(_Tp __x, _Up __y) 
# 1725
{ 
# 1726
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1727
return remainder((__type)__x, (__type)__y); 
# 1728
} 
# 1733
inline float remquo(float __x, float __y, int *__pquo) 
# 1734
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1737
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1738
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1742
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1744
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1745
{ 
# 1746
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1747
return remquo((__type)__x, (__type)__y, __pquo); 
# 1748
} 
# 1753
constexpr float rint(float __x) 
# 1754
{ return __builtin_rintf(__x); } 
# 1757
constexpr long double rint(long double __x) 
# 1758
{ return __builtin_rintl(__x); } 
# 1762
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1765
rint(_Tp __x) 
# 1766
{ return __builtin_rint(__x); } 
# 1771
constexpr float round(float __x) 
# 1772
{ return __builtin_roundf(__x); } 
# 1775
constexpr long double round(long double __x) 
# 1776
{ return __builtin_roundl(__x); } 
# 1780
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1783
round(_Tp __x) 
# 1784
{ return __builtin_round(__x); } 
# 1789
constexpr float scalbln(float __x, long __ex) 
# 1790
{ return __builtin_scalblnf(__x, __ex); } 
# 1793
constexpr long double scalbln(long double __x, long __ex) 
# 1794
{ return __builtin_scalblnl(__x, __ex); } 
# 1798
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1801
scalbln(_Tp __x, long __ex) 
# 1802
{ return __builtin_scalbln(__x, __ex); } 
# 1807
constexpr float scalbn(float __x, int __ex) 
# 1808
{ return __builtin_scalbnf(__x, __ex); } 
# 1811
constexpr long double scalbn(long double __x, int __ex) 
# 1812
{ return __builtin_scalbnl(__x, __ex); } 
# 1816
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1819
scalbn(_Tp __x, int __ex) 
# 1820
{ return __builtin_scalbn(__x, __ex); } 
# 1825
constexpr float tgamma(float __x) 
# 1826
{ return __builtin_tgammaf(__x); } 
# 1829
constexpr long double tgamma(long double __x) 
# 1830
{ return __builtin_tgammal(__x); } 
# 1834
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1837
tgamma(_Tp __x) 
# 1838
{ return __builtin_tgamma(__x); } 
# 1843
constexpr float trunc(float __x) 
# 1844
{ return __builtin_truncf(__x); } 
# 1847
constexpr long double trunc(long double __x) 
# 1848
{ return __builtin_truncl(__x); } 
# 1852
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1855
trunc(_Tp __x) 
# 1856
{ return __builtin_trunc(__x); } 
# 1860
}
# 1917 "/usr/include/c++/7/cmath" 3
}
# 38 "/usr/include/c++/7/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/7/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 9146 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
namespace std { 
# 9147
constexpr bool signbit(float x); 
# 9148
constexpr bool signbit(double x); 
# 9149
constexpr bool signbit(long double x); 
# 9150
constexpr bool isfinite(float x); 
# 9151
constexpr bool isfinite(double x); 
# 9152
constexpr bool isfinite(long double x); 
# 9153
constexpr bool isnan(float x); 
# 9158
constexpr bool isnan(double x); 
# 9160
constexpr bool isnan(long double x); 
# 9161
constexpr bool isinf(float x); 
# 9166
constexpr bool isinf(double x); 
# 9168
constexpr bool isinf(long double x); 
# 9169
}
# 9322 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
namespace std { 
# 9324
template< class T> extern T __pow_helper(T, int); 
# 9325
template< class T> extern T __cmath_power(T, unsigned); 
# 9326
}
# 9328
using std::abs;
# 9329
using std::fabs;
# 9330
using std::ceil;
# 9331
using std::floor;
# 9332
using std::sqrt;
# 9334
using std::pow;
# 9336
using std::log;
# 9337
using std::log10;
# 9338
using std::fmod;
# 9339
using std::modf;
# 9340
using std::exp;
# 9341
using std::frexp;
# 9342
using std::ldexp;
# 9343
using std::asin;
# 9344
using std::sin;
# 9345
using std::sinh;
# 9346
using std::acos;
# 9347
using std::cos;
# 9348
using std::cosh;
# 9349
using std::atan;
# 9350
using std::atan2;
# 9351
using std::tan;
# 9352
using std::tanh;
# 9723 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
namespace std { 
# 9732 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 9742 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern inline long abs(long); 
# 9743
extern constexpr float abs(float); 
# 9744
extern constexpr double abs(double); 
# 9745
extern constexpr float fabs(float); 
# 9746
extern constexpr float ceil(float); 
# 9747
extern constexpr float floor(float); 
# 9748
extern constexpr float sqrt(float); 
# 9749
extern constexpr float pow(float, float); 
# 9754
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 9764
extern constexpr float log(float); 
# 9765
extern constexpr float log10(float); 
# 9766
extern constexpr float fmod(float, float); 
# 9767
extern inline float modf(float, float *); 
# 9768
extern constexpr float exp(float); 
# 9769
extern inline float frexp(float, int *); 
# 9770
extern constexpr float ldexp(float, int); 
# 9771
extern constexpr float asin(float); 
# 9772
extern constexpr float sin(float); 
# 9773
extern constexpr float sinh(float); 
# 9774
extern constexpr float acos(float); 
# 9775
extern constexpr float cos(float); 
# 9776
extern constexpr float cosh(float); 
# 9777
extern constexpr float atan(float); 
# 9778
extern constexpr float atan2(float, float); 
# 9779
extern constexpr float tan(float); 
# 9780
extern constexpr float tanh(float); 
# 9859 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
}
# 9965 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
namespace std { 
# 9966
constexpr float logb(float a); 
# 9967
constexpr int ilogb(float a); 
# 9968
constexpr float scalbn(float a, int b); 
# 9969
constexpr float scalbln(float a, long b); 
# 9970
constexpr float exp2(float a); 
# 9971
constexpr float expm1(float a); 
# 9972
constexpr float log2(float a); 
# 9973
constexpr float log1p(float a); 
# 9974
constexpr float acosh(float a); 
# 9975
constexpr float asinh(float a); 
# 9976
constexpr float atanh(float a); 
# 9977
constexpr float hypot(float a, float b); 
# 9978
constexpr float cbrt(float a); 
# 9979
constexpr float erf(float a); 
# 9980
constexpr float erfc(float a); 
# 9981
constexpr float lgamma(float a); 
# 9982
constexpr float tgamma(float a); 
# 9983
constexpr float copysign(float a, float b); 
# 9984
constexpr float nextafter(float a, float b); 
# 9985
constexpr float remainder(float a, float b); 
# 9986
inline float remquo(float a, float b, int * quo); 
# 9987
constexpr float round(float a); 
# 9988
constexpr long lround(float a); 
# 9989
constexpr long long llround(float a); 
# 9990
constexpr float trunc(float a); 
# 9991
constexpr float rint(float a); 
# 9992
constexpr long lrint(float a); 
# 9993
constexpr long long llrint(float a); 
# 9994
constexpr float nearbyint(float a); 
# 9995
constexpr float fdim(float a, float b); 
# 9996
constexpr float fma(float a, float b, float c); 
# 9997
constexpr float fmax(float a, float b); 
# 9998
constexpr float fmin(float a, float b); 
# 9999
}
# 10104 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 10106
static inline float rsqrt(const float a); 
# 10108
static inline float rcbrt(const float a); 
# 10110
static inline float sinpi(const float a); 
# 10112
static inline float cospi(const float a); 
# 10114
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 10116
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 10118
static inline float j0(const float a); 
# 10120
static inline float j1(const float a); 
# 10122
static inline float jn(const int n, const float a); 
# 10124
static inline float y0(const float a); 
# 10126
static inline float y1(const float a); 
# 10128
static inline float yn(const int n, const float a); 
# 10130
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 10132
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 10134
static inline float erfinv(const float a); 
# 10136
static inline float erfcinv(const float a); 
# 10138
static inline float normcdfinv(const float a); 
# 10140
static inline float normcdf(const float a); 
# 10142
static inline float erfcx(const float a); 
# 10144
static inline double copysign(const double a, const float b); 
# 10146
static inline double copysign(const float a, const double b); 
# 10154
static inline unsigned min(const unsigned a, const unsigned b); 
# 10162
static inline unsigned min(const int a, const unsigned b); 
# 10170
static inline unsigned min(const unsigned a, const int b); 
# 10178
static inline long min(const long a, const long b); 
# 10186
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 10194
static inline unsigned long min(const long a, const unsigned long b); 
# 10202
static inline unsigned long min(const unsigned long a, const long b); 
# 10210
static inline long long min(const long long a, const long long b); 
# 10218
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 10226
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 10234
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 10245 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 10256 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 10266 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 10276 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 10284
static inline unsigned max(const unsigned a, const unsigned b); 
# 10292
static inline unsigned max(const int a, const unsigned b); 
# 10300
static inline unsigned max(const unsigned a, const int b); 
# 10308
static inline long max(const long a, const long b); 
# 10316
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 10324
static inline unsigned long max(const long a, const unsigned long b); 
# 10332
static inline unsigned long max(const unsigned long a, const long b); 
# 10340
static inline long long max(const long long a, const long long b); 
# 10348
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 10356
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 10364
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 10375 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 10386 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 10396 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 10406 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 10417 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
extern "C" {
# 10418
__attribute__((unused)) inline void *__nv_aligned_device_malloc(::size_t size, ::size_t align) 
# 10419
{int volatile ___ = 1;(void)size;(void)align;
# 10422
::exit(___);}
#if 0
# 10419
{ 
# 10420
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(::size_t, ::size_t); 
# 10421
return __nv_aligned_device_malloc_impl(size, align); 
# 10422
} 
#endif
# 10423 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.h"
}
# 758 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/home/poweruser/junda.feng/anaconda3/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 74 "/home/poweruser/junda.feng/anaconda3/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 75
struct surface : public surfaceReference { 
# 78
surface() 
# 79
{ 
# 80
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 81
} 
# 83
surface(cudaChannelFormatDesc desc) 
# 84
{ 
# 85
(channelDesc) = desc; 
# 86
} 
# 88
}; 
# 90
template< int dim> 
# 91
struct surface< void, dim>  : public surfaceReference { 
# 94
surface() 
# 95
{ 
# 96
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 97
} 
# 99
}; 
# 74 "/home/poweruser/junda.feng/anaconda3/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 75
struct texture : public textureReference { 
# 78
texture(int norm = 0, cudaTextureFilterMode 
# 79
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 80
aMode = cudaAddressModeClamp) 
# 81
{ 
# 82
(normalized) = norm; 
# 83
(filterMode) = fMode; 
# 84
((addressMode)[0]) = aMode; 
# 85
((addressMode)[1]) = aMode; 
# 86
((addressMode)[2]) = aMode; 
# 87
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 88
(sRGB) = 0; 
# 89
} 
# 91
texture(int norm, cudaTextureFilterMode 
# 92
fMode, cudaTextureAddressMode 
# 93
aMode, cudaChannelFormatDesc 
# 94
desc) 
# 95
{ 
# 96
(normalized) = norm; 
# 97
(filterMode) = fMode; 
# 98
((addressMode)[0]) = aMode; 
# 99
((addressMode)[1]) = aMode; 
# 100
((addressMode)[2]) = aMode; 
# 101
(channelDesc) = desc; 
# 102
(sRGB) = 0; 
# 103
} 
# 105
}; 
# 89 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.h"
extern "C" {
# 3207 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.h"
}
# 3229 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.h"
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline int mulhi(const int a, const int b); 
# 3231
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b); 
# 3233
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b); 
# 3235
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b); 
# 3237
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline long long mul64hi(const long long a, const long long b); 
# 3239
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b); 
# 3241
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b); 
# 3243
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b); 
# 3245
__attribute((deprecated("float_as_int() is deprecated in favor of __float_as_int() and may be removed in a future release (Use -Wno-deprecated-declaratio" "ns to suppress this warning)."))) __attribute__((unused)) static inline int float_as_int(const float a); 
# 3247
__attribute((deprecated("int_as_float() is deprecated in favor of __int_as_float() and may be removed in a future release (Use -Wno-deprecated-declaratio" "ns to suppress this warning)."))) __attribute__((unused)) static inline float int_as_float(const int a); 
# 3249
__attribute((deprecated("float_as_uint() is deprecated in favor of __float_as_uint() and may be removed in a future release (Use -Wno-deprecated-declarat" "ions to suppress this warning)."))) __attribute__((unused)) static inline unsigned float_as_uint(const float a); 
# 3251
__attribute((deprecated("uint_as_float() is deprecated in favor of __uint_as_float() and may be removed in a future release (Use -Wno-deprecated-declarat" "ions to suppress this warning)."))) __attribute__((unused)) static inline float uint_as_float(const unsigned a); 
# 3253
__attribute((deprecated("saturate() is deprecated in favor of __saturatef() and may be removed in a future release (Use -Wno-deprecated-declarations to s" "uppress this warning)."))) __attribute__((unused)) static inline float saturate(const float a); 
# 3255
__attribute((deprecated("mul24() is deprecated in favor of __mul24() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline int mul24(const int a, const int b); 
# 3257
__attribute((deprecated("umul24() is deprecated in favor of __umul24() and may be removed in a future release (Use -Wno-deprecated-declarations to suppre" "ss this warning)."))) __attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b); 
# 3259
__attribute((deprecated("float2int() is deprecated in favor of __float2int_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated-d" "eclarations to suppress this warning)."))) __attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3261
__attribute((deprecated("float2uint() is deprecated in favor of __float2uint_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated" "-declarations to suppress this warning)."))) __attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3263
__attribute((deprecated("int2float() is deprecated in favor of __int2float_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated-d" "eclarations to suppress this warning)."))) __attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode = cudaRoundNearest); 
# 3265
__attribute((deprecated("uint2float() is deprecated in favor of __uint2float_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated" "-declarations to suppress this warning)."))) __attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode = cudaRoundNearest); 
# 90 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(const int a, const int b) 
# 91
{int volatile ___ = 1;(void)a;(void)b;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return __mulhi(a, b); 
# 93
} 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b) 
# 96
{int volatile ___ = 1;(void)a;(void)b;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return __umulhi(a, b); 
# 98
} 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b) 
# 101
{int volatile ___ = 1;(void)a;(void)b;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return __umulhi(static_cast< unsigned>(a), b); 
# 103
} 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b) 
# 106
{int volatile ___ = 1;(void)a;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return __umulhi(a, static_cast< unsigned>(b)); 
# 108
} 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(const long long a, const long long b) 
# 111
{int volatile ___ = 1;(void)a;(void)b;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return __mul64hi(a, b); 
# 113
} 
#endif
# 115 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b) 
# 116
{int volatile ___ = 1;(void)a;(void)b;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return __umul64hi(a, b); 
# 118
} 
#endif
# 120 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b) 
# 121
{int volatile ___ = 1;(void)a;(void)b;
# 123
::exit(___);}
#if 0
# 121
{ 
# 122
return __umul64hi(static_cast< unsigned long long>(a), b); 
# 123
} 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b) 
# 126
{int volatile ___ = 1;(void)a;(void)b;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return __umul64hi(a, static_cast< unsigned long long>(b)); 
# 128
} 
#endif
# 130 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(const float a) 
# 131
{int volatile ___ = 1;(void)a;
# 133
::exit(___);}
#if 0
# 131
{ 
# 132
return __float_as_int(a); 
# 133
} 
#endif
# 135 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(const int a) 
# 136
{int volatile ___ = 1;(void)a;
# 138
::exit(___);}
#if 0
# 136
{ 
# 137
return __int_as_float(a); 
# 138
} 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(const float a) 
# 141
{int volatile ___ = 1;(void)a;
# 143
::exit(___);}
#if 0
# 141
{ 
# 142
return __float_as_uint(a); 
# 143
} 
#endif
# 145 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(const unsigned a) 
# 146
{int volatile ___ = 1;(void)a;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __uint_as_float(a); 
# 148
} 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float saturate(const float a) 
# 150
{int volatile ___ = 1;(void)a;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return __saturatef(a); 
# 152
} 
#endif
# 154 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mul24(const int a, const int b) 
# 155
{int volatile ___ = 1;(void)a;(void)b;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return __mul24(a, b); 
# 157
} 
#endif
# 159 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b) 
# 160
{int volatile ___ = 1;(void)a;(void)b;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
return __umul24(a, b); 
# 162
} 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode) 
# 165
{int volatile ___ = 1;(void)a;(void)mode;
# 170
::exit(___);}
#if 0
# 165
{ 
# 166
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 170
} 
#endif
# 172 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode) 
# 173
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 173
{ 
# 174
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 178
} 
#endif
# 180 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode) 
# 181
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 181
{ 
# 182
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 186
} 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode) 
# 189
{int volatile ___ = 1;(void)a;(void)mode;
# 194
::exit(___);}
#if 0
# 189
{ 
# 190
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 194
} 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 171 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
extern "C" {
# 180
}
# 189 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 193
{ } 
#endif
# 195 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/home/poweruser/junda.feng/anaconda3/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 197
{ } 
#endif
# 87 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/home/poweruser/junda.feng/anaconda3/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 89 "/home/poweruser/junda.feng/anaconda3/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/home/poweruser/junda.feng/anaconda3/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 303 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 318 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 318
{ } 
#endif
# 321 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 321
{ } 
#endif
# 324 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 324
{ } 
#endif
# 327 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 327
{ } 
#endif
# 330 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 330
{ } 
#endif
# 333 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 333
{ } 
#endif
# 336 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 336
{ } 
#endif
# 339 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 339
{ } 
#endif
# 342 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 342
{ } 
#endif
# 345 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 345
{ } 
#endif
# 348 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 348
{ } 
#endif
# 351 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 351
{ } 
#endif
# 354 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 354
{ } 
#endif
# 357 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 357
{ } 
#endif
# 360 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 360
{ } 
#endif
# 363 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 363
{ } 
#endif
# 366 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 366
{ } 
#endif
# 369 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 369
{ } 
#endif
# 372 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 372
{ } 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 375
{ } 
#endif
# 378 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 378
{ } 
#endif
# 381 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 381
{ } 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 384
{ } 
#endif
# 387 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 387
{ } 
#endif
# 390 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 390
{ } 
#endif
# 393 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 393
{ } 
#endif
# 396 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 396
{ } 
#endif
# 399 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 399
{ } 
#endif
# 402 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 402
{ } 
#endif
# 405 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 405
{ } 
#endif
# 408 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 408
{ } 
#endif
# 411 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 414
{ } 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 417
{ } 
#endif
# 420 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 420
{ } 
#endif
# 423 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 423
{ } 
#endif
# 426 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 426
{ } 
#endif
# 429 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 429
{ } 
#endif
# 432 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 435
{ } 
#endif
# 438 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 439
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 447
compare, unsigned long long 
# 448
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 448
{ } 
#endif
# 451 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 452
compare, unsigned long long 
# 453
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 453
{ } 
#endif
# 456 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 456
{ } 
#endif
# 459 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 459
{ } 
#endif
# 462 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 462
{ } 
#endif
# 465 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 465
{ } 
#endif
# 468 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 468
{ } 
#endif
# 471 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 471
{ } 
#endif
# 474 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 474
{ } 
#endif
# 477 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 477
{ } 
#endif
# 480 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 480
{ } 
#endif
# 483 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 483
{ } 
#endif
# 486 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 486
{ } 
#endif
# 489 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 492
{ } 
#endif
# 495 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 495
{ } 
#endif
# 498 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 498
{ } 
#endif
# 501 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 501
{ } 
#endif
# 504 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 507
{ } 
#endif
# 510 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 510
{ } 
#endif
# 513 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 513
{ } 
#endif
# 516 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 516
{ } 
#endif
# 519 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 519
{ } 
#endif
# 522 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 522
{ } 
#endif
# 525 "/home/poweruser/junda.feng/anaconda3/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 525
{ } 
#endif
# 90 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
extern "C" {
# 1503 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
}
# 1510
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1510
{ } 
#endif
# 1512 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1512
{ } 
#endif
# 1514 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1514
{ } 
#endif
# 1516 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1516
{ } 
#endif
# 1521 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1521
{ } 
#endif
# 1522 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1523 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1523
{ } 
#endif
# 1524 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1527 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1527
{ } 
#endif
# 1528 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1529 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1529
{ } 
#endif
# 1531 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1531
{ } 
#endif
# 1532 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1532
{ } 
#endif
# 1533 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/home/poweruser/junda.feng/anaconda3/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 102 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 110
{ } 
#endif
# 119 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 133 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 177 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 187 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/home/poweruser/junda.feng/anaconda3/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 87 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/home/poweruser/junda.feng/anaconda3/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 108
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 111
return __nv_associate_access_property_impl(ptr, property); 
# 112
} 
#endif
# 114 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 115
src, unsigned 
# 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 121
} 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 124
src, unsigned 
# 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 130
::exit(___);}
#if 0
# 125
{ 
# 126
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 130
} 
#endif
# 132 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 133
src, unsigned 
# 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 139
} 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/crt/sm_80_rt.h"
}
# 122 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 123
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 124
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 128
::exit(___);}
#if 0
# 124
{ 
# 128
} 
#endif
# 130 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 131
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 132
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 138
::exit(___);}
#if 0
# 132
{ 
# 138
} 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 141
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 142
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 146
::exit(___);}
#if 0
# 142
{ 
# 146
} 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 150
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 151
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 155
::exit(___);}
#if 0
# 151
{ 
# 155
} 
#endif
# 157 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 158
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 159
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 165
::exit(___);}
#if 0
# 159
{ 
# 165
} 
#endif
# 167 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 168
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 169
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 173
::exit(___);}
#if 0
# 169
{ 
# 173
} 
#endif
# 176 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 177
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 178
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 182
::exit(___);}
#if 0
# 178
{ 
# 182
} 
#endif
# 184 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 192
::exit(___);}
#if 0
# 186
{ 
# 192
} 
#endif
# 194 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 195
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 196
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 200
::exit(___);}
#if 0
# 196
{ 
# 200
} 
#endif
# 204 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 205
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 206
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 210
::exit(___);}
#if 0
# 206
{ 
# 210
} 
#endif
# 212 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 213
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 214
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 220
::exit(___);}
#if 0
# 214
{ 
# 220
} 
#endif
# 223 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 224
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 225
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 229
::exit(___);}
#if 0
# 225
{ 
# 229
} 
#endif
# 232 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 233
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 234
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 238
::exit(___);}
#if 0
# 234
{ 
# 238
} 
#endif
# 240 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 241
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 242
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 248
::exit(___);}
#if 0
# 242
{ 
# 248
} 
#endif
# 251 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 252
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 253
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 257
::exit(___);}
#if 0
# 253
{ 
# 257
} 
#endif
# 260 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 266
::exit(___);}
#if 0
# 262
{ 
# 266
} 
#endif
# 268 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 269
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 270
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 277
::exit(___);}
#if 0
# 270
{ 
# 277
} 
#endif
# 279 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 280
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 281
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 285
::exit(___);}
#if 0
# 281
{ 
# 285
} 
#endif
# 288 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 290
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 294
::exit(___);}
#if 0
# 290
{ 
# 294
} 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 297
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 298
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 304
::exit(___);}
#if 0
# 298
{ 
# 304
} 
#endif
# 306 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 307
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 308
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 312
::exit(___);}
#if 0
# 308
{ 
# 312
} 
#endif
# 315 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 316
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 317
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 321
::exit(___);}
#if 0
# 317
{ 
# 321
} 
#endif
# 323 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 324
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 325
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 329
::exit(___);}
#if 0
# 325
{ 
# 329
} 
#endif
# 333 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 334
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 339
::exit(___);}
#if 0
# 335
{ 
# 339
} 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 342
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 343
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 347
::exit(___);}
#if 0
# 343
{ 
# 347
} 
#endif
# 350 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 351
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 356
::exit(___);}
#if 0
# 352
{ 
# 356
} 
#endif
# 358 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 359
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 360
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 364
::exit(___);}
#if 0
# 360
{ 
# 364
} 
#endif
# 367 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 368
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 376
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 377
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 381
::exit(___);}
#if 0
# 377
{ 
# 381
} 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 385
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 390
::exit(___);}
#if 0
# 386
{ 
# 390
} 
#endif
# 392 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 393
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 394
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 398
::exit(___);}
#if 0
# 394
{ 
# 398
} 
#endif
# 401 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 402
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 407
::exit(___);}
#if 0
# 403
{ 
# 407
} 
#endif
# 409 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 410
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 411
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 415
::exit(___);}
#if 0
# 411
{ 
# 415
} 
#endif
# 419 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 420
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 425
::exit(___);}
#if 0
# 421
{ 
# 425
} 
#endif
# 427 "/home/poweruser/junda.feng/anaconda3/include/surface_functions.h"
template< class T> 
# 428
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 429
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 433
::exit(___);}
#if 0
# 429
{ 
# 433
} 
#endif
# 72 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 73
struct __nv_tex_rmet_ret { }; 
# 75
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
# 76
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
# 77
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
# 78
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
# 79
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
# 80
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
# 81
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
# 82
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
# 83
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
# 85
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
# 86
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
# 87
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
# 88
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
# 89
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
# 90
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
# 91
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
# 92
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
# 94
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
# 95
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
# 96
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
# 97
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
# 98
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
# 99
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
# 100
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
# 101
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
# 113 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
# 114
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
# 115
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
# 116
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
# 119
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
# 131 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 132
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) 
# 133
{int volatile ___ = 1;(void)t;(void)x;
# 139
::exit(___);}
#if 0
# 133
{ 
# 139
} 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 142
struct __nv_tex_rmnf_ret { }; 
# 144
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 145
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 146
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 147
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 148
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 149
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 150
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 151
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 152
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 153
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 154
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 155
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 156
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 157
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 158
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 159
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 160
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 162
template< class T> 
# 163
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 164
{int volatile ___ = 1;(void)t;(void)x;
# 171
::exit(___);}
#if 0
# 164
{ 
# 171
} 
#endif
# 174 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 175
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) 
# 176
{int volatile ___ = 1;(void)t;(void)x;
# 182
::exit(___);}
#if 0
# 176
{ 
# 182
} 
#endif
# 184 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 186
{int volatile ___ = 1;(void)t;(void)x;
# 193
::exit(___);}
#if 0
# 186
{ 
# 193
} 
#endif
# 197 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 198
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) 
# 199
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 206
::exit(___);}
#if 0
# 199
{ 
# 206
} 
#endif
# 208 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 209
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 210
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 217
::exit(___);}
#if 0
# 210
{ 
# 217
} 
#endif
# 221 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 222
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) 
# 223
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 229
::exit(___);}
#if 0
# 223
{ 
# 229
} 
#endif
# 231 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 232
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 233
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 240
::exit(___);}
#if 0
# 233
{ 
# 240
} 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 245
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 246
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 252
::exit(___);}
#if 0
# 246
{ 
# 252
} 
#endif
# 254 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 255
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 256
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 263
::exit(___);}
#if 0
# 256
{ 
# 263
} 
#endif
# 266 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 267
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 268
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 274
::exit(___);}
#if 0
# 268
{ 
# 274
} 
#endif
# 276 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 277
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 285
::exit(___);}
#if 0
# 278
{ 
# 285
} 
#endif
# 288 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 290
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 296
::exit(___);}
#if 0
# 290
{ 
# 296
} 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 299
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 307
::exit(___);}
#if 0
# 300
{ 
# 307
} 
#endif
# 310 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 311
struct __nv_tex2dgather_ret { }; 
# 312
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 313
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 314
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 315
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 316
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 317
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 318
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 319
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 320
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 321
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 322
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 324
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 325
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 326
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 327
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 328
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 329
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 330
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 331
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 332
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 333
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 335
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 336
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 337
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 338
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 339
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 340
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 341
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 342
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 343
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 344
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 346
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 347
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 348
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 349
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 350
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 352
template< class T> 
# 353
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 361
::exit(___);}
#if 0
# 354
{ 
# 361
} 
#endif
# 364 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
# 365
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
# 366
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
# 367
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
# 368
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
# 369
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
# 370
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
# 371
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
# 372
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
# 373
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
# 374
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
# 375
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 376
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
# 377
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
# 378
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
# 379
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
# 380
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
# 381
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
# 382
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
# 383
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
# 384
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
# 385
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 387
template< class T> 
# 388
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_rmnf_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 389
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 396
::exit(___);}
#if 0
# 389
{ 
# 396
} 
#endif
# 400 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 401
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) 
# 402
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 408
::exit(___);}
#if 0
# 402
{ 
# 408
} 
#endif
# 410 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 411
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 412
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 419
::exit(___);}
#if 0
# 412
{ 
# 419
} 
#endif
# 422 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 423
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 424
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 430
::exit(___);}
#if 0
# 424
{ 
# 430
} 
#endif
# 432 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 433
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 434
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 441
::exit(___);}
#if 0
# 434
{ 
# 441
} 
#endif
# 444 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 445
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 446
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 452
::exit(___);}
#if 0
# 446
{ 
# 452
} 
#endif
# 454 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 455
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 456
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 463
::exit(___);}
#if 0
# 456
{ 
# 463
} 
#endif
# 466 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 467
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 468
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 474
::exit(___);}
#if 0
# 468
{ 
# 474
} 
#endif
# 476 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 477
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 478
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 485
::exit(___);}
#if 0
# 478
{ 
# 485
} 
#endif
# 488 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 489
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 490
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 496
::exit(___);}
#if 0
# 490
{ 
# 496
} 
#endif
# 498 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 499
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 507
::exit(___);}
#if 0
# 500
{ 
# 507
} 
#endif
# 510 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 511
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 512
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 521
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 529
::exit(___);}
#if 0
# 522
{ 
# 529
} 
#endif
# 533 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 534
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 535
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 541
::exit(___);}
#if 0
# 535
{ 
# 541
} 
#endif
# 543 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 544
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 552
::exit(___);}
#if 0
# 545
{ 
# 552
} 
#endif
# 556 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 557
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 558
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 564
::exit(___);}
#if 0
# 558
{ 
# 564
} 
#endif
# 566 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 567
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 568
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 575
::exit(___);}
#if 0
# 568
{ 
# 575
} 
#endif
# 579 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 580
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 581
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 587
::exit(___);}
#if 0
# 581
{ 
# 587
} 
#endif
# 589 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 590
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 598
::exit(___);}
#if 0
# 591
{ 
# 598
} 
#endif
# 602 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 603
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 604
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 610
::exit(___);}
#if 0
# 604
{ 
# 610
} 
#endif
# 612 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 613
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 614
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 621
::exit(___);}
#if 0
# 614
{ 
# 621
} 
#endif
# 625 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 626
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 627
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 627
{ 
# 633
} 
#endif
# 635 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 636
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 637
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 644
::exit(___);}
#if 0
# 637
{ 
# 644
} 
#endif
# 648 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 649
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 650
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 656
::exit(___);}
#if 0
# 650
{ 
# 656
} 
#endif
# 658 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 659
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 667
::exit(___);}
#if 0
# 660
{ 
# 667
} 
#endif
# 670 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 671
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 672
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 678
::exit(___);}
#if 0
# 672
{ 
# 678
} 
#endif
# 680 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 681
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 682
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 689
::exit(___);}
#if 0
# 682
{ 
# 689
} 
#endif
# 692 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 693
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 700
::exit(___);}
#if 0
# 694
{ 
# 700
} 
#endif
# 702 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 703
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 711
::exit(___);}
#if 0
# 704
{ 
# 711
} 
#endif
# 714 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 715
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 716
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 722
::exit(___);}
#if 0
# 716
{ 
# 722
} 
#endif
# 724 "/home/poweruser/junda.feng/anaconda3/include/texture_fetch_functions.h"
template< class T> 
# 725
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 733
::exit(___);}
#if 0
# 726
{ 
# 733
} 
#endif
# 64 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 65
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 66
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 100 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 101
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 107
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 108
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 109
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 113
::exit(___);}
#if 0
# 109
{ 
# 113
} 
#endif
# 115 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 116
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 117
{int volatile ___ = 1;(void)texObject;(void)x;
# 123
::exit(___);}
#if 0
# 117
{ 
# 123
} 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 126
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 127
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 131
::exit(___);}
#if 0
# 127
{ 
# 131
} 
#endif
# 134 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 135
tex1D(cudaTextureObject_t texObject, float x) 
# 136
{int volatile ___ = 1;(void)texObject;(void)x;
# 142
::exit(___);}
#if 0
# 136
{ 
# 142
} 
#endif
# 145 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 146
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 147
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 151
::exit(___);}
#if 0
# 147
{ 
# 151
} 
#endif
# 153 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 154
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 155
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 161
::exit(___);}
#if 0
# 155
{ 
# 161
} 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 165
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 166
isResident) 
# 167
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 173
::exit(___);}
#if 0
# 167
{ 
# 173
} 
#endif
# 175 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 177
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 183
::exit(___);}
#if 0
# 177
{ 
# 183
} 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 190
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 194
::exit(___);}
#if 0
# 190
{ 
# 194
} 
#endif
# 196 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 197
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 198
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 204
::exit(___);}
#if 0
# 198
{ 
# 204
} 
#endif
# 207 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 209
isResident) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 216
::exit(___);}
#if 0
# 210
{ 
# 216
} 
#endif
# 218 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 219
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 220
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 226
::exit(___);}
#if 0
# 220
{ 
# 226
} 
#endif
# 230 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 231
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 232
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 236
::exit(___);}
#if 0
# 232
{ 
# 236
} 
#endif
# 238 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 239
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 240
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 246
::exit(___);}
#if 0
# 240
{ 
# 246
} 
#endif
# 248 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 249
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 250
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 254
::exit(___);}
#if 0
# 250
{ 
# 254
} 
#endif
# 256 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 257
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 258
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 264
::exit(___);}
#if 0
# 258
{ 
# 264
} 
#endif
# 267 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 268
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 269
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 275
::exit(___);}
#if 0
# 269
{ 
# 275
} 
#endif
# 277 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 278
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 279
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 285
::exit(___);}
#if 0
# 279
{ 
# 285
} 
#endif
# 289 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 290
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 291
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 295
::exit(___);}
#if 0
# 291
{ 
# 295
} 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 299
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 306
::exit(___);}
#if 0
# 300
{ 
# 306
} 
#endif
# 309 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 310
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 311
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 315
::exit(___);}
#if 0
# 311
{ 
# 315
} 
#endif
# 317 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 318
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 319
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 325
::exit(___);}
#if 0
# 319
{ 
# 325
} 
#endif
# 327 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 328
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 329
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 333
::exit(___);}
#if 0
# 329
{ 
# 333
} 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 336
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 337
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 343
::exit(___);}
#if 0
# 337
{ 
# 343
} 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 347
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 348
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 354
::exit(___);}
#if 0
# 348
{ 
# 354
} 
#endif
# 356 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 358
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 364
::exit(___);}
#if 0
# 358
{ 
# 364
} 
#endif
# 368 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 369
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 370
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 374
::exit(___);}
#if 0
# 370
{ 
# 374
} 
#endif
# 376 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 377
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 378
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 384
::exit(___);}
#if 0
# 378
{ 
# 384
} 
#endif
# 387 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 388
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 389
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 393
::exit(___);}
#if 0
# 389
{ 
# 393
} 
#endif
# 395 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 396
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 397
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 403
::exit(___);}
#if 0
# 397
{ 
# 403
} 
#endif
# 407 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 408
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 409
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 415
::exit(___);}
#if 0
# 409
{ 
# 415
} 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 418
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 419
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 425
::exit(___);}
#if 0
# 419
{ 
# 425
} 
#endif
# 430 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 431
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 432
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 436
::exit(___);}
#if 0
# 432
{ 
# 436
} 
#endif
# 438 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 439
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 440
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 446
::exit(___);}
#if 0
# 440
{ 
# 446
} 
#endif
# 449 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 450
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 451
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 457
::exit(___);}
#if 0
# 451
{ 
# 457
} 
#endif
# 459 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 460
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 461
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 467
::exit(___);}
#if 0
# 461
{ 
# 467
} 
#endif
# 472 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 473
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 474
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 478
::exit(___);}
#if 0
# 474
{ 
# 478
} 
#endif
# 480 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 481
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 482
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 488
::exit(___);}
#if 0
# 482
{ 
# 488
} 
#endif
# 491 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 497
::exit(___);}
#if 0
# 493
{ 
# 497
} 
#endif
# 499 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 500
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 501
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 507
::exit(___);}
#if 0
# 501
{ 
# 507
} 
#endif
# 510 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 511
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 512
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 521
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 522
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 528
::exit(___);}
#if 0
# 522
{ 
# 528
} 
#endif
# 531 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 532
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 533
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 537
::exit(___);}
#if 0
# 533
{ 
# 537
} 
#endif
# 539 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 540
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 541
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 547
::exit(___);}
#if 0
# 541
{ 
# 547
} 
#endif
# 550 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 551
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 552
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 556
::exit(___);}
#if 0
# 552
{ 
# 556
} 
#endif
# 558 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 559
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 560
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 566
::exit(___);}
#if 0
# 560
{ 
# 566
} 
#endif
# 568 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 569
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 570
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 574
::exit(___);}
#if 0
# 570
{ 
# 574
} 
#endif
# 576 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 577
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 578
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 584
::exit(___);}
#if 0
# 578
{ 
# 584
} 
#endif
# 586 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 587
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 588
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 588
{ 
# 592
} 
#endif
# 594 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 602
::exit(___);}
#if 0
# 596
{ 
# 602
} 
#endif
# 605 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 606
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 607
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 612
::exit(___);}
#if 0
# 607
{ 
# 612
} 
#endif
# 614 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 615
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 616
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 622
::exit(___);}
#if 0
# 616
{ 
# 622
} 
#endif
# 625 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 626
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 627
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 634
::exit(___);}
#if 0
# 627
{ 
# 634
} 
#endif
# 636 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 637
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 638
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 644
::exit(___);}
#if 0
# 638
{ 
# 644
} 
#endif
# 648 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 649
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 650
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 654
::exit(___);}
#if 0
# 650
{ 
# 654
} 
#endif
# 656 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 657
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 658
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 664
::exit(___);}
#if 0
# 658
{ 
# 664
} 
#endif
# 667 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 668
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 669
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 675
::exit(___);}
#if 0
# 669
{ 
# 675
} 
#endif
# 677 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 678
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 679
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 685
::exit(___);}
#if 0
# 679
{ 
# 685
} 
#endif
# 690 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 691
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 692
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 696
::exit(___);}
#if 0
# 692
{ 
# 696
} 
#endif
# 698 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 699
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 700
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 706
::exit(___);}
#if 0
# 700
{ 
# 706
} 
#endif
# 709 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 710
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 711
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 715
::exit(___);}
#if 0
# 711
{ 
# 715
} 
#endif
# 717 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 718
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 719
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 725
::exit(___);}
#if 0
# 719
{ 
# 725
} 
#endif
# 728 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 729
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 730
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 736
::exit(___);}
#if 0
# 730
{ 
# 736
} 
#endif
# 738 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 739
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 740
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 746
::exit(___);}
#if 0
# 740
{ 
# 746
} 
#endif
# 750 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 751
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 752
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 756
::exit(___);}
#if 0
# 752
{ 
# 756
} 
#endif
# 758 "/home/poweruser/junda.feng/anaconda3/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 759
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 760
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 766
::exit(___);}
#if 0
# 760
{ 
# 766
} 
#endif
# 59 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 60
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 78
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 88
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 96
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 99
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 100
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 105
::exit(___);}
#if 0
# 101
{ 
# 105
} 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 108
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 109
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 115
::exit(___);}
#if 0
# 109
{ 
# 115
} 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 118
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 119
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 123
::exit(___);}
#if 0
# 119
{ 
# 123
} 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 126
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 136 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 137
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 138
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 142
::exit(___);}
#if 0
# 138
{ 
# 142
} 
#endif
# 144 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 146
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 152
::exit(___);}
#if 0
# 146
{ 
# 152
} 
#endif
# 154 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 155
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 160
::exit(___);}
#if 0
# 156
{ 
# 160
} 
#endif
# 162 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 164
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 170
::exit(___);}
#if 0
# 164
{ 
# 170
} 
#endif
# 172 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 173
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 178
::exit(___);}
#if 0
# 174
{ 
# 178
} 
#endif
# 180 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 181
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 182
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 182
{ 
# 188
} 
#endif
# 190 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 191
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 192
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 196
::exit(___);}
#if 0
# 192
{ 
# 196
} 
#endif
# 198 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 199
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 200
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 206
::exit(___);}
#if 0
# 200
{ 
# 206
} 
#endif
# 208 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 209
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 214
} 
#endif
# 216 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 217
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 218
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 218
{ 
# 224
} 
#endif
# 226 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 227
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 228
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 228
{ 
# 232
} 
#endif
# 234 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 235
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 236
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 243
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 244
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 248
::exit(___);}
#if 0
# 244
{ 
# 248
} 
#endif
# 250 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 251
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 252
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 256
::exit(___);}
#if 0
# 252
{ 
# 256
} 
#endif
# 258 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 259
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 260
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 264
::exit(___);}
#if 0
# 260
{ 
# 264
} 
#endif
# 266 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 267
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 268
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 272
} 
#endif
# 274 "/home/poweruser/junda.feng/anaconda3/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 275
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 276
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 280
} 
#endif
# 3307 "/home/poweruser/junda.feng/anaconda3/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, ::size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/home/poweruser/junda.feng/anaconda3/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 36 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> constexpr _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ return __builtin_addressof(__r); } 
# 51
}
# 42 "/usr/include/c++/7/type_traits" 3
namespace std { 
# 44
typedef unsigned short uint_least16_t; 
# 45
typedef unsigned uint_least32_t; 
# 46
}
# 52
namespace std __attribute((__visibility__("default"))) { 
# 68 "/usr/include/c++/7/type_traits" 3
template< class _Tp, _Tp __v> 
# 69
struct integral_constant { 
# 71
static constexpr _Tp value = (__v); 
# 72
typedef _Tp value_type; 
# 73
typedef integral_constant type; 
# 74
constexpr operator value_type() const noexcept { return value; } 
# 79
constexpr value_type operator()() const noexcept { return value; } 
# 81
}; 
# 83
template< class _Tp, _Tp __v> constexpr _Tp integral_constant< _Tp, __v> ::value; 
# 87
typedef integral_constant< bool, true>  true_type; 
# 90
typedef integral_constant< bool, false>  false_type; 
# 92
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 103 "/usr/include/c++/7/type_traits" 3
template< bool , class , class > struct conditional; 
# 106
template< class ...> struct __or_; 
# 110
template<> struct __or_< >  : public false_type { 
# 112
}; 
# 114
template< class _B1> 
# 115
struct __or_< _B1>  : public _B1 { 
# 117
}; 
# 119
template< class _B1, class _B2> 
# 120
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 122
}; 
# 124
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 125
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 127
}; 
# 129
template< class ...> struct __and_; 
# 133
template<> struct __and_< >  : public true_type { 
# 135
}; 
# 137
template< class _B1> 
# 138
struct __and_< _B1>  : public _B1 { 
# 140
}; 
# 142
template< class _B1, class _B2> 
# 143
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 145
}; 
# 147
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 148
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 150
}; 
# 152
template< class _Pp> 
# 153
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 155
}; 
# 192 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 193
struct __success_type { 
# 194
typedef _Tp type; }; 
# 196
struct __failure_type { 
# 197
}; 
# 201
template< class > struct remove_cv; 
# 204
template< class > 
# 205
struct __is_void_helper : public false_type { 
# 206
}; 
# 209
template<> struct __is_void_helper< void>  : public true_type { 
# 210
}; 
# 213
template< class _Tp> 
# 214
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 216
}; 
# 218
template< class > 
# 219
struct __is_integral_helper : public false_type { 
# 220
}; 
# 223
template<> struct __is_integral_helper< bool>  : public true_type { 
# 224
}; 
# 227
template<> struct __is_integral_helper< char>  : public true_type { 
# 228
}; 
# 231
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 232
}; 
# 235
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 236
}; 
# 240
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 241
}; 
# 245
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 246
}; 
# 249
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 250
}; 
# 253
template<> struct __is_integral_helper< short>  : public true_type { 
# 254
}; 
# 257
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 258
}; 
# 261
template<> struct __is_integral_helper< int>  : public true_type { 
# 262
}; 
# 265
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 266
}; 
# 269
template<> struct __is_integral_helper< long>  : public true_type { 
# 270
}; 
# 273
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 274
}; 
# 277
template<> struct __is_integral_helper< long long>  : public true_type { 
# 278
}; 
# 281
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 282
}; 
# 324 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 325
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 327
}; 
# 329
template< class > 
# 330
struct __is_floating_point_helper : public false_type { 
# 331
}; 
# 334
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 335
}; 
# 338
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 339
}; 
# 342
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 343
}; 
# 352 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 353
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 355
}; 
# 358
template< class > 
# 359
struct is_array : public false_type { 
# 360
}; 
# 362
template< class _Tp, size_t _Size> 
# 363
struct is_array< _Tp [_Size]>  : public true_type { 
# 364
}; 
# 366
template< class _Tp> 
# 367
struct is_array< _Tp []>  : public true_type { 
# 368
}; 
# 370
template< class > 
# 371
struct __is_pointer_helper : public false_type { 
# 372
}; 
# 374
template< class _Tp> 
# 375
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 376
}; 
# 379
template< class _Tp> 
# 380
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 382
}; 
# 385
template< class > 
# 386
struct is_lvalue_reference : public false_type { 
# 387
}; 
# 389
template< class _Tp> 
# 390
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 391
}; 
# 394
template< class > 
# 395
struct is_rvalue_reference : public false_type { 
# 396
}; 
# 398
template< class _Tp> 
# 399
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 400
}; 
# 402
template< class > struct is_function; 
# 405
template< class > 
# 406
struct __is_member_object_pointer_helper : public false_type { 
# 407
}; 
# 409
template< class _Tp, class _Cp> 
# 410
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, !is_function< _Tp> ::value>  { 
# 411
}; 
# 414
template< class _Tp> 
# 415
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 418
}; 
# 420
template< class > 
# 421
struct __is_member_function_pointer_helper : public false_type { 
# 422
}; 
# 424
template< class _Tp, class _Cp> 
# 425
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, is_function< _Tp> ::value>  { 
# 426
}; 
# 429
template< class _Tp> 
# 430
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 433
}; 
# 436
template< class _Tp> 
# 437
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 439
}; 
# 442
template< class _Tp> 
# 443
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 451
}; 
# 454
template< class > 
# 455
struct is_function : public false_type { 
# 456
}; 
# 458
template< class _Res, class ..._ArgTypes> 
# 459
struct is_function< _Res (_ArgTypes ...)>  : public true_type { 
# 460
}; 
# 462
template< class _Res, class ..._ArgTypes> 
# 463
struct is_function< _Res (_ArgTypes ...) &>  : public true_type { 
# 464
}; 
# 466
template< class _Res, class ..._ArgTypes> 
# 467
struct is_function< _Res (_ArgTypes ...) &&>  : public true_type { 
# 468
}; 
# 470
template< class _Res, class ..._ArgTypes> 
# 471
struct is_function< _Res (_ArgTypes ..., ...)>  : public true_type { 
# 472
}; 
# 474
template< class _Res, class ..._ArgTypes> 
# 475
struct is_function< _Res (_ArgTypes ..., ...) &>  : public true_type { 
# 476
}; 
# 478
template< class _Res, class ..._ArgTypes> 
# 479
struct is_function< _Res (_ArgTypes ..., ...) &&>  : public true_type { 
# 480
}; 
# 482
template< class _Res, class ..._ArgTypes> 
# 483
struct is_function< _Res (_ArgTypes ...) const>  : public true_type { 
# 484
}; 
# 486
template< class _Res, class ..._ArgTypes> 
# 487
struct is_function< _Res (_ArgTypes ...) const &>  : public true_type { 
# 488
}; 
# 490
template< class _Res, class ..._ArgTypes> 
# 491
struct is_function< _Res (_ArgTypes ...) const &&>  : public true_type { 
# 492
}; 
# 494
template< class _Res, class ..._ArgTypes> 
# 495
struct is_function< _Res (_ArgTypes ..., ...) const>  : public true_type { 
# 496
}; 
# 498
template< class _Res, class ..._ArgTypes> 
# 499
struct is_function< _Res (_ArgTypes ..., ...) const &>  : public true_type { 
# 500
}; 
# 502
template< class _Res, class ..._ArgTypes> 
# 503
struct is_function< _Res (_ArgTypes ..., ...) const &&>  : public true_type { 
# 504
}; 
# 506
template< class _Res, class ..._ArgTypes> 
# 507
struct is_function< _Res (_ArgTypes ...) volatile>  : public true_type { 
# 508
}; 
# 510
template< class _Res, class ..._ArgTypes> 
# 511
struct is_function< _Res (_ArgTypes ...) volatile &>  : public true_type { 
# 512
}; 
# 514
template< class _Res, class ..._ArgTypes> 
# 515
struct is_function< _Res (_ArgTypes ...) volatile &&>  : public true_type { 
# 516
}; 
# 518
template< class _Res, class ..._ArgTypes> 
# 519
struct is_function< _Res (_ArgTypes ..., ...) volatile>  : public true_type { 
# 520
}; 
# 522
template< class _Res, class ..._ArgTypes> 
# 523
struct is_function< _Res (_ArgTypes ..., ...) volatile &>  : public true_type { 
# 524
}; 
# 526
template< class _Res, class ..._ArgTypes> 
# 527
struct is_function< _Res (_ArgTypes ..., ...) volatile &&>  : public true_type { 
# 528
}; 
# 530
template< class _Res, class ..._ArgTypes> 
# 531
struct is_function< _Res (_ArgTypes ...) const volatile>  : public true_type { 
# 532
}; 
# 534
template< class _Res, class ..._ArgTypes> 
# 535
struct is_function< _Res (_ArgTypes ...) const volatile &>  : public true_type { 
# 536
}; 
# 538
template< class _Res, class ..._ArgTypes> 
# 539
struct is_function< _Res (_ArgTypes ...) const volatile &&>  : public true_type { 
# 540
}; 
# 542
template< class _Res, class ..._ArgTypes> 
# 543
struct is_function< _Res (_ArgTypes ..., ...) const volatile>  : public true_type { 
# 544
}; 
# 546
template< class _Res, class ..._ArgTypes> 
# 547
struct is_function< _Res (_ArgTypes ..., ...) const volatile &>  : public true_type { 
# 548
}; 
# 550
template< class _Res, class ..._ArgTypes> 
# 551
struct is_function< _Res (_ArgTypes ..., ...) const volatile &&>  : public true_type { 
# 552
}; 
# 556
template< class > 
# 557
struct __is_null_pointer_helper : public false_type { 
# 558
}; 
# 561
template<> struct __is_null_pointer_helper< nullptr_t>  : public true_type { 
# 562
}; 
# 565
template< class _Tp> 
# 566
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 568
}; 
# 571
template< class _Tp> 
# 572
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 574
}; 
# 579
template< class _Tp> 
# 580
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 583
}; 
# 586
template< class _Tp> 
# 587
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 589
}; 
# 592
template< class _Tp> 
# 593
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 596
}; 
# 599
template< class _Tp> 
# 600
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 603
}; 
# 605
template< class > struct is_member_pointer; 
# 609
template< class _Tp> 
# 610
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 613
}; 
# 616
template< class _Tp> 
# 617
struct is_compound : public integral_constant< bool, !is_fundamental< _Tp> ::value>  { 
# 618
}; 
# 620
template< class _Tp> 
# 621
struct __is_member_pointer_helper : public false_type { 
# 622
}; 
# 624
template< class _Tp, class _Cp> 
# 625
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 626
}; 
# 629
template< class _Tp> 
# 630
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 632
}; 
# 636
template< class _Tp> 
# 637
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 639
}; 
# 641
template< class _Res, class ..._Args> 
# 642
struct __is_referenceable< _Res (_Args ...)>  : public true_type { 
# 644
}; 
# 646
template< class _Res, class ..._Args> 
# 647
struct __is_referenceable< _Res (_Args ..., ...)>  : public true_type { 
# 649
}; 
# 654
template< class > 
# 655
struct is_const : public false_type { 
# 656
}; 
# 658
template< class _Tp> 
# 659
struct is_const< const _Tp>  : public true_type { 
# 660
}; 
# 663
template< class > 
# 664
struct is_volatile : public false_type { 
# 665
}; 
# 667
template< class _Tp> 
# 668
struct is_volatile< volatile _Tp>  : public true_type { 
# 669
}; 
# 672
template< class _Tp> 
# 673
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 675
}; 
# 678
template< class _Tp> 
# 679
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 681
}; 
# 684
template< class _Tp> 
# 685
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 687
}; 
# 691
template< class _Tp> 
# 692
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 694
}; 
# 697
template< class _Tp> 
# 698
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 700
}; 
# 703
template< class _Tp> 
# 704
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 706
}; 
# 709
template< class _Tp> 
# 710
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 712
}; 
# 717
template< class _Tp> 
# 718
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 720
}; 
# 724
template< class _Tp> 
# 725
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 727
}; 
# 729
template< class _Tp, bool 
# 730
 = is_arithmetic< _Tp> ::value> 
# 731
struct __is_signed_helper : public false_type { 
# 732
}; 
# 734
template< class _Tp> 
# 735
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 737
}; 
# 740
template< class _Tp> 
# 741
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 743
}; 
# 746
template< class _Tp> 
# 747
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 749
}; 
# 754
template< class > struct add_rvalue_reference; 
# 761
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type declval() noexcept; 
# 764
template< class , unsigned  = 0U> struct extent; 
# 767
template< class > struct remove_all_extents; 
# 770
template< class _Tp> 
# 771
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 773
}; 
# 775
template< class _Tp> 
# 776
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 778
}; 
# 785
struct __do_is_destructible_impl { 
# 787
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 790
template< class > static false_type __test(...); 
# 792
}; 
# 794
template< class _Tp> 
# 795
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 798
typedef __decltype((__test< _Tp> (0))) type; 
# 799
}; 
# 801
template< class _Tp, bool 
# 802
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 805
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 808
template< class _Tp> 
# 809
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 812
}; 
# 814
template< class _Tp> 
# 815
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 816
}; 
# 818
template< class _Tp> 
# 819
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 820
}; 
# 823
template< class _Tp> 
# 824
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 826
}; 
# 832
struct __do_is_nt_destructible_impl { 
# 834
template< class _Tp> static integral_constant< bool, noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 838
template< class > static false_type __test(...); 
# 840
}; 
# 842
template< class _Tp> 
# 843
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 846
typedef __decltype((__test< _Tp> (0))) type; 
# 847
}; 
# 849
template< class _Tp, bool 
# 850
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 853
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 856
template< class _Tp> 
# 857
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 860
}; 
# 862
template< class _Tp> 
# 863
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 864
}; 
# 866
template< class _Tp> 
# 867
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 868
}; 
# 871
template< class _Tp> 
# 872
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 874
}; 
# 876
struct __do_is_default_constructible_impl { 
# 878
template< class _Tp, class  = __decltype((_Tp()))> static true_type __test(int); 
# 881
template< class > static false_type __test(...); 
# 883
}; 
# 885
template< class _Tp> 
# 886
struct __is_default_constructible_impl : public __do_is_default_constructible_impl { 
# 889
typedef __decltype((__test< _Tp> (0))) type; 
# 890
}; 
# 892
template< class _Tp> 
# 893
struct __is_default_constructible_atom : public __and_< __not_< is_void< _Tp> > , __is_default_constructible_impl< _Tp> >  { 
# 896
}; 
# 898
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_default_constructible_safe; 
# 906
template< class _Tp> 
# 907
struct __is_default_constructible_safe< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_default_constructible_atom< typename remove_all_extents< _Tp> ::type> >  { 
# 911
}; 
# 913
template< class _Tp> 
# 914
struct __is_default_constructible_safe< _Tp, false>  : public __is_default_constructible_atom< _Tp> ::type { 
# 916
}; 
# 919
template< class _Tp> 
# 920
struct is_default_constructible : public __is_default_constructible_safe< _Tp> ::type { 
# 922
}; 
# 936 "/usr/include/c++/7/type_traits" 3
struct __do_is_static_castable_impl { 
# 938
template< class _From, class _To, class 
# 939
 = __decltype((static_cast< _To>(declval< _From> ())))> static true_type 
# 938
__test(int); 
# 942
template< class , class > static false_type __test(...); 
# 944
}; 
# 946
template< class _From, class _To> 
# 947
struct __is_static_castable_impl : public __do_is_static_castable_impl { 
# 950
typedef __decltype((__test< _From, _To> (0))) type; 
# 951
}; 
# 953
template< class _From, class _To> 
# 954
struct __is_static_castable_safe : public __is_static_castable_impl< _From, _To> ::type { 
# 956
}; 
# 959
template< class _From, class _To> 
# 960
struct __is_static_castable : public integral_constant< bool, __is_static_castable_safe< _From, _To> ::value>  { 
# 963
}; 
# 970
struct __do_is_direct_constructible_impl { 
# 972
template< class _Tp, class _Arg, class 
# 973
 = __decltype((::new _Tp(declval< _Arg> ())))> static true_type 
# 972
__test(int); 
# 976
template< class , class > static false_type __test(...); 
# 978
}; 
# 980
template< class _Tp, class _Arg> 
# 981
struct __is_direct_constructible_impl : public __do_is_direct_constructible_impl { 
# 984
typedef __decltype((__test< _Tp, _Arg> (0))) type; 
# 985
}; 
# 987
template< class _Tp, class _Arg> 
# 988
struct __is_direct_constructible_new_safe : public __and_< is_destructible< _Tp> , __is_direct_constructible_impl< _Tp, _Arg> >  { 
# 991
}; 
# 993
template< class , class > struct is_same; 
# 996
template< class , class > struct is_base_of; 
# 999
template< class > struct remove_reference; 
# 1002
template< class _From, class _To, bool 
# 1003
 = __not_< __or_< is_void< _From> , is_function< _From> > > ::value> struct __is_base_to_derived_ref; 
# 1007
template< class _Tp, class ..._Args> struct is_constructible; 
# 1012
template< class _From, class _To> 
# 1013
struct __is_base_to_derived_ref< _From, _To, true>  { 
# 1016
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 1018
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 1021
typedef __and_< __not_< is_same< __src_t, __dst_t> > , is_base_of< __src_t, __dst_t> , __not_< is_constructible< __dst_t, _From> > >  type; 
# 1022
static constexpr bool value = (type::value); 
# 1023
}; 
# 1025
template< class _From, class _To> 
# 1026
struct __is_base_to_derived_ref< _From, _To, false>  : public false_type { 
# 1028
}; 
# 1030
template< class _From, class _To, bool 
# 1031
 = __and_< is_lvalue_reference< _From> , is_rvalue_reference< _To> > ::value> struct __is_lvalue_to_rvalue_ref; 
# 1037
template< class _From, class _To> 
# 1038
struct __is_lvalue_to_rvalue_ref< _From, _To, true>  { 
# 1041
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 1043
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 1046
typedef __and_< __not_< is_function< __src_t> > , __or_< is_same< __src_t, __dst_t> , is_base_of< __dst_t, __src_t> > >  type; 
# 1047
static constexpr bool value = (type::value); 
# 1048
}; 
# 1050
template< class _From, class _To> 
# 1051
struct __is_lvalue_to_rvalue_ref< _From, _To, false>  : public false_type { 
# 1053
}; 
# 1061
template< class _Tp, class _Arg> 
# 1062
struct __is_direct_constructible_ref_cast : public __and_< __is_static_castable< _Arg, _Tp> , __not_< __or_< __is_base_to_derived_ref< _Arg, _Tp> , __is_lvalue_to_rvalue_ref< _Arg, _Tp> > > >  { 
# 1067
}; 
# 1069
template< class _Tp, class _Arg> 
# 1070
struct __is_direct_constructible_new : public conditional< is_reference< _Tp> ::value, __is_direct_constructible_ref_cast< _Tp, _Arg> , __is_direct_constructible_new_safe< _Tp, _Arg> > ::type { 
# 1075
}; 
# 1077
template< class _Tp, class _Arg> 
# 1078
struct __is_direct_constructible : public __is_direct_constructible_new< _Tp, _Arg> ::type { 
# 1080
}; 
# 1087
struct __do_is_nary_constructible_impl { 
# 1089
template< class _Tp, class ..._Args, class 
# 1090
 = __decltype((_Tp(declval< _Args> ()...)))> static true_type 
# 1089
__test(int); 
# 1093
template< class , class ...> static false_type __test(...); 
# 1095
}; 
# 1097
template< class _Tp, class ..._Args> 
# 1098
struct __is_nary_constructible_impl : public __do_is_nary_constructible_impl { 
# 1101
typedef __decltype((__test< _Tp, _Args...> (0))) type; 
# 1102
}; 
# 1104
template< class _Tp, class ..._Args> 
# 1105
struct __is_nary_constructible : public __is_nary_constructible_impl< _Tp, _Args...> ::type { 
# 1108
static_assert((sizeof...(_Args) > (1)), "Only useful for > 1 arguments");
# 1110
}; 
# 1112
template< class _Tp, class ..._Args> 
# 1113
struct __is_constructible_impl : public __is_nary_constructible< _Tp, _Args...>  { 
# 1115
}; 
# 1117
template< class _Tp, class _Arg> 
# 1118
struct __is_constructible_impl< _Tp, _Arg>  : public __is_direct_constructible< _Tp, _Arg>  { 
# 1120
}; 
# 1122
template< class _Tp> 
# 1123
struct __is_constructible_impl< _Tp>  : public is_default_constructible< _Tp>  { 
# 1125
}; 
# 1128
template< class _Tp, class ..._Args> 
# 1129
struct is_constructible : public __is_constructible_impl< _Tp, _Args...> ::type { 
# 1131
}; 
# 1133
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 1136
template< class _Tp> 
# 1137
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1138
}; 
# 1140
template< class _Tp> 
# 1141
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 1143
}; 
# 1146
template< class _Tp> 
# 1147
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 1149
}; 
# 1151
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 1154
template< class _Tp> 
# 1155
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 1156
}; 
# 1158
template< class _Tp> 
# 1159
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 1161
}; 
# 1164
template< class _Tp> 
# 1165
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1167
}; 
# 1169
template< class _Tp> 
# 1170
struct __is_nt_default_constructible_atom : public integral_constant< bool, noexcept(_Tp())>  { 
# 1172
}; 
# 1174
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_nt_default_constructible_impl; 
# 1177
template< class _Tp> 
# 1178
struct __is_nt_default_constructible_impl< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_nt_default_constructible_atom< typename remove_all_extents< _Tp> ::type> >  { 
# 1182
}; 
# 1184
template< class _Tp> 
# 1185
struct __is_nt_default_constructible_impl< _Tp, false>  : public __is_nt_default_constructible_atom< _Tp>  { 
# 1187
}; 
# 1190
template< class _Tp> 
# 1191
struct is_nothrow_default_constructible : public __and_< is_default_constructible< _Tp> , __is_nt_default_constructible_impl< _Tp> >  { 
# 1194
}; 
# 1196
template< class _Tp, class ..._Args> 
# 1197
struct __is_nt_constructible_impl : public integral_constant< bool, noexcept((_Tp(declval< _Args> ()...)))>  { 
# 1199
}; 
# 1201
template< class _Tp, class _Arg> 
# 1202
struct __is_nt_constructible_impl< _Tp, _Arg>  : public integral_constant< bool, noexcept((static_cast< _Tp>(declval< _Arg> ())))>  { 
# 1205
}; 
# 1207
template< class _Tp> 
# 1208
struct __is_nt_constructible_impl< _Tp>  : public is_nothrow_default_constructible< _Tp>  { 
# 1210
}; 
# 1213
template< class _Tp, class ..._Args> 
# 1214
struct is_nothrow_constructible : public __and_< is_constructible< _Tp, _Args...> , __is_nt_constructible_impl< _Tp, _Args...> >  { 
# 1217
}; 
# 1219
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1222
template< class _Tp> 
# 1223
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1224
}; 
# 1226
template< class _Tp> 
# 1227
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 1229
}; 
# 1232
template< class _Tp> 
# 1233
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 1235
}; 
# 1237
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1240
template< class _Tp> 
# 1241
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1242
}; 
# 1244
template< class _Tp> 
# 1245
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 1247
}; 
# 1250
template< class _Tp> 
# 1251
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1253
}; 
# 1255
template< class _Tp, class _Up> 
# 1256
class __is_assignable_helper { 
# 1258
template< class _Tp1, class _Up1, class 
# 1259
 = __decltype((declval< _Tp1> () = declval< _Up1> ()))> static true_type 
# 1258
__test(int); 
# 1263
template< class , class > static false_type __test(...); 
# 1268
public: typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 1269
}; 
# 1272
template< class _Tp, class _Up> 
# 1273
struct is_assignable : public __is_assignable_helper< _Tp, _Up> ::type { 
# 1275
}; 
# 1277
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1280
template< class _Tp> 
# 1281
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1282
}; 
# 1284
template< class _Tp> 
# 1285
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1287
}; 
# 1290
template< class _Tp> 
# 1291
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1293
}; 
# 1295
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1298
template< class _Tp> 
# 1299
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1300
}; 
# 1302
template< class _Tp> 
# 1303
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1305
}; 
# 1308
template< class _Tp> 
# 1309
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1311
}; 
# 1313
template< class _Tp, class _Up> 
# 1314
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1316
}; 
# 1319
template< class _Tp, class _Up> 
# 1320
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> >  { 
# 1323
}; 
# 1325
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1328
template< class _Tp> 
# 1329
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1330
}; 
# 1332
template< class _Tp> 
# 1333
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1335
}; 
# 1338
template< class _Tp> 
# 1339
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1341
}; 
# 1343
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1346
template< class _Tp> 
# 1347
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1348
}; 
# 1350
template< class _Tp> 
# 1351
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1353
}; 
# 1356
template< class _Tp> 
# 1357
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1359
}; 
# 1362
template< class _Tp, class ..._Args> 
# 1363
struct is_trivially_constructible : public __and_< is_constructible< _Tp, _Args...> , integral_constant< bool, __is_trivially_constructible(_Tp, _Args...)> >  { 
# 1366
}; 
# 1369
template< class _Tp> 
# 1370
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1372
}; 
# 1374
struct __do_is_implicitly_default_constructible_impl { 
# 1376
template< class _Tp> static void __helper(const _Tp &); 
# 1379
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1383
static false_type __test(...); 
# 1384
}; 
# 1386
template< class _Tp> 
# 1387
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1390
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1391
}; 
# 1393
template< class _Tp> 
# 1394
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1396
}; 
# 1398
template< class _Tp> 
# 1399
struct __is_implicitly_default_constructible : public __and_< is_default_constructible< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1402
}; 
# 1405
template< class _Tp> 
# 1406
struct is_trivially_copy_constructible : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1410
}; 
# 1413
template< class _Tp> 
# 1414
struct is_trivially_move_constructible : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1418
}; 
# 1421
template< class _Tp, class _Up> 
# 1422
struct is_trivially_assignable : public __and_< is_assignable< _Tp, _Up> , integral_constant< bool, __is_trivially_assignable(_Tp, _Up)> >  { 
# 1426
}; 
# 1429
template< class _Tp> 
# 1430
struct is_trivially_copy_assignable : public __and_< is_copy_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, const _Tp &)> >  { 
# 1434
}; 
# 1437
template< class _Tp> 
# 1438
struct is_trivially_move_assignable : public __and_< is_move_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, _Tp &&)> >  { 
# 1442
}; 
# 1445
template< class _Tp> 
# 1446
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , integral_constant< bool, __has_trivial_destructor(_Tp)> >  { 
# 1449
}; 
# 1453
template< class _Tp> 
# 1454
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1456
}; 
# 1462
template< class _Tp> 
# 1463
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1464
}; 
# 1467
template< class > 
# 1468
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1469
}; 
# 1471
template< class _Tp, size_t _Size> 
# 1472
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1473
}; 
# 1475
template< class _Tp> 
# 1476
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1477
}; 
# 1480
template< class , unsigned _Uint> 
# 1481
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1482
}; 
# 1484
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1485
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1489
}; 
# 1491
template< class _Tp, unsigned _Uint> 
# 1492
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1496
}; 
# 1502
template< class , class > 
# 1503
struct is_same : public false_type { 
# 1504
}; 
# 1506
template< class _Tp> 
# 1507
struct is_same< _Tp, _Tp>  : public true_type { 
# 1508
}; 
# 1511
template< class _Base, class _Derived> 
# 1512
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1514
}; 
# 1516
template< class _From, class _To, bool 
# 1517
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1519
struct __is_convertible_helper { 
# 1520
typedef typename is_void< _To> ::type type; }; 
# 1522
template< class _From, class _To> 
# 1523
class __is_convertible_helper< _From, _To, false>  { 
# 1525
template< class _To1> static void __test_aux(_To1); 
# 1528
template< class _From1, class _To1, class 
# 1529
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1528
__test(int); 
# 1533
template< class , class > static false_type __test(...); 
# 1538
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1539
}; 
# 1543
template< class _From, class _To> 
# 1544
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1546
}; 
# 1552
template< class _Tp> 
# 1553
struct remove_const { 
# 1554
typedef _Tp type; }; 
# 1556
template< class _Tp> 
# 1557
struct remove_const< const _Tp>  { 
# 1558
typedef _Tp type; }; 
# 1561
template< class _Tp> 
# 1562
struct remove_volatile { 
# 1563
typedef _Tp type; }; 
# 1565
template< class _Tp> 
# 1566
struct remove_volatile< volatile _Tp>  { 
# 1567
typedef _Tp type; }; 
# 1570
template< class _Tp> 
# 1571
struct remove_cv { 
# 1574
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1575
}; 
# 1578
template< class _Tp> 
# 1579
struct add_const { 
# 1580
typedef const _Tp type; }; 
# 1583
template< class _Tp> 
# 1584
struct add_volatile { 
# 1585
typedef volatile _Tp type; }; 
# 1588
template< class _Tp> 
# 1589
struct add_cv { 
# 1592
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1593
}; 
# 1600
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1604
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1608
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1612
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1616
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1620
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1627
template< class _Tp> 
# 1628
struct remove_reference { 
# 1629
typedef _Tp type; }; 
# 1631
template< class _Tp> 
# 1632
struct remove_reference< _Tp &>  { 
# 1633
typedef _Tp type; }; 
# 1635
template< class _Tp> 
# 1636
struct remove_reference< _Tp &&>  { 
# 1637
typedef _Tp type; }; 
# 1639
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1640
struct __add_lvalue_reference_helper { 
# 1641
typedef _Tp type; }; 
# 1643
template< class _Tp> 
# 1644
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1645
typedef _Tp &type; }; 
# 1648
template< class _Tp> 
# 1649
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1651
}; 
# 1653
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1654
struct __add_rvalue_reference_helper { 
# 1655
typedef _Tp type; }; 
# 1657
template< class _Tp> 
# 1658
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1659
typedef _Tp &&type; }; 
# 1662
template< class _Tp> 
# 1663
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1665
}; 
# 1669
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1673
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1677
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1684
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1687
template< class _Unqualified> 
# 1688
struct __cv_selector< _Unqualified, false, false>  { 
# 1689
typedef _Unqualified __type; }; 
# 1691
template< class _Unqualified> 
# 1692
struct __cv_selector< _Unqualified, false, true>  { 
# 1693
typedef volatile _Unqualified __type; }; 
# 1695
template< class _Unqualified> 
# 1696
struct __cv_selector< _Unqualified, true, false>  { 
# 1697
typedef const _Unqualified __type; }; 
# 1699
template< class _Unqualified> 
# 1700
struct __cv_selector< _Unqualified, true, true>  { 
# 1701
typedef const volatile _Unqualified __type; }; 
# 1703
template< class _Qualified, class _Unqualified, bool 
# 1704
_IsConst = is_const< _Qualified> ::value, bool 
# 1705
_IsVol = is_volatile< _Qualified> ::value> 
# 1706
class __match_cv_qualifiers { 
# 1708
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1711
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1712
}; 
# 1715
template< class _Tp> 
# 1716
struct __make_unsigned { 
# 1717
typedef _Tp __type; }; 
# 1720
template<> struct __make_unsigned< char>  { 
# 1721
typedef unsigned char __type; }; 
# 1724
template<> struct __make_unsigned< signed char>  { 
# 1725
typedef unsigned char __type; }; 
# 1728
template<> struct __make_unsigned< short>  { 
# 1729
typedef unsigned short __type; }; 
# 1732
template<> struct __make_unsigned< int>  { 
# 1733
typedef unsigned __type; }; 
# 1736
template<> struct __make_unsigned< long>  { 
# 1737
typedef unsigned long __type; }; 
# 1740
template<> struct __make_unsigned< long long>  { 
# 1741
typedef unsigned long long __type; }; 
# 1745
template<> struct __make_unsigned< wchar_t>  : public std::__make_unsigned< int>  { 
# 1746
}; 
# 1771 "/usr/include/c++/7/type_traits" 3
template< class _Tp, bool 
# 1772
_IsInt = is_integral< _Tp> ::value, bool 
# 1773
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1776
template< class _Tp> 
# 1777
class __make_unsigned_selector< _Tp, true, false>  { 
# 1779
typedef __make_unsigned< typename remove_cv< _Tp> ::type>  __unsignedt; 
# 1780
typedef typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type __unsigned_type; 
# 1781
typedef __match_cv_qualifiers< _Tp, __unsigned_type>  __cv_unsigned; 
# 1784
public: typedef typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type __type; 
# 1785
}; 
# 1787
template< class _Tp> 
# 1788
class __make_unsigned_selector< _Tp, false, true>  { 
# 1791
typedef unsigned char __smallest; 
# 1792
static const bool __b0 = (sizeof(_Tp) <= sizeof(__smallest)); 
# 1793
static const bool __b1 = (sizeof(_Tp) <= sizeof(unsigned short)); 
# 1794
static const bool __b2 = (sizeof(_Tp) <= sizeof(unsigned)); 
# 1795
static const bool __b3 = (sizeof(_Tp) <= sizeof(unsigned long)); 
# 1796
typedef conditional< __b3, unsigned long, unsigned long long>  __cond3; 
# 1797
typedef typename conditional< __b3, unsigned long, unsigned long long> ::type __cond3_type; 
# 1798
typedef conditional< __b2, unsigned, __cond3_type>  __cond2; 
# 1799
typedef typename conditional< __b2, unsigned, __cond3_type> ::type __cond2_type; 
# 1800
typedef conditional< __b1, unsigned short, __cond2_type>  __cond1; 
# 1801
typedef typename conditional< __b1, unsigned short, __cond2_type> ::type __cond1_type; 
# 1804
typedef typename conditional< __b0, unsigned char, __cond1_type> ::type __unsigned_type; 
# 1805
typedef __match_cv_qualifiers< _Tp, __unsigned_type>  __cv_unsigned; 
# 1808
public: typedef typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type __type; 
# 1809
}; 
# 1815
template< class _Tp> 
# 1816
struct make_unsigned { 
# 1817
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1821
template<> struct make_unsigned< bool> ; 
# 1825
template< class _Tp> 
# 1826
struct __make_signed { 
# 1827
typedef _Tp __type; }; 
# 1830
template<> struct __make_signed< char>  { 
# 1831
typedef signed char __type; }; 
# 1834
template<> struct __make_signed< unsigned char>  { 
# 1835
typedef signed char __type; }; 
# 1838
template<> struct __make_signed< unsigned short>  { 
# 1839
typedef signed short __type; }; 
# 1842
template<> struct __make_signed< unsigned>  { 
# 1843
typedef signed int __type; }; 
# 1846
template<> struct __make_signed< unsigned long>  { 
# 1847
typedef signed long __type; }; 
# 1850
template<> struct __make_signed< unsigned long long>  { 
# 1851
typedef signed long long __type; }; 
# 1861 "/usr/include/c++/7/type_traits" 3
template<> struct __make_signed< char16_t>  : public std::__make_signed< unsigned short>  { 
# 1862
}; 
# 1864
template<> struct __make_signed< char32_t>  : public std::__make_signed< unsigned>  { 
# 1865
}; 
# 1890 "/usr/include/c++/7/type_traits" 3
template< class _Tp, bool 
# 1891
_IsInt = is_integral< _Tp> ::value, bool 
# 1892
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1895
template< class _Tp> 
# 1896
class __make_signed_selector< _Tp, true, false>  { 
# 1898
typedef __make_signed< typename remove_cv< _Tp> ::type>  __signedt; 
# 1899
typedef typename __make_signed< typename remove_cv< _Tp> ::type> ::__type __signed_type; 
# 1900
typedef __match_cv_qualifiers< _Tp, __signed_type>  __cv_signed; 
# 1903
public: typedef typename __match_cv_qualifiers< _Tp, __signed_type> ::__type __type; 
# 1904
}; 
# 1906
template< class _Tp> 
# 1907
class __make_signed_selector< _Tp, false, true>  { 
# 1909
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1912
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1913
}; 
# 1919
template< class _Tp> 
# 1920
struct make_signed { 
# 1921
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1925
template<> struct make_signed< bool> ; 
# 1929
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1933
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1940
template< class _Tp> 
# 1941
struct remove_extent { 
# 1942
typedef _Tp type; }; 
# 1944
template< class _Tp, size_t _Size> 
# 1945
struct remove_extent< _Tp [_Size]>  { 
# 1946
typedef _Tp type; }; 
# 1948
template< class _Tp> 
# 1949
struct remove_extent< _Tp []>  { 
# 1950
typedef _Tp type; }; 
# 1953
template< class _Tp> 
# 1954
struct remove_all_extents { 
# 1955
typedef _Tp type; }; 
# 1957
template< class _Tp, size_t _Size> 
# 1958
struct remove_all_extents< _Tp [_Size]>  { 
# 1959
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1961
template< class _Tp> 
# 1962
struct remove_all_extents< _Tp []>  { 
# 1963
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1967
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1971
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1977
template< class _Tp, class > 
# 1978
struct __remove_pointer_helper { 
# 1979
typedef _Tp type; }; 
# 1981
template< class _Tp, class _Up> 
# 1982
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1983
typedef _Up type; }; 
# 1986
template< class _Tp> 
# 1987
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1989
}; 
# 1992
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1994
struct __add_pointer_helper { 
# 1995
typedef _Tp type; }; 
# 1997
template< class _Tp> 
# 1998
struct __add_pointer_helper< _Tp, true>  { 
# 1999
typedef typename remove_reference< _Tp> ::type *type; }; 
# 2001
template< class _Tp> 
# 2002
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 2004
}; 
# 2008
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 2012
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 2016
template< size_t _Len> 
# 2017
struct __aligned_storage_msa { 
# 2019
union __type { 
# 2021
unsigned char __data[_Len]; 
# 2022
struct __attribute((__aligned__)) { } __align; 
# 2023
}; 
# 2024
}; 
# 2036 "/usr/include/c++/7/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 2038
struct aligned_storage { 
# 2040
union type { 
# 2042
unsigned char __data[_Len]; 
# 2043
struct __attribute((__aligned__(_Align))) { } __align; 
# 2044
}; 
# 2045
}; 
# 2047
template< class ..._Types> 
# 2048
struct __strictest_alignment { 
# 2050
static const size_t _S_alignment = (0); 
# 2051
static const size_t _S_size = (0); 
# 2052
}; 
# 2054
template< class _Tp, class ..._Types> 
# 2055
struct __strictest_alignment< _Tp, _Types...>  { 
# 2057
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2060
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2063
}; 
# 2075 "/usr/include/c++/7/type_traits" 3
template< size_t _Len, class ..._Types> 
# 2076
struct aligned_union { 
# 2079
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2081
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2082
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2086
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2088
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2089
}; 
# 2091
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 2096
template< class _Up, bool 
# 2097
_IsArray = is_array< _Up> ::value, bool 
# 2098
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2102
template< class _Up> 
# 2103
struct __decay_selector< _Up, false, false>  { 
# 2104
typedef typename remove_cv< _Up> ::type __type; }; 
# 2106
template< class _Up> 
# 2107
struct __decay_selector< _Up, true, false>  { 
# 2108
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2110
template< class _Up> 
# 2111
struct __decay_selector< _Up, false, true>  { 
# 2112
typedef typename add_pointer< _Up> ::type __type; }; 
# 2115
template< class _Tp> 
# 2116
class decay { 
# 2118
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2121
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2122
}; 
# 2124
template< class _Tp> class reference_wrapper; 
# 2128
template< class _Tp> 
# 2129
struct __strip_reference_wrapper { 
# 2131
typedef _Tp __type; 
# 2132
}; 
# 2134
template< class _Tp> 
# 2135
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2137
typedef _Tp &__type; 
# 2138
}; 
# 2140
template< class _Tp> 
# 2141
struct __decay_and_strip { 
# 2144
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 2145
}; 
# 2150
template< bool , class _Tp = void> 
# 2151
struct enable_if { 
# 2152
}; 
# 2155
template< class _Tp> 
# 2156
struct enable_if< true, _Tp>  { 
# 2157
typedef _Tp type; }; 
# 2159
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 2164
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2165
struct conditional { 
# 2166
typedef _Iftrue type; }; 
# 2169
template< class _Iftrue, class _Iffalse> 
# 2170
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2171
typedef _Iffalse type; }; 
# 2174
template< class ..._Tp> struct common_type; 
# 2179
struct __do_common_type_impl { 
# 2181
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 2186
template< class , class > static __failure_type _S_test(...); 
# 2188
}; 
# 2190
template< class _Tp, class _Up> 
# 2191
struct __common_type_impl : private __do_common_type_impl { 
# 2194
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 2195
}; 
# 2197
struct __do_member_type_wrapper { 
# 2199
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 2202
template< class > static __failure_type _S_test(...); 
# 2204
}; 
# 2206
template< class _Tp> 
# 2207
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 2210
typedef __decltype((_S_test< _Tp> (0))) type; 
# 2211
}; 
# 2213
template< class _CTp, class ..._Args> 
# 2214
struct __expanded_common_type_wrapper { 
# 2216
typedef common_type< typename _CTp::type, _Args...>  type; 
# 2217
}; 
# 2219
template< class ..._Args> 
# 2220
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 2221
typedef __failure_type type; }; 
# 2223
template< class _Tp> 
# 2224
struct common_type< _Tp>  { 
# 2225
typedef typename decay< _Tp> ::type type; }; 
# 2227
template< class _Tp, class _Up> 
# 2228
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 2230
}; 
# 2232
template< class _Tp, class _Up, class ..._Vp> 
# 2233
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2236
}; 
# 2239
template< class _Tp> 
# 2240
struct underlying_type { 
# 2242
typedef __underlying_type(_Tp) type; 
# 2243
}; 
# 2245
template< class _Tp> 
# 2246
struct __declval_protector { 
# 2248
static const bool __stop = false; 
# 2249
static typename add_rvalue_reference< _Tp> ::type __delegate(); 
# 2250
}; 
# 2252
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type 
# 2254
declval() noexcept 
# 2255
{ 
# 2256
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2258
return __declval_protector< _Tp> ::__delegate(); 
# 2259
} 
# 2262
template< class _Signature> class result_of; 
# 2269
struct __invoke_memfun_ref { }; 
# 2270
struct __invoke_memfun_deref { }; 
# 2271
struct __invoke_memobj_ref { }; 
# 2272
struct __invoke_memobj_deref { }; 
# 2273
struct __invoke_other { }; 
# 2276
template< class _Tp, class _Tag> 
# 2277
struct __result_of_success : public __success_type< _Tp>  { 
# 2278
using __invoke_type = _Tag; }; 
# 2281
struct __result_of_memfun_ref_impl { 
# 2283
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2288
template< class ...> static __failure_type _S_test(...); 
# 2290
}; 
# 2292
template< class _MemPtr, class _Arg, class ..._Args> 
# 2293
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2296
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2297
}; 
# 2300
struct __result_of_memfun_deref_impl { 
# 2302
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2307
template< class ...> static __failure_type _S_test(...); 
# 2309
}; 
# 2311
template< class _MemPtr, class _Arg, class ..._Args> 
# 2312
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2315
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2316
}; 
# 2319
struct __result_of_memobj_ref_impl { 
# 2321
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2326
template< class , class > static __failure_type _S_test(...); 
# 2328
}; 
# 2330
template< class _MemPtr, class _Arg> 
# 2331
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2334
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2335
}; 
# 2338
struct __result_of_memobj_deref_impl { 
# 2340
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2345
template< class , class > static __failure_type _S_test(...); 
# 2347
}; 
# 2349
template< class _MemPtr, class _Arg> 
# 2350
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2353
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2354
}; 
# 2356
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2359
template< class _Res, class _Class, class _Arg> 
# 2360
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2363
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2364
typedef _Res (_Class::*_MemPtr); 
# 2369
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2370
}; 
# 2372
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2375
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2376
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2379
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2380
typedef _Res (_Class::*_MemPtr); 
# 2385
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2386
}; 
# 2393
template< class _Tp, class _Up = typename decay< _Tp> ::type> 
# 2394
struct __inv_unwrap { 
# 2396
using type = _Tp; 
# 2397
}; 
# 2399
template< class _Tp, class _Up> 
# 2400
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2402
using type = _Up &; 
# 2403
}; 
# 2405
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2406
struct __result_of_impl { 
# 2408
typedef __failure_type type; 
# 2409
}; 
# 2411
template< class _MemPtr, class _Arg> 
# 2412
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type>  { 
# 2415
}; 
# 2417
template< class _MemPtr, class _Arg, class ..._Args> 
# 2418
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2421
}; 
# 2424
struct __result_of_other_impl { 
# 2426
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2431
template< class ...> static __failure_type _S_test(...); 
# 2433
}; 
# 2435
template< class _Functor, class ..._ArgTypes> 
# 2436
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2439
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2440
}; 
# 2443
template< class _Functor, class ..._ArgTypes> 
# 2444
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2454
}; 
# 2456
template< class _Functor, class ..._ArgTypes> 
# 2457
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2459
}; 
# 2463
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2467
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2471
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2475
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2479
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2483
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2487
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2491
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2496
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2500
template< class ...> using __void_t = void; 
# 2509 "/usr/include/c++/7/type_traits" 3
template< class _Default, class _AlwaysVoid, 
# 2510
template< class ...>  class _Op, class ..._Args> 
# 2511
struct __detector { 
# 2513
using value_t = false_type; 
# 2514
using type = _Default; 
# 2515
}; 
# 2518
template< class _Default, template< class ...>  class _Op, class ...
# 2519
_Args> 
# 2520
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2522
using value_t = true_type; 
# 2523
using type = _Op< _Args...> ; 
# 2524
}; 
# 2527
template< class _Default, template< class ...>  class _Op, class ...
# 2528
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2532
template< class _Default, template< class ...>  class _Op, class ...
# 2533
_Args> using __detected_or_t = typename __detector< _Default, void, _Op, _Args...> ::type; 
# 2553 "/usr/include/c++/7/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2556
template< class _Tp> struct __is_nothrow_swappable; 
# 2559
template< class ..._Elements> class tuple; 
# 2562
template< class > 
# 2563
struct __is_tuple_like_impl : public false_type { 
# 2564
}; 
# 2566
template< class ..._Tps> 
# 2567
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2568
}; 
# 2571
template< class _Tp> 
# 2572
struct __is_tuple_like : public __is_tuple_like_impl< typename remove_cv< typename remove_reference< _Tp> ::type> ::type> ::type { 
# 2575
}; 
# 2577
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2586
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2592
namespace __swappable_details { 
# 2593
using std::swap;
# 2595
struct __do_is_swappable_impl { 
# 2597
template< class _Tp, class 
# 2598
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2597
__test(int); 
# 2601
template< class > static false_type __test(...); 
# 2603
}; 
# 2605
struct __do_is_nothrow_swappable_impl { 
# 2607
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2612
template< class > static false_type __test(...); 
# 2614
}; 
# 2616
}
# 2618
template< class _Tp> 
# 2619
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2622
typedef __decltype((__test< _Tp> (0))) type; 
# 2623
}; 
# 2625
template< class _Tp> 
# 2626
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2629
typedef __decltype((__test< _Tp> (0))) type; 
# 2630
}; 
# 2632
template< class _Tp> 
# 2633
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2635
}; 
# 2637
template< class _Tp> 
# 2638
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2640
}; 
# 2758 "/usr/include/c++/7/type_traits" 3
template< class _Result, class _Ret, class  = void> 
# 2759
struct __is_invocable_impl : public false_type { }; 
# 2761
template< class _Result, class _Ret> 
# 2762
struct __is_invocable_impl< _Result, _Ret, __void_t< typename _Result::type> >  : public __or_< is_void< _Ret> , is_convertible< typename _Result::type, _Ret> > ::type { 
# 2764
}; 
# 2766
template< class _Fn, class ..._ArgTypes> 
# 2767
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2769
}; 
# 2771
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2772
__call_is_nt(__invoke_memfun_ref) 
# 2773
{ 
# 2774
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2775
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2777
} 
# 2779
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2780
__call_is_nt(__invoke_memfun_deref) 
# 2781
{ 
# 2782
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2784
} 
# 2786
template< class _Fn, class _Tp> constexpr bool 
# 2787
__call_is_nt(__invoke_memobj_ref) 
# 2788
{ 
# 2789
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2790
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2791
} 
# 2793
template< class _Fn, class _Tp> constexpr bool 
# 2794
__call_is_nt(__invoke_memobj_deref) 
# 2795
{ 
# 2796
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2797
} 
# 2799
template< class _Fn, class ..._Args> constexpr bool 
# 2800
__call_is_nt(__invoke_other) 
# 2801
{ 
# 2802
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2803
} 
# 2805
template< class _Result, class _Fn, class ..._Args> 
# 2806
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2810
}; 
# 2812
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2817
template< class _Fn, class ..._Args> 
# 2818
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2821
}; 
# 2823
struct __nonesuch { 
# 2824
__nonesuch() = delete;
# 2825
~__nonesuch() = delete;
# 2826
__nonesuch(const __nonesuch &) = delete;
# 2827
void operator=(const __nonesuch &) = delete;
# 2828
}; 
# 3109 "/usr/include/c++/7/type_traits" 3
}
# 56 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> constexpr _Tp &&
# 73
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 74
{ return static_cast< _Tp &&>(__t); } 
# 82
template< class _Tp> constexpr _Tp &&
# 84
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 85
{ 
# 86
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 88
return static_cast< _Tp &&>(__t); 
# 89
} 
# 96
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 98
move(_Tp &&__t) noexcept 
# 99
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 102
template< class _Tp> 
# 103
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 105
}; 
# 115 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 118
move_if_noexcept(_Tp &__x) noexcept 
# 119
{ return std::move(__x); } 
# 135 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> inline _Tp *
# 137
addressof(_Tp &__r) noexcept 
# 138
{ return std::__addressof(__r); } 
# 142
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 146
template< class _Tp, class _Up = _Tp> inline _Tp 
# 148
__exchange(_Tp &__obj, _Up &&__new_val) 
# 149
{ 
# 150
_Tp __old_val = std::move(__obj); 
# 151
__obj = std::forward< _Up> (__new_val); 
# 152
return __old_val; 
# 153
} 
# 157
}
# 166 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 181 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 187
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 194
{ 
# 198
_Tp __tmp = std::move(__a); 
# 199
__a = std::move(__b); 
# 200
__b = std::move(__tmp); 
# 201
} 
# 206
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 210
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 216
{ 
# 217
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 218
swap(__a[__n], __b[__n]); }  
# 219
} 
# 223
}
# 63 "/usr/include/c++/7/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 105
struct unary_function { 
# 108
typedef _Arg argument_type; 
# 111
typedef _Result result_type; 
# 112
}; 
# 117
template< class _Arg1, class _Arg2, class _Result> 
# 118
struct binary_function { 
# 121
typedef _Arg1 first_argument_type; 
# 124
typedef _Arg2 second_argument_type; 
# 127
typedef _Result result_type; 
# 128
}; 
# 144 "/usr/include/c++/7/bits/stl_function.h" 3
struct __is_transparent; 
# 146
template< class _Tp = void> struct plus; 
# 149
template< class _Tp = void> struct minus; 
# 152
template< class _Tp = void> struct multiplies; 
# 155
template< class _Tp = void> struct divides; 
# 158
template< class _Tp = void> struct modulus; 
# 161
template< class _Tp = void> struct negate; 
# 166
template< class _Tp> 
# 167
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 171
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 172
{ return __x + __y; } 
# 173
}; 
# 176
template< class _Tp> 
# 177
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 181
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 182
{ return __x - __y; } 
# 183
}; 
# 186
template< class _Tp> 
# 187
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 191
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 192
{ return __x * __y; } 
# 193
}; 
# 196
template< class _Tp> 
# 197
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 201
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 202
{ return __x / __y; } 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 211
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 212
{ return __x % __y; } 
# 213
}; 
# 216
template< class _Tp> 
# 217
struct negate : public unary_function< _Tp, _Tp>  { 
# 221
constexpr _Tp operator()(const _Tp &__x) const 
# 222
{ return -__x; } 
# 223
}; 
# 230
template<> struct plus< void>  { 
# 232
template< class _Tp, class _Up> constexpr auto 
# 235
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 238
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 240
typedef __is_transparent is_transparent; 
# 241
}; 
# 245
template<> struct minus< void>  { 
# 247
template< class _Tp, class _Up> constexpr auto 
# 250
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 253
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 255
typedef __is_transparent is_transparent; 
# 256
}; 
# 260
template<> struct multiplies< void>  { 
# 262
template< class _Tp, class _Up> constexpr auto 
# 265
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 268
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 270
typedef __is_transparent is_transparent; 
# 271
}; 
# 275
template<> struct divides< void>  { 
# 277
template< class _Tp, class _Up> constexpr auto 
# 280
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 283
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 285
typedef __is_transparent is_transparent; 
# 286
}; 
# 290
template<> struct modulus< void>  { 
# 292
template< class _Tp, class _Up> constexpr auto 
# 295
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 298
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 300
typedef __is_transparent is_transparent; 
# 301
}; 
# 305
template<> struct negate< void>  { 
# 307
template< class _Tp> constexpr auto 
# 310
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 313
{ return -std::forward< _Tp> (__t); } 
# 315
typedef __is_transparent is_transparent; 
# 316
}; 
# 330 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 333
template< class _Tp = void> struct not_equal_to; 
# 336
template< class _Tp = void> struct greater; 
# 339
template< class _Tp = void> struct less; 
# 342
template< class _Tp = void> struct greater_equal; 
# 345
template< class _Tp = void> struct less_equal; 
# 350
template< class _Tp> 
# 351
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 355
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 356
{ return __x == __y; } 
# 357
}; 
# 360
template< class _Tp> 
# 361
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 365
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 366
{ return __x != __y; } 
# 367
}; 
# 370
template< class _Tp> 
# 371
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 375
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 376
{ return __x > __y; } 
# 377
}; 
# 380
template< class _Tp> 
# 381
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 385
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 386
{ return __x < __y; } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 395
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 396
{ return __x >= __y; } 
# 397
}; 
# 400
template< class _Tp> 
# 401
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 405
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 406
{ return __x <= __y; } 
# 407
}; 
# 412
template<> struct equal_to< void>  { 
# 414
template< class _Tp, class _Up> constexpr auto 
# 417
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 420
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 422
typedef __is_transparent is_transparent; 
# 423
}; 
# 427
template<> struct not_equal_to< void>  { 
# 429
template< class _Tp, class _Up> constexpr auto 
# 432
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 435
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 437
typedef __is_transparent is_transparent; 
# 438
}; 
# 442
template<> struct greater< void>  { 
# 444
template< class _Tp, class _Up> constexpr auto 
# 447
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 450
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 452
typedef __is_transparent is_transparent; 
# 453
}; 
# 457
template<> struct less< void>  { 
# 459
template< class _Tp, class _Up> constexpr auto 
# 462
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 465
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 467
typedef __is_transparent is_transparent; 
# 468
}; 
# 472
template<> struct greater_equal< void>  { 
# 474
template< class _Tp, class _Up> constexpr auto 
# 477
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 480
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 482
typedef __is_transparent is_transparent; 
# 483
}; 
# 487
template<> struct less_equal< void>  { 
# 489
template< class _Tp, class _Up> constexpr auto 
# 492
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 495
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 497
typedef __is_transparent is_transparent; 
# 498
}; 
# 512 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 515
template< class _Tp = void> struct logical_or; 
# 518
template< class _Tp = void> struct logical_not; 
# 523
template< class _Tp> 
# 524
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 528
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 529
{ return __x && __y; } 
# 530
}; 
# 533
template< class _Tp> 
# 534
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 538
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 539
{ return __x || __y; } 
# 540
}; 
# 543
template< class _Tp> 
# 544
struct logical_not : public unary_function< _Tp, bool>  { 
# 548
constexpr bool operator()(const _Tp &__x) const 
# 549
{ return !__x; } 
# 550
}; 
# 555
template<> struct logical_and< void>  { 
# 557
template< class _Tp, class _Up> constexpr auto 
# 560
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 563
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 565
typedef __is_transparent is_transparent; 
# 566
}; 
# 570
template<> struct logical_or< void>  { 
# 572
template< class _Tp, class _Up> constexpr auto 
# 575
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 578
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 580
typedef __is_transparent is_transparent; 
# 581
}; 
# 585
template<> struct logical_not< void>  { 
# 587
template< class _Tp> constexpr auto 
# 590
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 593
{ return !std::forward< _Tp> (__t); } 
# 595
typedef __is_transparent is_transparent; 
# 596
}; 
# 601
template< class _Tp = void> struct bit_and; 
# 604
template< class _Tp = void> struct bit_or; 
# 607
template< class _Tp = void> struct bit_xor; 
# 610
template< class _Tp = void> struct bit_not; 
# 616
template< class _Tp> 
# 617
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 621
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 622
{ return __x & __y; } 
# 623
}; 
# 625
template< class _Tp> 
# 626
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 630
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 631
{ return __x | __y; } 
# 632
}; 
# 634
template< class _Tp> 
# 635
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 639
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 640
{ return __x ^ __y; } 
# 641
}; 
# 643
template< class _Tp> 
# 644
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 648
constexpr _Tp operator()(const _Tp &__x) const 
# 649
{ return ~__x; } 
# 650
}; 
# 654
template<> struct bit_and< void>  { 
# 656
template< class _Tp, class _Up> constexpr auto 
# 659
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 662
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 664
typedef __is_transparent is_transparent; 
# 665
}; 
# 668
template<> struct bit_or< void>  { 
# 670
template< class _Tp, class _Up> constexpr auto 
# 673
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 676
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 678
typedef __is_transparent is_transparent; 
# 679
}; 
# 682
template<> struct bit_xor< void>  { 
# 684
template< class _Tp, class _Up> constexpr auto 
# 687
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 690
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 692
typedef __is_transparent is_transparent; 
# 693
}; 
# 696
template<> struct bit_not< void>  { 
# 698
template< class _Tp> constexpr auto 
# 701
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 704
{ return ~std::forward< _Tp> (__t); } 
# 706
typedef __is_transparent is_transparent; 
# 707
}; 
# 740 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Predicate> 
# 741
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 745
protected: _Predicate _M_pred; 
# 750
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 754
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 755
{ return !(_M_pred)(__x); } 
# 756
}; 
# 759
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 762
not1(const _Predicate &__pred) 
# 763
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 766
template< class _Predicate> 
# 767
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 772
protected: _Predicate _M_pred; 
# 777
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 781
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 782
__y) const 
# 783
{ return !(_M_pred)(__x, __y); } 
# 784
}; 
# 787
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 790
not2(const _Predicate &__pred) 
# 791
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 817 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 818
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 821
protected: _Result (*_M_ptr)(_Arg); 
# 824
public: pointer_to_unary_function() { } 
# 827
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 828
{ } 
# 831
_Result operator()(_Arg __x) const 
# 832
{ return (_M_ptr)(__x); } 
# 833
}; 
# 836
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 838
ptr_fun(_Result (*__x)(_Arg)) 
# 839
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 842
template< class _Arg1, class _Arg2, class _Result> 
# 843
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 847
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 850
public: pointer_to_binary_function() { } 
# 853
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 854
{ } 
# 857
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 858
{ return (_M_ptr)(__x, __y); } 
# 859
}; 
# 862
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 864
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 865
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 868
template< class _Tp> 
# 869
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 873
_Tp &operator()(_Tp &__x) const 
# 874
{ return __x; } 
# 877
const _Tp &operator()(const _Tp &__x) const 
# 878
{ return __x; } 
# 879
}; 
# 881
template< class _Pair> 
# 882
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 886
typename _Pair::first_type &operator()(_Pair &__x) const 
# 887
{ return __x.first; } 
# 890
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 891
{ return __x.first; } 
# 894
template< class _Pair2> typename _Pair2::first_type &
# 896
operator()(_Pair2 &__x) const 
# 897
{ return __x.first; } 
# 899
template< class _Pair2> const typename _Pair2::first_type &
# 901
operator()(const _Pair2 &__x) const 
# 902
{ return __x.first; } 
# 904
}; 
# 906
template< class _Pair> 
# 907
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 911
typename _Pair::second_type &operator()(_Pair &__x) const 
# 912
{ return __x.second; } 
# 915
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 916
{ return __x.second; } 
# 917
}; 
# 937 "/usr/include/c++/7/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 938
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 942
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 943
{ } 
# 946
_Ret operator()(_Tp *__p) const 
# 947
{ return (__p->*(_M_f))(); } 
# 950
private: _Ret (_Tp::*_M_f)(void); 
# 951
}; 
# 955
template< class _Ret, class _Tp> 
# 956
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 960
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 961
{ } 
# 964
_Ret operator()(const _Tp *__p) const 
# 965
{ return (__p->*(_M_f))(); } 
# 968
private: _Ret (_Tp::*_M_f)(void) const; 
# 969
}; 
# 973
template< class _Ret, class _Tp> 
# 974
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 978
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 979
{ } 
# 982
_Ret operator()(_Tp &__r) const 
# 983
{ return (__r.*(_M_f))(); } 
# 986
private: _Ret (_Tp::*_M_f)(void); 
# 987
}; 
# 991
template< class _Ret, class _Tp> 
# 992
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 996
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 997
{ } 
# 1000
_Ret operator()(const _Tp &__r) const 
# 1001
{ return (__r.*(_M_f))(); } 
# 1004
private: _Ret (_Tp::*_M_f)(void) const; 
# 1005
}; 
# 1009
template< class _Ret, class _Tp, class _Arg> 
# 1010
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1014
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1015
{ } 
# 1018
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1019
{ return (__p->*(_M_f))(__x); } 
# 1022
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1023
}; 
# 1027
template< class _Ret, class _Tp, class _Arg> 
# 1028
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1032
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1033
{ } 
# 1036
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1037
{ return (__p->*(_M_f))(__x); } 
# 1040
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1041
}; 
# 1045
template< class _Ret, class _Tp, class _Arg> 
# 1046
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1050
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1051
{ } 
# 1054
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1055
{ return (__r.*(_M_f))(__x); } 
# 1058
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1059
}; 
# 1063
template< class _Ret, class _Tp, class _Arg> 
# 1064
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1068
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1069
{ } 
# 1072
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1073
{ return (__r.*(_M_f))(__x); } 
# 1076
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1077
}; 
# 1081
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1083
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1084
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1086
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1088
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1089
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1091
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1093
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1094
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1096
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1098
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1099
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1101
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1103
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1104
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1106
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1108
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1109
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1111
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1113
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1114
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1116
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1118
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1119
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1124
}
# 60 "/usr/include/c++/7/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/7/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__)); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__)); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 35 "/usr/include/c++/7/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/7/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 60 "/usr/include/c++/7/bits/exception.h" 3
class exception { 
# 63
public: exception() noexcept { } 
# 64
virtual ~exception() noexcept; 
# 69
virtual const char *what() const noexcept; 
# 70
}; 
# 72
}
# 74
}
# 76
#pragma GCC visibility pop
# 40 "/usr/include/c++/7/exception" 3
extern "C++" {
# 42
namespace std { 
# 46
class bad_exception : public exception { 
# 49
public: bad_exception() noexcept { } 
# 53
virtual ~bad_exception() noexcept; 
# 57
virtual const char *what() const noexcept; 
# 58
}; 
# 61
typedef void (*terminate_handler)(void); 
# 64
typedef void (*unexpected_handler)(void); 
# 67
terminate_handler set_terminate(terminate_handler) noexcept; 
# 71
terminate_handler get_terminate() noexcept; 
# 76
void terminate() noexcept __attribute((__noreturn__)); 
# 79
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 83
unexpected_handler get_unexpected() noexcept; 
# 88
void unexpected() __attribute((__noreturn__)); 
# 101 "/usr/include/c++/7/exception" 3
bool uncaught_exception() noexcept __attribute((__pure__)); 
# 110 "/usr/include/c++/7/exception" 3
}
# 112
namespace __gnu_cxx { 
# 132 "/usr/include/c++/7/exception" 3
void __verbose_terminate_handler(); 
# 135
}
# 137
}
# 139
#pragma GCC visibility pop
# 34 "/usr/include/c++/7/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(::size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/7/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/7/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/7/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/7/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return (((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0))); 
# 125
} 
# 136 "/usr/include/c++/7/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 137
{ return !this->operator==(__arg); } 
# 140
size_t hash_code() const noexcept 
# 141
{ 
# 143
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 148
} 
# 152
virtual bool __is_pointer_p() const; 
# 155
virtual bool __is_function_p() const; 
# 163
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 167
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 171
protected: const char *__name; 
# 173
explicit type_info(const char *__n) : __name(__n) { } 
# 177
private: type_info &operator=(const type_info &); 
# 178
type_info(const type_info &); 
# 179
}; 
# 187
class bad_cast : public exception { 
# 190
public: bad_cast() noexcept { } 
# 194
virtual ~bad_cast() noexcept; 
# 197
virtual const char *what() const noexcept; 
# 198
}; 
# 204
class bad_typeid : public exception { 
# 207
public: bad_typeid() noexcept { } 
# 211
virtual ~bad_typeid() noexcept; 
# 214
virtual const char *what() const noexcept; 
# 215
}; 
# 216
}
# 218
}
# 220
#pragma GCC visibility pop
# 42 "/usr/include/c++/7/bits/exception_ptr.h" 3
extern "C++" {
# 44
namespace std { 
# 46
class type_info; 
# 52
namespace __exception_ptr { 
# 54
class exception_ptr; 
# 55
}
# 57
using __exception_ptr::exception_ptr;
# 63
__exception_ptr::exception_ptr current_exception() noexcept; 
# 65
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 69
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 71
namespace __exception_ptr { 
# 73
using std::rethrow_exception;
# 79
class exception_ptr { 
# 81
void *_M_exception_object; 
# 83
explicit exception_ptr(void * __e) noexcept; 
# 85
void _M_addref() noexcept; 
# 86
void _M_release() noexcept; 
# 88
void *_M_get() const noexcept __attribute((__pure__)); 
# 90
friend exception_ptr std::current_exception() noexcept; 
# 91
friend void std::rethrow_exception(exception_ptr); 
# 92
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 96
public: exception_ptr() noexcept; 
# 98
exception_ptr(const exception_ptr &) noexcept; 
# 101
exception_ptr(nullptr_t) noexcept : _M_exception_object((0)) 
# 103
{ } 
# 105
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 107
{ (__o._M_exception_object) = (0); } 
# 118 "/usr/include/c++/7/bits/exception_ptr.h" 3
exception_ptr &operator=(const exception_ptr &) noexcept; 
# 122
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 123
{ 
# 124
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 125
return *this; 
# 126
} 
# 129
~exception_ptr() noexcept; 
# 132
void swap(exception_ptr &) noexcept; 
# 144 "/usr/include/c++/7/bits/exception_ptr.h" 3
explicit operator bool() const 
# 145
{ return _M_exception_object; } 
# 149
friend bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 150
 __attribute((__pure__)); 
# 153
const type_info *__cxa_exception_type() const noexcept
# 154
 __attribute((__pure__)); 
# 155
}; 
# 158
bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 159
 __attribute((__pure__)); 
# 162
bool operator!=(const exception_ptr &, const exception_ptr &) noexcept
# 163
 __attribute((__pure__)); 
# 166
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 167
{ __lhs.swap(__rhs); } 
# 169
template< class _Ex> inline void 
# 171
__dest_thunk(void *__x) 
# 172
{ (static_cast< _Ex *>(__x))->~_Ex(); } 
# 174
}
# 177
template< class _Ex> __exception_ptr::exception_ptr 
# 179
make_exception_ptr(_Ex __ex) noexcept 
# 180
{ 
# 182
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 183
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(__ex)), __exception_ptr::__dest_thunk< _Ex> ); 
# 186
try 
# 187
{ 
# 188
::new (__e) _Ex(__ex); 
# 189
return ((__exception_ptr::exception_ptr)(__e)); 
# 190
} 
# 191
catch (...) 
# 192
{ 
# 193
__cxxabiv1::__cxa_free_exception(__e); 
# 194
return current_exception(); 
# 195
}  
# 208 "/usr/include/c++/7/bits/exception_ptr.h" 3
} 
# 214
template< class _Ex> __exception_ptr::exception_ptr copy_exception(_Ex __ex) noexcept
# 216
 __attribute((__deprecated__)); 
# 218
template< class _Ex> __exception_ptr::exception_ptr 
# 220
copy_exception(_Ex __ex) noexcept 
# 221
{ return std::make_exception_ptr< _Ex> (__ex); } 
# 224
}
# 226
}
# 228
#pragma GCC visibility pop
# 33 "/usr/include/c++/7/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/7/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 79
template< class _Except> 
# 80
struct _Nested_exception : public _Except, public nested_exception { 
# 82
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 84
{ } 
# 86
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 88
{ } 
# 89
}; 
# 94
template< class _Tp> inline void 
# 96
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 97
{ 
# 98
using _Up = typename remove_reference< _Tp> ::type; 
# 99
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 100
} 
# 102
template< class _Tp> inline void 
# 104
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 105
{ throw std::forward< _Tp> (__t); } 
# 109
template< class _Tp> 
# 110
[[noreturn]] inline void 
# 112
throw_with_nested(_Tp &&__t) 
# 113
{ 
# 114
using _Up = typename decay< _Tp> ::type; 
# 115
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 117
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 119
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(_Up)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 121
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 122
} 
# 125
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 133
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 135
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 136
{ 
# 137
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 138
__ne_ptr->rethrow_nested(); }  
# 139
} 
# 143
inline void __rethrow_if_nested_impl(const void *) 
# 144
{ } 
# 147
template< class _Ex> inline void 
# 149
rethrow_if_nested(const _Ex &__ex) 
# 150
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 153
}
# 155
}
# 159
#pragma GCC visibility pop
# 42 "/usr/include/c++/7/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 68
class bad_array_new_length : public bad_alloc { 
# 71
public: bad_array_new_length() throw() { } 
# 75
virtual ~bad_array_new_length() throw(); 
# 78
virtual const char *what() const throw(); 
# 79
}; 
# 86
struct nothrow_t { 
# 89
explicit nothrow_t() = default;
# 91
}; 
# 93
extern const nothrow_t nothrow; 
# 97
typedef void (*new_handler)(void); 
# 101
new_handler set_new_handler(new_handler) throw(); 
# 105
new_handler get_new_handler() noexcept; 
# 107
}
# 120 "/usr/include/c++/7/new" 3
void *operator new(std::size_t)
# 121
 __attribute((__externally_visible__)); 
# 122
void *operator new[](std::size_t)
# 123
 __attribute((__externally_visible__)); 
# 124
void operator delete(void *) noexcept
# 125
 __attribute((__externally_visible__)); 
# 126
void operator delete[](void *) noexcept
# 127
 __attribute((__externally_visible__)); 
# 129
void operator delete(void *, std::size_t) noexcept
# 130
 __attribute((__externally_visible__)); 
# 131
void operator delete[](void *, std::size_t) noexcept
# 132
 __attribute((__externally_visible__)); 
# 134
void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 135
 __attribute((__externally_visible__)); 
# 136
void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 137
 __attribute((__externally_visible__)); 
# 138
void operator delete(void *, const std::nothrow_t &) noexcept
# 139
 __attribute((__externally_visible__)); 
# 140
void operator delete[](void *, const std::nothrow_t &) noexcept
# 141
 __attribute((__externally_visible__)); 
# 168 "/usr/include/c++/7/new" 3
inline void *operator new(std::size_t, void *__p) noexcept 
# 169
{ return __p; } 
# 170
inline void *operator new[](std::size_t, void *__p) noexcept 
# 171
{ return __p; } 
# 174
inline void operator delete(void *, void *) noexcept { } 
# 175
inline void operator delete[](void *, void *) noexcept { } 
# 177
}
# 216 "/usr/include/c++/7/new" 3
#pragma GCC visibility pop
# 67 "/usr/include/c++/7/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
namespace rel_ops { 
# 85 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 130
}
# 132
}
# 65 "/usr/include/c++/7/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76 "/usr/include/c++/7/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 79
constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 83
template< class ...> class tuple; 
# 86
template< size_t ...> struct _Index_tuple; 
# 94
template< bool , class _T1, class _T2> 
# 95
struct _PCC { 
# 97
template< class _U1, class _U2> static constexpr bool 
# 98
_ConstructiblePair() 
# 99
{ 
# 100
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 102
} 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ImplicitlyConvertiblePair() 
# 106
{ 
# 107
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_MoveConstructiblePair() 
# 113
{ 
# 114
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_ImplicitlyMoveConvertiblePair() 
# 120
{ 
# 121
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 123
} 
# 125
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 126
_CopyMovePair() 
# 127
{ 
# 128
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 130
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 133
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 137
} 
# 139
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 140
_MoveCopyPair() 
# 141
{ 
# 142
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 144
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 147
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 151
} 
# 152
}; 
# 154
template< class _T1, class _T2> 
# 155
struct _PCC< false, _T1, _T2>  { 
# 157
template< class _U1, class _U2> static constexpr bool 
# 158
_ConstructiblePair() 
# 159
{ 
# 160
return false; 
# 161
} 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ImplicitlyConvertiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_MoveConstructiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_ImplicitlyMoveConvertiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 180
}; 
# 185
struct __nonesuch_no_braces : public __nonesuch { 
# 186
explicit __nonesuch_no_braces(const __nonesuch &) = delete;
# 187
}; 
# 190
template< class _U1, class _U2> class __pair_base { 
# 193
template< class _T1, class _T2> friend struct pair; 
# 194
__pair_base() = default;
# 195
~__pair_base() = default;
# 196
__pair_base(const __pair_base &) = default;
# 197
__pair_base &operator=(const __pair_base &) = delete;
# 199
}; 
# 207
template< class _T1, class _T2> 
# 208
struct pair : private __pair_base< _T1, _T2>  { 
# 211
typedef _T1 first_type; 
# 212
typedef _T2 second_type; 
# 214
_T1 first; 
# 215
_T2 second; 
# 222
template< class _U1 = _T1, class 
# 223
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 227
 = true> constexpr 
# 229
pair() : first(), second() 
# 230
{ } 
# 233
template< class _U1 = _T1, class 
# 234
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 241
 = false> constexpr explicit 
# 242
pair() : first(), second() 
# 243
{ } 
# 252 "/usr/include/c++/7/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 254
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 259
 = true> constexpr 
# 260
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 261
{ } 
# 263
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 268
 = false> constexpr explicit 
# 269
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 270
{ } 
# 280 "/usr/include/c++/7/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 285
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 290
 = true> constexpr 
# 291
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 292
{ } 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 299
 = false> constexpr explicit 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
constexpr pair(const pair &) = default;
# 304
constexpr pair(pair &&) = default;
# 307
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 310
 = true> constexpr 
# 311
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 312
{ } 
# 314
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 317
 = false> constexpr explicit 
# 318
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 319
{ } 
# 321
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 324
 = true> constexpr 
# 325
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 326
{ } 
# 328
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 331
 = false> explicit 
# 332
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 333
{ } 
# 335
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 340
 = true> constexpr 
# 341
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 342
{ } 
# 344
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 349
 = false> constexpr explicit 
# 350
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 351
{ } 
# 354
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 359
 = true> constexpr 
# 360
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 362
{ } 
# 364
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 369
 = false> constexpr explicit 
# 370
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 372
{ } 
# 374
template< class ..._Args1, class ..._Args2> inline pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 378
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch_no_braces &> ::type 
# 381
__p) 
# 382
{ 
# 383
(first) = (__p.first); 
# 384
(second) = (__p.second); 
# 385
return *this; 
# 386
} 
# 389
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch_no_braces &&> ::type 
# 392
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 395
{ 
# 396
(first) = std::forward< first_type> ((__p.first)); 
# 397
(second) = std::forward< second_type> ((__p.second)); 
# 398
return *this; 
# 399
} 
# 401
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 405
operator=(const std::pair< _U1, _U2>  &__p) 
# 406
{ 
# 407
(first) = (__p.first); 
# 408
(second) = (__p.second); 
# 409
return *this; 
# 410
} 
# 412
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 416
operator=(std::pair< _U1, _U2>  &&__p) 
# 417
{ 
# 418
(first) = std::forward< _U1> ((__p.first)); 
# 419
(second) = std::forward< _U2> ((__p.second)); 
# 420
return *this; 
# 421
} 
# 424
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 427
{ 
# 428
using std::swap;
# 429
swap(first, __p.first); 
# 430
swap(second, __p.second); 
# 431
} 
# 434
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 435
_Args2, std::size_t ..._Indexes2> inline 
# 434
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 439
}; 
# 446
template< class _T1, class _T2> constexpr bool 
# 448
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 449
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 452
template< class _T1, class _T2> constexpr bool 
# 454
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 455
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 456
} 
# 459
template< class _T1, class _T2> constexpr bool 
# 461
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 462
{ return !(__x == __y); } 
# 465
template< class _T1, class _T2> constexpr bool 
# 467
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 468
{ return __y < __x; } 
# 471
template< class _T1, class _T2> constexpr bool 
# 473
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 474
{ return !(__y < __x); } 
# 477
template< class _T1, class _T2> constexpr bool 
# 479
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 480
{ return !(__x < __y); } 
# 486
template< class _T1, class _T2> inline void 
# 495
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 497
{ __x.swap(__y); } 
# 521 "/usr/include/c++/7/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 524
make_pair(_T1 &&__x, _T2 &&__y) 
# 525
{ 
# 526
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 527
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 528
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 529
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 530
} 
# 541 "/usr/include/c++/7/bits/stl_pair.h" 3
}
# 39 "/usr/include/c++/7/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return __ils.begin(); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return __ils.end(); } 
# 101
}
# 103
#pragma GCC visibility pop
# 78 "/usr/include/c++/7/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp> struct tuple_size; 
# 90
template< class _Tp, class  = void> 
# 91
struct __tuple_size_cv_impl { }; 
# 93
template< class _Tp> 
# 94
struct __tuple_size_cv_impl< _Tp, __void_t< __decltype(tuple_size< _Tp> ::value)> >  : public integral_constant< unsigned long, tuple_size< _Tp> ::value>  { 
# 95
}; 
# 99
template< class _Tp> 
# 100
struct tuple_size< const _Tp>  : public __tuple_size_cv_impl< _Tp>  { }; 
# 102
template< class _Tp> 
# 103
struct tuple_size< volatile _Tp>  : public __tuple_size_cv_impl< _Tp>  { }; 
# 105
template< class _Tp> 
# 106
struct tuple_size< const volatile _Tp>  : public __tuple_size_cv_impl< _Tp>  { }; 
# 128 "/usr/include/c++/7/utility" 3
template< size_t __i, class _Tp> struct tuple_element; 
# 132
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 135
template< size_t __i, class _Tp> 
# 136
struct tuple_element< __i, const _Tp>  { 
# 138
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 139
}; 
# 141
template< size_t __i, class _Tp> 
# 142
struct tuple_element< __i, volatile _Tp>  { 
# 144
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 145
}; 
# 147
template< size_t __i, class _Tp> 
# 148
struct tuple_element< __i, const volatile _Tp>  { 
# 150
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 151
}; 
# 156
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 163
template< class _T1, class _T2> 
# 164
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 165
}; 
# 168
template< class _Tp1, class _Tp2> 
# 169
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 170
}; 
# 173
template< class _Tp1, class _Tp2> 
# 174
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 175
typedef _Tp1 type; }; 
# 178
template< class _Tp1, class _Tp2> 
# 179
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 180
typedef _Tp2 type; }; 
# 182
template< size_t _Int> struct __pair_get; 
# 186
template<> struct __pair_get< 0UL>  { 
# 188
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 190
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 191
{ return __pair.first; } 
# 193
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 195
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 196
{ return std::forward< _Tp1> ((__pair.first)); } 
# 198
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 200
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 201
{ return __pair.first; } 
# 202
}; 
# 205
template<> struct __pair_get< 1UL>  { 
# 207
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 209
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 210
{ return __pair.second; } 
# 212
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 214
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 215
{ return std::forward< _Tp2> ((__pair.second)); } 
# 217
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 219
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 220
{ return __pair.second; } 
# 221
}; 
# 223
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 225
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 226
{ return __pair_get< _Int> ::__get(__in); } 
# 228
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 230
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 231
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 233
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 235
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 236
{ return __pair_get< _Int> ::__const_get(__in); } 
# 242
template< class _Tp, class _Up> constexpr _Tp &
# 244
get(pair< _Tp, _Up>  &__p) noexcept 
# 245
{ return __p.first; } 
# 247
template< class _Tp, class _Up> constexpr const _Tp &
# 249
get(const pair< _Tp, _Up>  &__p) noexcept 
# 250
{ return __p.first; } 
# 252
template< class _Tp, class _Up> constexpr _Tp &&
# 254
get(pair< _Tp, _Up>  &&__p) noexcept 
# 255
{ return std::move((__p.first)); } 
# 257
template< class _Tp, class _Up> constexpr _Tp &
# 259
get(pair< _Up, _Tp>  &__p) noexcept 
# 260
{ return __p.second; } 
# 262
template< class _Tp, class _Up> constexpr const _Tp &
# 264
get(const pair< _Up, _Tp>  &__p) noexcept 
# 265
{ return __p.second; } 
# 267
template< class _Tp, class _Up> constexpr _Tp &&
# 269
get(pair< _Up, _Tp>  &&__p) noexcept 
# 270
{ return std::move((__p.second)); } 
# 275
template< class _Tp, class _Up = _Tp> inline _Tp 
# 277
exchange(_Tp &__obj, _Up &&__new_val) 
# 278
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 283
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 286
template< class _Itup1, class _Itup2> struct _Itup_cat; 
# 288
template< size_t ..._Ind1, size_t ..._Ind2> 
# 289
struct _Itup_cat< _Index_tuple< _Ind1...> , _Index_tuple< _Ind2...> >  { 
# 291
using __type = _Index_tuple< _Ind1..., (_Ind2 + sizeof...(_Ind1))...> ; 
# 292
}; 
# 295
template< size_t _Num> 
# 296
struct _Build_index_tuple : public _Itup_cat< typename _Build_index_tuple< _Num / (2)> ::__type, typename _Build_index_tuple< _Num - (_Num / (2))> ::__type>  { 
# 299
}; 
# 302
template<> struct _Build_index_tuple< 1UL>  { 
# 304
typedef _Index_tuple< 0UL>  __type; 
# 305
}; 
# 308
template<> struct _Build_index_tuple< 0UL>  { 
# 310
typedef _Index_tuple< >  __type; 
# 311
}; 
# 318
template< class _Tp, _Tp ..._Idx> 
# 319
struct integer_sequence { 
# 321
typedef _Tp value_type; 
# 322
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 323
}; 
# 325
template< class _Tp, _Tp _Num, class 
# 326
_ISeq = typename _Build_index_tuple< _Num> ::__type> struct _Make_integer_sequence; 
# 329
template< class _Tp, _Tp _Num, size_t ..._Idx> 
# 330
struct _Make_integer_sequence< _Tp, _Num, _Index_tuple< _Idx...> >  { 
# 332
static_assert((_Num >= 0), "Cannot make integer sequence of negative length");
# 335
typedef integer_sequence< _Tp, (static_cast< _Tp>(_Idx))...>  __type; 
# 336
}; 
# 339
template< class _Tp, _Tp _Num> using make_integer_sequence = typename _Make_integer_sequence< _Tp, _Num> ::__type; 
# 344
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 348
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 352
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 403 "/usr/include/c++/7/utility" 3
}
# 50 "/usr/include/c++/7/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 70
template< class , class > struct uses_allocator; 
# 76
}
# 42 "/usr/include/c++/7/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 63
template<> struct char_traits< char16_t> ; 
# 64
template<> struct char_traits< char32_t> ; 
# 67
inline namespace __cxx11 { 
# 69
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 70
_Alloc = allocator< _CharT> > class basic_string; 
# 74
typedef basic_string< char>  string; 
# 78
typedef basic_string< wchar_t>  wstring; 
# 84
typedef basic_string< char16_t>  u16string; 
# 87
typedef basic_string< char32_t>  u32string; 
# 90
}
# 95
}
# 42 "/usr/include/c++/7/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_system_error(int) __attribute((__noreturn__)); 
# 101
void __throw_future_error(int) __attribute((__noreturn__)); 
# 105
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 108
}
# 37 "/usr/include/c++/7/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/7/ext/numeric_traits.h" 3
template< class _Value> 
# 55
struct __numeric_traits_integer { 
# 58
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0)); 
# 59
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0))); 
# 63
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 64
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 65
}; 
# 67
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 70
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 73
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 76
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 99 "/usr/include/c++/7/ext/numeric_traits.h" 3
template< class _Value> 
# 100
struct __numeric_traits_floating { 
# 103
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 106
static const bool __is_signed = true; 
# 107
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 108
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 109
}; 
# 111
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 114
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 117
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 120
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 123
template< class _Value> 
# 124
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 128
}; 
# 131
}
# 70 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 205
__iterator_category(const _Iter &) 
# 206
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 231 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 239
}
# 67 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class > struct _List_iterator; 
# 72
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
; 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
__i += __n; 
# 181
} 
# 195 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void 
# 197
advance(_InputIterator &__i, _Distance __n) 
# 198
{ 
# 200
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 201
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 202
} 
# 206
template< class _ForwardIterator> inline _ForwardIterator 
# 208
next(_ForwardIterator __x, typename iterator_traits< _ForwardIterator> ::difference_type 
# 209
__n = 1) 
# 210
{ 
# 214
std::advance(__x, __n); 
# 215
return __x; 
# 216
} 
# 218
template< class _BidirectionalIterator> inline _BidirectionalIterator 
# 220
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 221
__n = 1) 
# 222
{ 
# 226
std::advance(__x, -__n); 
# 227
return __x; 
# 228
} 
# 233
}
# 37 "/usr/include/c++/7/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
class __undefined; 
# 44
template< class _Tp> 
# 45
struct __get_first_arg { 
# 46
using type = __undefined; }; 
# 48
template< template< class , class ...>  class _Template, class _Tp, class ...
# 49
_Types> 
# 50
struct __get_first_arg< _Template< _Tp, _Types...> >  { 
# 51
using type = _Tp; }; 
# 53
template< class _Tp> using __get_first_arg_t = typename __get_first_arg< _Tp> ::type; 
# 57
template< class _Tp, class _Up> 
# 58
struct __replace_first_arg { 
# 59
}; 
# 61
template< template< class , class ...>  class _Template, class _Up, class 
# 62
_Tp, class ..._Types> 
# 63
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 64
using type = _Template< _Up, _Types...> ; }; 
# 66
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 69
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 77
template< class _Ptr> 
# 78
struct pointer_traits { 
# 82
private: 
# 81
template< class _Tp> using __element_type = typename _Tp::element_type; 
# 84
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 87
template< class _Tp, class _Up, class  = void> 
# 88
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 90
template< class _Tp, class _Up> 
# 91
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> > >  { 
# 92
using type = typename _Tp::template rebind< _Up> ; }; 
# 96
public: using pointer = _Ptr; 
# 99
using element_type = __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> ; 
# 103
using difference_type = __detected_or_t< ptrdiff_t, __difference_type, _Ptr> ; 
# 107
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 111
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 112
{ return _Ptr::pointer_to(__e); } 
# 114
static_assert((!is_same< element_type, __undefined> ::value), "pointer type defines element_type or is like SomePointer<T, Args>");
# 116
}; 
# 122
template< class _Tp> 
# 123
struct pointer_traits< _Tp *>  { 
# 126
typedef _Tp *pointer; 
# 128
typedef _Tp element_type; 
# 130
typedef ptrdiff_t difference_type; 
# 132
template< class _Up> using rebind = _Up *; 
# 141
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 142
{ return std::addressof(__r); } 
# 143
}; 
# 146
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 150
}
# 72 "/usr/include/c++/7/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 100 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> 
# 101
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 109
protected: _Iterator current; 
# 111
typedef iterator_traits< _Iterator>  __traits_type; 
# 114
public: typedef _Iterator iterator_type; 
# 115
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 116
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 117
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 127 "/usr/include/c++/7/bits/stl_iterator.h" 3
reverse_iterator() : current() { } 
# 133
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 139
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 140
{ } 
# 146
template< class _Iter> 
# 148
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current(__x.base()) 
# 149
{ } 
# 155
iterator_type base() const 
# 156
{ return current; } 
# 169 "/usr/include/c++/7/bits/stl_iterator.h" 3
reference operator*() const 
# 170
{ 
# 171
_Iterator __tmp = current; 
# 172
return *(--__tmp); 
# 173
} 
# 183 "/usr/include/c++/7/bits/stl_iterator.h" 3
pointer operator->() const 
# 184
{ return std::__addressof(operator*()); } 
# 192
reverse_iterator &operator++() 
# 193
{ 
# 194
--(current); 
# 195
return *this; 
# 196
} 
# 204
reverse_iterator operator++(int) 
# 205
{ 
# 206
reverse_iterator __tmp = *this; 
# 207
--(current); 
# 208
return __tmp; 
# 209
} 
# 217
reverse_iterator &operator--() 
# 218
{ 
# 219
++(current); 
# 220
return *this; 
# 221
} 
# 229
reverse_iterator operator--(int) 
# 230
{ 
# 231
reverse_iterator __tmp = *this; 
# 232
++(current); 
# 233
return __tmp; 
# 234
} 
# 242
reverse_iterator operator+(difference_type __n) const 
# 243
{ return ((reverse_iterator)((current) - __n)); } 
# 252
reverse_iterator &operator+=(difference_type __n) 
# 253
{ 
# 254
(current) -= __n; 
# 255
return *this; 
# 256
} 
# 264
reverse_iterator operator-(difference_type __n) const 
# 265
{ return ((reverse_iterator)((current) + __n)); } 
# 274
reverse_iterator &operator-=(difference_type __n) 
# 275
{ 
# 276
(current) += __n; 
# 277
return *this; 
# 278
} 
# 286
reference operator[](difference_type __n) const 
# 287
{ return *((*this) + __n); } 
# 288
}; 
# 300 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> inline bool 
# 302
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 303
__y) 
# 304
{ return __x.base() == __y.base(); } 
# 306
template< class _Iterator> inline bool 
# 308
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 309
__y) 
# 310
{ return __y.base() < __x.base(); } 
# 312
template< class _Iterator> inline bool 
# 314
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 315
__y) 
# 316
{ return !(__x == __y); } 
# 318
template< class _Iterator> inline bool 
# 320
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 321
__y) 
# 322
{ return __y < __x; } 
# 324
template< class _Iterator> inline bool 
# 326
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 327
__y) 
# 328
{ return !(__y < __x); } 
# 330
template< class _Iterator> inline bool 
# 332
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 333
__y) 
# 334
{ return !(__x < __y); } 
# 338
template< class _IteratorL, class _IteratorR> inline bool 
# 340
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 341
__y) 
# 342
{ return __x.base() == __y.base(); } 
# 344
template< class _IteratorL, class _IteratorR> inline bool 
# 346
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 347
__y) 
# 348
{ return __y.base() < __x.base(); } 
# 350
template< class _IteratorL, class _IteratorR> inline bool 
# 352
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 353
__y) 
# 354
{ return !(__x == __y); } 
# 356
template< class _IteratorL, class _IteratorR> inline bool 
# 358
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 359
__y) 
# 360
{ return __y < __x; } 
# 362
template< class _IteratorL, class _IteratorR> inline bool 
# 364
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 365
__y) 
# 366
{ return !(__y < __x); } 
# 368
template< class _IteratorL, class _IteratorR> inline bool 
# 370
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 371
__y) 
# 372
{ return !(__x < __y); } 
# 390 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline auto 
# 392
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 393
__y)->__decltype((__y.base() - __x.base())) 
# 395
{ return __y.base() - __x.base(); } 
# 398
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 400
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 401
__x) 
# 402
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 406
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 408
__make_reverse_iterator(_Iterator __i) 
# 409
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 417
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 419
make_reverse_iterator(_Iterator __i) 
# 420
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 425
template< class _Iterator> auto 
# 427
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 429
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 431
template< class _Iterator> 
# 432
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 434
}; 
# 436
template< class _Iterator> auto 
# 438
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 440
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 454 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 455
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 459
protected: _Container *container; 
# 463
public: typedef _Container container_type; 
# 467
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 468
{ } 
# 490 "/usr/include/c++/7/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 491
{ 
# 492
(container)->push_back(__value); 
# 493
return *this; 
# 494
} 
# 497
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 498
{ 
# 499
(container)->push_back(std::move(__value)); 
# 500
return *this; 
# 501
} 
# 506
back_insert_iterator &operator*() 
# 507
{ return *this; } 
# 511
back_insert_iterator &operator++() 
# 512
{ return *this; } 
# 516
back_insert_iterator operator++(int) 
# 517
{ return *this; } 
# 518
}; 
# 531 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 533
back_inserter(_Container &__x) 
# 534
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 546 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 547
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 551
protected: _Container *container; 
# 555
public: typedef _Container container_type; 
# 558
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 559
{ } 
# 581 "/usr/include/c++/7/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 582
{ 
# 583
(container)->push_front(__value); 
# 584
return *this; 
# 585
} 
# 588
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 589
{ 
# 590
(container)->push_front(std::move(__value)); 
# 591
return *this; 
# 592
} 
# 597
front_insert_iterator &operator*() 
# 598
{ return *this; } 
# 602
front_insert_iterator &operator++() 
# 603
{ return *this; } 
# 607
front_insert_iterator operator++(int) 
# 608
{ return *this; } 
# 609
}; 
# 622 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 624
front_inserter(_Container &__x) 
# 625
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 641 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 642
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 646
protected: _Container *container; 
# 647
typename _Container::iterator iter; 
# 651
public: typedef _Container container_type; 
# 657
insert_iterator(_Container &__x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) 
# 658
{ } 
# 693 "/usr/include/c++/7/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 694
{ 
# 695
(iter) = (container)->insert(iter, __value); 
# 696
++(iter); 
# 697
return *this; 
# 698
} 
# 701
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 702
{ 
# 703
(iter) = (container)->insert(iter, std::move(__value)); 
# 704
++(iter); 
# 705
return *this; 
# 706
} 
# 711
insert_iterator &operator*() 
# 712
{ return *this; } 
# 716
insert_iterator &operator++() 
# 717
{ return *this; } 
# 721
insert_iterator &operator++(int) 
# 722
{ return *this; } 
# 723
}; 
# 736 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container, class _Iterator> inline insert_iterator< _Container>  
# 738
inserter(_Container &__x, _Iterator __i) 
# 739
{ 
# 740
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i); 
# 742
} 
# 747
}
# 749
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 760 "/usr/include/c++/7/bits/stl_iterator.h" 3
using std::iterator_traits;
# 761
using std::iterator;
# 762
template< class _Iterator, class _Container> 
# 763
class __normal_iterator { 
# 766
protected: _Iterator _M_current; 
# 768
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 771
public: typedef _Iterator iterator_type; 
# 772
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 773
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 774
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 775
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 776
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 778
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 779
{ } 
# 782
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 783
{ } 
# 786
template< class _Iter> 
# 787
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 790
__i) noexcept : _M_current(__i.base()) 
# 791
{ } 
# 795
reference operator*() const noexcept 
# 796
{ return *(_M_current); } 
# 799
pointer operator->() const noexcept 
# 800
{ return _M_current; } 
# 803
__normal_iterator &operator++() noexcept 
# 804
{ 
# 805
++(_M_current); 
# 806
return *this; 
# 807
} 
# 810
__normal_iterator operator++(int) noexcept 
# 811
{ return ((__normal_iterator)((_M_current)++)); } 
# 815
__normal_iterator &operator--() noexcept 
# 816
{ 
# 817
--(_M_current); 
# 818
return *this; 
# 819
} 
# 822
__normal_iterator operator--(int) noexcept 
# 823
{ return ((__normal_iterator)((_M_current)--)); } 
# 827
reference operator[](difference_type __n) const noexcept 
# 828
{ return (_M_current)[__n]; } 
# 831
__normal_iterator &operator+=(difference_type __n) noexcept 
# 832
{ (_M_current) += __n; return *this; } 
# 835
__normal_iterator operator+(difference_type __n) const noexcept 
# 836
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 839
__normal_iterator &operator-=(difference_type __n) noexcept 
# 840
{ (_M_current) -= __n; return *this; } 
# 843
__normal_iterator operator-(difference_type __n) const noexcept 
# 844
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 847
const _Iterator &base() const noexcept 
# 848
{ return _M_current; } 
# 849
}; 
# 860 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 862
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 863
__rhs) noexcept 
# 865
{ return __lhs.base() == __rhs.base(); } 
# 867
template< class _Iterator, class _Container> inline bool 
# 869
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 870
__rhs) noexcept 
# 872
{ return __lhs.base() == __rhs.base(); } 
# 874
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 876
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 877
__rhs) noexcept 
# 879
{ return __lhs.base() != __rhs.base(); } 
# 881
template< class _Iterator, class _Container> inline bool 
# 883
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 884
__rhs) noexcept 
# 886
{ return __lhs.base() != __rhs.base(); } 
# 889
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 891
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 892
__rhs) noexcept 
# 894
{ return __lhs.base() < __rhs.base(); } 
# 896
template< class _Iterator, class _Container> inline bool 
# 898
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 899
__rhs) noexcept 
# 901
{ return __lhs.base() < __rhs.base(); } 
# 903
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 905
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 906
__rhs) noexcept 
# 908
{ return __lhs.base() > __rhs.base(); } 
# 910
template< class _Iterator, class _Container> inline bool 
# 912
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 913
__rhs) noexcept 
# 915
{ return __lhs.base() > __rhs.base(); } 
# 917
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 919
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 920
__rhs) noexcept 
# 922
{ return __lhs.base() <= __rhs.base(); } 
# 924
template< class _Iterator, class _Container> inline bool 
# 926
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 927
__rhs) noexcept 
# 929
{ return __lhs.base() <= __rhs.base(); } 
# 931
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 933
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 934
__rhs) noexcept 
# 936
{ return __lhs.base() >= __rhs.base(); } 
# 938
template< class _Iterator, class _Container> inline bool 
# 940
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 941
__rhs) noexcept 
# 943
{ return __lhs.base() >= __rhs.base(); } 
# 949
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 953
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 954
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 961
{ return __lhs.base() - __rhs.base(); } 
# 963
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 965
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 966
__rhs) noexcept 
# 968
{ return __lhs.base() - __rhs.base(); } 
# 970
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 972
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 973
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 975
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 978
}
# 980
namespace std __attribute((__visibility__("default"))) { 
# 984
template< class _Iterator, class _Container> _Iterator 
# 986
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) 
# 987
{ return __it.base(); } 
# 990
}
# 994
namespace std __attribute((__visibility__("default"))) { 
# 1012 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1013
class move_iterator { 
# 1016
protected: _Iterator _M_current; 
# 1018
typedef iterator_traits< _Iterator>  __traits_type; 
# 1019
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 1022
public: typedef _Iterator iterator_type; 
# 1023
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1024
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1025
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1027
typedef _Iterator pointer; 
# 1032
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1035
move_iterator() : _M_current() 
# 1036
{ } 
# 1039
explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 1040
{ } 
# 1042
template< class _Iter> 
# 1044
move_iterator(const move_iterator< _Iter>  &__i) : _M_current(__i.base()) 
# 1045
{ } 
# 1048
iterator_type base() const 
# 1049
{ return _M_current; } 
# 1052
reference operator*() const 
# 1053
{ return static_cast< reference>(*(_M_current)); } 
# 1056
pointer operator->() const 
# 1057
{ return _M_current; } 
# 1060
move_iterator &operator++() 
# 1061
{ 
# 1062
++(_M_current); 
# 1063
return *this; 
# 1064
} 
# 1067
move_iterator operator++(int) 
# 1068
{ 
# 1069
move_iterator __tmp = *this; 
# 1070
++(_M_current); 
# 1071
return __tmp; 
# 1072
} 
# 1075
move_iterator &operator--() 
# 1076
{ 
# 1077
--(_M_current); 
# 1078
return *this; 
# 1079
} 
# 1082
move_iterator operator--(int) 
# 1083
{ 
# 1084
move_iterator __tmp = *this; 
# 1085
--(_M_current); 
# 1086
return __tmp; 
# 1087
} 
# 1090
move_iterator operator+(difference_type __n) const 
# 1091
{ return ((move_iterator)((_M_current) + __n)); } 
# 1094
move_iterator &operator+=(difference_type __n) 
# 1095
{ 
# 1096
(_M_current) += __n; 
# 1097
return *this; 
# 1098
} 
# 1101
move_iterator operator-(difference_type __n) const 
# 1102
{ return ((move_iterator)((_M_current) - __n)); } 
# 1105
move_iterator &operator-=(difference_type __n) 
# 1106
{ 
# 1107
(_M_current) -= __n; 
# 1108
return *this; 
# 1109
} 
# 1112
reference operator[](difference_type __n) const 
# 1113
{ return std::move((_M_current)[__n]); } 
# 1114
}; 
# 1119
template< class _IteratorL, class _IteratorR> inline bool 
# 1121
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1122
__y) 
# 1123
{ return __x.base() == __y.base(); } 
# 1125
template< class _Iterator> inline bool 
# 1127
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1128
__y) 
# 1129
{ return __x.base() == __y.base(); } 
# 1131
template< class _IteratorL, class _IteratorR> inline bool 
# 1133
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1134
__y) 
# 1135
{ return !(__x == __y); } 
# 1137
template< class _Iterator> inline bool 
# 1139
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1140
__y) 
# 1141
{ return !(__x == __y); } 
# 1143
template< class _IteratorL, class _IteratorR> inline bool 
# 1145
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1146
__y) 
# 1147
{ return __x.base() < __y.base(); } 
# 1149
template< class _Iterator> inline bool 
# 1151
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1152
__y) 
# 1153
{ return __x.base() < __y.base(); } 
# 1155
template< class _IteratorL, class _IteratorR> inline bool 
# 1157
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1158
__y) 
# 1159
{ return !(__y < __x); } 
# 1161
template< class _Iterator> inline bool 
# 1163
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1164
__y) 
# 1165
{ return !(__y < __x); } 
# 1167
template< class _IteratorL, class _IteratorR> inline bool 
# 1169
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1170
__y) 
# 1171
{ return __y < __x; } 
# 1173
template< class _Iterator> inline bool 
# 1175
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1176
__y) 
# 1177
{ return __y < __x; } 
# 1179
template< class _IteratorL, class _IteratorR> inline bool 
# 1181
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1182
__y) 
# 1183
{ return !(__x < __y); } 
# 1185
template< class _Iterator> inline bool 
# 1187
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1188
__y) 
# 1189
{ return !(__x < __y); } 
# 1192
template< class _IteratorL, class _IteratorR> inline auto 
# 1194
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1195
__y)->__decltype((__x.base() - __y.base())) 
# 1197
{ return __x.base() - __y.base(); } 
# 1199
template< class _Iterator> inline move_iterator< _Iterator>  
# 1201
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1202
__x) 
# 1203
{ return __x + __n; } 
# 1205
template< class _Iterator> inline move_iterator< _Iterator>  
# 1207
make_move_iterator(_Iterator __i) 
# 1208
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1210
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> inline _ReturnType 
# 1215
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1216
{ return (_ReturnType)__i; } 
# 1220
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> inline _ReturnType 
# 1224
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1225
{ return (_ReturnType)__i; } 
# 1229
template< class _Iterator> auto 
# 1231
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 1233
{ return make_move_iterator(__niter_base(__it.base())); } 
# 1235
template< class _Iterator> 
# 1236
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 1238
enum { __value = 1}; 
# 1239
typedef __true_type __type; 
# 1240
}; 
# 1242
template< class _Iterator> auto 
# 1244
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 1246
{ return __miter_base(__it.base()); } 
# 1249
}
# 48 "/usr/include/c++/7/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 59
}
# 33 "/usr/include/c++/7/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> constexpr bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 48
constexpr _Iter_less_iter __iter_less_iter() 
# 49
{ return _Iter_less_iter(); } 
# 51
struct _Iter_less_val { 
# 54
constexpr _Iter_less_val() = default;
# 60
explicit _Iter_less_val(_Iter_less_iter) { } 
# 62
template< class _Iterator, class _Value> bool 
# 64
operator()(_Iterator __it, _Value &__val) const 
# 65
{ return (*__it) < __val; } 
# 66
}; 
# 69
inline _Iter_less_val __iter_less_val() 
# 70
{ return _Iter_less_val(); } 
# 73
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 74
{ return _Iter_less_val(); } 
# 76
struct _Val_less_iter { 
# 79
constexpr _Val_less_iter() = default;
# 85
explicit _Val_less_iter(_Iter_less_iter) { } 
# 87
template< class _Value, class _Iterator> bool 
# 89
operator()(_Value &__val, _Iterator __it) const 
# 90
{ return __val < (*__it); } 
# 91
}; 
# 94
inline _Val_less_iter __val_less_iter() 
# 95
{ return _Val_less_iter(); } 
# 98
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 99
{ return _Val_less_iter(); } 
# 101
struct _Iter_equal_to_iter { 
# 103
template< class _Iterator1, class _Iterator2> bool 
# 105
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 106
{ return (*__it1) == (*__it2); } 
# 107
}; 
# 110
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 111
{ return _Iter_equal_to_iter(); } 
# 113
struct _Iter_equal_to_val { 
# 115
template< class _Iterator, class _Value> bool 
# 117
operator()(_Iterator __it, _Value &__val) const 
# 118
{ return (*__it) == __val; } 
# 119
}; 
# 122
inline _Iter_equal_to_val __iter_equal_to_val() 
# 123
{ return _Iter_equal_to_val(); } 
# 126
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 127
{ return _Iter_equal_to_val(); } 
# 129
template< class _Compare> 
# 130
struct _Iter_comp_iter { 
# 132
_Compare _M_comp; 
# 135
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 137
{ } 
# 139
template< class _Iterator1, class _Iterator2> constexpr bool 
# 142
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 143
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 144
}; 
# 146
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 149
__iter_comp_iter(_Compare __comp) 
# 150
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 152
template< class _Compare> 
# 153
struct _Iter_comp_val { 
# 155
_Compare _M_comp; 
# 158
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 160
{ } 
# 163
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 165
{ } 
# 169
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 171
{ } 
# 174
template< class _Iterator, class _Value> bool 
# 176
operator()(_Iterator __it, _Value &__val) 
# 177
{ return (bool)(_M_comp)(*__it, __val); } 
# 178
}; 
# 180
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 182
__iter_comp_val(_Compare __comp) 
# 183
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 185
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 187
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 188
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 190
template< class _Compare> 
# 191
struct _Val_comp_iter { 
# 193
_Compare _M_comp; 
# 196
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 198
{ } 
# 201
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 203
{ } 
# 207
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 209
{ } 
# 212
template< class _Value, class _Iterator> bool 
# 214
operator()(_Value &__val, _Iterator __it) 
# 215
{ return (bool)(_M_comp)(__val, *__it); } 
# 216
}; 
# 218
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 220
__val_comp_iter(_Compare __comp) 
# 221
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 223
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 225
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 226
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 228
template< class _Value> 
# 229
struct _Iter_equals_val { 
# 231
_Value &_M_value; 
# 234
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 236
{ } 
# 238
template< class _Iterator> bool 
# 240
operator()(_Iterator __it) 
# 241
{ return (*__it) == (_M_value); } 
# 242
}; 
# 244
template< class _Value> inline _Iter_equals_val< _Value>  
# 246
__iter_equals_val(_Value &__val) 
# 247
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 249
template< class _Iterator1> 
# 250
struct _Iter_equals_iter { 
# 252
_Iterator1 _M_it1; 
# 255
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 257
{ } 
# 259
template< class _Iterator2> bool 
# 261
operator()(_Iterator2 __it2) 
# 262
{ return (*__it2) == (*(_M_it1)); } 
# 263
}; 
# 265
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 267
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 268
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 270
template< class _Predicate> 
# 271
struct _Iter_pred { 
# 273
_Predicate _M_pred; 
# 276
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 278
{ } 
# 280
template< class _Iterator> bool 
# 282
operator()(_Iterator __it) 
# 283
{ return (bool)(_M_pred)(*__it); } 
# 284
}; 
# 286
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 288
__pred_iter(_Predicate __pred) 
# 289
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 291
template< class _Compare, class _Value> 
# 292
struct _Iter_comp_to_val { 
# 294
_Compare _M_comp; 
# 295
_Value &_M_value; 
# 297
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 299
{ } 
# 301
template< class _Iterator> bool 
# 303
operator()(_Iterator __it) 
# 304
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 305
}; 
# 307
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 309
__iter_comp_val(_Compare __comp, _Value &__val) 
# 310
{ 
# 311
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 312
} 
# 314
template< class _Compare, class _Iterator1> 
# 315
struct _Iter_comp_to_iter { 
# 317
_Compare _M_comp; 
# 318
_Iterator1 _M_it1; 
# 320
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 322
{ } 
# 324
template< class _Iterator2> bool 
# 326
operator()(_Iterator2 __it2) 
# 327
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 328
}; 
# 330
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 332
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 333
{ 
# 334
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 336
} 
# 338
template< class _Predicate> 
# 339
struct _Iter_negate { 
# 341
_Predicate _M_pred; 
# 344
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 346
{ } 
# 348
template< class _Iterator> bool 
# 350
operator()(_Iterator __it) 
# 351
{ return !((bool)(_M_pred)(*__it)); } 
# 352
}; 
# 354
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 356
__negate(_Iter_pred< _Predicate>  __pred) 
# 357
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 359
}
# 360
}
# 73 "/usr/include/c++/7/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 118 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 120
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 121
{ 
# 148 "/usr/include/c++/7/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 150
} 
# 164 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 166
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 167
__first2) 
# 168
{ 
# 174
; 
# 176
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 177
std::iter_swap(__first1, __first2); }  
# 178
return __first2; 
# 179
} 
# 192 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 195
min(const _Tp &__a, const _Tp &__b) 
# 196
{ 
# 200
if (__b < __a) { 
# 201
return __b; }  
# 202
return __a; 
# 203
} 
# 216 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 219
max(const _Tp &__a, const _Tp &__b) 
# 220
{ 
# 224
if (__a < __b) { 
# 225
return __b; }  
# 226
return __a; 
# 227
} 
# 240 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 243
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 244
{ 
# 246
if (__comp(__b, __a)) { 
# 247
return __b; }  
# 248
return __a; 
# 249
} 
# 262 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 265
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 266
{ 
# 268
if (__comp(__a, __b)) { 
# 269
return __b; }  
# 270
return __a; 
# 271
} 
# 275
template< class _Iterator> inline _Iterator 
# 277
__niter_base(_Iterator __it) 
# 278
{ return __it; } 
# 286
template< bool , bool , class > 
# 287
struct __copy_move { 
# 289
template< class _II, class _OI> static _OI 
# 291
__copy_m(_II __first, _II __last, _OI __result) 
# 292
{ 
# 293
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 294
(*__result) = (*__first); }  
# 295
return __result; 
# 296
} 
# 297
}; 
# 300
template< class _Category> 
# 301
struct __copy_move< true, false, _Category>  { 
# 303
template< class _II, class _OI> static _OI 
# 305
__copy_m(_II __first, _II __last, _OI __result) 
# 306
{ 
# 307
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 308
(*__result) = std::move(*__first); }  
# 309
return __result; 
# 310
} 
# 311
}; 
# 315
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 317
template< class _II, class _OI> static _OI 
# 319
__copy_m(_II __first, _II __last, _OI __result) 
# 320
{ 
# 321
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 322
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 323
{ 
# 324
(*__result) = (*__first); 
# 325
++__first; 
# 326
++__result; 
# 327
}  
# 328
return __result; 
# 329
} 
# 330
}; 
# 334
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 336
template< class _II, class _OI> static _OI 
# 338
__copy_m(_II __first, _II __last, _OI __result) 
# 339
{ 
# 340
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 341
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 342
{ 
# 343
(*__result) = std::move(*__first); 
# 344
++__first; 
# 345
++__result; 
# 346
}  
# 347
return __result; 
# 348
} 
# 349
}; 
# 352
template< bool _IsMove> 
# 353
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 355
template< class _Tp> static _Tp *
# 357
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 358
{ 
# 360
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 364
static_assert((__assignable::type::value), "type is not assignable");
# 366
const ptrdiff_t _Num = __last - __first; 
# 367
if (_Num) { 
# 368
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 369
return __result + _Num; 
# 370
} 
# 371
}; 
# 373
template< bool _IsMove, class _II, class _OI> inline _OI 
# 375
__copy_move_a(_II __first, _II __last, _OI __result) 
# 376
{ 
# 377
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 378
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 379
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 380
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 385
return std::template __copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 387
} 
# 391
template< class _CharT> struct char_traits; 
# 394
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 397
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 400
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 406
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 412
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 418
template< bool _IsMove, class _II, class _OI> inline _OI 
# 420
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 421
{ 
# 422
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 425
} 
# 444 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 446
copy(_II __first, _II __last, _OI __result) 
# 447
{ 
# 452
; 
# 454
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 457
} 
# 477 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 479
move(_II __first, _II __last, _OI __result) 
# 480
{ 
# 485
; 
# 487
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 489
} 
# 496
template< bool , bool , class > 
# 497
struct __copy_move_backward { 
# 499
template< class _BI1, class _BI2> static _BI2 
# 501
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 502
{ 
# 503
while (__first != __last) { 
# 504
(*(--__result)) = (*(--__last)); }  
# 505
return __result; 
# 506
} 
# 507
}; 
# 510
template< class _Category> 
# 511
struct __copy_move_backward< true, false, _Category>  { 
# 513
template< class _BI1, class _BI2> static _BI2 
# 515
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 516
{ 
# 517
while (__first != __last) { 
# 518
(*(--__result)) = std::move(*(--__last)); }  
# 519
return __result; 
# 520
} 
# 521
}; 
# 525
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 527
template< class _BI1, class _BI2> static _BI2 
# 529
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 530
{ 
# 531
typename iterator_traits< _BI1> ::difference_type __n; 
# 532
for (__n = (__last - __first); __n > 0; --__n) { 
# 533
(*(--__result)) = (*(--__last)); }  
# 534
return __result; 
# 535
} 
# 536
}; 
# 540
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 542
template< class _BI1, class _BI2> static _BI2 
# 544
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 545
{ 
# 546
typename iterator_traits< _BI1> ::difference_type __n; 
# 547
for (__n = (__last - __first); __n > 0; --__n) { 
# 548
(*(--__result)) = std::move(*(--__last)); }  
# 549
return __result; 
# 550
} 
# 551
}; 
# 554
template< bool _IsMove> 
# 555
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 557
template< class _Tp> static _Tp *
# 559
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 560
{ 
# 562
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 566
static_assert((__assignable::type::value), "type is not assignable");
# 568
const ptrdiff_t _Num = __last - __first; 
# 569
if (_Num) { 
# 570
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 571
return __result - _Num; 
# 572
} 
# 573
}; 
# 575
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 577
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 578
{ 
# 579
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 580
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 581
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 582
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 587
return std::template __copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 591
} 
# 593
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 595
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 596
{ 
# 597
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 600
} 
# 620 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 622
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 623
{ 
# 630
; 
# 632
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 635
} 
# 656 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 658
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 659
{ 
# 666
; 
# 668
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 671
} 
# 678
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 681
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 682
__value) 
# 683
{ 
# 684
for (; __first != __last; ++__first) { 
# 685
(*__first) = __value; }  
# 686
} 
# 688
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 691
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 692
__value) 
# 693
{ 
# 694
const _Tp __tmp = __value; 
# 695
for (; __first != __last; ++__first) { 
# 696
(*__first) = __tmp; }  
# 697
} 
# 700
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 703
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 704
{ 
# 705
const _Tp __tmp = __c; 
# 706
if (const size_t __len = __last - __first) { 
# 707
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 708
} 
# 722 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 724
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 725
{ 
# 729
; 
# 731
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 733
} 
# 735
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 738
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 739
{ 
# 740
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 742
(*__first) = __value; }  
# 743
return __first; 
# 744
} 
# 746
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 749
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 750
{ 
# 751
const _Tp __tmp = __value; 
# 752
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 754
(*__first) = __tmp; }  
# 755
return __first; 
# 756
} 
# 758
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 761
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 762
{ 
# 763
std::__fill_a(__first, __first + __n, __c); 
# 764
return __first + __n; 
# 765
} 
# 782 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 784
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 785
{ 
# 789
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value); 
# 790
} 
# 792
template< bool _BoolType> 
# 793
struct __equal { 
# 795
template< class _II1, class _II2> static bool 
# 797
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 798
{ 
# 799
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 800
if (!((*__first1) == (*__first2))) { 
# 801
return false; }  }  
# 802
return true; 
# 803
} 
# 804
}; 
# 807
template<> struct __equal< true>  { 
# 809
template< class _Tp> static bool 
# 811
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 812
{ 
# 813
if (const size_t __len = __last1 - __first1) { 
# 814
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 815
return true; 
# 816
} 
# 817
}; 
# 819
template< class _II1, class _II2> inline bool 
# 821
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 822
{ 
# 823
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 824
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 825
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 831
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 832
} 
# 834
template< class , class > 
# 835
struct __lc_rai { 
# 837
template< class _II1, class _II2> static _II1 
# 839
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 840
{ return __last1; } 
# 842
template< class _II> static bool 
# 844
__cnd2(_II __first, _II __last) 
# 845
{ return __first != __last; } 
# 846
}; 
# 849
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 851
template< class _RAI1, class _RAI2> static _RAI1 
# 853
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 854
__first2, _RAI2 __last2) 
# 855
{ 
# 857
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 859
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 860
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 861
} 
# 863
template< class _RAI> static bool 
# 865
__cnd2(_RAI, _RAI) 
# 866
{ return true; } 
# 867
}; 
# 869
template< class _II1, class _II2, class _Compare> bool 
# 871
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 872
__first2, _II2 __last2, _Compare 
# 873
__comp) 
# 874
{ 
# 875
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 876
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 877
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 879
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 880
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 882
{ 
# 883
if (__comp(__first1, __first2)) { 
# 884
return true; }  
# 885
if (__comp(__first2, __first1)) { 
# 886
return false; }  
# 887
}  
# 888
return (__first1 == __last1) && (__first2 != __last2); 
# 889
} 
# 891
template< bool _BoolType> 
# 892
struct __lexicographical_compare { 
# 894
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 896
}; 
# 898
template< bool _BoolType> 
# 899
template< class _II1, class _II2> bool 
# 902
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 903
{ 
# 904
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 907
} 
# 910
template<> struct __lexicographical_compare< true>  { 
# 912
template< class _Tp, class _Up> static bool 
# 914
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 915
__first2, const _Up *__last2) 
# 916
{ 
# 917
const size_t __len1 = __last1 - __first1; 
# 918
const size_t __len2 = __last2 - __first2; 
# 919
if (const size_t __len = std::min(__len1, __len2)) { 
# 920
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 921
return __result < 0; }  }  
# 922
return __len1 < __len2; 
# 923
} 
# 924
}; 
# 926
template< class _II1, class _II2> inline bool 
# 928
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 929
__first2, _II2 __last2) 
# 930
{ 
# 931
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 932
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 933
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 940
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 942
} 
# 944
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 946
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 947
__val, _Compare __comp) 
# 948
{ 
# 950
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 952
_DistanceType __len = std::distance(__first, __last); 
# 954
while (__len > 0) 
# 955
{ 
# 956
_DistanceType __half = __len >> 1; 
# 957
_ForwardIterator __middle = __first; 
# 958
std::advance(__middle, __half); 
# 959
if (__comp(__middle, __val)) 
# 960
{ 
# 961
__first = __middle; 
# 962
++__first; 
# 963
__len = ((__len - __half) - 1); 
# 964
} else { 
# 966
__len = __half; }  
# 967
}  
# 968
return __first; 
# 969
} 
# 982 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 984
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 985
__val) 
# 986
{ 
# 991
; 
# 993
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 995
} 
# 1000
constexpr int __lg(int __n) 
# 1001
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1004
constexpr unsigned __lg(unsigned __n) 
# 1005
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1008
constexpr long __lg(long __n) 
# 1009
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1012
constexpr unsigned long __lg(unsigned long __n) 
# 1013
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1016
constexpr long long __lg(long long __n) 
# 1017
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1020
constexpr unsigned long long __lg(unsigned long long __n) 
# 1021
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1039 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1041
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1042
{ 
# 1049
; 
# 1051
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1054
} 
# 1071 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1073
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1074
__first2, _BinaryPredicate __binary_pred) 
# 1075
{ 
# 1079
; 
# 1081
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1082
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1083
return false; }  }  
# 1084
return true; 
# 1085
} 
# 1104 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1106
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1107
{ 
# 1114
; 
# 1115
; 
# 1117
using _RATag = random_access_iterator_tag; 
# 1118
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1119
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1120
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1121
if (_RAIters()) 
# 1122
{ 
# 1123
auto __d1 = std::distance(__first1, __last1); 
# 1124
auto __d2 = std::distance(__first2, __last2); 
# 1125
if (__d1 != __d2) { 
# 1126
return false; }  
# 1127
return std::equal(__first1, __last1, __first2); 
# 1128
}  
# 1130
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1132
if (!((*__first1) == (*__first2))) { 
# 1133
return false; }  }  
# 1134
return (__first1 == __last1) && (__first2 == __last2); 
# 1135
} 
# 1153 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1155
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1156
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1157
{ 
# 1161
; 
# 1162
; 
# 1164
using _RATag = random_access_iterator_tag; 
# 1165
using _Cat1 = typename iterator_traits< _IIter1> ::iterator_category; 
# 1166
using _Cat2 = typename iterator_traits< _IIter2> ::iterator_category; 
# 1167
using _RAIters = __and_< is_same< typename iterator_traits< _IIter1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _IIter2> ::iterator_category, random_access_iterator_tag> > ; 
# 1168
if (_RAIters()) 
# 1169
{ 
# 1170
auto __d1 = std::distance(__first1, __last1); 
# 1171
auto __d2 = std::distance(__first2, __last2); 
# 1172
if (__d1 != __d2) { 
# 1173
return false; }  
# 1174
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1176
}  
# 1178
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1180
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1181
return false; }  }  
# 1182
return (__first1 == __last1) && (__first2 == __last2); 
# 1183
} 
# 1201 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1203
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1204
__first2, _II2 __last2) 
# 1205
{ 
# 1215
; 
# 1216
; 
# 1218
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1222
} 
# 1237 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1239
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1240
__first2, _II2 __last2, _Compare __comp) 
# 1241
{ 
# 1245
; 
# 1246
; 
# 1248
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1251
} 
# 1253
template< class _InputIterator1, class _InputIterator2, class 
# 1254
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1256
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1257
__first2, _BinaryPredicate __binary_pred) 
# 1258
{ 
# 1259
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1260
{ 
# 1261
++__first1; 
# 1262
++__first2; 
# 1263
}  
# 1264
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1265
} 
# 1280 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1282
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1283
__first2) 
# 1284
{ 
# 1291
; 
# 1293
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1295
} 
# 1313 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1314
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1316
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1317
__first2, _BinaryPredicate __binary_pred) 
# 1318
{ 
# 1322
; 
# 1324
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1326
} 
# 1330
template< class _InputIterator1, class _InputIterator2, class 
# 1331
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1333
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1334
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1335
__binary_pred) 
# 1336
{ 
# 1337
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1339
{ 
# 1340
++__first1; 
# 1341
++__first2; 
# 1342
}  
# 1343
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1344
} 
# 1360 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1362
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1363
__first2, _InputIterator2 __last2) 
# 1364
{ 
# 1371
; 
# 1372
; 
# 1374
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1376
} 
# 1395 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1396
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1398
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1399
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1400
__binary_pred) 
# 1401
{ 
# 1405
; 
# 1406
; 
# 1408
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1410
} 
# 1414
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 21 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 6 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw()
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw()
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw()
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw(); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n, locale_t __loc) throw(); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 135
extern ::size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 150
extern ::size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, ::size_t __n, locale_t __loc) throw(); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 159
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 160
 __attribute((__pure__)); 
# 161
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 162
 __attribute((__pure__)); 
# 169
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 170
 __attribute((__pure__)); 
# 171
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 172
 __attribute((__pure__)); 
# 181 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 182
 __attribute((__pure__)); 
# 187
extern ::size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 188
 __attribute((__pure__)); 
# 191
extern ::size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 192
 __attribute((__pure__)); 
# 195
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 196
 __attribute((__pure__)); 
# 197
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 199
 __attribute((__pure__)); 
# 206
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 207
 __attribute((__pure__)); 
# 208
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 210
 __attribute((__pure__)); 
# 217
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 222
extern ::size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 227
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 228
 __attribute((__pure__)); 
# 229
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 231
 __attribute((__pure__)); 
# 240 "/usr/include/wchar.h" 3
extern ::size_t wcsnlen(const wchar_t * __s, ::size_t __maxlen) throw()
# 241
 __attribute((__pure__)); 
# 247
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, ::size_t __n) throw() __asm__("wmemchr")
# 248
 __attribute((__pure__)); 
# 249
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, ::size_t __n) throw() __asm__("wmemchr")
# 251
 __attribute((__pure__)); 
# 258
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw()
# 259
 __attribute((__pure__)); 
# 262
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 267
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw(); 
# 271
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, ::size_t __n) throw(); 
# 276
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 284
extern wint_t btowc(int __c) throw(); 
# 288
extern int wctob(wint_t __c) throw(); 
# 292
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 296
extern ::size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 301
extern ::size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 305
extern ::size_t __mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 307
extern ::size_t mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 337 "/usr/include/wchar.h" 3
extern ::size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 343
extern ::size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 351
extern ::size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 357
extern ::size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 367
extern int wcwidth(wchar_t __c) throw(); 
# 371
extern int wcswidth(const wchar_t * __s, ::size_t __n) throw(); 
# 377
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 382
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 384
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 396 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 401
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 411 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 416
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 428 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 433
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 441
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 448
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 457
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 464
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 473
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 477
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 482
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 487
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 492
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 496
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 500
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 511 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 517
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 529 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 535
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 551 "/usr/include/wchar.h" 3
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 556
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw(); 
# 567 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, ::size_t * __sizeloc) throw(); 
# 573
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 580
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 587
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 590
extern int swprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 598
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 606
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 611
extern int vswprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 621
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 628
extern int wscanf(const wchar_t *__restrict__ __format, ...); 
# 631
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw(); 
# 673 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 681
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 685
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 727 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 728
extern wint_t getwc(__FILE * __stream); 
# 734
extern wint_t getwchar(); 
# 741
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 742
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 748
extern wint_t putwchar(wchar_t __wc); 
# 756
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 763
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 771
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 782 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 783
extern wint_t getwchar_unlocked(); 
# 791
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 799
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 808 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 809
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 818 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 827
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 835
extern ::size_t wcsftime(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 842
extern ::size_t wcsftime_l(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 857 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/7/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/7/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 139
using ::wint_t;
# 141
using ::btowc;
# 142
using ::fgetwc;
# 143
using ::fgetws;
# 144
using ::fputwc;
# 145
using ::fputws;
# 146
using ::fwide;
# 147
using ::fwprintf;
# 148
using ::fwscanf;
# 149
using ::getwc;
# 150
using ::getwchar;
# 151
using ::mbrlen;
# 152
using ::mbrtowc;
# 153
using ::mbsinit;
# 154
using ::mbsrtowcs;
# 155
using ::putwc;
# 156
using ::putwchar;
# 158
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 167
using ::vswprintf;
# 170
using ::vswscanf;
# 172
using ::vwprintf;
# 174
using ::vwscanf;
# 176
using ::wcrtomb;
# 177
using ::wcscat;
# 178
using ::wcscmp;
# 179
using ::wcscoll;
# 180
using ::wcscpy;
# 181
using ::wcscspn;
# 182
using ::wcsftime;
# 183
using ::wcslen;
# 184
using ::wcsncat;
# 185
using ::wcsncmp;
# 186
using ::wcsncpy;
# 187
using ::wcsrtombs;
# 188
using ::wcsspn;
# 189
using ::wcstod;
# 191
using ::wcstof;
# 193
using ::wcstok;
# 194
using ::wcstol;
# 195
using ::wcstoul;
# 196
using ::wcsxfrm;
# 197
using ::wctob;
# 198
using ::wmemcmp;
# 199
using ::wmemcpy;
# 200
using ::wmemmove;
# 201
using ::wmemset;
# 202
using ::wprintf;
# 203
using ::wscanf;
# 204
using ::wcschr;
# 205
using ::wcspbrk;
# 206
using ::wcsrchr;
# 207
using ::wcsstr;
# 208
using ::wmemchr;
# 233 "/usr/include/c++/7/cwchar" 3
}
# 241
namespace __gnu_cxx { 
# 248
using ::wcstold;
# 257 "/usr/include/c++/7/cwchar" 3
using ::wcstoll;
# 258
using ::wcstoull;
# 260
}
# 262
namespace std { 
# 264
using __gnu_cxx::wcstold;
# 265
using __gnu_cxx::wcstoll;
# 266
using __gnu_cxx::wcstoull;
# 267
}
# 277 "/usr/include/c++/7/cwchar" 3
namespace std { 
# 297
}
# 68 "/usr/include/c++/7/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/7/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/7/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/7/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/7/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
operator streamoff() const { return _M_off; } 
# 141
void state(_StateT __st) 
# 142
{ (_M_state) = __st; } 
# 146
_StateT state() const 
# 147
{ return _M_state; } 
# 154
fpos &operator+=(streamoff __off) 
# 155
{ 
# 156
(_M_off) += __off; 
# 157
return *this; 
# 158
} 
# 165
fpos &operator-=(streamoff __off) 
# 166
{ 
# 167
(_M_off) -= __off; 
# 168
return *this; 
# 169
} 
# 178
fpos operator+(streamoff __off) const 
# 179
{ 
# 180
fpos __pos(*this); 
# 181
__pos += __off; 
# 182
return __pos; 
# 183
} 
# 192
fpos operator-(streamoff __off) const 
# 193
{ 
# 194
fpos __pos(*this); 
# 195
__pos -= __off; 
# 196
return __pos; 
# 197
} 
# 205
streamoff operator-(const fpos &__other) const 
# 206
{ return (_M_off) - (__other._M_off); } 
# 207
}; 
# 214
template< class _StateT> inline bool 
# 216
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 217
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 219
template< class _StateT> inline bool 
# 221
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 222
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 234
typedef fpos< __mbstate_t>  u16streampos; 
# 236
typedef fpos< __mbstate_t>  u32streampos; 
# 240
}
# 47 "/usr/include/c++/7/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/7/bits/char_traits.h" 3
template< class _CharT> 
# 62
struct _Char_types { 
# 64
typedef unsigned long int_type; 
# 65
typedef std::streampos pos_type; 
# 66
typedef std::streamoff off_type; 
# 67
typedef mbstate_t state_type; 
# 68
}; 
# 86 "/usr/include/c++/7/bits/char_traits.h" 3
template< class _CharT> 
# 87
struct char_traits { 
# 89
typedef _CharT char_type; 
# 90
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 91
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 92
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 93
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 96
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 97
{ __c1 = __c2; } 
# 100
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 == __c2; } 
# 104
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 105
{ return __c1 < __c2; } 
# 108
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 111
static constexpr std::size_t length(const char_type * __s); 
# 114
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 117
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 120
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 123
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 126
static constexpr char_type to_char_type(const int_type &__c) 
# 127
{ return static_cast< char_type>(__c); } 
# 130
static constexpr int_type to_int_type(const char_type &__c) 
# 131
{ return static_cast< int_type>(__c); } 
# 134
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 135
{ return __c1 == __c2; } 
# 138
static constexpr int_type eof() 
# 139
{ return static_cast< int_type>(-1); } 
# 142
static constexpr int_type not_eof(const int_type &__c) 
# 143
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 144
}; 
# 146
template< class _CharT> constexpr int 
# 149
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 150
{ 
# 151
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 152
if ((lt)(__s1[__i], __s2[__i])) { 
# 153
return -1; } else { 
# 154
if ((lt)(__s2[__i], __s1[__i])) { 
# 155
return 1; }  }  }  
# 156
return 0; 
# 157
} 
# 159
template< class _CharT> constexpr std::size_t 
# 162
char_traits< _CharT> ::length(const char_type *__p) 
# 163
{ 
# 164
std::size_t __i = (0); 
# 165
while (!(eq)(__p[__i], char_type())) { 
# 166
++__i; }  
# 167
return __i; 
# 168
} 
# 170
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 173
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 174
{ 
# 175
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 176
if ((eq)(__s[__i], __a)) { 
# 177
return __s + __i; }  }  
# 178
return 0; 
# 179
} 
# 181
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 184
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 185
{ 
# 186
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 188
} 
# 190
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 193
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 194
{ 
# 196
std::copy(__s2, __s2 + __n, __s1); 
# 197
return __s1; 
# 198
} 
# 200
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 203
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 204
{ 
# 206
std::fill_n(__s, __n, __a); 
# 207
return __s; 
# 208
} 
# 211
}
# 213
namespace std __attribute((__visibility__("default"))) { 
# 268 "/usr/include/c++/7/bits/char_traits.h" 3
template< class _CharT> 
# 269
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 270
}; 
# 275
template<> struct char_traits< char>  { 
# 277
typedef char char_type; 
# 278
typedef int int_type; 
# 279
typedef streampos pos_type; 
# 280
typedef streamoff off_type; 
# 281
typedef mbstate_t state_type; 
# 284
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 285
{ __c1 = __c2; } 
# 288
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 289
{ return __c1 == __c2; } 
# 292
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 293
{ 
# 295
return ((static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2))); 
# 297
} 
# 300
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 301
{ 
# 308
if (__n == (0)) { 
# 309
return 0; }  
# 310
return __builtin_memcmp(__s1, __s2, __n); 
# 311
} 
# 314
static size_t length(const char_type *__s) 
# 315
{ 
# 320
return __builtin_strlen(__s); 
# 321
} 
# 324
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 325
{ 
# 332
if (__n == (0)) { 
# 333
return 0; }  
# 334
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 335
} 
# 338
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 339
{ 
# 340
if (__n == (0)) { 
# 341
return __s1; }  
# 342
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 343
} 
# 346
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 347
{ 
# 348
if (__n == (0)) { 
# 349
return __s1; }  
# 350
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 351
} 
# 354
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 355
{ 
# 356
if (__n == (0)) { 
# 357
return __s; }  
# 358
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 359
} 
# 362
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 363
{ return static_cast< char_type>(__c); } 
# 368
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 369
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 372
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 373
{ return __c1 == __c2; } 
# 376
static constexpr int_type eof() noexcept 
# 377
{ return static_cast< int_type>(-1); } 
# 380
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 381
{ return (__c == eof()) ? 0 : __c; } 
# 382
}; 
# 388
template<> struct char_traits< wchar_t>  { 
# 390
typedef wchar_t char_type; 
# 391
typedef wint_t int_type; 
# 392
typedef streamoff off_type; 
# 393
typedef wstreampos pos_type; 
# 394
typedef mbstate_t state_type; 
# 397
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 398
{ __c1 = __c2; } 
# 401
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 402
{ return __c1 == __c2; } 
# 405
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 406
{ return __c1 < __c2; } 
# 409
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 410
{ 
# 417
if (__n == (0)) { 
# 418
return 0; } else { 
# 420
return wmemcmp(__s1, __s2, __n); }  
# 421
} 
# 424
static size_t length(const char_type *__s) 
# 425
{ 
# 431
return wcslen(__s); 
# 432
} 
# 435
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 436
{ 
# 443
if (__n == (0)) { 
# 444
return 0; } else { 
# 446
return wmemchr(__s, __a, __n); }  
# 447
} 
# 450
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 451
{ 
# 452
if (__n == (0)) { 
# 453
return __s1; }  
# 454
return wmemmove(__s1, __s2, __n); 
# 455
} 
# 458
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 459
{ 
# 460
if (__n == (0)) { 
# 461
return __s1; }  
# 462
return wmemcpy(__s1, __s2, __n); 
# 463
} 
# 466
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 467
{ 
# 468
if (__n == (0)) { 
# 469
return __s; }  
# 470
return wmemset(__s, __a, __n); 
# 471
} 
# 474
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 475
{ return (char_type)__c; } 
# 478
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 479
{ return (int_type)__c; } 
# 482
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 483
{ return __c1 == __c2; } 
# 486
static constexpr int_type eof() noexcept 
# 487
{ return static_cast< int_type>(4294967295U); } 
# 490
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 491
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 492
}; 
# 496
}
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef signed char int_least8_t; 
# 44
typedef short int_least16_t; 
# 45
typedef int int_least32_t; 
# 47
typedef long int_least64_t; 
# 54
typedef unsigned char uint_least8_t; 
# 55
typedef unsigned short uint_least16_t; 
# 56
typedef unsigned uint_least32_t; 
# 58
typedef unsigned long uint_least64_t; 
# 68 "/usr/include/stdint.h" 3
typedef signed char int_fast8_t; 
# 70
typedef long int_fast16_t; 
# 71
typedef long int_fast32_t; 
# 72
typedef long int_fast64_t; 
# 81 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 83
typedef unsigned long uint_fast16_t; 
# 84
typedef unsigned long uint_fast32_t; 
# 85
typedef unsigned long uint_fast64_t; 
# 97 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 100
typedef unsigned long uintptr_t; 
# 111 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 112
typedef __uintmax_t uintmax_t; 
# 46 "/usr/include/c++/7/cstdint" 3
namespace std { 
# 48
using ::int8_t;
# 49
using ::int16_t;
# 50
using ::int32_t;
# 51
using ::int64_t;
# 53
using ::int_fast8_t;
# 54
using ::int_fast16_t;
# 55
using ::int_fast32_t;
# 56
using ::int_fast64_t;
# 58
using ::int_least8_t;
# 59
using ::int_least16_t;
# 60
using ::int_least32_t;
# 61
using ::int_least64_t;
# 63
using ::intmax_t;
# 64
using ::intptr_t;
# 66
using ::uint8_t;
# 67
using ::uint16_t;
# 68
using ::uint32_t;
# 69
using ::uint64_t;
# 71
using ::uint_fast8_t;
# 72
using ::uint_fast16_t;
# 73
using ::uint_fast32_t;
# 74
using ::uint_fast64_t;
# 76
using ::uint_least8_t;
# 79
using ::uint_least64_t;
# 81
using ::uintmax_t;
# 82
using ::uintptr_t;
# 83
}
# 503 "/usr/include/c++/7/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 508
template<> struct char_traits< char16_t>  { 
# 510
typedef char16_t char_type; 
# 511
typedef uint_least16_t int_type; 
# 512
typedef streamoff off_type; 
# 513
typedef u16streampos pos_type; 
# 514
typedef mbstate_t state_type; 
# 517
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 518
{ __c1 = __c2; } 
# 521
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 522
{ return __c1 == __c2; } 
# 525
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 526
{ return __c1 < __c2; } 
# 529
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 530
{ 
# 531
for (size_t __i = (0); __i < __n; ++__i) { 
# 532
if (lt(__s1[__i], __s2[__i])) { 
# 533
return -1; } else { 
# 534
if (lt(__s2[__i], __s1[__i])) { 
# 535
return 1; }  }  }  
# 536
return 0; 
# 537
} 
# 540
static size_t length(const char_type *__s) 
# 541
{ 
# 542
size_t __i = (0); 
# 543
while (!eq(__s[__i], char_type())) { 
# 544
++__i; }  
# 545
return __i; 
# 546
} 
# 549
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 550
{ 
# 551
for (size_t __i = (0); __i < __n; ++__i) { 
# 552
if (eq(__s[__i], __a)) { 
# 553
return __s + __i; }  }  
# 554
return 0; 
# 555
} 
# 558
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 559
{ 
# 560
if (__n == (0)) { 
# 561
return __s1; }  
# 562
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 564
} 
# 567
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 568
{ 
# 569
if (__n == (0)) { 
# 570
return __s1; }  
# 571
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 573
} 
# 576
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 577
{ 
# 578
for (size_t __i = (0); __i < __n; ++__i) { 
# 579
assign(__s[__i], __a); }  
# 580
return __s; 
# 581
} 
# 584
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 585
{ return (char_type)__c; } 
# 588
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 589
{ return (int_type)__c; } 
# 592
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 593
{ return __c1 == __c2; } 
# 596
static constexpr int_type eof() noexcept 
# 597
{ return static_cast< int_type>(-1); } 
# 600
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 601
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 602
}; 
# 605
template<> struct char_traits< char32_t>  { 
# 607
typedef char32_t char_type; 
# 608
typedef uint_least32_t int_type; 
# 609
typedef streamoff off_type; 
# 610
typedef u32streampos pos_type; 
# 611
typedef mbstate_t state_type; 
# 614
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 615
{ __c1 = __c2; } 
# 618
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 619
{ return __c1 == __c2; } 
# 622
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 623
{ return __c1 < __c2; } 
# 626
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 627
{ 
# 628
for (size_t __i = (0); __i < __n; ++__i) { 
# 629
if (lt(__s1[__i], __s2[__i])) { 
# 630
return -1; } else { 
# 631
if (lt(__s2[__i], __s1[__i])) { 
# 632
return 1; }  }  }  
# 633
return 0; 
# 634
} 
# 637
static size_t length(const char_type *__s) 
# 638
{ 
# 639
size_t __i = (0); 
# 640
while (!eq(__s[__i], char_type())) { 
# 641
++__i; }  
# 642
return __i; 
# 643
} 
# 646
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 647
{ 
# 648
for (size_t __i = (0); __i < __n; ++__i) { 
# 649
if (eq(__s[__i], __a)) { 
# 650
return __s + __i; }  }  
# 651
return 0; 
# 652
} 
# 655
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 656
{ 
# 657
if (__n == (0)) { 
# 658
return __s1; }  
# 659
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 661
} 
# 664
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 665
{ 
# 666
if (__n == (0)) { 
# 667
return __s1; }  
# 668
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 670
} 
# 673
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 674
{ 
# 675
for (size_t __i = (0); __i < __n; ++__i) { 
# 676
assign(__s[__i], __a); }  
# 677
return __s; 
# 678
} 
# 681
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 682
{ return (char_type)__c; } 
# 685
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 686
{ return (int_type)__c; } 
# 689
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 690
{ return __c1 == __c2; } 
# 693
static constexpr int_type eof() noexcept 
# 694
{ return static_cast< int_type>(-1); } 
# 697
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 698
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 699
}; 
# 702
}
# 40 "/usr/include/c++/7/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57 "/usr/include/c++/7/ext/new_allocator.h" 3
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef new_allocator< _Tp1>  other; }; 
# 76
typedef std::true_type propagate_on_container_move_assignment; 
# 79
new_allocator() noexcept { } 
# 81
new_allocator(const new_allocator &) noexcept { } 
# 83
template< class _Tp1> 
# 84
new_allocator(const new_allocator< _Tp1>  &) noexcept { } 
# 86
~new_allocator() noexcept { } 
# 89
pointer address(reference __x) const noexcept 
# 90
{ return std::__addressof(__x); } 
# 93
const_pointer address(const_reference __x) const noexcept 
# 94
{ return std::__addressof(__x); } 
# 99
pointer allocate(size_type __n, const void * = 0) 
# 100
{ 
# 101
if (__n > max_size()) { 
# 102
std::__throw_bad_alloc(); }  
# 111 "/usr/include/c++/7/ext/new_allocator.h" 3
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 112
} 
# 116
void deallocate(pointer __p, size_type) 
# 117
{ 
# 125
::operator delete(__p); 
# 126
} 
# 129
size_type max_size() const noexcept 
# 130
{ return ((std::size_t)(-1)) / sizeof(_Tp); } 
# 133
template< class _Up, class ..._Args> void 
# 135
construct(_Up *__p, _Args &&...__args) 
# 136
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 138
template< class _Up> void 
# 140
destroy(_Up *__p) { __p->~_Up(); } 
# 151 "/usr/include/c++/7/ext/new_allocator.h" 3
}; 
# 153
template< class _Tp> inline bool 
# 155
operator==(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 156
{ return true; } 
# 158
template< class _Tp> inline bool 
# 160
operator!=(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 161
{ return false; } 
# 164
}
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 57 "/usr/include/c++/7/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template<> class allocator< void>  { 
# 71
public: typedef size_t size_type; 
# 72
typedef ptrdiff_t difference_type; 
# 73
typedef void *pointer; 
# 74
typedef const void *const_pointer; 
# 75
typedef void value_type; 
# 77
template< class _Tp1> 
# 78
struct rebind { 
# 79
typedef std::allocator< _Tp1>  other; }; 
# 84
typedef true_type propagate_on_container_move_assignment; 
# 86
typedef true_type is_always_equal; 
# 88
template< class _Up, class ..._Args> void 
# 90
construct(_Up *__p, _Args &&...__args) 
# 91
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 93
template< class _Up> void 
# 95
destroy(_Up *__p) { __p->~_Up(); } 
# 97
}; 
# 107 "/usr/include/c++/7/bits/allocator.h" 3
template< class _Tp> 
# 108
class allocator : public __allocator_base< _Tp>  { 
# 111
public: typedef std::size_t size_type; 
# 112
typedef std::ptrdiff_t difference_type; 
# 113
typedef _Tp *pointer; 
# 114
typedef const _Tp *const_pointer; 
# 115
typedef _Tp &reference; 
# 116
typedef const _Tp &const_reference; 
# 117
typedef _Tp value_type; 
# 119
template< class _Tp1> 
# 120
struct rebind { 
# 121
typedef allocator< _Tp1>  other; }; 
# 126
typedef std::true_type propagate_on_container_move_assignment; 
# 128
typedef std::true_type is_always_equal; 
# 131
allocator() throw() { } 
# 133
allocator(const allocator &__a) throw() : std::__allocator_base< _Tp> (__a) 
# 134
{ } 
# 136
template< class _Tp1> 
# 137
allocator(const allocator< _Tp1>  &) throw() { } 
# 139
~allocator() throw() { } 
# 142
}; 
# 144
template< class _T1, class _T2> inline bool 
# 146
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 148
{ return true; } 
# 150
template< class _Tp> inline bool 
# 152
operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 154
{ return true; } 
# 156
template< class _T1, class _T2> inline bool 
# 158
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 160
{ return false; } 
# 162
template< class _Tp> inline bool 
# 164
operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 166
{ return false; } 
# 173
extern template class allocator< char> ;
# 174
extern template class allocator< wchar_t> ;
# 181
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 182
struct __alloc_swap { 
# 183
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 185
template< class _Alloc> 
# 186
struct __alloc_swap< _Alloc, false>  { 
# 189
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 190
{ 
# 192
if (__one != __two) { 
# 193
swap(__one, __two); }  
# 194
} 
# 195
}; 
# 198
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 199
struct __alloc_neq { 
# 202
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 203
{ return false; } 
# 204
}; 
# 206
template< class _Alloc> 
# 207
struct __alloc_neq< _Alloc, false>  { 
# 210
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 211
{ return __one != __two; } 
# 212
}; 
# 215
template< class _Tp, bool 
# 216
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 218
struct __shrink_to_fit_aux { 
# 219
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 221
template< class _Tp> 
# 222
struct __shrink_to_fit_aux< _Tp, true>  { 
# 225
static bool _S_do_it(_Tp &__c) noexcept 
# 226
{ 
# 228
try 
# 229
{ 
# 230
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 233
return true; 
# 234
} 
# 235
catch (...) 
# 236
{ return false; }  
# 240
} 
# 241
}; 
# 245
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) throw(); 
# 125
extern lconv *localeconv() throw(); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) throw(); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) throw(); 
# 180
extern void freelocale(locale_t __dataset) throw(); 
# 187
extern locale_t uselocale(locale_t __dataset) throw(); 
# 195
}
# 51 "/usr/include/c++/7/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start((__args),__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 42 "/usr/include/c++/7/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/7/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 213
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() throw()
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() throw()
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() throw()
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) throw(); 
# 109
extern int isalpha(int) throw(); 
# 110
extern int iscntrl(int) throw(); 
# 111
extern int isdigit(int) throw(); 
# 112
extern int islower(int) throw(); 
# 113
extern int isgraph(int) throw(); 
# 114
extern int isprint(int) throw(); 
# 115
extern int ispunct(int) throw(); 
# 116
extern int isspace(int) throw(); 
# 117
extern int isupper(int) throw(); 
# 118
extern int isxdigit(int) throw(); 
# 122
extern int tolower(int __c) throw(); 
# 125
extern int toupper(int __c) throw(); 
# 130
extern int isblank(int) throw(); 
# 135
extern int isctype(int __c, int __mask) throw(); 
# 142
extern int isascii(int __c) throw(); 
# 146
extern int toascii(int __c) throw(); 
# 150
extern int _toupper(int) throw(); 
# 151
extern int _tolower(int) throw(); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) throw(); 
# 252
extern int isalpha_l(int, locale_t) throw(); 
# 253
extern int iscntrl_l(int, locale_t) throw(); 
# 254
extern int isdigit_l(int, locale_t) throw(); 
# 255
extern int islower_l(int, locale_t) throw(); 
# 256
extern int isgraph_l(int, locale_t) throw(); 
# 257
extern int isprint_l(int, locale_t) throw(); 
# 258
extern int ispunct_l(int, locale_t) throw(); 
# 259
extern int isspace_l(int, locale_t) throw(); 
# 260
extern int isupper_l(int, locale_t) throw(); 
# 261
extern int isxdigit_l(int, locale_t) throw(); 
# 263
extern int isblank_l(int, locale_t) throw(); 
# 267
extern int __tolower_l(int __c, locale_t __l) throw(); 
# 268
extern int tolower_l(int __c, locale_t __l) throw(); 
# 271
extern int __toupper_l(int __c, locale_t __l) throw(); 
# 272
extern int toupper_l(int __c, locale_t __l) throw(); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/7/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/7/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/7/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 143
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 148
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class num_get; 
# 150
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class num_put; 
# 153
inline namespace __cxx11 { 
# 154
template< class _CharT> class numpunct; 
# 155
template< class _CharT> class numpunct_byname; 
# 156
}
# 158
inline namespace __cxx11 { 
# 160
template< class _CharT> class collate; 
# 162
template< class _CharT> class collate_byname; 
# 164
}
# 167
class time_base; 
# 168
inline namespace __cxx11 { 
# 169
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get; 
# 171
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get_byname; 
# 173
}
# 174
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put; 
# 176
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put_byname; 
# 180
class money_base; 
# 181
inline namespace __cxx11 { 
# 182
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class money_get; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class money_put; 
# 186
}
# 187
inline namespace __cxx11 { 
# 188
template< class _CharT, bool _Intl = false> class moneypunct; 
# 190
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 192
}
# 195
class messages_base; 
# 196
inline namespace __cxx11 { 
# 197
template< class _CharT> class messages; 
# 199
template< class _CharT> class messages_byname; 
# 201
}
# 204
}
# 36 "/usr/include/c++/7/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/7/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = __out.rdbuf()->sputn(__s, __n); 
# 51
if (__put != __n) { 
# 52
__out.setstate(__ios_base::badbit); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = __out.fill(); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
__out.setstate(__ios_base::badbit); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = __out.width(); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = (__out.flags() & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if (__out.good()) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && __out.good()) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
__out.width(0); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
__out._M_setstate(__ios_base::badbit); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ __out._M_setstate(__ios_base::badbit); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 37 "/usr/include/c++/7/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Container> inline auto 
# 48
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 49
{ return __cont.begin(); } 
# 56
template< class _Container> inline auto 
# 58
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 59
{ return __cont.begin(); } 
# 66
template< class _Container> inline auto 
# 68
end(_Container &__cont)->__decltype((__cont.end())) 
# 69
{ return __cont.end(); } 
# 76
template< class _Container> inline auto 
# 78
end(const _Container &__cont)->__decltype((__cont.end())) 
# 79
{ return __cont.end(); } 
# 85
template< class _Tp, size_t _Nm> constexpr _Tp *
# 87
begin(_Tp (&__arr)[_Nm]) 
# 88
{ return __arr; } 
# 95
template< class _Tp, size_t _Nm> constexpr _Tp *
# 97
end(_Tp (&__arr)[_Nm]) 
# 98
{ return __arr + _Nm; } 
# 102
template< class _Tp> class valarray; 
# 104
template< class _Tp> _Tp *begin(valarray< _Tp>  &); 
# 105
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &); 
# 106
template< class _Tp> _Tp *end(valarray< _Tp>  &); 
# 107
template< class _Tp> const _Tp *end(const valarray< _Tp>  &); 
# 114
template< class _Container> constexpr auto 
# 116
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 118
{ return std::begin(__cont); } 
# 125
template< class _Container> constexpr auto 
# 127
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 129
{ return std::end(__cont); } 
# 136
template< class _Container> inline auto 
# 138
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 139
{ return __cont.rbegin(); } 
# 146
template< class _Container> inline auto 
# 148
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 149
{ return __cont.rbegin(); } 
# 156
template< class _Container> inline auto 
# 158
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 159
{ return __cont.rend(); } 
# 166
template< class _Container> inline auto 
# 168
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 169
{ return __cont.rend(); } 
# 176
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 178
rbegin(_Tp (&__arr)[_Nm]) 
# 179
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 186
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 188
rend(_Tp (&__arr)[_Nm]) 
# 189
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 196
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 198
rbegin(initializer_list< _Tp>  __il) 
# 199
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 206
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 208
rend(initializer_list< _Tp>  __il) 
# 209
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 216
template< class _Container> inline auto 
# 218
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 219
{ return std::rbegin(__cont); } 
# 226
template< class _Container> inline auto 
# 228
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 229
{ return std::rend(__cont); } 
# 324 "/usr/include/c++/7/bits/range_access.h" 3
}
# 30 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
struct sched_param { 
# 77
int sched_priority; 
# 78
}; 
# 80
extern "C" {
# 84
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 88
extern int unshare(int __flags) throw(); 
# 91
extern int sched_getcpu() throw(); 
# 94
extern int setns(int __fd, int __nstype) throw(); 
# 97
}
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(::size_t __setsize, const cpu_set_t * __setp) throw(); 
# 119
extern cpu_set_t *__sched_cpualloc(::size_t __count) throw(); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 65
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 68
extern int sched_yield() throw(); 
# 71
extern int sched_get_priority_max(int __algorithm) throw(); 
# 74
extern int sched_get_priority_min(int __algorithm) throw(); 
# 77
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 121 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 125
extern int sched_getaffinity(__pid_t __pid, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 129
}
# 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 34 "/usr/include/pthread.h" 3
enum { 
# 35
PTHREAD_CREATE_JOINABLE, 
# 37
PTHREAD_CREATE_DETACHED
# 39
}; 
# 44
enum { 
# 45
PTHREAD_MUTEX_TIMED_NP, 
# 46
PTHREAD_MUTEX_RECURSIVE_NP, 
# 47
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 48
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 51
PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
# 52
PTHREAD_MUTEX_RECURSIVE, 
# 53
PTHREAD_MUTEX_ERRORCHECK, 
# 54
PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
# 58
PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
# 60
}; 
# 66
enum { 
# 67
PTHREAD_MUTEX_STALLED, 
# 68
PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
# 69
PTHREAD_MUTEX_ROBUST, 
# 70
PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
# 71
}; 
# 78
enum { 
# 79
PTHREAD_PRIO_NONE, 
# 80
PTHREAD_PRIO_INHERIT, 
# 81
PTHREAD_PRIO_PROTECT
# 82
}; 
# 116 "/usr/include/pthread.h" 3
enum { 
# 117
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 118
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 119
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 120
PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
# 121
}; 
# 157 "/usr/include/pthread.h" 3
enum { 
# 158
PTHREAD_INHERIT_SCHED, 
# 160
PTHREAD_EXPLICIT_SCHED
# 162
}; 
# 167
enum { 
# 168
PTHREAD_SCOPE_SYSTEM, 
# 170
PTHREAD_SCOPE_PROCESS
# 172
}; 
# 177
enum { 
# 178
PTHREAD_PROCESS_PRIVATE, 
# 180
PTHREAD_PROCESS_SHARED
# 182
}; 
# 191 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 193
void (*__routine)(void *); 
# 194
void *__arg; 
# 195
int __canceltype; 
# 196
_pthread_cleanup_buffer *__prev; 
# 197
}; 
# 201
enum { 
# 202
PTHREAD_CANCEL_ENABLE, 
# 204
PTHREAD_CANCEL_DISABLE
# 206
}; 
# 208
enum { 
# 209
PTHREAD_CANCEL_DEFERRED, 
# 211
PTHREAD_CANCEL_ASYNCHRONOUS
# 213
}; 
# 229 "/usr/include/pthread.h" 3
extern "C" {
# 234
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 237
 __attribute((__nonnull__(1, 3))); 
# 243
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 251
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 256
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 264
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 272
extern int pthread_detach(pthread_t __th) throw(); 
# 276
extern pthread_t pthread_self() throw() __attribute((const)); 
# 279
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 280
 __attribute((const)); 
# 288
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 291
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 292
 __attribute((__nonnull__(1))); 
# 295
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 297
 __attribute((__nonnull__(1, 2))); 
# 300
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 302
 __attribute((__nonnull__(1))); 
# 306
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, ::size_t * __guardsize) throw()
# 308
 __attribute((__nonnull__(1, 2))); 
# 311
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, ::size_t __guardsize) throw()
# 313
 __attribute((__nonnull__(1))); 
# 317
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 319
 __attribute((__nonnull__(1, 2))); 
# 322
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 324
 __attribute((__nonnull__(1, 2))); 
# 327
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 329
 __attribute((__nonnull__(1, 2))); 
# 332
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 333
 __attribute((__nonnull__(1))); 
# 336
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 338
 __attribute((__nonnull__(1, 2))); 
# 341
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 343
 __attribute((__nonnull__(1))); 
# 347
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 349
 __attribute((__nonnull__(1, 2))); 
# 352
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 353
 __attribute((__nonnull__(1))); 
# 356
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 358
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 364
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 366
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 369
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, ::size_t *__restrict__ __stacksize) throw()
# 371
 __attribute((__nonnull__(1, 2))); 
# 376
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, ::size_t __stacksize) throw()
# 378
 __attribute((__nonnull__(1))); 
# 382
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, ::size_t *__restrict__ __stacksize) throw()
# 385
 __attribute((__nonnull__(1, 2, 3))); 
# 390
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, ::size_t __stacksize) throw()
# 391
 __attribute((__nonnull__(1))); 
# 397
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 400
 __attribute((__nonnull__(1, 3))); 
# 404
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 407
 __attribute((__nonnull__(1, 3))); 
# 410
extern int pthread_getattr_default_np(pthread_attr_t * __attr) throw()
# 411
 __attribute((__nonnull__(1))); 
# 415
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) throw()
# 416
 __attribute((__nonnull__(1))); 
# 421
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 422
 __attribute((__nonnull__(2))); 
# 430
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 432
 __attribute((__nonnull__(3))); 
# 435
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 438
 __attribute((__nonnull__(2, 3))); 
# 441
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 447
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, ::size_t __buflen) throw()
# 449
 __attribute((__nonnull__(2))); 
# 452
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 453
 __attribute((__nonnull__(2))); 
# 459
extern int pthread_getconcurrency() throw(); 
# 462
extern int pthread_setconcurrency(int __level) throw(); 
# 470
extern int pthread_yield() throw(); 
# 475
extern int pthread_setaffinity_np(pthread_t __th, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 477
 __attribute((__nonnull__(3))); 
# 480
extern int pthread_getaffinity_np(pthread_t __th, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 482
 __attribute((__nonnull__(3))); 
# 495 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 496
 __attribute((__nonnull__(1, 2))); 
# 507 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 511
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 514
extern int pthread_cancel(pthread_t __th); 
# 519
extern void pthread_testcancel(); 
# 532
typedef 
# 525
struct { 
# 527
struct { 
# 528
__jmp_buf __cancel_jmp_buf; 
# 529
int __mask_was_saved; 
# 530
} __cancel_jmp_buf[1]; 
# 531
void *__pad[4]; 
# 532
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 541 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 543
void (*__cancel_routine)(void *); 
# 544
void *__cancel_arg; 
# 545
int __do_it; 
# 546
int __cancel_type; 
# 547
}; 
# 552
class __pthread_cleanup_class { 
# 554
void (*__cancel_routine)(void *); 
# 555
void *__cancel_arg; 
# 556
int __do_it; 
# 557
int __cancel_type; 
# 560
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 561
{ } 
# 562
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 563
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 564
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 565
} 
# 566
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 567
}; 
# 743 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 744
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 750
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 752
 __attribute((__nonnull__(1))); 
# 755
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 756
 __attribute((__nonnull__(1))); 
# 759
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 760
 __attribute((__nonnull__(1))); 
# 763
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 764
 __attribute((__nonnull__(1))); 
# 768
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 770
 __attribute((__nonnull__(1, 2))); 
# 774
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 775
 __attribute((__nonnull__(1))); 
# 779
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 782
 __attribute((__nonnull__(1, 2))); 
# 786
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 789
 __attribute((__nonnull__(1, 3))); 
# 794
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 795
 __attribute((__nonnull__(1))); 
# 797
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 798
 __attribute((__nonnull__(1))); 
# 807 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 808
 __attribute((__nonnull__(1))); 
# 811
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 812
 __attribute((__nonnull__(1))); 
# 815
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 818
 __attribute((__nonnull__(1, 2))); 
# 821
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 823
 __attribute((__nonnull__(1))); 
# 827
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 829
 __attribute((__nonnull__(1, 2))); 
# 834
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 835
 __attribute((__nonnull__(1))); 
# 839
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 842
 __attribute((__nonnull__(1, 2))); 
# 846
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 848
 __attribute((__nonnull__(1))); 
# 851
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 854
 __attribute((__nonnull__(1, 2))); 
# 857
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 859
 __attribute((__nonnull__(1))); 
# 863
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 865
 __attribute((__nonnull__(1, 2))); 
# 867
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 869
 __attribute((__nonnull__(1, 2))); 
# 873
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 875
 __attribute((__nonnull__(1))); 
# 877
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 879
 __attribute((__nonnull__(1))); 
# 889 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 891
 __attribute((__nonnull__(1))); 
# 894
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 895
 __attribute((__nonnull__(1))); 
# 898
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 899
 __attribute((__nonnull__(1))); 
# 902
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 903
 __attribute((__nonnull__(1))); 
# 907
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 909
 __attribute((__nonnull__(1, 2))); 
# 913
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 914
 __attribute((__nonnull__(1))); 
# 917
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 918
 __attribute((__nonnull__(1))); 
# 922
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 924
 __attribute((__nonnull__(1, 2))); 
# 928
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 929
 __attribute((__nonnull__(1))); 
# 935
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 936
 __attribute((__nonnull__(1))); 
# 939
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 940
 __attribute((__nonnull__(1))); 
# 943
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 946
 __attribute((__nonnull__(1, 2))); 
# 949
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 951
 __attribute((__nonnull__(1))); 
# 954
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 957
 __attribute((__nonnull__(1, 2))); 
# 960
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 961
 __attribute((__nonnull__(1))); 
# 969
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 971
 __attribute((__nonnull__(1))); 
# 974
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 975
 __attribute((__nonnull__(1))); 
# 978
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 979
 __attribute((__nonnull__(1))); 
# 982
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 983
 __attribute((__nonnull__(1))); 
# 990
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 992
 __attribute((__nonnull__(1, 2))); 
# 1001 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1004
 __attribute((__nonnull__(1, 2, 3))); 
# 1009
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1010
 __attribute((__nonnull__(1))); 
# 1013
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1014
 __attribute((__nonnull__(1))); 
# 1017
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1020
 __attribute((__nonnull__(1, 2))); 
# 1023
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1024
 __attribute((__nonnull__(1))); 
# 1028
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1031
 __attribute((__nonnull__(1, 2))); 
# 1034
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1036
 __attribute((__nonnull__(1))); 
# 1045 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1046
 __attribute((__nonnull__(1))); 
# 1049
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1050
 __attribute((__nonnull__(1))); 
# 1053
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1054
 __attribute((__nonnull__(1))); 
# 1057
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1058
 __attribute((__nonnull__(1))); 
# 1061
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1062
 __attribute((__nonnull__(1))); 
# 1069
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1072
 __attribute((__nonnull__(1))); 
# 1075
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1076
 __attribute((__nonnull__(1))); 
# 1079
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1080
 __attribute((__nonnull__(1))); 
# 1084
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1085
 __attribute((__nonnull__(1))); 
# 1088
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1089
 __attribute((__nonnull__(1))); 
# 1092
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1095
 __attribute((__nonnull__(1, 2))); 
# 1098
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1100
 __attribute((__nonnull__(1))); 
# 1112 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1114
 __attribute((__nonnull__(1))); 
# 1117
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1120
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1123
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1129
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1131
 __attribute((__nonnull__(2))); 
# 1146 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1160 "/usr/include/pthread.h" 3
}
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 101 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 102
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 103
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 105
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 106
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 107
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 108
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 109
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 111
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 113
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 115
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 116
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 118
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 120
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 121
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 122
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 124
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"))); 
# 125
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 126
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 127
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 128
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 129
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 131
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 132
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 133
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 134
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 135
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 236 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"))); 
# 247 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 248
{ 
# 249
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 251
return __gthread_active_ptr != (0); 
# 252
} 
# 659 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 660
__args) 
# 661
{ 
# 662
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 663
} 
# 666
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 667
{ 
# 668
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 669
} 
# 672
static inline int __gthread_detach(__gthread_t __threadid) 
# 673
{ 
# 674
return __gthrw_pthread_detach(__threadid); 
# 675
} 
# 678
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 679
{ 
# 680
return __gthrw_pthread_equal(__t1, __t2); 
# 681
} 
# 684
static inline __gthread_t __gthread_self() 
# 685
{ 
# 686
return __gthrw_pthread_self(); 
# 687
} 
# 690
static inline int __gthread_yield() 
# 691
{ 
# 692
return __gthrw_sched_yield(); 
# 693
} 
# 696
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 697
{ 
# 698
if (__gthread_active_p()) { 
# 699
return __gthrw_pthread_once(__once, __func); } else { 
# 701
return -1; }  
# 702
} 
# 705
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 706
{ 
# 707
return __gthrw_pthread_key_create(__key, __dtor); 
# 708
} 
# 711
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 712
{ 
# 713
return __gthrw_pthread_key_delete(__key); 
# 714
} 
# 717
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 718
{ 
# 719
return __gthrw_pthread_getspecific(__key); 
# 720
} 
# 723
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 724
{ 
# 725
return __gthrw_pthread_setspecific(__key, __ptr); 
# 726
} 
# 729
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 730
{ 
# 731
if (__gthread_active_p()) { 
# 732
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 733
} 
# 736
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 737
{ 
# 738
if (__gthread_active_p()) { 
# 739
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 741
return 0; }  
# 742
} 
# 745
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 746
{ 
# 747
if (__gthread_active_p()) { 
# 748
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 750
return 0; }  
# 751
} 
# 754
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 755
{ 
# 756
if (__gthread_active_p()) { 
# 757
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 759
return 0; }  
# 760
} 
# 764
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 765
__abs_timeout) 
# 766
{ 
# 767
if (__gthread_active_p()) { 
# 768
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 770
return 0; }  
# 771
} 
# 775
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 776
{ 
# 777
if (__gthread_active_p()) { 
# 778
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 780
return 0; }  
# 781
} 
# 808 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 809
{ 
# 810
return __gthread_mutex_lock(__mutex); 
# 811
} 
# 814
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 815
{ 
# 816
return __gthread_mutex_trylock(__mutex); 
# 817
} 
# 821
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 822
__abs_timeout) 
# 823
{ 
# 824
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 825
} 
# 829
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 830
{ 
# 831
return __gthread_mutex_unlock(__mutex); 
# 832
} 
# 835
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 836
{ 
# 837
return __gthread_mutex_destroy(__mutex); 
# 838
} 
# 850 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 851
{ 
# 852
return __gthrw_pthread_cond_broadcast(__cond); 
# 853
} 
# 856
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 857
{ 
# 858
return __gthrw_pthread_cond_signal(__cond); 
# 859
} 
# 862
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 863
{ 
# 864
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 865
} 
# 868
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 869
__abs_timeout) 
# 870
{ 
# 871
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 872
} 
# 875
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 876
__mutex) 
# 877
{ 
# 878
return __gthread_cond_wait(__cond, __mutex); 
# 879
} 
# 882
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 883
{ 
# 884
return __gthrw_pthread_cond_destroy(__cond); 
# 885
} 
# 151 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/7/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65 "/usr/include/c++/7/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 41 "/usr/include/c++/7/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
struct __allocator_traits_base { 
# 47
template< class _Tp, class _Up, class  = void> 
# 48
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 50
template< class _Tp, class _Up> 
# 51
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 53
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 57
protected: 
# 56
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 58
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 60
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 62
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 64
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 66
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 68
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 70
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 72
}; 
# 74
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 82
template< class _Alloc> 
# 83
struct allocator_traits : public __allocator_traits_base { 
# 86
typedef _Alloc allocator_type; 
# 88
typedef typename _Alloc::value_type value_type; 
# 95
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 100
private: 
# 99
template< template< class >  class _Func, class _Tp, class  = void> 
# 100
struct _Ptr { 
# 102
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 103
}; 
# 105
template< template< class >  class _Func, class _Tp> 
# 106
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 108
using type = _Func< _Alloc> ; 
# 109
}; 
# 112
template< class _A2, class _PtrT, class  = void> 
# 113
struct _Diff { 
# 114
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 116
template< class _A2, class _PtrT> 
# 117
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 118
using type = typename _A2::difference_type; }; 
# 121
template< class _A2, class _DiffT, class  = void> 
# 122
struct _Size : public make_unsigned< _DiffT>  { }; 
# 124
template< class _A2, class _DiffT> 
# 125
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 126
using type = typename _A2::size_type; }; 
# 135
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 143
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 151
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 159
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 167
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 175
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 184
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 193
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 202
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 205
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 207
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 213
private: 
# 211
template< class _Alloc2> static auto 
# 213
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 215
{ return __a.allocate(__n, __hint); } 
# 217
template< class _Alloc2> static pointer 
# 219
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 220
{ return __a.allocate(__n); } 
# 222
template< class _Tp, class ..._Args> 
# 223
struct __construct_helper { 
# 225
template< class _Alloc2, class 
# 226
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 225
__test(int); 
# 230
template< class > static false_type __test(...); 
# 233
using type = __decltype((__test< _Alloc> (0))); 
# 234
}; 
# 236
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 240
template< class _Tp, class ..._Args> static _Require< __has_construct< _Tp, _Args...> >  
# 242
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) 
# 243
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 245
template< class _Tp, class ..._Args> static _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 249
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) 
# 250
{ ::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); } 
# 252
template< class _Alloc2, class _Tp> static auto 
# 254
_S_destroy(_Alloc2 &__a, _Tp *__p, int)->__decltype((__a.destroy(__p))) 
# 256
{ __a.destroy(__p); } 
# 258
template< class _Alloc2, class _Tp> static void 
# 260
_S_destroy(_Alloc2 &, _Tp *__p, ...) 
# 261
{ __p->~_Tp(); } 
# 263
template< class _Alloc2> static auto 
# 265
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 267
{ return __a.max_size(); } 
# 269
template< class _Alloc2> static size_type 
# 271
_S_max_size(_Alloc2 &, ...) 
# 272
{ 
# 275
return __gnu_cxx::template __numeric_traits< size_type> ::__max / sizeof(value_type); 
# 277
} 
# 279
template< class _Alloc2> static auto 
# 281
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 283
{ return __a.select_on_container_copy_construction(); } 
# 285
template< class _Alloc2> static _Alloc2 
# 287
_S_select(_Alloc2 &__a, ...) 
# 288
{ return __a; } 
# 300 "/usr/include/c++/7/bits/alloc_traits.h" 3
public: static pointer allocate(_Alloc &__a, size_type __n) 
# 301
{ return __a.allocate(__n); } 
# 315 "/usr/include/c++/7/bits/alloc_traits.h" 3
static pointer allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 316
{ return _S_allocate(__a, __n, __hint, 0); } 
# 327 "/usr/include/c++/7/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 328
{ __a.deallocate(__p, __n); } 
# 341 "/usr/include/c++/7/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 342
construct(_Alloc &__a, _Tp *__p, _Args &&...__args)->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 344
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 354 "/usr/include/c++/7/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 355
destroy(_Alloc &__a, _Tp *__p) 
# 356
{ _S_destroy(__a, __p, 0); } 
# 366 "/usr/include/c++/7/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 367
{ return _S_max_size(__a, 0); } 
# 378 "/usr/include/c++/7/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 379
{ return _S_select(__rhs, 0); } 
# 380
}; 
# 383
template< class _Tp> 
# 384
struct allocator_traits< allocator< _Tp> >  { 
# 387
using allocator_type = allocator< _Tp> ; 
# 389
using value_type = _Tp; 
# 392
using pointer = _Tp *; 
# 395
using const_pointer = const _Tp *; 
# 398
using void_pointer = void *; 
# 401
using const_void_pointer = const void *; 
# 404
using difference_type = ptrdiff_t; 
# 407
using size_type = size_t; 
# 410
using propagate_on_container_copy_assignment = false_type; 
# 413
using propagate_on_container_move_assignment = true_type; 
# 416
using propagate_on_container_swap = false_type; 
# 419
using is_always_equal = true_type; 
# 421
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 424
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 435 "/usr/include/c++/7/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n) 
# 436
{ return __a.allocate(__n); } 
# 449 "/usr/include/c++/7/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 450
{ return __a.allocate(__n, __hint); } 
# 461 "/usr/include/c++/7/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 462
{ __a.deallocate(__p, __n); } 
# 472 "/usr/include/c++/7/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 474
construct(allocator_type &__a, _Up *__p, _Args &&...__args) 
# 475
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 484 "/usr/include/c++/7/bits/alloc_traits.h" 3
template< class _Up> static void 
# 486
destroy(allocator_type &__a, _Up *__p) 
# 487
{ __a.destroy(__p); } 
# 495
static size_type max_size(const allocator_type &__a) noexcept 
# 496
{ return __a.max_size(); } 
# 504
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 505
{ return __rhs; } 
# 506
}; 
# 509
template< class _Alloc> inline void 
# 511
__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type) 
# 512
{ __one = __two; } 
# 514
template< class _Alloc> inline void 
# 516
__do_alloc_on_copy(_Alloc &, const _Alloc &, false_type) 
# 517
{ } 
# 519
template< class _Alloc> inline void 
# 520
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 521
{ 
# 522
typedef allocator_traits< _Alloc>  __traits; 
# 523
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 524
__do_alloc_on_copy(__one, __two, __pocca()); 
# 525
} 
# 527
template< class _Alloc> inline _Alloc 
# 528
__alloc_on_copy(const _Alloc &__a) 
# 529
{ 
# 530
typedef allocator_traits< _Alloc>  __traits; 
# 531
return __traits::select_on_container_copy_construction(__a); 
# 532
} 
# 534
template< class _Alloc> inline void 
# 535
__do_alloc_on_move(_Alloc &__one, _Alloc &__two, true_type) 
# 536
{ __one = std::move(__two); } 
# 538
template< class _Alloc> inline void 
# 539
__do_alloc_on_move(_Alloc &, _Alloc &, false_type) 
# 540
{ } 
# 542
template< class _Alloc> inline void 
# 543
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 544
{ 
# 545
typedef allocator_traits< _Alloc>  __traits; 
# 546
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 547
__do_alloc_on_move(__one, __two, __pocma()); 
# 548
} 
# 550
template< class _Alloc> inline void 
# 551
__do_alloc_on_swap(_Alloc &__one, _Alloc &__two, true_type) 
# 552
{ 
# 553
using std::swap;
# 554
swap(__one, __two); 
# 555
} 
# 557
template< class _Alloc> inline void 
# 558
__do_alloc_on_swap(_Alloc &, _Alloc &, false_type) 
# 559
{ } 
# 561
template< class _Alloc> inline void 
# 562
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 563
{ 
# 564
typedef allocator_traits< _Alloc>  __traits; 
# 565
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 566
__do_alloc_on_swap(__one, __two, __pocs()); 
# 567
} 
# 569
template< class _Alloc> 
# 570
class __is_copy_insertable_impl { 
# 572
typedef allocator_traits< _Alloc>  _Traits; 
# 574
template< class _Up, class 
# 575
 = __decltype((_Traits::construct(std::declval< _Alloc &> (), std::declval< _Up *> (), std::declval< const _Up &> ())))> static true_type 
# 574
_M_select(int); 
# 581
template< class _Up> static false_type _M_select(...); 
# 586
public: typedef __decltype((_M_select< typename _Alloc::value_type> (0))) type; 
# 587
}; 
# 590
template< class _Alloc> 
# 591
struct __is_copy_insertable : public __is_copy_insertable_impl< _Alloc> ::type { 
# 593
}; 
# 596
template< class _Tp> 
# 597
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 599
}; 
# 602
}
# 41 "/usr/include/c++/7/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
template< class _Alloc> 
# 50
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 55
typedef _Alloc allocator_type; 
# 57
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 58
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 59
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 60
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 61
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 62
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 64
typedef value_type &reference; 
# 65
typedef const value_type &const_reference; 
# 66
using std::allocator_traits< _Alloc> ::allocate;
# 67
using std::allocator_traits< _Alloc> ::deallocate;
# 68
using std::allocator_traits< _Alloc> ::construct;
# 69
using std::allocator_traits< _Alloc> ::destroy;
# 70
using std::allocator_traits< _Alloc> ::max_size;
# 74
private: 
# 73
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 82
public: 
# 80
template< class _Ptr, class ..._Args> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 82
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) 
# 83
{ 
# 84
_Base_type::construct(__a, std::addressof(*__p), std::forward< _Args> (__args)...); 
# 86
} 
# 89
template< class _Ptr> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 91
destroy(_Alloc &__a, _Ptr __p) 
# 92
{ _Base_type::destroy(__a, std::addressof(*__p)); } 
# 94
static _Alloc _S_select_on_copy(const _Alloc &__a) 
# 95
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 97
static void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 98
{ std::__alloc_on_swap(__a, __b); } 
# 100
static constexpr bool _S_propagate_on_copy_assign() 
# 101
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 103
static constexpr bool _S_propagate_on_move_assign() 
# 104
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_swap() 
# 107
{ return _Base_type::propagate_on_container_swap::value; } 
# 109
static constexpr bool _S_always_equal() 
# 110
{ return _Base_type::is_always_equal::value; } 
# 112
static constexpr bool _S_nothrow_move() 
# 113
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 115
template< class _Tp> 
# 116
struct rebind { 
# 117
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 158 "/usr/include/c++/7/ext/alloc_traits.h" 3
}; 
# 161
}
# 52 "/usr/include/c++/7/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
inline namespace __cxx11 { 
# 76 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 77
class basic_string { 
# 80
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 81
typedef __gnu_cxx::__alloc_traits< _Char_alloc_type>  _Alloc_traits; 
# 85
public: typedef _Traits traits_type; 
# 86
typedef typename _Traits::char_type value_type; 
# 87
typedef _Char_alloc_type allocator_type; 
# 88
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::size_type size_type; 
# 89
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::difference_type difference_type; 
# 90
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::reference reference; 
# 91
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_reference const_reference; 
# 92
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::pointer pointer; 
# 93
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_pointer const_pointer; 
# 94
typedef __gnu_cxx::__normal_iterator< pointer, basic_string>  iterator; 
# 96
typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string>  const_iterator; 
# 97
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 98
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 101
static const size_type npos = (static_cast< size_type>(-1)); 
# 108
private: typedef const_iterator __const_iterator; 
# 139 "/usr/include/c++/7/bits/basic_string.h" 3
struct _Alloc_hider : public allocator_type { 
# 145
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 146
{ } 
# 148
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 149
{ } 
# 152
typename basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 153
}; 
# 155
_Alloc_hider _M_dataplus; 
# 156
size_type _M_string_length; 
# 158
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 161
union { 
# 162
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 163
size_type _M_allocated_capacity; 
# 164
}; 
# 167
void _M_data(pointer __p) 
# 168
{ ((_M_dataplus)._M_p) = __p; } 
# 171
void _M_length(size_type __length) 
# 172
{ (_M_string_length) = __length; } 
# 175
pointer _M_data() const 
# 176
{ return (_M_dataplus)._M_p; } 
# 179
pointer _M_local_data() 
# 180
{ 
# 182
return std::template pointer_traits< pointer> ::pointer_to(*(_M_local_buf)); 
# 186
} 
# 189
const_pointer _M_local_data() const 
# 190
{ 
# 192
return std::template pointer_traits< const_pointer> ::pointer_to(*(_M_local_buf)); 
# 196
} 
# 199
void _M_capacity(size_type __capacity) 
# 200
{ (_M_allocated_capacity) = __capacity; } 
# 203
void _M_set_length(size_type __n) 
# 204
{ 
# 205
_M_length(__n); 
# 206
traits_type::assign(_M_data()[__n], _CharT()); 
# 207
} 
# 210
bool _M_is_local() const 
# 211
{ return _M_data() == _M_local_data(); } 
# 215
pointer _M_create(size_type &, size_type); 
# 218
void _M_dispose() 
# 219
{ 
# 220
if (!_M_is_local()) { 
# 221
_M_destroy(_M_allocated_capacity); }  
# 222
} 
# 225
void _M_destroy(size_type __size) throw() 
# 226
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 230
template< class _InIterator> void 
# 232
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 234
{ 
# 235
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 236
_M_construct(__beg, __end, _Tag()); 
# 237
} 
# 241
template< class _Integer> void 
# 243
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 244
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 247
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 248
{ _M_construct(__req, __c); } 
# 250
template< class _InIterator> void 
# 252
_M_construct(_InIterator __beg, _InIterator __end) 
# 253
{ 
# 254
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 255
_M_construct_aux(__beg, __end, _Integral()); 
# 256
} 
# 259
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 266
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 272
void _M_construct(size_type __req, _CharT __c); 
# 275
allocator_type &_M_get_allocator() 
# 276
{ return _M_dataplus; } 
# 279
const allocator_type &_M_get_allocator() const 
# 280
{ return _M_dataplus; } 
# 299 "/usr/include/c++/7/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 300
{ 
# 301
if (__pos > size()) { 
# 302
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 305
return __pos; 
# 306
} 
# 309
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 310
{ 
# 311
if ((max_size() - (size() - __n1)) < __n2) { 
# 312
__throw_length_error(__s); }  
# 313
} 
# 318
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 319
{ 
# 320
const bool __testoff = __off < (size() - __pos); 
# 321
return __testoff ? __off : (size() - __pos); 
# 322
} 
# 326
bool _M_disjunct(const _CharT *__s) const noexcept 
# 327
{ 
# 328
return (less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s)); 
# 330
} 
# 335
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 336
{ 
# 337
if (__n == 1) { 
# 338
traits_type::assign(*__d, *__s); } else { 
# 340
traits_type::copy(__d, __s, __n); }  
# 341
} 
# 344
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 345
{ 
# 346
if (__n == 1) { 
# 347
traits_type::assign(*__d, *__s); } else { 
# 349
traits_type::move(__d, __s, __n); }  
# 350
} 
# 353
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 354
{ 
# 355
if (__n == 1) { 
# 356
traits_type::assign(*__d, __c); } else { 
# 358
traits_type::assign(__d, __n, __c); }  
# 359
} 
# 363
template< class _Iterator> static void 
# 365
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 366
{ 
# 367
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 368
traits_type::assign(*__p, *__k1); }  
# 369
} 
# 372
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 373
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 376
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 378
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 381
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 382
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 385
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 387
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 390
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 391
{ 
# 392
const difference_type __d = (difference_type)(__n1 - __n2); 
# 394
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 395
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 396
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 397
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 399
return (int)__d; }  }  
# 400
} 
# 403
void _M_assign(const basic_string &); 
# 406
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 410
void _M_erase(size_type __pos, size_type __n); 
# 420
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 423
{ _M_set_length(0); } 
# 429
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 431
{ _M_set_length(0); } 
# 437
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 440
{ _M_construct(__str._M_data(), __str._M_data() + __str.length()); } 
# 450 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 451
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 453
{ 
# 454
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 456
_M_construct(__start, __start + __str._M_limit(__pos, npos)); 
# 457
} 
# 465
basic_string(const basic_string &__str, size_type __pos, size_type 
# 466
__n) : _M_dataplus(_M_local_data()) 
# 468
{ 
# 469
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 471
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 472
} 
# 481 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 482
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 484
{ 
# 485
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "string::string"); 
# 487
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 488
} 
# 499 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 500
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 502
{ _M_construct(__s, __s + __n); } 
# 509
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 511
{ _M_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos)); } 
# 519
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 521
{ _M_construct(__n, __c); } 
# 531 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 533
{ 
# 534
if (__str._M_is_local()) 
# 535
{ 
# 536
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 538
} else 
# 540
{ 
# 541
_M_data(__str._M_data()); 
# 542
_M_capacity(__str._M_allocated_capacity); 
# 543
}  
# 548
_M_length(__str.length()); 
# 549
__str._M_data(__str._M_local_data()); 
# 550
__str._M_set_length(0); 
# 551
} 
# 558
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 560
{ _M_construct(__l.begin(), __l.end()); } 
# 562
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 564
{ _M_construct(__str.begin(), __str.end()); } 
# 566
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 569
{ 
# 570
if (__str._M_is_local()) 
# 571
{ 
# 572
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 574
_M_length(__str.length()); 
# 575
__str._M_set_length(0); 
# 576
} else { 
# 577
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 579
{ 
# 580
_M_data(__str._M_data()); 
# 581
_M_length(__str.length()); 
# 582
_M_capacity(__str._M_allocated_capacity); 
# 583
__str._M_data(__str._M_local_buf); 
# 584
__str._M_set_length(0); 
# 585
} else { 
# 587
_M_construct(__str.begin(), __str.end()); }  }  
# 588
} 
# 599 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _InputIterator, class 
# 600
 = _RequireInputIter< _InputIterator> > 
# 604
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 605
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 607
{ _M_construct(__beg, __end); } 
# 646 "/usr/include/c++/7/bits/basic_string.h" 3
~basic_string() 
# 647
{ _M_dispose(); } 
# 654
basic_string &operator=(const basic_string &__str) 
# 655
{ 
# 657
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 658
{ 
# 659
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 661
{ 
# 664
if (__str.size() <= _S_local_capacity) 
# 665
{ 
# 666
_M_destroy(_M_allocated_capacity); 
# 667
_M_data(_M_local_data()); 
# 668
_M_set_length(0); 
# 669
} else 
# 671
{ 
# 672
const auto __len = __str.size(); 
# 673
auto __alloc = __str._M_get_allocator(); 
# 675
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 676
_M_destroy(_M_allocated_capacity); 
# 677
_M_data(__ptr); 
# 678
_M_capacity(__len); 
# 679
_M_set_length(__len); 
# 680
}  
# 681
}  
# 682
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 683
}  
# 685
return this->assign(__str); 
# 686
} 
# 693
basic_string &operator=(const _CharT *__s) 
# 694
{ return this->assign(__s); } 
# 704 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 705
{ 
# 706
this->assign(1, __c); 
# 707
return *this; 
# 708
} 
# 722 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 724
{ 
# 725
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 728
{ 
# 730
_M_destroy(_M_allocated_capacity); 
# 731
_M_data(_M_local_data()); 
# 732
_M_set_length(0); 
# 733
}  
# 735
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 737
if (__str._M_is_local()) 
# 738
{ 
# 740
if (__str.size()) { 
# 741
this->_S_copy(_M_data(), __str._M_data(), __str.size()); }  
# 742
_M_set_length(__str.size()); 
# 743
} else { 
# 744
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 747
{ 
# 749
pointer __data = (nullptr); 
# 750
size_type __capacity; 
# 751
if (!_M_is_local()) 
# 752
{ 
# 753
if (_Alloc_traits::_S_always_equal()) 
# 754
{ 
# 756
__data = _M_data(); 
# 757
__capacity = (_M_allocated_capacity); 
# 758
} else { 
# 760
_M_destroy(_M_allocated_capacity); }  
# 761
}  
# 763
_M_data(__str._M_data()); 
# 764
_M_length(__str.length()); 
# 765
_M_capacity(__str._M_allocated_capacity); 
# 766
if (__data) 
# 767
{ 
# 768
__str._M_data(__data); 
# 769
__str._M_capacity(__capacity); 
# 770
} else { 
# 772
__str._M_data(__str._M_local_buf); }  
# 773
} else { 
# 775
assign(__str); }  }  
# 776
__str.clear(); 
# 777
return *this; 
# 778
} 
# 785
basic_string &operator=(initializer_list< _CharT>  __l) 
# 786
{ 
# 787
this->assign(__l.begin(), __l.size()); 
# 788
return *this; 
# 789
} 
# 816 "/usr/include/c++/7/bits/basic_string.h" 3
iterator begin() noexcept 
# 817
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data())); } 
# 824
const_iterator begin() const noexcept 
# 825
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data())); } 
# 832
iterator end() noexcept 
# 833
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + size())); } 
# 840
const_iterator end() const noexcept 
# 841
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data() + size())); } 
# 849
reverse_iterator rbegin() noexcept 
# 850
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 858
const_reverse_iterator rbegin() const noexcept 
# 859
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 867
reverse_iterator rend() noexcept 
# 868
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 876
const_reverse_iterator rend() const noexcept 
# 877
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 885
const_iterator cbegin() const noexcept 
# 886
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data())); } 
# 893
const_iterator cend() const noexcept 
# 894
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data() + size())); } 
# 902
const_reverse_iterator crbegin() const noexcept 
# 903
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 911
const_reverse_iterator crend() const noexcept 
# 912
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 920
size_type size() const noexcept 
# 921
{ return _M_string_length; } 
# 926
size_type length() const noexcept 
# 927
{ return _M_string_length; } 
# 931
size_type max_size() const noexcept 
# 932
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 945 "/usr/include/c++/7/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 958 "/usr/include/c++/7/bits/basic_string.h" 3
void resize(size_type __n) 
# 959
{ this->resize(__n, _CharT()); } 
# 964
void shrink_to_fit() noexcept 
# 965
{ 
# 967
if (capacity() > size()) 
# 968
{ 
# 969
try 
# 970
{ reserve(0); } 
# 971
catch (...) 
# 972
{ }  
# 973
}  
# 975
} 
# 983
size_type capacity() const noexcept 
# 984
{ 
# 985
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 987
} 
# 1007 "/usr/include/c++/7/bits/basic_string.h" 3
void reserve(size_type __res_arg = 0); 
# 1013
void clear() noexcept 
# 1014
{ _M_set_length(0); } 
# 1021
bool empty() const noexcept 
# 1022
{ return size() == 0; } 
# 1036 "/usr/include/c++/7/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1037
{ 
# 1038
; 
# 1039
return _M_data()[__pos]; 
# 1040
} 
# 1053 "/usr/include/c++/7/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1054
{ 
# 1057
; 
# 1059
; 
# 1060
return _M_data()[__pos]; 
# 1061
} 
# 1074 "/usr/include/c++/7/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1075
{ 
# 1076
if (__n >= size()) { 
# 1077
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1081
return _M_data()[__n]; 
# 1082
} 
# 1095 "/usr/include/c++/7/bits/basic_string.h" 3
reference at(size_type __n) 
# 1096
{ 
# 1097
if (__n >= size()) { 
# 1098
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1102
return _M_data()[__n]; 
# 1103
} 
# 1111
reference front() noexcept 
# 1112
{ 
# 1113
; 
# 1114
return operator[](0); 
# 1115
} 
# 1122
const_reference front() const noexcept 
# 1123
{ 
# 1124
; 
# 1125
return operator[](0); 
# 1126
} 
# 1133
reference back() noexcept 
# 1134
{ 
# 1135
; 
# 1136
return operator[](size() - 1); 
# 1137
} 
# 1144
const_reference back() const noexcept 
# 1145
{ 
# 1146
; 
# 1147
return operator[](size() - 1); 
# 1148
} 
# 1158 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1159
{ return this->append(__str); } 
# 1167
basic_string &operator+=(const _CharT *__s) 
# 1168
{ return this->append(__s); } 
# 1176
basic_string &operator+=(_CharT __c) 
# 1177
{ 
# 1178
push_back(__c); 
# 1179
return *this; 
# 1180
} 
# 1189
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1190
{ return this->append(__l.begin(), __l.size()); } 
# 1211 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &append(const basic_string &__str) 
# 1212
{ return _M_append(__str._M_data(), __str.size()); } 
# 1228 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1229
{ return _M_append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1231
} 
# 1240
basic_string &append(const _CharT *__s, size_type __n) 
# 1241
{ 
# 1242
; 
# 1243
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1244
return _M_append(__s, __n); 
# 1245
} 
# 1253
basic_string &append(const _CharT *__s) 
# 1254
{ 
# 1255
; 
# 1256
const size_type __n = traits_type::length(__s); 
# 1257
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1258
return _M_append(__s, __n); 
# 1259
} 
# 1270 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1271
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1280
basic_string &append(initializer_list< _CharT>  __l) 
# 1281
{ return this->append(__l.begin(), __l.size()); } 
# 1293 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1294
 = _RequireInputIter< _InputIterator> > basic_string &
# 1299
append(_InputIterator __first, _InputIterator __last) 
# 1300
{ return this->replace(end(), end(), __first, __last); } 
# 1339 "/usr/include/c++/7/bits/basic_string.h" 3
void push_back(_CharT __c) 
# 1340
{ 
# 1341
const size_type __size = size(); 
# 1342
if ((__size + 1) > capacity()) { 
# 1343
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1344
traits_type::assign(this->_M_data()[__size], __c); 
# 1345
_M_set_length(__size + 1); 
# 1346
} 
# 1354
basic_string &assign(const basic_string &__str) 
# 1355
{ 
# 1356
_M_assign(__str); 
# 1357
return *this; 
# 1358
} 
# 1370 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1372
{ 
# 1375
return (*this) = std::move(__str); 
# 1376
} 
# 1393 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1394
{ return _M_replace((size_type)0, size(), __str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1396
} 
# 1409 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1410
{ 
# 1411
; 
# 1412
return _M_replace((size_type)0, size(), __s, __n); 
# 1413
} 
# 1425 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1426
{ 
# 1427
; 
# 1428
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1430
} 
# 1442 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1443
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1454 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1455
 = _RequireInputIter< _InputIterator> > basic_string &
# 1460
assign(_InputIterator __first, _InputIterator __last) 
# 1461
{ return this->replace(begin(), end(), __first, __last); } 
# 1470
basic_string &assign(initializer_list< _CharT>  __l) 
# 1471
{ return this->assign(__l.begin(), __l.size()); } 
# 1523 "/usr/include/c++/7/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1524
{ 
# 1525
; 
# 1526
const size_type __pos = __p - begin(); 
# 1527
this->replace(__p, __p, __n, __c); 
# 1528
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1529
} 
# 1564 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1565
 = _RequireInputIter< _InputIterator> > iterator 
# 1567
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1568
{ 
# 1569
; 
# 1570
const size_type __pos = __p - begin(); 
# 1571
this->replace(__p, __p, __beg, __end); 
# 1572
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1573
} 
# 1601 "/usr/include/c++/7/bits/basic_string.h" 3
void insert(iterator __p, initializer_list< _CharT>  __l) 
# 1602
{ 
# 1603
; 
# 1604
this->insert(__p - begin(), __l.begin(), __l.size()); 
# 1605
} 
# 1621 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1622
{ return this->replace(__pos1, (size_type)0, __str._M_data(), __str.size()); 
# 1623
} 
# 1644 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1645
__pos2, size_type __n = npos) 
# 1646
{ return this->replace(__pos1, (size_type)0, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)); 
# 1648
} 
# 1667 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1668
{ return this->replace(__pos, (size_type)0, __s, __n); } 
# 1686 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1687
{ 
# 1688
; 
# 1689
return this->replace(__pos, (size_type)0, __s, traits_type::length(__s)); 
# 1691
} 
# 1710 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1711
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1712
} 
# 1728 "/usr/include/c++/7/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1729
{ 
# 1730
; 
# 1731
const size_type __pos = __p - begin(); 
# 1732
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1733
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1734
} 
# 1788 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1789
{ 
# 1790
_M_check(__pos, "basic_string::erase"); 
# 1791
if (__n == npos) { 
# 1792
_M_set_length(__pos); } else { 
# 1793
if (__n != 0) { 
# 1794
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 1795
return *this; 
# 1796
} 
# 1807 "/usr/include/c++/7/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 1808
{ 
# 1810
; 
# 1811
const size_type __pos = __position - begin(); 
# 1812
_M_erase(__pos, (size_type)1); 
# 1813
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1814
} 
# 1826 "/usr/include/c++/7/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1827
{ 
# 1829
; 
# 1830
const size_type __pos = __first - begin(); 
# 1831
if (__last == end()) { 
# 1832
_M_set_length(__pos); } else { 
# 1834
_M_erase(__pos, __last - __first); }  
# 1835
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1836
} 
# 1845
void pop_back() noexcept 
# 1846
{ 
# 1847
; 
# 1848
_M_erase(size() - 1, 1); 
# 1849
} 
# 1870 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1871
{ return this->replace(__pos, __n, __str._M_data(), __str.size()); } 
# 1892 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1893
__pos2, size_type __n2 = npos) 
# 1894
{ return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)); 
# 1896
} 
# 1917 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1918
__n2) 
# 1919
{ 
# 1920
; 
# 1921
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1923
} 
# 1942 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1943
{ 
# 1944
; 
# 1945
return this->replace(__pos, __n1, __s, traits_type::length(__s)); 
# 1946
} 
# 1966 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1967
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1968
} 
# 1984 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 1985
__str) 
# 1986
{ return this->replace(__i1, __i2, __str._M_data(), __str.size()); } 
# 2004 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2005
__s, size_type __n) 
# 2006
{ 
# 2008
; 
# 2009
return this->replace(__i1 - begin(), __i2 - __i1, __s, __n); 
# 2010
} 
# 2026 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2027
{ 
# 2028
; 
# 2029
return this->replace(__i1, __i2, __s, traits_type::length(__s)); 
# 2030
} 
# 2047 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2048
__c) 
# 2049
{ 
# 2051
; 
# 2052
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2053
} 
# 2071 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2072
 = _RequireInputIter< _InputIterator> > basic_string &
# 2074
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2075
__k1, _InputIterator __k2) 
# 2076
{ 
# 2078
; 
# 2079
; 
# 2080
return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type()); 
# 2082
} 
# 2104 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2105
__k1, _CharT *__k2) 
# 2106
{ 
# 2108
; 
# 2109
; 
# 2110
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2112
} 
# 2115
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2116
__k1, const _CharT *__k2) 
# 2117
{ 
# 2119
; 
# 2120
; 
# 2121
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2123
} 
# 2126
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2127
__k1, iterator __k2) 
# 2128
{ 
# 2130
; 
# 2131
; 
# 2132
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2134
} 
# 2137
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2138
__k1, const_iterator __k2) 
# 2139
{ 
# 2141
; 
# 2142
; 
# 2143
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2145
} 
# 2162 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2163
__l) 
# 2164
{ return this->replace(__i1, __i2, __l.begin(), __l.size()); } 
# 2224 "/usr/include/c++/7/bits/basic_string.h" 3
private: 
# 2222
template< class _Integer> basic_string &
# 2224
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2225
__n, _Integer __val, __true_type) 
# 2226
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2228
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2235
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2239
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2243
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2260 "/usr/include/c++/7/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2270 "/usr/include/c++/7/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2280 "/usr/include/c++/7/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2281
{ return _M_data(); } 
# 2292 "/usr/include/c++/7/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2293
{ return _M_data(); } 
# 2311 "/usr/include/c++/7/bits/basic_string.h" 3
allocator_type get_allocator() const noexcept 
# 2312
{ return _M_get_allocator(); } 
# 2327 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2341 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2343
{ return this->find(__str.data(), __pos, __str.size()); } 
# 2373 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2374
{ 
# 2375
; 
# 2376
return this->find(__s, __pos, traits_type::length(__s)); 
# 2377
} 
# 2390 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2403 "/usr/include/c++/7/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2405
{ return this->rfind(__str.data(), __pos, __str.size()); } 
# 2437 "/usr/include/c++/7/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2451 "/usr/include/c++/7/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2452
{ 
# 2453
; 
# 2454
return this->rfind(__s, __pos, traits_type::length(__s)); 
# 2455
} 
# 2468 "/usr/include/c++/7/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2482 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2484
{ return this->find_first_of(__str.data(), __pos, __str.size()); } 
# 2517 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2531 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2533
{ 
# 2534
; 
# 2535
return this->find_first_of(__s, __pos, traits_type::length(__s)); 
# 2536
} 
# 2551 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2552
{ return this->find(__c, __pos); } 
# 2566 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2568
{ return this->find_last_of(__str.data(), __pos, __str.size()); } 
# 2601 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2615 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2617
{ 
# 2618
; 
# 2619
return this->find_last_of(__s, __pos, traits_type::length(__s)); 
# 2620
} 
# 2635 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2636
{ return this->rfind(__c, __pos); } 
# 2649 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2651
{ return this->find_first_not_of(__str.data(), __pos, __str.size()); } 
# 2684 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2698 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2700
{ 
# 2701
; 
# 2702
return this->find_first_not_of(__s, __pos, traits_type::length(__s)); 
# 2703
} 
# 2716 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2731 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2733
{ return this->find_last_not_of(__str.data(), __pos, __str.size()); } 
# 2766 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2780 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2782
{ 
# 2783
; 
# 2784
return this->find_last_not_of(__s, __pos, traits_type::length(__s)); 
# 2785
} 
# 2798 "/usr/include/c++/7/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2814 "/usr/include/c++/7/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2815
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2816
} 
# 2833 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2834
{ 
# 2835
const size_type __size = size(); 
# 2836
const size_type __osize = __str.size(); 
# 2837
const size_type __len = std::min(__size, __osize); 
# 2839
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2840
if (!__r) { 
# 2841
__r = (_S_compare)(__size, __osize); }  
# 2842
return __r; 
# 2843
} 
# 2926 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2952 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 2970 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 2994 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3021 "/usr/include/c++/7/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3025
template< class , class , class > friend class basic_stringbuf; 
# 3026
}; 
# 3027
}
# 5886 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5888
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5889
__rhs) 
# 5890
{ 
# 5891
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 5892
__str.append(__rhs); 
# 5893
return __str; 
# 5894
} 
# 5902
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 5913
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 5923
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5925
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5926
__rhs) 
# 5927
{ 
# 5928
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 5929
__str.append(__rhs); 
# 5930
return __str; 
# 5931
} 
# 5939
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5941
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 5942
{ 
# 5943
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 5944
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 5945
__string_type __str(__lhs); 
# 5946
__str.append((__size_type)1, __rhs); 
# 5947
return __str; 
# 5948
} 
# 5951
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5953
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5954
__rhs) 
# 5955
{ return std::move(__lhs.append(__rhs)); } 
# 5957
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5959
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 5960
__rhs) 
# 5961
{ return std::move(__rhs.insert(0, __lhs)); } 
# 5963
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5965
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 5966
__rhs) 
# 5967
{ 
# 5968
const auto __size = __lhs.size() + __rhs.size(); 
# 5969
const bool __cond = (__size > __lhs.capacity()) && (__size <= __rhs.capacity()); 
# 5971
return __cond ? std::move(__rhs.insert(0, __lhs)) : std::move(__lhs.append(__rhs)); 
# 5973
} 
# 5975
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5977
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 5978
__rhs) 
# 5979
{ return std::move(__rhs.insert(0, __lhs)); } 
# 5981
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5983
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 5984
__rhs) 
# 5985
{ return std::move(__rhs.insert(0, 1, __lhs)); } 
# 5987
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5989
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 5990
__rhs) 
# 5991
{ return std::move(__lhs.append(__rhs)); } 
# 5993
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5995
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 5996
__rhs) 
# 5997
{ return std::move(__lhs.append(1, __rhs)); } 
# 6007 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6009
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6010
__rhs) noexcept 
# 6012
{ return __lhs.compare(__rhs) == 0; } 
# 6014
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 6017
operator==(const __cxx11::basic_string< _CharT>  &__lhs, const __cxx11::basic_string< _CharT>  &
# 6018
__rhs) noexcept 
# 6019
{ return ((__lhs.size() == __rhs.size()) && (!std::template char_traits< _CharT> ::compare(__lhs.data(), __rhs.data(), __lhs.size()))); 
# 6021
} 
# 6029
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6031
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6032
__rhs) 
# 6033
{ return __rhs.compare(__lhs) == 0; } 
# 6041
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6043
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6044
__rhs) 
# 6045
{ return __lhs.compare(__rhs) == 0; } 
# 6054 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6056
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6057
__rhs) noexcept 
# 6059
{ return !(__lhs == __rhs); } 
# 6067
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6069
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6070
__rhs) 
# 6071
{ return !(__lhs == __rhs); } 
# 6079
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6081
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6082
__rhs) 
# 6083
{ return !(__lhs == __rhs); } 
# 6092 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6094
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6095
__rhs) noexcept 
# 6097
{ return __lhs.compare(__rhs) < 0; } 
# 6105
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6107
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6108
__rhs) 
# 6109
{ return __lhs.compare(__rhs) < 0; } 
# 6117
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6119
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6120
__rhs) 
# 6121
{ return __rhs.compare(__lhs) > 0; } 
# 6130 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6132
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6133
__rhs) noexcept 
# 6135
{ return __lhs.compare(__rhs) > 0; } 
# 6143
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6145
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6146
__rhs) 
# 6147
{ return __lhs.compare(__rhs) > 0; } 
# 6155
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6157
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6158
__rhs) 
# 6159
{ return __rhs.compare(__lhs) < 0; } 
# 6168 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6170
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6171
__rhs) noexcept 
# 6173
{ return __lhs.compare(__rhs) <= 0; } 
# 6181
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6183
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6184
__rhs) 
# 6185
{ return __lhs.compare(__rhs) <= 0; } 
# 6193
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6195
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6196
__rhs) 
# 6197
{ return __rhs.compare(__lhs) >= 0; } 
# 6206 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6208
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6209
__rhs) noexcept 
# 6211
{ return __lhs.compare(__rhs) >= 0; } 
# 6219
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6221
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6222
__rhs) 
# 6223
{ return __lhs.compare(__rhs) >= 0; } 
# 6231
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6233
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6234
__rhs) 
# 6235
{ return __rhs.compare(__lhs) <= 0; } 
# 6244 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 6246
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6247
__rhs) noexcept(noexcept(__lhs.swap(__rhs))) 
# 6249
{ __lhs.swap(__rhs); } 
# 6264 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 6271
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str); 
# 6282 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 6284
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6285
__str) 
# 6286
{ 
# 6289
return __ostream_insert(__os, __str.data(), __str.size()); 
# 6290
} 
# 6305 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 6322 "/usr/include/c++/7/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6324
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6325
__str) 
# 6326
{ return std::getline(__is, __str, __is.widen('\n')); } 
# 6330
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6332
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6333
__str, _CharT __delim) 
# 6334
{ return std::getline(__is, __str, __delim); } 
# 6337
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6339
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6340
__str) 
# 6341
{ return std::getline(__is, __str); } 
# 6346
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char>  & __str, char __delim); 
# 6352
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim); 
# 6357
}
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 30 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3
typedef 
# 27
struct { 
# 28
__off_t __pos; 
# 29
__mbstate_t __state; 
# 30
} _G_fpos_t; 
# 35
typedef 
# 32
struct { 
# 33
__off64_t __pos; 
# 34
__mbstate_t __state; 
# 35
} _G_fpos64_t; 
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
struct _IO_jump_t; struct _IO_FILE; 
# 154
typedef void _IO_lock_t; 
# 160
struct _IO_marker { 
# 161
_IO_marker *_next; 
# 162
_IO_FILE *_sbuf; 
# 166
int _pos; 
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
}; 
# 180
enum __codecvt_result { 
# 182
__codecvt_ok, 
# 183
__codecvt_partial, 
# 184
__codecvt_error, 
# 185
__codecvt_noconv
# 186
}; 
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
struct _IO_FILE { 
# 246
int _flags; 
# 251
char *_IO_read_ptr; 
# 252
char *_IO_read_end; 
# 253
char *_IO_read_base; 
# 254
char *_IO_write_base; 
# 255
char *_IO_write_ptr; 
# 256
char *_IO_write_end; 
# 257
char *_IO_buf_base; 
# 258
char *_IO_buf_end; 
# 260
char *_IO_save_base; 
# 261
char *_IO_backup_base; 
# 262
char *_IO_save_end; 
# 264
_IO_marker *_markers; 
# 266
_IO_FILE *_chain; 
# 268
int _fileno; 
# 272
int _flags2; 
# 274
__off_t _old_offset; 
# 278
unsigned short _cur_column; 
# 279
signed char _vtable_offset; 
# 280
char _shortbuf[1]; 
# 284
_IO_lock_t *_lock; 
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
__off64_t _offset; 
# 301
void *__pad1; 
# 302
void *__pad2; 
# 303
void *__pad3; 
# 304
void *__pad4; 
# 306
::size_t __pad5; 
# 307
int _mode; 
# 309
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(::size_t)]; 
# 311
}; 
# 317
struct _IO_FILE_plus; 
# 319
extern _IO_FILE_plus _IO_2_1_stdin_; 
# 320
extern _IO_FILE_plus _IO_2_1_stdout_; 
# 321
extern _IO_FILE_plus _IO_2_1_stderr_; 
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
typedef __ssize_t __io_read_fn(void * __cookie, char * __buf, ::size_t __nbytes); 
# 345
typedef __ssize_t __io_write_fn(void * __cookie, const char * __buf, ::size_t __n); 
# 354
typedef int __io_seek_fn(void * __cookie, __off64_t * __pos, int __w); 
# 357
typedef int __io_close_fn(void * __cookie); 
# 362
typedef __io_read_fn cookie_read_function_t; 
# 363
typedef __io_write_fn cookie_write_function_t; 
# 364
typedef __io_seek_fn cookie_seek_function_t; 
# 365
typedef __io_close_fn cookie_close_function_t; 
# 374
typedef 
# 369
struct { 
# 370
__io_read_fn *read; 
# 371
__io_write_fn *write; 
# 372
__io_seek_fn *seek; 
# 373
__io_close_fn *close; 
# 374
} _IO_cookie_io_functions_t; 
# 375
typedef _IO_cookie_io_functions_t cookie_io_functions_t; 
# 377
struct _IO_cookie_file; 
# 380
extern void _IO_cookie_init(_IO_cookie_file * __cfile, int __read_write, void * __cookie, _IO_cookie_io_functions_t __fns); 
# 386
extern "C" {
# 389
extern int __underflow(_IO_FILE *); 
# 390
extern int __uflow(_IO_FILE *); 
# 391
extern int __overflow(_IO_FILE *, int); 
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
extern int _IO_getc(_IO_FILE * __fp); 
# 434
extern int _IO_putc(int __c, _IO_FILE * __fp); 
# 435
extern int _IO_feof(_IO_FILE * __fp) throw(); 
# 436
extern int _IO_ferror(_IO_FILE * __fp) throw(); 
# 438
extern int _IO_peekc_locked(_IO_FILE * __fp); 
# 444
extern void _IO_flockfile(_IO_FILE *) throw(); 
# 445
extern void _IO_funlockfile(_IO_FILE *) throw(); 
# 446
extern int _IO_ftrylockfile(_IO_FILE *) throw(); 
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
extern int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__); 
# 464
extern int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list); 
# 466
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t); 
# 467
extern ::size_t _IO_sgetn(_IO_FILE *, void *, ::size_t); 
# 469
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int); 
# 470
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int); 
# 472
extern void _IO_free_backup_area(_IO_FILE *) throw(); 
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3
}
# 46 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 78 "/usr/include/stdio.h" 3
typedef _G_fpos_t fpos_t; 
# 83
typedef _G_fpos64_t fpos64_t; 
# 135 "/usr/include/stdio.h" 3
extern _IO_FILE *stdin; 
# 136
extern _IO_FILE *stdout; 
# 137
extern _IO_FILE *stderr; 
# 144
extern int remove(const char * __filename) throw(); 
# 146
extern int rename(const char * __old, const char * __new) throw(); 
# 150
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 159
extern FILE *tmpfile(); 
# 169 "/usr/include/stdio.h" 3
extern FILE *tmpfile64(); 
# 173
extern char *tmpnam(char * __s) throw(); 
# 178
extern char *tmpnam_r(char * __s) throw(); 
# 190 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 191
 __attribute((__malloc__)); 
# 199
extern int fclose(FILE * __stream); 
# 204
extern int fflush(FILE * __stream); 
# 213 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 223 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 232 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 238
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 256 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 258
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 265
extern FILE *fdopen(int __fd, const char * __modes) throw(); 
# 271
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, _IO_cookie_io_functions_t __io_funcs) throw(); 
# 278
extern FILE *fmemopen(void * __s, ::size_t __len, const char * __modes) throw(); 
# 284
extern FILE *open_memstream(char ** __bufloc, ::size_t * __sizeloc) throw(); 
# 290
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 294
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, ::size_t __n) throw(); 
# 300
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, ::size_t __size) throw(); 
# 304
extern void setlinebuf(FILE * __stream) throw(); 
# 312
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 318
extern int printf(const char *__restrict__ __format, ...); 
# 320
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 327
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 333
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 335
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 340
extern int snprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 342
 __attribute((__format__(__printf__, 3, 4))); 
# 344
extern int vsnprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 346
 __attribute((__format__(__printf__, 3, 0))); 
# 352
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 354
 __attribute((__format__(__printf__, 2, 0))); 
# 355
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 357
 __attribute((__format__(__printf__, 2, 3))); 
# 358
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 360
 __attribute((__format__(__printf__, 2, 3))); 
# 365
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 367
 __attribute((__format__(__printf__, 2, 0))); 
# 368
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 369
 __attribute((__format__(__printf__, 2, 3))); 
# 377
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 383
extern int scanf(const char *__restrict__ __format, ...); 
# 385
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 420 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg)
# 422
 __attribute((__format__(__scanf__, 2, 0))); 
# 428
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg)
# 429
 __attribute((__format__(__scanf__, 1, 0))); 
# 432
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 434
 __attribute((__format__(__scanf__, 2, 0))); 
# 477 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 478
extern int getc(FILE * __stream); 
# 484
extern int getchar(); 
# 495 "/usr/include/stdio.h" 3
extern int getc_unlocked(FILE * __stream); 
# 496
extern int getchar_unlocked(); 
# 506 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 517 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 518
extern int putc(int __c, FILE * __stream); 
# 524
extern int putchar(int __c); 
# 537 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 545
extern int putc_unlocked(int __c, FILE * __stream); 
# 546
extern int putchar_unlocked(int __c); 
# 553
extern int getw(FILE * __stream); 
# 556
extern int putw(int __w, FILE * __stream); 
# 564
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 587 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 603 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 606
extern __ssize_t getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 616
extern __ssize_t getline(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 626
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 632
extern int puts(const char * __s); 
# 639
extern int ungetc(int __c, FILE * __stream); 
# 646
extern ::size_t fread(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 652
extern ::size_t fwrite(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __s); 
# 662 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 673 "/usr/include/stdio.h" 3
extern ::size_t fread_unlocked(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 675
extern ::size_t fwrite_unlocked(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 684
extern int fseek(FILE * __stream, long __off, int __whence); 
# 689
extern long ftell(FILE * __stream); 
# 694
extern void rewind(FILE * __stream); 
# 707 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 712
extern __off_t ftello(FILE * __stream); 
# 731 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 736
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 750 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 751
extern __off64_t ftello64(FILE * __stream); 
# 752
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 753
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 757
extern void clearerr(FILE * __stream) throw(); 
# 759
extern int feof(FILE * __stream) throw(); 
# 761
extern int ferror(FILE * __stream) throw(); 
# 765
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 766
extern int feof_unlocked(FILE * __stream) throw(); 
# 767
extern int ferror_unlocked(FILE * __stream) throw(); 
# 775
extern void perror(const char * __s); 
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 786 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw(); 
# 791
extern int fileno_unlocked(FILE * __stream) throw(); 
# 800 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes); 
# 806
extern int pclose(FILE * __stream); 
# 812
extern char *ctermid(char * __s) throw(); 
# 818
extern char *cuserid(char * __s); 
# 823
struct obstack; 
# 826
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 828
 __attribute((__format__(__printf__, 2, 3))); 
# 829
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 832
 __attribute((__format__(__printf__, 2, 0))); 
# 840
extern void flockfile(FILE * __stream) throw(); 
# 844
extern int ftrylockfile(FILE * __stream) throw(); 
# 847
extern void funlockfile(FILE * __stream) throw(); 
# 868 "/usr/include/stdio.h" 3
}
# 96 "/usr/include/c++/7/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/7/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/7/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() throw() __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 52
typedef int error_t; 
# 57
}
# 46 "/usr/include/c++/7/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start((__args),__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 6363 "/usr/include/c++/7/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6366
inline namespace __cxx11 { 
# 6371
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6372
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 6373
} 
# 6376
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6377
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 6378
} 
# 6381
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6382
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 6383
} 
# 6386
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6387
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 6388
} 
# 6391
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6392
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 6393
} 
# 6397
inline float stof(const string &__str, size_t *__idx = 0) 
# 6398
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 6401
inline double stod(const string &__str, size_t *__idx = 0) 
# 6402
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 6405
inline long double stold(const string &__str, size_t *__idx = 0) 
# 6406
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 6414
inline string to_string(int __val) 
# 6415
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(int), "%d", __val); 
# 6416
} 
# 6419
inline string to_string(unsigned __val) 
# 6420
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned), "%u", __val); 
# 6422
} 
# 6425
inline string to_string(long __val) 
# 6426
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long), "%ld", __val); 
# 6427
} 
# 6430
inline string to_string(unsigned long __val) 
# 6431
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long), "%lu", __val); 
# 6433
} 
# 6436
inline string to_string(long long __val) 
# 6437
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long long), "%lld", __val); 
# 6439
} 
# 6442
inline string to_string(unsigned long long __val) 
# 6443
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long long), "%llu", __val); 
# 6445
} 
# 6448
inline string to_string(float __val) 
# 6449
{ 
# 6450
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6452
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6454
} 
# 6457
inline string to_string(double __val) 
# 6458
{ 
# 6459
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6461
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6463
} 
# 6466
inline string to_string(long double __val) 
# 6467
{ 
# 6468
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6470
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%Lf", __val); 
# 6472
} 
# 6477
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6478
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 6479
} 
# 6482
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6483
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 6484
} 
# 6487
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6488
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 6489
} 
# 6492
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6493
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 6494
} 
# 6497
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6498
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 6499
} 
# 6503
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 6504
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 6507
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 6508
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 6511
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 6512
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 6517
inline wstring to_wstring(int __val) 
# 6518
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 6519
} 
# 6522
inline wstring to_wstring(unsigned __val) 
# 6523
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 6525
} 
# 6528
inline wstring to_wstring(long __val) 
# 6529
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 6530
} 
# 6533
inline wstring to_wstring(unsigned long __val) 
# 6534
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 6536
} 
# 6539
inline wstring to_wstring(long long __val) 
# 6540
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 6542
} 
# 6545
inline wstring to_wstring(unsigned long long __val) 
# 6546
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 6548
} 
# 6551
inline wstring to_wstring(float __val) 
# 6552
{ 
# 6553
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6555
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6557
} 
# 6560
inline wstring to_wstring(double __val) 
# 6561
{ 
# 6562
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6564
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6566
} 
# 6569
inline wstring to_wstring(long double __val) 
# 6570
{ 
# 6571
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6573
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 6575
} 
# 6579
}
# 6581
}
# 37 "/usr/include/c++/7/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/7/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 50
struct __hash_base { 
# 52
typedef _Result result_type; 
# 53
typedef _Arg argument_type; 
# 54
}; 
# 57
template< class _Tp> struct hash; 
# 60
template< class _Tp, class  = void> 
# 61
struct __poison_hash { 
# 63
static constexpr bool __enable_hash_call = false; 
# 66
private: __poison_hash(__poison_hash &&); 
# 67
~__poison_hash(); 
# 68
}; 
# 70
template< class _Tp> 
# 71
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 73
static constexpr bool __enable_hash_call = true; 
# 74
}; 
# 77
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 78
struct __hash_enum { 
# 82
private: __hash_enum(__hash_enum &&); 
# 83
~__hash_enum(); 
# 84
}; 
# 87
template< class _Tp> 
# 88
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 91
std::size_t operator()(_Tp __val) const noexcept 
# 92
{ 
# 93
using __type = typename underlying_type< _Tp> ::type; 
# 94
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 95
} 
# 96
}; 
# 100
template< class _Tp> 
# 101
struct hash : public __hash_enum< _Tp>  { 
# 102
}; 
# 105
template< class _Tp> 
# 106
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 109
std::size_t operator()(_Tp *__p) const noexcept 
# 110
{ return reinterpret_cast< std::size_t>(__p); } 
# 111
}; 
# 124 "/usr/include/c++/7/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 127
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 130
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 133
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 136
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 139
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 142
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 145
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 148
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 151
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 154
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 157
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 160
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 163
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 166
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 187 "/usr/include/c++/7/bits/functional_hash.h" 3
struct _Hash_impl { 
# 190
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 191
__seed = static_cast< size_t>(3339675911UL)) 
# 192
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 194
template< class _Tp> static size_t 
# 196
hash(const _Tp &__val) 
# 197
{ return hash(&__val, sizeof(__val)); } 
# 199
template< class _Tp> static size_t 
# 201
__hash_combine(const _Tp &__val, size_t __hash) 
# 202
{ return hash(&__val, sizeof(__val), __hash); } 
# 203
}; 
# 206
struct _Fnv_hash_impl { 
# 209
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 210
__seed = static_cast< size_t>(2166136261UL)) 
# 211
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 213
template< class _Tp> static size_t 
# 215
hash(const _Tp &__val) 
# 216
{ return hash(&__val, sizeof(__val)); } 
# 218
template< class _Tp> static size_t 
# 220
__hash_combine(const _Tp &__val, size_t __hash) 
# 221
{ return hash(&__val, sizeof(__val), __hash); } 
# 222
}; 
# 226
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 229
size_t operator()(float __val) const noexcept 
# 230
{ 
# 232
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 233
} 
# 234
}; 
# 238
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 241
size_t operator()(double __val) const noexcept 
# 242
{ 
# 244
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 245
} 
# 246
}; 
# 250
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 253
__attribute((__pure__)) size_t 
# 254
operator()(long double __val) const noexcept; 
# 255
}; 
# 263
template< class _Hash> 
# 264
struct __is_fast_hash : public true_type { 
# 265
}; 
# 268
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 269
}; 
# 272
}
# 6589 "/usr/include/c++/7/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6598
template<> struct hash< __cxx11::basic_string< char> >  : public __hash_base< unsigned long, __cxx11::basic_string< char> >  { 
# 6602
size_t operator()(const __cxx11::string &__s) const noexcept 
# 6603
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 6604
}; 
# 6607
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char> > >  : public false_type { 
# 6608
}; 
# 6613
template<> struct hash< __cxx11::basic_string< wchar_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t> >  { 
# 6617
size_t operator()(const __cxx11::wstring &__s) const noexcept 
# 6618
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 6619
} 
# 6620
}; 
# 6623
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t> > >  : public false_type { 
# 6624
}; 
# 6631
template<> struct hash< __cxx11::basic_string< char16_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t> >  { 
# 6635
size_t operator()(const __cxx11::u16string &__s) const noexcept 
# 6636
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 6637
} 
# 6638
}; 
# 6641
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t> > >  : public false_type { 
# 6642
}; 
# 6646
template<> struct hash< __cxx11::basic_string< char32_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t> >  { 
# 6650
size_t operator()(const __cxx11::u32string &__s) const noexcept 
# 6651
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 6652
} 
# 6653
}; 
# 6656
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t> > >  : public false_type { 
# 6657
}; 
# 6666
inline namespace literals { 
# 6668
inline namespace string_literals { 
# 6672
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char>  
# 6674
operator ""s(const char *__str, size_t __len) 
# 6675
{ return __cxx11::basic_string< char> {__str, __len}; } 
# 6678
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t>  
# 6680
operator ""s(const wchar_t *__str, size_t __len) 
# 6681
{ return __cxx11::basic_string< wchar_t> {__str, __len}; } 
# 6685
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t>  
# 6687
operator ""s(const char16_t *__str, size_t __len) 
# 6688
{ return __cxx11::basic_string< char16_t> {__str, __len}; } 
# 6690
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t>  
# 6692
operator ""s(const char32_t *__str, size_t __len) 
# 6693
{ return __cxx11::basic_string< char32_t> {__str, __len}; } 
# 6697
}
# 6698
}
# 6702
}
# 46 "/usr/include/c++/7/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 64
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 66
if (_M_is_local()) { 
# 67
if (__s._M_is_local()) 
# 68
{ 
# 69
if (length() && __s.length()) 
# 70
{ 
# 71
_CharT __tmp_data[_S_local_capacity + 1]; 
# 72
traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1); 
# 74
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 76
traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1); 
# 78
} else { 
# 79
if (__s.length()) 
# 80
{ 
# 81
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 83
_M_length(__s.length()); 
# 84
__s._M_set_length(0); 
# 85
return; 
# 86
} else { 
# 87
if (length()) 
# 88
{ 
# 89
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 91
__s._M_length(length()); 
# 92
_M_set_length(0); 
# 93
return; 
# 94
}  }  }  
# 95
} else 
# 97
{ 
# 98
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 99
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 101
_M_data(__s._M_data()); 
# 102
__s._M_data(__s._M_local_buf); 
# 103
_M_capacity(__tmp_capacity); 
# 104
}  } else 
# 106
{ 
# 107
const size_type __tmp_capacity = _M_allocated_capacity; 
# 108
if (__s._M_is_local()) 
# 109
{ 
# 110
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 112
__s._M_data(_M_data()); 
# 113
_M_data(_M_local_buf); 
# 114
} else 
# 116
{ 
# 117
pointer __tmp_ptr = _M_data(); 
# 118
_M_data(__s._M_data()); 
# 119
__s._M_data(__tmp_ptr); 
# 120
_M_capacity(__s._M_allocated_capacity); 
# 121
}  
# 122
__s._M_capacity(__tmp_capacity); 
# 123
}  
# 125
const size_type __tmp_length = length(); 
# 126
_M_length(__s.length()); 
# 127
__s._M_length(__tmp_length); 
# 128
} 
# 130
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 133
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 134
{ 
# 137
if (__capacity > max_size()) { 
# 138
std::__throw_length_error("basic_string::_M_create"); }  
# 143
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 144
{ 
# 145
__capacity = (2 * __old_capacity); 
# 147
if (__capacity > max_size()) { 
# 148
__capacity = max_size(); }  
# 149
}  
# 153
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 154
} 
# 160
template< class _CharT, class _Traits, class _Alloc> 
# 161
template< class _InIterator> void 
# 164
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 166
{ 
# 167
size_type __len = (0); 
# 168
size_type __capacity = ((size_type)_S_local_capacity); 
# 170
while ((__beg != __end) && (__len < __capacity)) 
# 171
{ 
# 172
(_M_data()[__len++]) = (*__beg); 
# 173
++__beg; 
# 174
}  
# 176
try 
# 177
{ 
# 178
while (__beg != __end) 
# 179
{ 
# 180
if (__len == __capacity) 
# 181
{ 
# 183
__capacity = (__len + 1); 
# 184
pointer __another = _M_create(__capacity, __len); 
# 185
this->_S_copy(__another, _M_data(), __len); 
# 186
_M_dispose(); 
# 187
_M_data(__another); 
# 188
_M_capacity(__capacity); 
# 189
}  
# 190
(_M_data()[__len++]) = (*__beg); 
# 191
++__beg; 
# 192
}  
# 193
} 
# 194
catch (...) 
# 195
{ 
# 196
_M_dispose(); 
# 197
throw; 
# 198
}  
# 200
_M_set_length(__len); 
# 201
} 
# 203
template< class _CharT, class _Traits, class _Alloc> 
# 204
template< class _InIterator> void 
# 207
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 209
{ 
# 211
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 212
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 215
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 217
if (__dnew > ((size_type)_S_local_capacity)) 
# 218
{ 
# 219
_M_data(_M_create(__dnew, (size_type)0)); 
# 220
_M_capacity(__dnew); 
# 221
}  
# 224
try 
# 225
{ this->_S_copy_chars(_M_data(), __beg, __end); } 
# 226
catch (...) 
# 227
{ 
# 228
_M_dispose(); 
# 229
throw; 
# 230
}  
# 232
_M_set_length(__dnew); 
# 233
} 
# 235
template< class _CharT, class _Traits, class _Alloc> void 
# 238
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 239
{ 
# 240
if (__n > ((size_type)_S_local_capacity)) 
# 241
{ 
# 242
_M_data(_M_create(__n, (size_type)0)); 
# 243
_M_capacity(__n); 
# 244
}  
# 246
if (__n) { 
# 247
this->_S_assign(_M_data(), __n, __c); }  
# 249
_M_set_length(__n); 
# 250
} 
# 252
template< class _CharT, class _Traits, class _Alloc> void 
# 255
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 256
{ 
# 257
if (this != (&__str)) 
# 258
{ 
# 259
const size_type __rsize = __str.length(); 
# 260
const size_type __capacity = capacity(); 
# 262
if (__rsize > __capacity) 
# 263
{ 
# 264
size_type __new_capacity = __rsize; 
# 265
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 266
_M_dispose(); 
# 267
_M_data(__tmp); 
# 268
_M_capacity(__new_capacity); 
# 269
}  
# 271
if (__rsize) { 
# 272
this->_S_copy(_M_data(), __str._M_data(), __rsize); }  
# 274
_M_set_length(__rsize); 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> void 
# 281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 282
{ 
# 284
if (__res < length()) { 
# 285
__res = length(); }  
# 287
const size_type __capacity = capacity(); 
# 288
if (__res != __capacity) 
# 289
{ 
# 290
if ((__res > __capacity) || (__res > ((size_type)_S_local_capacity))) 
# 292
{ 
# 293
pointer __tmp = _M_create(__res, __capacity); 
# 294
this->_S_copy(__tmp, _M_data(), length() + 1); 
# 295
_M_dispose(); 
# 296
_M_data(__tmp); 
# 297
_M_capacity(__res); 
# 298
} else { 
# 299
if (!_M_is_local()) 
# 300
{ 
# 301
this->_S_copy(_M_local_data(), _M_data(), length() + 1); 
# 302
_M_destroy(__capacity); 
# 303
_M_data(_M_local_data()); 
# 304
}  }  
# 305
}  
# 306
} 
# 308
template< class _CharT, class _Traits, class _Alloc> void 
# 311
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 312
__len2) 
# 313
{ 
# 314
const size_type __how_much = (length() - __pos) - __len1; 
# 316
size_type __new_capacity = (length() + __len2) - __len1; 
# 317
pointer __r = _M_create(__new_capacity, capacity()); 
# 319
if (__pos) { 
# 320
this->_S_copy(__r, _M_data(), __pos); }  
# 321
if (__s && __len2) { 
# 322
this->_S_copy(__r + __pos, __s, __len2); }  
# 323
if (__how_much) { 
# 324
this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 327
_M_dispose(); 
# 328
_M_data(__r); 
# 329
_M_capacity(__new_capacity); 
# 330
} 
# 332
template< class _CharT, class _Traits, class _Alloc> void 
# 335
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 336
{ 
# 337
const size_type __how_much = (length() - __pos) - __n; 
# 339
if (__how_much && __n) { 
# 340
this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much); }  
# 342
_M_set_length(length() - __n); 
# 343
} 
# 345
template< class _CharT, class _Traits, class _Alloc> void 
# 348
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 349
{ 
# 350
const size_type __size = size(); 
# 351
if (__size < __n) { 
# 352
this->append(__n - __size, __c); } else { 
# 353
if (__n < __size) { 
# 354
_M_set_length(__n); }  }  
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 360
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 361
{ 
# 362
const size_type __len = __n + size(); 
# 364
if (__len <= capacity()) 
# 365
{ 
# 366
if (__n) { 
# 367
this->_S_copy(this->_M_data() + size(), __s, __n); }  
# 368
} else { 
# 370
_M_mutate(size(), (size_type)0, __s, __n); }  
# 372
_M_set_length(__len); 
# 373
return *this; 
# 374
} 
# 376
template< class _CharT, class _Traits, class _Alloc> 
# 377
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 380
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 381
__k1, _InputIterator __k2, __false_type) 
# 383
{ 
# 384
const basic_string __s(__k1, __k2); 
# 385
const size_type __n1 = __i2 - __i1; 
# 386
return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size()); 
# 388
} 
# 390
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 393
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 394
__c) 
# 395
{ 
# 396
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 398
const size_type __old_size = size(); 
# 399
const size_type __new_size = (__old_size + __n2) - __n1; 
# 401
if (__new_size <= capacity()) 
# 402
{ 
# 403
pointer __p = this->_M_data() + __pos1; 
# 405
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 406
if (__how_much && (__n1 != __n2)) { 
# 407
this->_S_move(__p + __n2, __p + __n1, __how_much); }  
# 408
} else { 
# 410
_M_mutate(__pos1, __n1, 0, __n2); }  
# 412
if (__n2) { 
# 413
this->_S_assign(this->_M_data() + __pos1, __n2, __c); }  
# 415
_M_set_length(__new_size); 
# 416
return *this; 
# 417
} 
# 419
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 422
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 423
__len2) 
# 424
{ 
# 425
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 427
const size_type __old_size = size(); 
# 428
const size_type __new_size = (__old_size + __len2) - __len1; 
# 430
if (__new_size <= capacity()) 
# 431
{ 
# 432
pointer __p = this->_M_data() + __pos; 
# 434
const size_type __how_much = (__old_size - __pos) - __len1; 
# 435
if (_M_disjunct(__s)) 
# 436
{ 
# 437
if (__how_much && (__len1 != __len2)) { 
# 438
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 439
if (__len2) { 
# 440
this->_S_copy(__p, __s, __len2); }  
# 441
} else 
# 443
{ 
# 445
if (__len2 && (__len2 <= __len1)) { 
# 446
this->_S_move(__p, __s, __len2); }  
# 447
if (__how_much && (__len1 != __len2)) { 
# 448
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 449
if (__len2 > __len1) 
# 450
{ 
# 451
if ((__s + __len2) <= (__p + __len1)) { 
# 452
this->_S_move(__p, __s, __len2); } else { 
# 453
if (__s >= (__p + __len1)) { 
# 454
this->_S_copy(__p, (__s + __len2) - __len1, __len2); } else 
# 456
{ 
# 457
const size_type __nleft = (__p + __len1) - __s; 
# 458
this->_S_move(__p, __s, __nleft); 
# 459
this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft); 
# 461
}  }  
# 462
}  
# 463
}  
# 464
} else { 
# 466
_M_mutate(__pos, __len1, __s, __len2); }  
# 468
_M_set_length(__new_size); 
# 469
return *this; 
# 470
} 
# 472
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 475
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 476
{ 
# 477
_M_check(__pos, "basic_string::copy"); 
# 478
__n = _M_limit(__pos, __n); 
# 479
; 
# 480
if (__n) { 
# 481
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 483
return __n; 
# 484
} 
# 1155 "/usr/include/c++/7/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1157
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1158
__rhs) 
# 1159
{ 
# 1160
; 
# 1161
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1162
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1163
const __size_type __len = _Traits::length(__lhs); 
# 1164
__string_type __str; 
# 1165
__str.reserve(__len + __rhs.size()); 
# 1166
__str.append(__lhs, __len); 
# 1167
__str.append(__rhs); 
# 1168
return __str; 
# 1169
} 
# 1171
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1173
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1174
{ 
# 1175
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1176
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1177
__string_type __str; 
# 1178
const __size_type __len = __rhs.size(); 
# 1179
__str.reserve(__len + 1); 
# 1180
__str.append((__size_type)1, __lhs); 
# 1181
__str.append(__rhs); 
# 1182
return __str; 
# 1183
} 
# 1185
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1188
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1190
{ 
# 1191
; 
# 1192
const size_type __size = size(); 
# 1194
if (__n == 0) { 
# 1195
return (__pos <= __size) ? __pos : npos; }  
# 1196
if (__pos >= __size) { 
# 1197
return npos; }  
# 1199
const _CharT __elem0 = __s[0]; 
# 1200
const _CharT *const __data = data(); 
# 1201
const _CharT *__first = __data + __pos; 
# 1202
const _CharT *const __last = __data + __size; 
# 1203
size_type __len = __size - __pos; 
# 1205
while (__len >= __n) 
# 1206
{ 
# 1208
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 1209
if (!__first) { 
# 1210
return npos; }  
# 1214
if (traits_type::compare(__first, __s, __n) == 0) { 
# 1215
return __first - __data; }  
# 1216
__len = (__last - (++__first)); 
# 1217
}  
# 1218
return npos; 
# 1219
} 
# 1221
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1224
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1225
{ 
# 1226
size_type __ret = npos; 
# 1227
const size_type __size = size(); 
# 1228
if (__pos < __size) 
# 1229
{ 
# 1230
const _CharT *__data = _M_data(); 
# 1231
const size_type __n = __size - __pos; 
# 1232
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1233
if (__p) { 
# 1234
__ret = (__p - __data); }  
# 1235
}  
# 1236
return __ret; 
# 1237
} 
# 1239
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1242
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1244
{ 
# 1245
; 
# 1246
const size_type __size = size(); 
# 1247
if (__n <= __size) 
# 1248
{ 
# 1249
__pos = std::min((size_type)(__size - __n), __pos); 
# 1250
const _CharT *__data = _M_data(); 
# 1251
do 
# 1252
{ 
# 1253
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1254
return __pos; }  
# 1255
} 
# 1256
while ((__pos--) > 0); 
# 1257
}  
# 1258
return npos; 
# 1259
} 
# 1261
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1264
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1265
{ 
# 1266
size_type __size = size(); 
# 1267
if (__size) 
# 1268
{ 
# 1269
if ((--__size) > __pos) { 
# 1270
__size = __pos; }  
# 1271
for (++__size; (__size--) > 0;) { 
# 1272
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1273
return __size; }  }  
# 1274
}  
# 1275
return npos; 
# 1276
} 
# 1278
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1283
{ 
# 1284
; 
# 1285
for (; __n && (__pos < size()); ++__pos) 
# 1286
{ 
# 1287
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1288
if (__p) { 
# 1289
return __pos; }  
# 1290
}  
# 1291
return npos; 
# 1292
} 
# 1294
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1297
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1299
{ 
# 1300
; 
# 1301
size_type __size = size(); 
# 1302
if (__size && __n) 
# 1303
{ 
# 1304
if ((--__size) > __pos) { 
# 1305
__size = __pos; }  
# 1306
do 
# 1307
{ 
# 1308
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1309
return __size; }  
# 1310
} 
# 1311
while ((__size--) != 0); 
# 1312
}  
# 1313
return npos; 
# 1314
} 
# 1316
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1319
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1321
{ 
# 1322
; 
# 1323
for (; __pos < size(); ++__pos) { 
# 1324
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1325
return __pos; }  }  
# 1326
return npos; 
# 1327
} 
# 1329
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1332
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1333
{ 
# 1334
for (; __pos < size(); ++__pos) { 
# 1335
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1336
return __pos; }  }  
# 1337
return npos; 
# 1338
} 
# 1340
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1343
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1345
{ 
# 1346
; 
# 1347
size_type __size = size(); 
# 1348
if (__size) 
# 1349
{ 
# 1350
if ((--__size) > __pos) { 
# 1351
__size = __pos; }  
# 1352
do 
# 1353
{ 
# 1354
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1355
return __size; }  
# 1356
} 
# 1357
while (__size--); 
# 1358
}  
# 1359
return npos; 
# 1360
} 
# 1362
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1365
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1366
{ 
# 1367
size_type __size = size(); 
# 1368
if (__size) 
# 1369
{ 
# 1370
if ((--__size) > __pos) { 
# 1371
__size = __pos; }  
# 1372
do 
# 1373
{ 
# 1374
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1375
return __size; }  
# 1376
} 
# 1377
while (__size--); 
# 1378
}  
# 1379
return npos; 
# 1380
} 
# 1382
template< class _CharT, class _Traits, class _Alloc> int 
# 1385
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1386
{ 
# 1387
_M_check(__pos, "basic_string::compare"); 
# 1388
__n = _M_limit(__pos, __n); 
# 1389
const size_type __osize = __str.size(); 
# 1390
const size_type __len = std::min(__n, __osize); 
# 1391
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1392
if (!__r) { 
# 1393
__r = (_S_compare)(__n, __osize); }  
# 1394
return __r; 
# 1395
} 
# 1397
template< class _CharT, class _Traits, class _Alloc> int 
# 1400
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1401
__pos2, size_type __n2) const 
# 1402
{ 
# 1403
_M_check(__pos1, "basic_string::compare"); 
# 1404
__str._M_check(__pos2, "basic_string::compare"); 
# 1405
__n1 = _M_limit(__pos1, __n1); 
# 1406
__n2 = __str._M_limit(__pos2, __n2); 
# 1407
const size_type __len = std::min(__n1, __n2); 
# 1408
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1410
if (!__r) { 
# 1411
__r = (_S_compare)(__n1, __n2); }  
# 1412
return __r; 
# 1413
} 
# 1415
template< class _CharT, class _Traits, class _Alloc> int 
# 1418
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 1419
{ 
# 1420
; 
# 1421
const size_type __size = size(); 
# 1422
const size_type __osize = traits_type::length(__s); 
# 1423
const size_type __len = std::min(__size, __osize); 
# 1424
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1425
if (!__r) { 
# 1426
__r = (_S_compare)(__size, __osize); }  
# 1427
return __r; 
# 1428
} 
# 1430
template< class _CharT, class _Traits, class _Alloc> int 
# 1433
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1434
{ 
# 1435
; 
# 1436
_M_check(__pos, "basic_string::compare"); 
# 1437
__n1 = _M_limit(__pos, __n1); 
# 1438
const size_type __osize = traits_type::length(__s); 
# 1439
const size_type __len = std::min(__n1, __osize); 
# 1440
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1441
if (!__r) { 
# 1442
__r = (_S_compare)(__n1, __osize); }  
# 1443
return __r; 
# 1444
} 
# 1446
template< class _CharT, class _Traits, class _Alloc> int 
# 1449
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1450
__n2) const 
# 1451
{ 
# 1452
; 
# 1453
_M_check(__pos, "basic_string::compare"); 
# 1454
__n1 = _M_limit(__pos, __n1); 
# 1455
const size_type __len = std::min(__n1, __n2); 
# 1456
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1457
if (!__r) { 
# 1458
__r = (_S_compare)(__n1, __n2); }  
# 1459
return __r; 
# 1460
} 
# 1463
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1465
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1466
__str) 
# 1467
{ 
# 1468
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1469
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1470
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1471
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1472
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1473
typedef ctype< _CharT>  __ctype_type; 
# 1474
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1476
__size_type __extracted = (0); 
# 1477
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1478
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1479
if (__cerb) 
# 1480
{ 
# 1481
try 
# 1482
{ 
# 1484
__str.erase(); 
# 1485
_CharT __buf[128]; 
# 1486
__size_type __len = (0); 
# 1487
const streamsize __w = __in.width(); 
# 1488
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : __str.max_size(); 
# 1490
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1491
const __int_type __eof = _Traits::eof(); 
# 1492
__int_type __c = __in.rdbuf()->sgetc(); 
# 1494
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))) 
# 1498
{ 
# 1499
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1500
{ 
# 1501
__str.append(__buf, sizeof(__buf) / sizeof(_CharT)); 
# 1502
__len = 0; 
# 1503
}  
# 1504
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1505
++__extracted; 
# 1506
__c = __in.rdbuf()->snextc(); 
# 1507
}  
# 1508
__str.append(__buf, __len); 
# 1510
if (_Traits::eq_int_type(__c, __eof)) { 
# 1511
__err |= __ios_base::eofbit; }  
# 1512
__in.width(0); 
# 1513
} 
# 1514
catch (__cxxabiv1::__forced_unwind &) 
# 1515
{ 
# 1516
__in._M_setstate(__ios_base::badbit); 
# 1517
throw; 
# 1518
} 
# 1519
catch (...) 
# 1520
{ 
# 1524
__in._M_setstate(__ios_base::badbit); 
# 1525
}  
# 1526
}  
# 1528
if (!__extracted) { 
# 1529
__err |= __ios_base::failbit; }  
# 1530
if (__err) { 
# 1531
__in.setstate(__err); }  
# 1532
return __in; 
# 1533
} 
# 1535
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1537
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1538
__str, _CharT __delim) 
# 1539
{ 
# 1540
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1541
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1542
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1543
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1544
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1546
__size_type __extracted = (0); 
# 1547
const __size_type __n = __str.max_size(); 
# 1548
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1549
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1550
if (__cerb) 
# 1551
{ 
# 1552
try 
# 1553
{ 
# 1554
__str.erase(); 
# 1555
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1556
const __int_type __eof = _Traits::eof(); 
# 1557
__int_type __c = __in.rdbuf()->sgetc(); 
# 1559
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1562
{ 
# 1563
__str += _Traits::to_char_type(__c); 
# 1564
++__extracted; 
# 1565
__c = __in.rdbuf()->snextc(); 
# 1566
}  
# 1568
if (_Traits::eq_int_type(__c, __eof)) { 
# 1569
__err |= __ios_base::eofbit; } else { 
# 1570
if (_Traits::eq_int_type(__c, __idelim)) 
# 1571
{ 
# 1572
++__extracted; 
# 1573
__in.rdbuf()->sbumpc(); 
# 1574
} else { 
# 1576
__err |= __ios_base::failbit; }  }  
# 1577
} 
# 1578
catch (__cxxabiv1::__forced_unwind &) 
# 1579
{ 
# 1580
__in._M_setstate(__ios_base::badbit); 
# 1581
throw; 
# 1582
} 
# 1583
catch (...) 
# 1584
{ 
# 1588
__in._M_setstate(__ios_base::badbit); 
# 1589
}  
# 1590
}  
# 1591
if (!__extracted) { 
# 1592
__err |= __ios_base::failbit; }  
# 1593
if (__err) { 
# 1594
__in.setstate(__err); }  
# 1595
return __in; 
# 1596
} 
# 1607 "/usr/include/c++/7/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char> ;
# 1615
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1618
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char>  & __str);
# 1621
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str, char __delim);
# 1624
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1630
extern template class __cxx11::basic_string< wchar_t> ;
# 1636
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1639
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t>  & __str);
# 1642
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim);
# 1645
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1652
}
# 41 "/usr/include/c++/7/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const __cxx11::string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char>  __sso_string; 
# 113 "/usr/include/c++/7/stdexcept" 3
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const __cxx11::string & __arg); 
# 124
explicit logic_error(const char *); 
# 128
logic_error(const logic_error &) noexcept; 
# 129
logic_error &operator=(const logic_error &) noexcept; 
# 132
virtual ~logic_error() noexcept; 
# 137
virtual const char *what() const noexcept; 
# 143
}; 
# 147
class domain_error : public logic_error { 
# 150
public: explicit domain_error(const __cxx11::string & __arg); 
# 152
explicit domain_error(const char *); 
# 154
virtual ~domain_error() noexcept; 
# 155
}; 
# 158
class invalid_argument : public logic_error { 
# 161
public: explicit invalid_argument(const __cxx11::string & __arg); 
# 163
explicit invalid_argument(const char *); 
# 165
virtual ~invalid_argument() noexcept; 
# 166
}; 
# 170
class length_error : public logic_error { 
# 173
public: explicit length_error(const __cxx11::string & __arg); 
# 175
explicit length_error(const char *); 
# 177
virtual ~length_error() noexcept; 
# 178
}; 
# 182
class out_of_range : public logic_error { 
# 185
public: explicit out_of_range(const __cxx11::string & __arg); 
# 187
explicit out_of_range(const char *); 
# 189
virtual ~out_of_range() noexcept; 
# 190
}; 
# 197
class runtime_error : public exception { 
# 199
__cow_string _M_msg; 
# 204
public: explicit runtime_error(const __cxx11::string & __arg); 
# 208
explicit runtime_error(const char *); 
# 212
runtime_error(const runtime_error &) noexcept; 
# 213
runtime_error &operator=(const runtime_error &) noexcept; 
# 216
virtual ~runtime_error() noexcept; 
# 221
virtual const char *what() const noexcept; 
# 227
}; 
# 230
class range_error : public runtime_error { 
# 233
public: explicit range_error(const __cxx11::string & __arg); 
# 235
explicit range_error(const char *); 
# 237
virtual ~range_error() noexcept; 
# 238
}; 
# 241
class overflow_error : public runtime_error { 
# 244
public: explicit overflow_error(const __cxx11::string & __arg); 
# 246
explicit overflow_error(const char *); 
# 248
virtual ~overflow_error() noexcept; 
# 249
}; 
# 252
class underflow_error : public runtime_error { 
# 255
public: explicit underflow_error(const __cxx11::string & __arg); 
# 257
explicit underflow_error(const char *); 
# 259
virtual ~underflow_error() noexcept; 
# 260
}; 
# 265
}
# 43 "/usr/include/c++/7/array" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _Tp, size_t _Nm> 
# 48
struct __array_traits { 
# 50
typedef _Tp _Type[_Nm]; 
# 51
typedef __is_swappable< _Tp>  _Is_swappable; 
# 52
typedef __is_nothrow_swappable< _Tp>  _Is_nothrow_swappable; 
# 55
static constexpr _Tp &_S_ref(const _Type &__t, size_t __n) noexcept 
# 56
{ return const_cast< _Tp &>(__t[__n]); } 
# 59
static constexpr _Tp *_S_ptr(const _Type &__t) noexcept 
# 60
{ return const_cast< _Tp *>(__t); } 
# 61
}; 
# 63
template< class _Tp> 
# 64
struct __array_traits< _Tp, 0>  { 
# 66
struct _Type { }; 
# 67
typedef true_type _Is_swappable; 
# 68
typedef true_type _Is_nothrow_swappable; 
# 71
static constexpr _Tp &_S_ref(const _Type &, size_t) noexcept 
# 72
{ return *(static_cast< _Tp *>(nullptr)); } 
# 75
static constexpr _Tp *_S_ptr(const _Type &) noexcept 
# 76
{ return nullptr; } 
# 77
}; 
# 93 "/usr/include/c++/7/array" 3
template< class _Tp, size_t _Nm> 
# 94
struct array { 
# 96
typedef _Tp value_type; 
# 97
typedef value_type *pointer; 
# 98
typedef const value_type *const_pointer; 
# 99
typedef value_type &reference; 
# 100
typedef const value_type &const_reference; 
# 101
typedef value_type *iterator; 
# 102
typedef const value_type *const_iterator; 
# 103
typedef size_t size_type; 
# 104
typedef ptrdiff_t difference_type; 
# 105
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 106
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 109
typedef __array_traits< _Tp, _Nm>  _AT_Type; 
# 110
typename __array_traits< _Tp, _Nm> ::_Type _M_elems; 
# 116
void fill(const value_type &__u) 
# 117
{ std::fill_n(begin(), size(), __u); } 
# 120
void swap(array &__other) noexcept(_AT_Type::_Is_nothrow_swappable::value) 
# 122
{ std::swap_ranges(begin(), end(), __other.begin()); } 
# 126
iterator begin() noexcept 
# 127
{ return (iterator)data(); } 
# 130
const_iterator begin() const noexcept 
# 131
{ return (const_iterator)data(); } 
# 134
iterator end() noexcept 
# 135
{ return (iterator)(data() + _Nm); } 
# 138
const_iterator end() const noexcept 
# 139
{ return (const_iterator)(data() + _Nm); } 
# 142
reverse_iterator rbegin() noexcept 
# 143
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 146
const_reverse_iterator rbegin() const noexcept 
# 147
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 150
reverse_iterator rend() noexcept 
# 151
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 154
const_reverse_iterator rend() const noexcept 
# 155
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 158
const_iterator cbegin() const noexcept 
# 159
{ return (const_iterator)data(); } 
# 162
const_iterator cend() const noexcept 
# 163
{ return (const_iterator)(data() + _Nm); } 
# 166
const_reverse_iterator crbegin() const noexcept 
# 167
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 170
const_reverse_iterator crend() const noexcept 
# 171
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 175
constexpr size_type size() const noexcept { return _Nm; } 
# 178
constexpr size_type max_size() const noexcept { return _Nm; } 
# 181
constexpr bool empty() const noexcept { return size() == 0; } 
# 185
reference operator[](size_type __n) noexcept 
# 186
{ return _AT_Type::_S_ref(_M_elems, __n); } 
# 189
constexpr const_reference operator[](size_type __n) const noexcept 
# 190
{ return _AT_Type::_S_ref(_M_elems, __n); } 
# 193
reference at(size_type __n) 
# 194
{ 
# 195
if (__n >= _Nm) { 
# 196
std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm); }  
# 199
return _AT_Type::_S_ref(_M_elems, __n); 
# 200
} 
# 203
constexpr const_reference at(size_type __n) const 
# 204
{ 
# 207
return (__n < _Nm) ? _AT_Type::_S_ref(_M_elems, __n) : (std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm), _AT_Type::_S_ref(_M_elems, 0)); 
# 212
} 
# 215
reference front() noexcept 
# 216
{ return *begin(); } 
# 219
constexpr const_reference front() const noexcept 
# 220
{ return _AT_Type::_S_ref(_M_elems, 0); } 
# 223
reference back() noexcept 
# 224
{ return (_Nm) ? *(end() - 1) : (*end()); } 
# 227
constexpr const_reference back() const noexcept 
# 228
{ 
# 229
return (_Nm) ? _AT_Type::_S_ref(_M_elems, _Nm - (1)) : _AT_Type::_S_ref(_M_elems, 0); 
# 231
} 
# 234
pointer data() noexcept 
# 235
{ return _AT_Type::_S_ptr(_M_elems); } 
# 238
const_pointer data() const noexcept 
# 239
{ return _AT_Type::_S_ptr(_M_elems); } 
# 240
}; 
# 250 "/usr/include/c++/7/array" 3
template< class _Tp, size_t _Nm> inline bool 
# 252
operator==(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 253
{ return std::equal(__one.begin(), __one.end(), __two.begin()); } 
# 255
template< class _Tp, size_t _Nm> inline bool 
# 257
operator!=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 258
{ return !(__one == __two); } 
# 260
template< class _Tp, size_t _Nm> inline bool 
# 262
operator<(const array< _Tp, _Nm>  &__a, const array< _Tp, _Nm>  &__b) 
# 263
{ 
# 264
return std::lexicographical_compare(__a.begin(), __a.end(), __b.begin(), __b.end()); 
# 266
} 
# 268
template< class _Tp, size_t _Nm> inline bool 
# 270
operator>(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 271
{ return __two < __one; } 
# 273
template< class _Tp, size_t _Nm> inline bool 
# 275
operator<=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 276
{ return !(__one > __two); } 
# 278
template< class _Tp, size_t _Nm> inline bool 
# 280
operator>=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 281
{ return !(__one < __two); } 
# 284
template< class _Tp, size_t _Nm> inline void 
# 294
swap(array< _Tp, _Nm>  &__one, array< _Tp, _Nm>  &__two) noexcept(noexcept(__one.swap(__two))) 
# 296
{ __one.swap(__two); } 
# 305 "/usr/include/c++/7/array" 3
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &
# 307
get(array< _Tp, _Nm>  &__arr) noexcept 
# 308
{ 
# 309
static_assert((_Int < _Nm), "array index is within bounds");
# 310
return std::template __array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 312
} 
# 314
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &&
# 316
get(array< _Tp, _Nm>  &&__arr) noexcept 
# 317
{ 
# 318
static_assert((_Int < _Nm), "array index is within bounds");
# 319
return std::move(std::get< _Int> (__arr)); 
# 320
} 
# 322
template< size_t _Int, class _Tp, size_t _Nm> constexpr const _Tp &
# 324
get(const array< _Tp, _Nm>  &__arr) noexcept 
# 325
{ 
# 326
static_assert((_Int < _Nm), "array index is within bounds");
# 327
return std::template __array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 329
} 
# 332
}
# 334
namespace std __attribute((__visibility__("default"))) { 
# 341
template< class _Tp> struct tuple_size; 
# 345
template< class _Tp, size_t _Nm> 
# 346
struct tuple_size< array< _Tp, _Nm> >  : public integral_constant< unsigned long, _Nm>  { 
# 347
}; 
# 350
template< size_t _Int, class _Tp> struct tuple_element; 
# 354
template< size_t _Int, class _Tp, size_t _Nm> 
# 355
struct tuple_element< _Int, array< _Tp, _Nm> >  { 
# 357
static_assert((_Int < _Nm), "index is out of bounds");
# 358
typedef _Tp type; 
# 359
}; 
# 361
template< class _Tp, size_t _Nm> 
# 362
struct __is_tuple_like_impl< array< _Tp, _Nm> >  : public true_type { 
# 363
}; 
# 366
}
# 35 "/usr/include/c++/7/bits/uses_allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
struct __erased_type { }; 
# 41
template< class _Alloc, class _Tp> using __is_erased_or_convertible = __or_< is_same< _Tp, __erased_type> , is_convertible< _Alloc, _Tp> > ; 
# 46
struct allocator_arg_t { explicit allocator_arg_t() = default;}; 
# 48
constexpr allocator_arg_t allocator_arg = allocator_arg_t(); 
# 51
template< class _Tp, class _Alloc, class  = __void_t< > > 
# 52
struct __uses_allocator_helper : public false_type { 
# 53
}; 
# 55
template< class _Tp, class _Alloc> 
# 56
struct __uses_allocator_helper< _Tp, _Alloc, __void_t< typename _Tp::allocator_type> >  : public __or_< is_same< typename _Tp::allocator_type, __erased_type> , is_convertible< _Alloc, typename _Tp::allocator_type> > ::type { 
# 59
}; 
# 62
template< class _Tp, class _Alloc> 
# 63
struct uses_allocator : public __uses_allocator_helper< _Tp, _Alloc> ::type { 
# 65
}; 
# 67
struct __uses_alloc_base { }; 
# 69
struct __uses_alloc0 : public __uses_alloc_base { 
# 71
struct _Sink { void operator=(const void *) { } } _M_a; 
# 72
}; 
# 74
template< class _Alloc> 
# 75
struct __uses_alloc1 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 77
template< class _Alloc> 
# 78
struct __uses_alloc2 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 80
template< bool , class _Tp, class _Alloc, class ..._Args> struct __uses_alloc; 
# 83
template< class _Tp, class _Alloc, class ..._Args> 
# 84
struct __uses_alloc< true, _Tp, _Alloc, _Args...>  : public conditional< is_constructible< _Tp, allocator_arg_t, _Alloc, _Args...> ::value, __uses_alloc1< _Alloc> , __uses_alloc2< _Alloc> > ::type { 
# 90
static_assert((__or_< is_constructible< _Tp, std::allocator_arg_t, _Alloc, _Args...> , is_constructible< _Tp, _Args..., _Alloc> > ::value), "construction with an allocator must be possible if uses_allocator is true");
# 94
}; 
# 96
template< class _Tp, class _Alloc, class ..._Args> 
# 97
struct __uses_alloc< false, _Tp, _Alloc, _Args...>  : public __uses_alloc0 { 
# 98
}; 
# 100
template< class _Tp, class _Alloc, class ..._Args> using __uses_alloc_t = __uses_alloc< uses_allocator< _Tp, _Alloc> ::value, _Tp, _Alloc, _Args...> ; 
# 104
template< class _Tp, class _Alloc, class ..._Args> inline __uses_alloc_t< _Tp, _Alloc, _Args...>  
# 106
__use_alloc(const _Alloc &__a) 
# 107
{ 
# 108
__uses_alloc_t< _Tp, _Alloc, _Args...>  __ret; 
# 109
(__ret._M_a) = std::__addressof(__a); 
# 110
return __ret; 
# 111
} 
# 113
template < typename _Tp, typename _Alloc, typename ... _Args >
    void
    __use_alloc ( const _Alloc && ) = delete;
# 123
template< template< class ...>  class _Predicate, class 
# 124
_Tp, class _Alloc, class ..._Args> 
# 125
struct __is_uses_allocator_predicate : public conditional< uses_allocator< _Tp, _Alloc> ::value, __or_< _Predicate< _Tp, allocator_arg_t, _Alloc, _Args...> , _Predicate< _Tp, _Args..., _Alloc> > , _Predicate< _Tp, _Args...> > ::type { 
# 129
}; 
# 131
template< class _Tp, class _Alloc, class ..._Args> 
# 132
struct __is_uses_allocator_constructible : public __is_uses_allocator_predicate< is_constructible, _Tp, _Alloc, _Args...>  { 
# 134
}; 
# 137
template< class _Tp, class _Alloc, class ..._Args> constexpr bool 
# 138
__is_uses_allocator_constructible_v = (__is_uses_allocator_constructible< _Tp, _Alloc, _Args...> ::value); 
# 142
template< class _Tp, class _Alloc, class ..._Args> 
# 143
struct __is_nothrow_uses_allocator_constructible : public __is_uses_allocator_predicate< is_nothrow_constructible, _Tp, _Alloc, _Args...>  { 
# 146
}; 
# 150
template< class _Tp, class _Alloc, class ..._Args> constexpr bool 
# 152
__is_nothrow_uses_allocator_constructible_v = (__is_nothrow_uses_allocator_constructible< _Tp, _Alloc, _Args...> ::value); 
# 156
template< class _Tp, class ..._Args> void 
# 157
__uses_allocator_construct_impl(__uses_alloc0 __a, _Tp *__ptr, _Args &&...
# 158
__args) 
# 159
{ ::new ((void *)__ptr) _Tp(std::forward< _Args> (__args)...); } 
# 161
template< class _Tp, class _Alloc, class ..._Args> void 
# 162
__uses_allocator_construct_impl(__uses_alloc1< _Alloc>  __a, _Tp *__ptr, _Args &&...
# 163
__args) 
# 164
{ 
# 165
::new ((void *)__ptr) _Tp(allocator_arg, *(__a._M_a), std::forward< _Args> (__args)...); 
# 167
} 
# 169
template< class _Tp, class _Alloc, class ..._Args> void 
# 170
__uses_allocator_construct_impl(__uses_alloc2< _Alloc>  __a, _Tp *__ptr, _Args &&...
# 171
__args) 
# 172
{ ::new ((void *)__ptr) _Tp(std::forward< _Args> (__args)..., *(__a._M_a)); } 
# 174
template< class _Tp, class _Alloc, class ..._Args> void 
# 175
__uses_allocator_construct(const _Alloc &__a, _Tp *__ptr, _Args &&...
# 176
__args) 
# 177
{ 
# 178
__uses_allocator_construct_impl(__use_alloc< _Tp, _Alloc, _Args...> (__a), __ptr, std::forward< _Args> (__args)...); 
# 180
} 
# 183
}
# 41 "/usr/include/c++/7/bits/invoke.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52 "/usr/include/c++/7/bits/invoke.h" 3
template< class _Tp, class _Up = typename __inv_unwrap< _Tp> ::type> constexpr _Up &&
# 54
__invfwd(typename remove_reference< _Tp> ::type &__t) noexcept 
# 55
{ return static_cast< _Up &&>(__t); } 
# 57
template< class _Res, class _Fn, class ..._Args> constexpr _Res 
# 59
__invoke_impl(__invoke_other, _Fn &&__f, _Args &&...__args) 
# 60
{ return std::forward< _Fn> (__f)(std::forward< _Args> (__args)...); } 
# 62
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 64
__invoke_impl(__invoke_memfun_ref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 65
__args) 
# 66
{ return (__invfwd< _Tp> (__t).*__f)(std::forward< _Args> (__args)...); } 
# 68
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 70
__invoke_impl(__invoke_memfun_deref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 71
__args) 
# 72
{ 
# 73
return ((*std::forward< _Tp> (__t)).*__f)(std::forward< _Args> (__args)...); 
# 74
} 
# 76
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 78
__invoke_impl(__invoke_memobj_ref, _MemPtr &&__f, _Tp &&__t) 
# 79
{ return __invfwd< _Tp> (__t).*__f; } 
# 81
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 83
__invoke_impl(__invoke_memobj_deref, _MemPtr &&__f, _Tp &&__t) 
# 84
{ return (*std::forward< _Tp> (__t)).*__f; } 
# 87
template< class _Callable, class ..._Args> constexpr typename __invoke_result< _Callable, _Args...> ::type 
# 89
__invoke(_Callable &&__fn, _Args &&...__args) noexcept(__is_nothrow_invocable< _Callable, _Args...> ::value) 
# 91
{ 
# 92
using __result = __invoke_result< _Callable, _Args...> ; 
# 93
using __type = typename __invoke_result< _Callable, _Args...> ::type; 
# 94
using __tag = typename __invoke_result< _Callable, _Args...> ::__invoke_type; 
# 95
return std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); 
# 97
} 
# 100
}
# 43 "/usr/include/c++/7/tuple" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class ..._Elements> class tuple; 
# 55
template< class _Tp> 
# 56
struct __is_empty_non_tuple : public is_empty< _Tp>  { }; 
# 59
template< class _El0, class ..._El> 
# 60
struct __is_empty_non_tuple< tuple< _El0, _El...> >  : public false_type { }; 
# 63
template< class _Tp> using __empty_not_final = typename conditional< __is_final(_Tp), integral_constant< bool, false> , __is_empty_non_tuple< _Tp> > ::type; 
# 68
template< size_t _Idx, class _Head, bool 
# 69
 = __empty_not_final< _Head> ::value> struct _Head_base; 
# 72
template< size_t _Idx, class _Head> 
# 73
struct _Head_base< _Idx, _Head, true>  : public _Head { 
# 76
constexpr _Head_base() : _Head() 
# 77
{ } 
# 79
constexpr _Head_base(const _Head &__h) : _Head(__h) 
# 80
{ } 
# 82
constexpr _Head_base(const std::_Head_base< _Idx, _Head, true>  &) = default;
# 83
constexpr _Head_base(std::_Head_base< _Idx, _Head, true>  &&) = default;
# 85
template< class _UHead> constexpr 
# 86
_Head_base(_UHead &&__h) : _Head(std::forward< _UHead> (__h)) 
# 87
{ } 
# 89
_Head_base(std::allocator_arg_t, std::__uses_alloc0) : _Head() 
# 90
{ } 
# 92
template< class _Alloc> 
# 93
_Head_base(std::allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _Head(allocator_arg, *(__a._M_a)) 
# 94
{ } 
# 96
template< class _Alloc> 
# 97
_Head_base(std::allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _Head(*(__a._M_a)) 
# 98
{ } 
# 100
template< class _UHead> 
# 101
_Head_base(std::__uses_alloc0, _UHead &&__uhead) : _Head(std::forward< _UHead> (__uhead)) 
# 102
{ } 
# 104
template< class _Alloc, class _UHead> 
# 105
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _Head(allocator_arg, *(__a._M_a), std::forward< _UHead> (__uhead)) 
# 106
{ } 
# 108
template< class _Alloc, class _UHead> 
# 109
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _Head(std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 110
{ } 
# 113
static constexpr _Head &_M_head(std::_Head_base< _Idx, _Head, true>  &__b) noexcept { return __b; } 
# 116
static constexpr const _Head &_M_head(const std::_Head_base< _Idx, _Head, true>  &__b) noexcept { return __b; } 
# 117
}; 
# 119
template< size_t _Idx, class _Head> 
# 120
struct _Head_base< _Idx, _Head, false>  { 
# 122
constexpr _Head_base() : _M_head_impl() 
# 123
{ } 
# 125
constexpr _Head_base(const _Head &__h) : _M_head_impl(__h) 
# 126
{ } 
# 128
constexpr _Head_base(const std::_Head_base< _Idx, _Head, false>  &) = default;
# 129
constexpr _Head_base(std::_Head_base< _Idx, _Head, false>  &&) = default;
# 131
template< class _UHead> constexpr 
# 132
_Head_base(_UHead &&__h) : _M_head_impl(std::forward< _UHead> (__h)) 
# 133
{ } 
# 135
_Head_base(allocator_arg_t, __uses_alloc0) : _M_head_impl() 
# 136
{ } 
# 138
template< class _Alloc> 
# 139
_Head_base(allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _M_head_impl(allocator_arg, *(__a._M_a)) 
# 140
{ } 
# 142
template< class _Alloc> 
# 143
_Head_base(allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _M_head_impl(*(__a._M_a)) 
# 144
{ } 
# 146
template< class _UHead> 
# 147
_Head_base(__uses_alloc0, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead)) 
# 148
{ } 
# 150
template< class _Alloc, class _UHead> 
# 151
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(allocator_arg, *(__a._M_a), std::forward< _UHead> (__uhead)) 
# 153
{ } 
# 155
template< class _Alloc, class _UHead> 
# 156
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 157
{ } 
# 160
static constexpr _Head &_M_head(std::_Head_base< _Idx, _Head, false>  &__b) noexcept { return __b._M_head_impl; } 
# 163
static constexpr const _Head &_M_head(const std::_Head_base< _Idx, _Head, false>  &__b) noexcept { return __b._M_head_impl; } 
# 165
_Head _M_head_impl; 
# 166
}; 
# 176 "/usr/include/c++/7/tuple" 3
template< size_t _Idx, class ..._Elements> struct _Tuple_impl; 
# 184
template< size_t _Idx, class _Head, class ..._Tail> 
# 185
struct _Tuple_impl< _Idx, _Head, _Tail...>  : public std::_Tuple_impl< _Idx + (1), _Tail...> , private _Head_base< _Idx, _Head>  { 
# 189
template< std::size_t , class ...> friend struct _Tuple_impl; 
# 191
typedef std::_Tuple_impl< _Idx + (1), _Tail...>  _Inherited; 
# 192
typedef _Head_base< _Idx, _Head>  _Base; 
# 195
static constexpr _Head &_M_head(std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return _Base::_M_head(__t); } 
# 198
static constexpr const _Head &_M_head(const std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return _Base::_M_head(__t); } 
# 201
static constexpr _Inherited &_M_tail(std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return __t; } 
# 204
static constexpr const _Inherited &_M_tail(const std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return __t; } 
# 206
constexpr _Tuple_impl() : _Inherited(), _Base() 
# 207
{ } 
# 210
constexpr explicit _Tuple_impl(const _Head &__head, const _Tail &...__tail) : _Inherited(__tail...), _Base(__head) 
# 211
{ } 
# 213
template< class _UHead, class ..._UTail, class  = typename enable_if< sizeof...(_Tail) == sizeof...(_UTail)> ::type> constexpr explicit 
# 216
_Tuple_impl(_UHead &&__head, _UTail &&...__tail) : _Inherited(std::forward< _UTail> (__tail)...), _Base(std::forward< _UHead> (__head)) 
# 218
{ } 
# 220
constexpr _Tuple_impl(const std::_Tuple_impl< _Idx, _Head, _Tail...>  &) = default;
# 223
constexpr _Tuple_impl(std::_Tuple_impl< _Idx, _Head, _Tail...>  &&__in) noexcept(__and_< is_nothrow_move_constructible< _Head> , is_nothrow_move_constructible< _Inherited> > ::value) : _Inherited(std::move(_M_tail(__in))), _Base(std::forward< _Head> (_M_head(__in))) 
# 227
{ } 
# 229
template< class ..._UElements> constexpr 
# 230
_Tuple_impl(const std::_Tuple_impl< _Idx, _UElements...>  &__in) : _Inherited(_Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)), _Base(_Tuple_impl< _Idx, _UElements...> ::_M_head(__in)) 
# 232
{ } 
# 234
template< class _UHead, class ..._UTails> constexpr 
# 235
_Tuple_impl(std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) : _Inherited(std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 239
{ } 
# 241
template< class _Alloc> 
# 242
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a), _Base(__tag, __use_alloc< _Head> (__a)) 
# 244
{ } 
# 246
template< class _Alloc> 
# 247
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 248
__head, const _Tail &...__tail) : _Inherited(__tag, __a, __tail...), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), __head) 
# 250
{ } 
# 252
template< class _Alloc, class _UHead, class ..._UTail, class 
# 253
 = typename enable_if< sizeof...(_Tail) == sizeof...(_UTail)> ::type> 
# 255
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 256
__head, _UTail &&...__tail) : _Inherited(__tag, __a, std::forward< _UTail> (__tail)...), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (__head)) 
# 259
{ } 
# 261
template< class _Alloc> 
# 262
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 263
__in) : _Inherited(__tag, __a, _M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _M_head(__in)) 
# 265
{ } 
# 267
template< class _Alloc> 
# 268
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _Head, _Tail...>  &&
# 269
__in) : _Inherited(__tag, __a, std::move(_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), std::forward< _Head> (_M_head(__in))) 
# 272
{ } 
# 274
template< class _Alloc, class ..._UElements> 
# 275
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _UElements...>  &
# 276
__in) : _Inherited(__tag, __a, _Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _Tuple_impl< _Idx, _UElements...> ::_M_head(__in)) 
# 280
{ } 
# 282
template< class _Alloc, class _UHead, class ..._UTails> 
# 283
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&
# 284
__in) : _Inherited(__tag, __a, std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 289
{ } 
# 292
std::_Tuple_impl< _Idx, _Head, _Tail...>  &operator=(const std::_Tuple_impl< _Idx, _Head, _Tail...>  &__in) 
# 293
{ 
# 294
_M_head(*this) = _M_head(__in); 
# 295
_M_tail(*this) = _M_tail(__in); 
# 296
return *this; 
# 297
} 
# 300
std::_Tuple_impl< _Idx, _Head, _Tail...>  &operator=(std::_Tuple_impl< _Idx, _Head, _Tail...>  &&__in) noexcept(__and_< is_nothrow_move_assignable< _Head> , is_nothrow_move_assignable< _Inherited> > ::value) 
# 303
{ 
# 304
_M_head(*this) = std::forward< _Head> (_M_head(__in)); 
# 305
_M_tail(*this) = std::move(_M_tail(__in)); 
# 306
return *this; 
# 307
} 
# 309
template< class ..._UElements> std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 311
operator=(const std::_Tuple_impl< _Idx, _UElements...>  &__in) 
# 312
{ 
# 313
_M_head(*this) = _Tuple_impl< _Idx, _UElements...> ::_M_head(__in); 
# 314
_M_tail(*this) = _Tuple_impl< _Idx, _UElements...> ::_M_tail(__in); 
# 315
return *this; 
# 316
} 
# 318
template< class _UHead, class ..._UTails> std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 320
operator=(std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) 
# 321
{ 
# 322
_M_head(*this) = std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in)); 
# 324
_M_tail(*this) = std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in)); 
# 326
return *this; 
# 327
} 
# 331
protected: void _M_swap(std::_Tuple_impl< _Idx, _Head, _Tail...>  &__in) noexcept(__is_nothrow_swappable< _Head> ::value && noexcept(_M_tail(__in)._M_swap(_M_tail(__in)))) 
# 334
{ 
# 335
using std::swap;
# 336
swap(_M_head(*this), _M_head(__in)); 
# 337
_Inherited::_M_swap(_M_tail(__in)); 
# 338
} 
# 339
}; 
# 342
template< size_t _Idx, class _Head> 
# 343
struct _Tuple_impl< _Idx, _Head>  : private _Head_base< _Idx, _Head>  { 
# 346
template< std::size_t , class ...> friend struct _Tuple_impl; 
# 348
typedef _Head_base< _Idx, _Head>  _Base; 
# 351
static constexpr _Head &_M_head(std::_Tuple_impl< _Idx, _Head>  &__t) noexcept { return _Base::_M_head(__t); } 
# 354
static constexpr const _Head &_M_head(const std::_Tuple_impl< _Idx, _Head>  &__t) noexcept { return _Base::_M_head(__t); } 
# 356
constexpr _Tuple_impl() : _Base() 
# 357
{ } 
# 360
constexpr explicit _Tuple_impl(const _Head &__head) : _Base(__head) 
# 361
{ } 
# 363
template< class _UHead> constexpr explicit 
# 365
_Tuple_impl(_UHead &&__head) : _Base(std::forward< _UHead> (__head)) 
# 366
{ } 
# 368
constexpr _Tuple_impl(const std::_Tuple_impl< _Idx, _Head>  &) = default;
# 371
constexpr _Tuple_impl(std::_Tuple_impl< _Idx, _Head>  &&__in) noexcept(is_nothrow_move_constructible< _Head> ::value) : _Base(std::forward< _Head> (_M_head(__in))) 
# 373
{ } 
# 375
template< class _UHead> constexpr 
# 376
_Tuple_impl(const std::_Tuple_impl< _Idx, _UHead>  &__in) : _Base(_Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 377
{ } 
# 379
template< class _UHead> constexpr 
# 380
_Tuple_impl(std::_Tuple_impl< _Idx, _UHead>  &&__in) : _Base(std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 382
{ } 
# 384
template< class _Alloc> 
# 385
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a) : _Base(__tag, __use_alloc< _Head> (__a)) 
# 386
{ } 
# 388
template< class _Alloc> 
# 389
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 390
__head) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), __head) 
# 391
{ } 
# 393
template< class _Alloc, class _UHead> 
# 394
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 395
__head) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (__head)) 
# 397
{ } 
# 399
template< class _Alloc> 
# 400
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _Head>  &
# 401
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _M_head(__in)) 
# 402
{ } 
# 404
template< class _Alloc> 
# 405
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _Head>  &&
# 406
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), std::forward< _Head> (_M_head(__in))) 
# 408
{ } 
# 410
template< class _Alloc, class _UHead> 
# 411
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _UHead>  &
# 412
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 414
{ } 
# 416
template< class _Alloc, class _UHead> 
# 417
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _UHead>  &&
# 418
__in) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 421
{ } 
# 424
std::_Tuple_impl< _Idx, _Head>  &operator=(const std::_Tuple_impl< _Idx, _Head>  &__in) 
# 425
{ 
# 426
_M_head(*this) = _M_head(__in); 
# 427
return *this; 
# 428
} 
# 431
std::_Tuple_impl< _Idx, _Head>  &operator=(std::_Tuple_impl< _Idx, _Head>  &&__in) noexcept(is_nothrow_move_assignable< _Head> ::value) 
# 433
{ 
# 434
_M_head(*this) = std::forward< _Head> (_M_head(__in)); 
# 435
return *this; 
# 436
} 
# 438
template< class _UHead> std::_Tuple_impl< _Idx, _Head>  &
# 440
operator=(const std::_Tuple_impl< _Idx, _UHead>  &__in) 
# 441
{ 
# 442
_M_head(*this) = _Tuple_impl< _Idx, _UHead> ::_M_head(__in); 
# 443
return *this; 
# 444
} 
# 446
template< class _UHead> std::_Tuple_impl< _Idx, _Head>  &
# 448
operator=(std::_Tuple_impl< _Idx, _UHead>  &&__in) 
# 449
{ 
# 450
_M_head(*this) = std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in)); 
# 452
return *this; 
# 453
} 
# 457
protected: void _M_swap(std::_Tuple_impl< _Idx, _Head>  &__in) noexcept(__is_nothrow_swappable< _Head> ::value) 
# 459
{ 
# 460
using std::swap;
# 461
swap(_M_head(*this), _M_head(__in)); 
# 462
} 
# 463
}; 
# 467
template< bool , class ..._Elements> 
# 468
struct _TC { 
# 470
template< class ..._UElements> static constexpr bool 
# 471
_ConstructibleTuple() 
# 472
{ 
# 473
return __and_< is_constructible< _Elements, const _UElements &> ...> ::value; 
# 474
} 
# 476
template< class ..._UElements> static constexpr bool 
# 477
_ImplicitlyConvertibleTuple() 
# 478
{ 
# 479
return __and_< is_convertible< const _UElements &, _Elements> ...> ::value; 
# 480
} 
# 482
template< class ..._UElements> static constexpr bool 
# 483
_MoveConstructibleTuple() 
# 484
{ 
# 485
return __and_< is_constructible< _Elements, _UElements &&> ...> ::value; 
# 486
} 
# 488
template< class ..._UElements> static constexpr bool 
# 489
_ImplicitlyMoveConvertibleTuple() 
# 490
{ 
# 491
return __and_< is_convertible< _UElements &&, _Elements> ...> ::value; 
# 492
} 
# 494
template< class _SrcTuple> static constexpr bool 
# 495
_NonNestedTuple() 
# 496
{ 
# 497
return __and_< __not_< is_same< tuple< _Elements...> , typename remove_cv< typename remove_reference< _SrcTuple> ::type> ::type> > , __not_< is_convertible< _SrcTuple, _Elements...> > , __not_< is_constructible< _Elements..., _SrcTuple> > > ::value; 
# 504
} 
# 505
template< class ..._UElements> static constexpr bool 
# 506
_NotSameTuple() 
# 507
{ 
# 508
return __not_< is_same< tuple< _Elements...> , typename remove_const< typename remove_reference< _UElements...> ::type> ::type> > ::value; 
# 512
} 
# 513
}; 
# 515
template< class ..._Elements> 
# 516
struct _TC< false, _Elements...>  { 
# 518
template< class ..._UElements> static constexpr bool 
# 519
_ConstructibleTuple() 
# 520
{ 
# 521
return false; 
# 522
} 
# 524
template< class ..._UElements> static constexpr bool 
# 525
_ImplicitlyConvertibleTuple() 
# 526
{ 
# 527
return false; 
# 528
} 
# 530
template< class ..._UElements> static constexpr bool 
# 531
_MoveConstructibleTuple() 
# 532
{ 
# 533
return false; 
# 534
} 
# 536
template< class ..._UElements> static constexpr bool 
# 537
_ImplicitlyMoveConvertibleTuple() 
# 538
{ 
# 539
return false; 
# 540
} 
# 542
template< class ..._UElements> static constexpr bool 
# 543
_NonNestedTuple() 
# 544
{ 
# 545
return true; 
# 546
} 
# 547
template< class ..._UElements> static constexpr bool 
# 548
_NotSameTuple() 
# 549
{ 
# 550
return true; 
# 551
} 
# 552
}; 
# 555
template< class ..._Elements> 
# 556
class tuple : public _Tuple_impl< 0UL, _Elements...>  { 
# 558
typedef _Tuple_impl< 0UL, _Elements...>  _Inherited; 
# 562
template< class _Dummy> 
# 563
struct _TC2 { 
# 565
static constexpr bool _DefaultConstructibleTuple() 
# 566
{ 
# 567
return __and_< is_default_constructible< _Elements> ...> ::value; 
# 568
} 
# 569
static constexpr bool _ImplicitlyDefaultConstructibleTuple() 
# 570
{ 
# 571
return __and_< __is_implicitly_default_constructible< _Elements> ...> ::value; 
# 573
} 
# 574
}; 
# 581
public: 
# 577
template< class _Dummy = void, typename enable_if< _TC2< _Dummy> ::_ImplicitlyDefaultConstructibleTuple(), bool> ::type 
# 580
 = true> constexpr 
# 581
tuple() : _Inherited() 
# 582
{ } 
# 584
template< class _Dummy = void, typename enable_if< _TC2< _Dummy> ::_DefaultConstructibleTuple() && (!_TC2< _Dummy> ::_ImplicitlyDefaultConstructibleTuple()), bool> ::type 
# 590
 = false> constexpr explicit 
# 591
tuple() : _Inherited() 
# 592
{ } 
# 596
template< class _Dummy> using _TCC = _TC< is_same< _Dummy, void> ::value, _Elements...> ; 
# 600
template< class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ConstructibleTuple< _Elements...> () && _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ImplicitlyConvertibleTuple< _Elements...> () && (sizeof...(_Elements) >= (1)), bool> ::type 
# 607
 = true> constexpr 
# 608
tuple(const _Elements &...__elements) : _Inherited(__elements...) 
# 609
{ } 
# 611
template< class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ConstructibleTuple< _Elements...> () && (!_TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ImplicitlyConvertibleTuple< _Elements...> ()) && (sizeof...(_Elements) >= (1)), bool> ::type 
# 618
 = false> constexpr explicit 
# 619
tuple(const _Elements &...__elements) : _Inherited(__elements...) 
# 620
{ } 
# 624
template< class ..._UElements> using _TMC = _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ; 
# 632
template< class ..._UElements> using _TMCT = _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple, tuple< _UElements...> > ::value), _Elements...> ; 
# 638
template< class ..._UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> () && (sizeof...(_Elements) >= (1)), bool> ::type 
# 645
 = true> constexpr 
# 646
tuple(_UElements &&...__elements) : _Inherited(std::forward< _UElements> (__elements)...) 
# 647
{ } 
# 649
template< class ..._UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> ()) && (sizeof...(_Elements) >= (1)), bool> ::type 
# 656
 = false> constexpr explicit 
# 657
tuple(_UElements &&...__elements) : _Inherited(std::forward< _UElements> (__elements)...) 
# 658
{ } 
# 660
constexpr tuple(const tuple &) = default;
# 662
constexpr tuple(tuple &&) = default;
# 666
template< class _Dummy> using _TNTC = _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ; 
# 670
template< class ..._UElements, class _Dummy = void, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyConvertibleTuple< _UElements...> () && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< const tuple< _UElements...>  &> (), bool> ::type 
# 677
 = true> constexpr 
# 678
tuple(const tuple< _UElements...>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 680
{ } 
# 682
template< class ..._UElements, class _Dummy = void, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyConvertibleTuple< _UElements...> ()) && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< const tuple< _UElements...>  &> (), bool> ::type 
# 689
 = false> constexpr explicit 
# 690
tuple(const tuple< _UElements...>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 692
{ } 
# 694
template< class ..._UElements, class _Dummy = void, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> () && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 701
 = true> constexpr 
# 702
tuple(tuple< _UElements...>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 703
{ } 
# 705
template< class ..._UElements, class _Dummy = void, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> ()) && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 712
 = false> constexpr explicit 
# 713
tuple(tuple< _UElements...>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 714
{ } 
# 718
template< class _Alloc> 
# 719
tuple(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 720
{ } 
# 722
template< class _Alloc, class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ConstructibleTuple< _Elements...> () && _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ImplicitlyConvertibleTuple< _Elements...> (), bool> ::type 
# 728
 = true> 
# 729
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _Elements &...
# 730
__elements) : _Inherited(__tag, __a, __elements...) 
# 731
{ } 
# 733
template< class _Alloc, class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ConstructibleTuple< _Elements...> () && (!_TC< is_same< _Dummy, void> ::value, _Elements...> ::template _ImplicitlyConvertibleTuple< _Elements...> ()), bool> ::type 
# 739
 = false> explicit 
# 740
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _Elements &...
# 741
__elements) : _Inherited(__tag, __a, __elements...) 
# 742
{ } 
# 744
template< class _Alloc, class ..._UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> (), bool> ::type 
# 749
 = true> 
# 750
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _UElements &&...
# 751
__elements) : _Inherited(__tag, __a, std::forward< _UElements> (__elements)...) 
# 753
{ } 
# 755
template< class _Alloc, class ..._UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && _TC< sizeof...(_UElements) == (1), _Elements...> ::template _NotSameTuple< _UElements...> (), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> ()), bool> ::type 
# 760
 = false> explicit 
# 761
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _UElements &&...
# 762
__elements) : _Inherited(__tag, __a, std::forward< _UElements> (__elements)...) 
# 764
{ } 
# 766
template< class _Alloc> 
# 767
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 768
{ } 
# 770
template< class _Alloc> 
# 771
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 772
{ } 
# 774
template< class _Alloc, class _Dummy = void, class ...
# 775
_UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyConvertibleTuple< _UElements...> () && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 782
 = true> 
# 783
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple< _UElements...>  &
# 784
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 787
{ } 
# 789
template< class _Alloc, class _Dummy = void, class ...
# 790
_UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyConvertibleTuple< _UElements...> ()) && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 797
 = false> explicit 
# 798
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple< _UElements...>  &
# 799
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 802
{ } 
# 804
template< class _Alloc, class _Dummy = void, class ...
# 805
_UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> () && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 812
 = true> 
# 813
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple< _UElements...>  &&
# 814
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 817
{ } 
# 819
template< class _Alloc, class _Dummy = void, class ...
# 820
_UElements, typename enable_if< _TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _MoveConstructibleTuple< _UElements...> () && (!_TC< (sizeof...(_Elements) == sizeof...(_UElements)) && (!is_same< tuple< _Elements...> , tuple< _UElements...> > ::value), _Elements...> ::template _ImplicitlyMoveConvertibleTuple< _UElements...> ()) && _TC< is_same< _Dummy, void> ::value && (sizeof...(_Elements) == (1)), _Elements...> ::template _NonNestedTuple< tuple< _UElements...>  &&> (), bool> ::type 
# 827
 = false> explicit 
# 828
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple< _UElements...>  &&
# 829
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 832
{ } 
# 835
tuple &operator=(const tuple &__in) 
# 836
{ 
# 837
(static_cast< _Inherited &>(*this)) = __in; 
# 838
return *this; 
# 839
} 
# 842
tuple &operator=(tuple &&__in) noexcept(is_nothrow_move_assignable< _Inherited> ::value) 
# 844
{ 
# 845
(static_cast< _Inherited &>(*this)) = std::move(__in); 
# 846
return *this; 
# 847
} 
# 849
template< class ..._UElements> typename enable_if< sizeof...(_UElements) == sizeof...(_Elements), tuple &> ::type 
# 853
operator=(const tuple< _UElements...>  &__in) 
# 854
{ 
# 855
(static_cast< _Inherited &>(*this)) = __in; 
# 856
return *this; 
# 857
} 
# 859
template< class ..._UElements> typename enable_if< sizeof...(_UElements) == sizeof...(_Elements), tuple &> ::type 
# 863
operator=(tuple< _UElements...>  &&__in) 
# 864
{ 
# 865
(static_cast< _Inherited &>(*this)) = std::move(__in); 
# 866
return *this; 
# 867
} 
# 870
void swap(tuple &__in) noexcept(noexcept(__in._M_swap(__in))) 
# 872
{ _Inherited::_M_swap(__in); } 
# 873
}; 
# 890 "/usr/include/c++/7/tuple" 3
template<> class tuple< >  { 
# 893
public: void swap(std::tuple< >  &) noexcept { } 
# 896
tuple() = default;
# 898
template< class _Alloc> 
# 899
tuple(allocator_arg_t, const _Alloc &) { } 
# 900
template< class _Alloc> 
# 901
tuple(allocator_arg_t, const _Alloc &, const std::tuple< >  &) { } 
# 902
}; 
# 906
template< class _T1, class _T2> 
# 907
class tuple< _T1, _T2>  : public _Tuple_impl< 0UL, _T1, _T2>  { 
# 909
typedef _Tuple_impl< 0UL, _T1, _T2>  _Inherited; 
# 919
public: 
# 912
template< class _U1 = _T1, class 
# 913
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 917
 = true> constexpr 
# 919
tuple() : _Inherited() 
# 920
{ } 
# 922
template< class _U1 = _T1, class 
# 923
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 931
 = false> constexpr explicit 
# 933
tuple() : _Inherited() 
# 934
{ } 
# 938
template< class _Dummy> using _TCC = _TC< is_same< _Dummy, void> ::value, _T1, _T2> ; 
# 941
template< class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ConstructibleTuple< _T1, _T2> () && _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _T1, _T2> (), bool> ::type 
# 946
 = true> constexpr 
# 947
tuple(const _T1 &__a1, const _T2 &__a2) : _Inherited(__a1, __a2) 
# 948
{ } 
# 950
template< class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ConstructibleTuple< _T1, _T2> () && (!_TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _T1, _T2> ()), bool> ::type 
# 955
 = false> constexpr explicit 
# 956
tuple(const _T1 &__a1, const _T2 &__a2) : _Inherited(__a1, __a2) 
# 957
{ } 
# 961
using _TMC = _TC< true, _T1, _T2> ; 
# 963
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> () && (!is_same< typename decay< _U1> ::type, std::allocator_arg_t> ::value), bool> ::type 
# 970
 = true> constexpr 
# 971
tuple(_U1 &&__a1, _U2 &&__a2) : _Inherited(std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 972
{ } 
# 974
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()) && (!is_same< typename decay< _U1> ::type, std::allocator_arg_t> ::value), bool> ::type 
# 981
 = false> constexpr explicit 
# 982
tuple(_U1 &&__a1, _U2 &&__a2) : _Inherited(std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 983
{ } 
# 985
constexpr tuple(const std::tuple< _T1, _T2>  &) = default;
# 987
constexpr tuple(std::tuple< _T1, _T2>  &&) = default;
# 989
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> (), bool> ::type 
# 994
 = true> constexpr 
# 995
tuple(const std::tuple< _U1, _U2>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 996
{ } 
# 998
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1003
 = false> constexpr explicit 
# 1004
tuple(const std::tuple< _U1, _U2>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1005
{ } 
# 1007
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1012
 = true> constexpr 
# 1013
tuple(std::tuple< _U1, _U2>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1014
{ } 
# 1016
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1021
 = false> constexpr explicit 
# 1022
tuple(std::tuple< _U1, _U2>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1023
{ } 
# 1025
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1030
 = true> constexpr 
# 1031
tuple(const pair< _U1, _U2>  &__in) : _Inherited((__in.first), (__in.second)) 
# 1032
{ } 
# 1034
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1039
 = false> constexpr explicit 
# 1040
tuple(const pair< _U1, _U2>  &__in) : _Inherited((__in.first), (__in.second)) 
# 1041
{ } 
# 1043
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1048
 = true> constexpr 
# 1049
tuple(pair< _U1, _U2>  &&__in) : _Inherited(std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1051
{ } 
# 1053
template< class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1058
 = false> constexpr explicit 
# 1059
tuple(pair< _U1, _U2>  &&__in) : _Inherited(std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1061
{ } 
# 1065
template< class _Alloc> 
# 1066
tuple(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 1067
{ } 
# 1069
template< class _Alloc, class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ConstructibleTuple< _T1, _T2> () && _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _T1, _T2> (), bool> ::type 
# 1075
 = true> 
# 1077
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _T1 &
# 1078
__a1, const _T2 &__a2) : _Inherited(__tag, __a, __a1, __a2) 
# 1079
{ } 
# 1081
template< class _Alloc, class _Dummy = void, typename enable_if< _TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ConstructibleTuple< _T1, _T2> () && (!_TC< is_same< _Dummy, void> ::value, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _T1, _T2> ()), bool> ::type 
# 1087
 = false> explicit 
# 1089
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _T1 &
# 1090
__a1, const _T2 &__a2) : _Inherited(__tag, __a, __a1, __a2) 
# 1091
{ } 
# 1093
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1098
 = true> 
# 1099
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _U1 &&__a1, _U2 &&__a2) : _Inherited(__tag, __a, std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1101
{ } 
# 1103
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1108
 = false> explicit 
# 1109
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _U1 &&
# 1110
__a1, _U2 &&__a2) : _Inherited(__tag, __a, std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1112
{ } 
# 1114
template< class _Alloc> 
# 1115
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const std::tuple< _T1, _T2>  &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 1116
{ } 
# 1118
template< class _Alloc> 
# 1119
tuple(std::allocator_arg_t __tag, const _Alloc &__a, std::tuple< _T1, _T2>  &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 1120
{ } 
# 1122
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1127
 = true> 
# 1128
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const std::tuple< _U1, _U2>  &
# 1129
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1132
{ } 
# 1134
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1139
 = false> explicit 
# 1140
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const std::tuple< _U1, _U2>  &
# 1141
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1144
{ } 
# 1146
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1151
 = true> 
# 1152
tuple(std::allocator_arg_t __tag, const _Alloc &__a, std::tuple< _U1, _U2>  &&__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1154
{ } 
# 1156
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1161
 = false> explicit 
# 1162
tuple(std::allocator_arg_t __tag, const _Alloc &__a, std::tuple< _U1, _U2>  &&
# 1163
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1165
{ } 
# 1167
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1172
 = true> 
# 1173
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const pair< _U1, _U2>  &
# 1174
__in) : _Inherited(__tag, __a, (__in.first), (__in.second)) 
# 1175
{ } 
# 1177
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _ConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1182
 = false> explicit 
# 1183
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const pair< _U1, _U2>  &
# 1184
__in) : _Inherited(__tag, __a, (__in.first), (__in.second)) 
# 1185
{ } 
# 1187
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && _TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> (), bool> ::type 
# 1192
 = true> 
# 1193
tuple(std::allocator_arg_t __tag, const _Alloc &__a, pair< _U1, _U2>  &&__in) : _Inherited(__tag, __a, std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1195
{ } 
# 1197
template< class _Alloc, class _U1, class _U2, typename enable_if< _TC< true, _T1, _T2> ::template _MoveConstructibleTuple< _U1, _U2> () && (!_TC< true, _T1, _T2> ::template _ImplicitlyMoveConvertibleTuple< _U1, _U2> ()), bool> ::type 
# 1202
 = false> explicit 
# 1203
tuple(std::allocator_arg_t __tag, const _Alloc &__a, pair< _U1, _U2>  &&
# 1204
__in) : _Inherited(__tag, __a, std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1206
{ } 
# 1209
std::tuple< _T1, _T2>  &operator=(const std::tuple< _T1, _T2>  &__in) 
# 1210
{ 
# 1211
(static_cast< _Inherited &>(*this)) = __in; 
# 1212
return *this; 
# 1213
} 
# 1216
std::tuple< _T1, _T2>  &operator=(std::tuple< _T1, _T2>  &&__in) noexcept(is_nothrow_move_assignable< _Inherited> ::value) 
# 1218
{ 
# 1219
(static_cast< _Inherited &>(*this)) = std::move(__in); 
# 1220
return *this; 
# 1221
} 
# 1223
template< class _U1, class _U2> std::tuple< _T1, _T2>  &
# 1225
operator=(const std::tuple< _U1, _U2>  &__in) 
# 1226
{ 
# 1227
(static_cast< _Inherited &>(*this)) = __in; 
# 1228
return *this; 
# 1229
} 
# 1231
template< class _U1, class _U2> std::tuple< _T1, _T2>  &
# 1233
operator=(std::tuple< _U1, _U2>  &&__in) 
# 1234
{ 
# 1235
(static_cast< _Inherited &>(*this)) = std::move(__in); 
# 1236
return *this; 
# 1237
} 
# 1239
template< class _U1, class _U2> std::tuple< _T1, _T2>  &
# 1241
operator=(const pair< _U1, _U2>  &__in) 
# 1242
{ 
# 1243
this->_M_head(*this) = (__in.first); 
# 1244
this->_M_tail(*this)._M_head(*this) = (__in.second); 
# 1245
return *this; 
# 1246
} 
# 1248
template< class _U1, class _U2> std::tuple< _T1, _T2>  &
# 1250
operator=(pair< _U1, _U2>  &&__in) 
# 1251
{ 
# 1252
this->_M_head(*this) = std::forward< _U1> ((__in.first)); 
# 1253
this->_M_tail(*this)._M_head(*this) = std::forward< _U2> ((__in.second)); 
# 1254
return *this; 
# 1255
} 
# 1258
void swap(std::tuple< _T1, _T2>  &__in) noexcept(noexcept(__in._M_swap(__in))) 
# 1260
{ _Inherited::_M_swap(__in); } 
# 1261
}; 
# 1265
template< class ..._Elements> 
# 1266
struct tuple_size< tuple< _Elements...> >  : public integral_constant< unsigned long, sizeof...(_Elements)>  { 
# 1267
}; 
# 1278 "/usr/include/c++/7/tuple" 3
template< size_t __i, class _Head, class ..._Tail> 
# 1279
struct tuple_element< __i, tuple< _Head, _Tail...> >  : public std::tuple_element< __i - (1), tuple< _Tail...> >  { 
# 1280
}; 
# 1285
template< class _Head, class ..._Tail> 
# 1286
struct tuple_element< 0, tuple< _Head, _Tail...> >  { 
# 1288
typedef _Head type; 
# 1289
}; 
# 1294
template< size_t __i> 
# 1295
struct tuple_element< __i, tuple< > >  { 
# 1297
static_assert((__i < integral_constant< size_t, 0UL> ::value), "tuple index is in range");
# 1299
}; 
# 1301
template< size_t __i, class _Head, class ..._Tail> constexpr _Head &
# 1303
__get_helper(_Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1304
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1306
template< size_t __i, class _Head, class ..._Tail> constexpr const _Head &
# 1308
__get_helper(const _Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1309
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1312
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &
# 1314
get(tuple< _Elements...>  &__t) noexcept 
# 1315
{ return std::__get_helper< __i> (__t); } 
# 1318
template< size_t __i, class ..._Elements> constexpr const __tuple_element_t< __i, tuple< _Elements...> >  &
# 1320
get(const tuple< _Elements...>  &__t) noexcept 
# 1321
{ return std::__get_helper< __i> (__t); } 
# 1324
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &&
# 1326
get(tuple< _Elements...>  &&__t) noexcept 
# 1327
{ 
# 1328
typedef __tuple_element_t< __i, tuple< _Elements...> >  __element_type; 
# 1329
return std::forward< __tuple_element_t< __i, tuple< _Elements...> >  &&> (std::get< __i> (__t)); 
# 1330
} 
# 1336
template< class _Head, size_t __i, class ..._Tail> constexpr _Head &
# 1338
__get_helper2(_Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1339
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1341
template< class _Head, size_t __i, class ..._Tail> constexpr const _Head &
# 1343
__get_helper2(const _Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1344
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1347
template< class _Tp, class ..._Types> constexpr _Tp &
# 1349
get(tuple< _Types...>  &__t) noexcept 
# 1350
{ return std::__get_helper2< _Tp> (__t); } 
# 1353
template< class _Tp, class ..._Types> constexpr _Tp &&
# 1355
get(tuple< _Types...>  &&__t) noexcept 
# 1356
{ return std::forward< _Tp &&> (std::__get_helper2< _Tp> (__t)); } 
# 1359
template< class _Tp, class ..._Types> constexpr const _Tp &
# 1361
get(const tuple< _Types...>  &__t) noexcept 
# 1362
{ return std::__get_helper2< _Tp> (__t); } 
# 1366
template< class _Tp, class _Up, size_t __i, size_t __size> 
# 1367
struct __tuple_compare { 
# 1370
static constexpr bool __eq(const _Tp &__t, const _Up &__u) 
# 1371
{ 
# 1372
return ((bool)(std::get< __i> (__t) == std::get< __i> (__u))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__eq(__t, __u); 
# 1374
} 
# 1377
static constexpr bool __less(const _Tp &__t, const _Up &__u) 
# 1378
{ 
# 1379
return ((bool)(std::get< __i> (__t) < std::get< __i> (__u))) || ((!((bool)(std::get< __i> (__u) < std::get< __i> (__t)))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__less(__t, __u)); 
# 1382
} 
# 1383
}; 
# 1385
template< class _Tp, class _Up, size_t __size> 
# 1386
struct __tuple_compare< _Tp, _Up, __size, __size>  { 
# 1389
static constexpr bool __eq(const _Tp &, const _Up &) { return true; } 
# 1392
static constexpr bool __less(const _Tp &, const _Up &) { return false; } 
# 1393
}; 
# 1395
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1397
operator==(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1398
__u) 
# 1399
{ 
# 1400
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 1402
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0, sizeof...(_TElements)> ; 
# 1405
return __compare::__eq(__t, __u); 
# 1406
} 
# 1408
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1410
operator<(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1411
__u) 
# 1412
{ 
# 1413
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 1415
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0, sizeof...(_TElements)> ; 
# 1418
return __compare::__less(__t, __u); 
# 1419
} 
# 1421
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1423
operator!=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1424
__u) 
# 1425
{ return !(__t == __u); } 
# 1427
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1429
operator>(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1430
__u) 
# 1431
{ return __u < __t; } 
# 1433
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1435
operator<=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1436
__u) 
# 1437
{ return !(__u < __t); } 
# 1439
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1441
operator>=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1442
__u) 
# 1443
{ return !(__t < __u); } 
# 1446
template< class ..._Elements> constexpr tuple< typename __decay_and_strip< _Elements> ::__type...>  
# 1448
make_tuple(_Elements &&...__args) 
# 1449
{ 
# 1451
typedef tuple< typename __decay_and_strip< _Elements> ::__type...>  __result_type; 
# 1452
return __result_type(std::forward< _Elements> (__args)...); 
# 1453
} 
# 1457
template< class ..._Elements> constexpr tuple< _Elements &&...>  
# 1459
forward_as_tuple(_Elements &&...__args) noexcept 
# 1460
{ return tuple< _Elements &&...> (std::forward< _Elements> (__args)...); } 
# 1462
template< size_t , class , class , size_t > struct __make_tuple_impl; 
# 1465
template< size_t _Idx, class _Tuple, class ..._Tp, size_t _Nm> 
# 1466
struct __make_tuple_impl< _Idx, tuple< _Tp...> , _Tuple, _Nm>  : public std::__make_tuple_impl< _Idx + (1), tuple< _Tp..., __tuple_element_t< _Idx, _Tuple> > , _Tuple, _Nm>  { 
# 1470
}; 
# 1472
template< size_t _Nm, class _Tuple, class ..._Tp> 
# 1473
struct __make_tuple_impl< _Nm, tuple< _Tp...> , _Tuple, _Nm>  { 
# 1475
typedef tuple< _Tp...>  __type; 
# 1476
}; 
# 1478
template< class _Tuple> 
# 1479
struct __do_make_tuple : public __make_tuple_impl< 0UL, tuple< > , _Tuple, tuple_size< _Tuple> ::value>  { 
# 1481
}; 
# 1484
template< class _Tuple> 
# 1485
struct __make_tuple : public __do_make_tuple< typename remove_cv< typename remove_reference< _Tuple> ::type> ::type>  { 
# 1488
}; 
# 1491
template< class ...> struct __combine_tuples; 
# 1495
template<> struct __combine_tuples< >  { 
# 1497
typedef tuple< >  __type; 
# 1498
}; 
# 1500
template< class ..._Ts> 
# 1501
struct __combine_tuples< tuple< _Ts...> >  { 
# 1503
typedef tuple< _Ts...>  __type; 
# 1504
}; 
# 1506
template< class ..._T1s, class ..._T2s, class ..._Rem> 
# 1507
struct __combine_tuples< tuple< _T1s...> , tuple< _T2s...> , _Rem...>  { 
# 1510
typedef typename std::__combine_tuples< tuple< _T1s..., _T2s...> , _Rem...> ::__type __type; 
# 1511
}; 
# 1514
template< class ..._Tpls> 
# 1515
struct __tuple_cat_result { 
# 1518
typedef typename __combine_tuples< typename __make_tuple< _Tpls> ::__type...> ::__type __type; 
# 1519
}; 
# 1523
template< class ...> struct __make_1st_indices; 
# 1527
template<> struct __make_1st_indices< >  { 
# 1529
typedef _Index_tuple< >  __type; 
# 1530
}; 
# 1532
template< class _Tp, class ..._Tpls> 
# 1533
struct __make_1st_indices< _Tp, _Tpls...>  { 
# 1536
typedef typename _Build_index_tuple< tuple_size< typename remove_reference< _Tp> ::type> ::value> ::__type __type; 
# 1537
}; 
# 1542
template< class _Ret, class _Indices, class ..._Tpls> struct __tuple_concater; 
# 1545
template< class _Ret, size_t ..._Is, class _Tp, class ..._Tpls> 
# 1546
struct __tuple_concater< _Ret, _Index_tuple< _Is...> , _Tp, _Tpls...>  { 
# 1548
template< class ..._Us> static constexpr _Ret 
# 1550
_S_do(_Tp &&__tp, _Tpls &&...__tps, _Us &&...__us) 
# 1551
{ 
# 1552
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1553
typedef std::__tuple_concater< _Ret, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __next; 
# 1554
return __next::_S_do(std::forward< _Tpls> (__tps)..., std::forward< _Us> (__us)..., std::get< _Is> (std::forward< _Tp> (__tp))...); 
# 1557
} 
# 1558
}; 
# 1560
template< class _Ret> 
# 1561
struct __tuple_concater< _Ret, _Index_tuple< > >  { 
# 1563
template< class ..._Us> static constexpr _Ret 
# 1565
_S_do(_Us &&...__us) 
# 1566
{ 
# 1567
return _Ret(std::forward< _Us> (__us)...); 
# 1568
} 
# 1569
}; 
# 1572
template< class ..._Tpls, class  = typename enable_if< __and_< __is_tuple_like< _Tpls> ...> ::value> ::type> constexpr auto 
# 1575
tuple_cat(_Tpls &&...__tpls)->typename __tuple_cat_result< _Tpls...> ::__type 
# 1577
{ 
# 1578
typedef typename __tuple_cat_result< _Tpls...> ::__type __ret; 
# 1579
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1580
typedef __tuple_concater< typename __tuple_cat_result< _Tpls...> ::__type, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __concater; 
# 1581
return __concater::_S_do(std::forward< _Tpls> (__tpls)...); 
# 1582
} 
# 1587
template< class ..._Elements> constexpr tuple< _Elements &...>  
# 1589
tie(_Elements &...__args) noexcept 
# 1590
{ return tuple< _Elements &...> (__args...); } 
# 1593
template< class ..._Elements> inline void 
# 1602
swap(tuple< _Elements...>  &__x, tuple< _Elements...>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 1604
{ __x.swap(__y); } 
# 1616 "/usr/include/c++/7/tuple" 3
struct _Swallow_assign { 
# 1618
template< class _Tp> constexpr const _Swallow_assign &
# 1620
operator=(const _Tp &) const 
# 1621
{ return *this; } 
# 1622
}; 
# 1626
constexpr _Swallow_assign ignore{}; 
# 1629
template< class ..._Types, class _Alloc> 
# 1630
struct uses_allocator< tuple< _Types...> , _Alloc>  : public true_type { }; 
# 1633
template< class _T1, class _T2> 
# 1634
template< class ..._Args1, class ..._Args2> inline 
# 1637
pair< _T1, _T2> ::pair(std::piecewise_construct_t, tuple< _Args1...>  
# 1638
__first, tuple< _Args2...>  __second) : pair(__first, __second, typename _Build_index_tuple< sizeof...(_Args1)> ::__type(), typename _Build_index_tuple< sizeof...(_Args2)> ::__type()) 
# 1642
{ } 
# 1644
template< class _T1, class _T2> 
# 1645
template< class ..._Args1, size_t ..._Indexes1, class ...
# 1646
_Args2, size_t ..._Indexes2> inline 
# 1649
pair< _T1, _T2> ::pair(tuple< _Args1...>  &__tuple1, tuple< _Args2...>  &__tuple2, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ) : first(std::forward< _Args1> (std::get< _Indexes1> (__tuple1))...), second(std::forward< _Args2> (std::get< _Indexes2> (__tuple2))...) 
# 1653
{ } 
# 1696 "/usr/include/c++/7/tuple" 3
}
# 43 "/usr/include/c++/7/bits/refwrap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _Functor, class  = __void_t< > > 
# 49
struct _Maybe_get_result_type { 
# 50
}; 
# 52
template< class _Functor> 
# 53
struct _Maybe_get_result_type< _Functor, __void_t< typename _Functor::result_type> >  { 
# 55
typedef typename _Functor::result_type result_type; }; 
# 61
template< class _Functor> 
# 62
struct _Weak_result_type_impl : public _Maybe_get_result_type< _Functor>  { 
# 64
}; 
# 67
template< class _Res, class ..._ArgTypes> 
# 68
struct _Weak_result_type_impl< _Res (_ArgTypes ...)>  { 
# 69
typedef _Res result_type; }; 
# 71
template< class _Res, class ..._ArgTypes> 
# 72
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...)>  { 
# 73
typedef _Res result_type; }; 
# 75
template< class _Res, class ..._ArgTypes> 
# 76
struct _Weak_result_type_impl< _Res (_ArgTypes ...) const>  { 
# 77
typedef _Res result_type; }; 
# 79
template< class _Res, class ..._ArgTypes> 
# 80
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) const>  { 
# 81
typedef _Res result_type; }; 
# 83
template< class _Res, class ..._ArgTypes> 
# 84
struct _Weak_result_type_impl< _Res (_ArgTypes ...) volatile>  { 
# 85
typedef _Res result_type; }; 
# 87
template< class _Res, class ..._ArgTypes> 
# 88
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) volatile>  { 
# 89
typedef _Res result_type; }; 
# 91
template< class _Res, class ..._ArgTypes> 
# 92
struct _Weak_result_type_impl< _Res (_ArgTypes ...) const volatile>  { 
# 93
typedef _Res result_type; }; 
# 95
template< class _Res, class ..._ArgTypes> 
# 96
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) const volatile>  { 
# 97
typedef _Res result_type; }; 
# 100
template< class _Res, class ..._ArgTypes> 
# 101
struct _Weak_result_type_impl< _Res (&)(_ArgTypes ...)>  { 
# 102
typedef _Res result_type; }; 
# 104
template< class _Res, class ..._ArgTypes> 
# 105
struct _Weak_result_type_impl< _Res (&)(_ArgTypes ..., ...)>  { 
# 106
typedef _Res result_type; }; 
# 109
template< class _Res, class ..._ArgTypes> 
# 110
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ...)>  { 
# 111
typedef _Res result_type; }; 
# 113
template< class _Res, class ..._ArgTypes> 
# 114
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ..., ...)>  { 
# 116
typedef _Res result_type; }; 
# 119
template< class _Res, class _Class, class ..._ArgTypes> 
# 121
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...)>  { 
# 123
typedef _Res result_type; }; 
# 125
template< class _Res, class _Class, class ..._ArgTypes> 
# 127
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...)>  { 
# 129
typedef _Res result_type; }; 
# 132
template< class _Res, class _Class, class ..._ArgTypes> 
# 134
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) const>  { 
# 136
typedef _Res result_type; }; 
# 138
template< class _Res, class _Class, class ..._ArgTypes> 
# 140
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) const>  { 
# 142
typedef _Res result_type; }; 
# 145
template< class _Res, class _Class, class ..._ArgTypes> 
# 147
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) volatile>  { 
# 149
typedef _Res result_type; }; 
# 151
template< class _Res, class _Class, class ..._ArgTypes> 
# 153
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  { 
# 155
typedef _Res result_type; }; 
# 158
template< class _Res, class _Class, class ..._ArgTypes> 
# 160
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) const volatile>  { 
# 162
typedef _Res result_type; }; 
# 164
template< class _Res, class _Class, class ..._ArgTypes> 
# 166
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  { 
# 168
typedef _Res result_type; }; 
# 174
template< class _Functor> 
# 175
struct _Weak_result_type : public _Weak_result_type_impl< typename remove_cv< _Functor> ::type>  { 
# 177
}; 
# 180
template< class _Tp, class  = __void_t< > > 
# 181
struct _Refwrap_base_arg1 { 
# 182
}; 
# 185
template< class _Tp> 
# 186
struct _Refwrap_base_arg1< _Tp, __void_t< typename _Tp::argument_type> >  { 
# 189
typedef typename _Tp::argument_type argument_type; 
# 190
}; 
# 193
template< class _Tp, class  = __void_t< > > 
# 194
struct _Refwrap_base_arg2 { 
# 195
}; 
# 198
template< class _Tp> 
# 199
struct _Refwrap_base_arg2< _Tp, __void_t< typename _Tp::first_argument_type, typename _Tp::second_argument_type> >  { 
# 203
typedef typename _Tp::first_argument_type first_argument_type; 
# 204
typedef typename _Tp::second_argument_type second_argument_type; 
# 205
}; 
# 213
template< class _Tp> 
# 214
struct _Reference_wrapper_base : public _Weak_result_type< _Tp> , public _Refwrap_base_arg1< _Tp> , public _Refwrap_base_arg2< _Tp>  { 
# 216
}; 
# 219
template< class _Res, class _T1> 
# 220
struct _Reference_wrapper_base< _Res (_T1)>  : public unary_function< _T1, _Res>  { 
# 222
}; 
# 224
template< class _Res, class _T1> 
# 225
struct _Reference_wrapper_base< _Res (_T1) const>  : public unary_function< _T1, _Res>  { 
# 227
}; 
# 229
template< class _Res, class _T1> 
# 230
struct _Reference_wrapper_base< _Res (_T1) volatile>  : public unary_function< _T1, _Res>  { 
# 232
}; 
# 234
template< class _Res, class _T1> 
# 235
struct _Reference_wrapper_base< _Res (_T1) const volatile>  : public unary_function< _T1, _Res>  { 
# 237
}; 
# 240
template< class _Res, class _T1, class _T2> 
# 241
struct _Reference_wrapper_base< _Res (_T1, _T2)>  : public binary_function< _T1, _T2, _Res>  { 
# 243
}; 
# 245
template< class _Res, class _T1, class _T2> 
# 246
struct _Reference_wrapper_base< _Res (_T1, _T2) const>  : public binary_function< _T1, _T2, _Res>  { 
# 248
}; 
# 250
template< class _Res, class _T1, class _T2> 
# 251
struct _Reference_wrapper_base< _Res (_T1, _T2) volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 253
}; 
# 255
template< class _Res, class _T1, class _T2> 
# 256
struct _Reference_wrapper_base< _Res (_T1, _T2) const volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 258
}; 
# 261
template< class _Res, class _T1> 
# 262
struct _Reference_wrapper_base< _Res (*)(_T1)>  : public unary_function< _T1, _Res>  { 
# 264
}; 
# 267
template< class _Res, class _T1, class _T2> 
# 268
struct _Reference_wrapper_base< _Res (*)(_T1, _T2)>  : public binary_function< _T1, _T2, _Res>  { 
# 270
}; 
# 273
template< class _Res, class _T1> 
# 274
struct _Reference_wrapper_base< _Res (_T1::*)(void)>  : public unary_function< _T1 *, _Res>  { 
# 276
}; 
# 279
template< class _Res, class _T1, class _T2> 
# 280
struct _Reference_wrapper_base< _Res (_T1::*)(_T2)>  : public binary_function< _T1 *, _T2, _Res>  { 
# 282
}; 
# 285
template< class _Res, class _T1> 
# 286
struct _Reference_wrapper_base< _Res (_T1::*)(void) const>  : public unary_function< const _T1 *, _Res>  { 
# 288
}; 
# 291
template< class _Res, class _T1, class _T2> 
# 292
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) const>  : public binary_function< const _T1 *, _T2, _Res>  { 
# 294
}; 
# 297
template< class _Res, class _T1> 
# 298
struct _Reference_wrapper_base< _Res (_T1::*)(void) volatile>  : public unary_function< volatile _T1 *, _Res>  { 
# 300
}; 
# 303
template< class _Res, class _T1, class _T2> 
# 304
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) volatile>  : public binary_function< volatile _T1 *, _T2, _Res>  { 
# 306
}; 
# 309
template< class _Res, class _T1> 
# 310
struct _Reference_wrapper_base< _Res (_T1::*)(void) const volatile>  : public unary_function< const volatile _T1 *, _Res>  { 
# 312
}; 
# 315
template< class _Res, class _T1, class _T2> 
# 316
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) const volatile>  : public binary_function< const volatile _T1 *, _T2, _Res>  { 
# 318
}; 
# 325
template< class _Tp> 
# 326
class reference_wrapper : public _Reference_wrapper_base< typename remove_cv< _Tp> ::type>  { 
# 329
_Tp *_M_data; 
# 332
public: typedef _Tp type; 
# 334
reference_wrapper(_Tp &__indata) noexcept : _M_data(std::__addressof(__indata)) 
# 336
{ } 
# 338
reference_wrapper(_Tp &&) = delete;
# 340
reference_wrapper(const reference_wrapper &) = default;
# 343
reference_wrapper &operator=(const reference_wrapper &) = default;
# 345
operator _Tp &() const noexcept 
# 346
{ return get(); } 
# 349
_Tp &get() const noexcept 
# 350
{ return *(_M_data); } 
# 352
template< class ..._Args> typename result_of< _Tp &(_Args && ...)> ::type 
# 354
operator()(_Args &&...__args) const 
# 355
{ 
# 356
return std::__invoke(get(), std::forward< _Args> (__args)...); 
# 357
} 
# 358
}; 
# 362
template< class _Tp> inline reference_wrapper< _Tp>  
# 364
ref(_Tp &__t) noexcept 
# 365
{ return ((reference_wrapper< _Tp> )(__t)); } 
# 368
template< class _Tp> inline reference_wrapper< const _Tp>  
# 370
cref(const _Tp &__t) noexcept 
# 371
{ return ((reference_wrapper< const _Tp> )(__t)); } 
# 373
template < typename _Tp >
    void ref ( const _Tp && ) = delete;
# 376
template < typename _Tp >
    void cref ( const _Tp && ) = delete;
# 380
template< class _Tp> inline reference_wrapper< _Tp>  
# 382
ref(reference_wrapper< _Tp>  __t) noexcept 
# 383
{ return ref(__t.get()); } 
# 386
template< class _Tp> inline reference_wrapper< const _Tp>  
# 388
cref(reference_wrapper< _Tp>  __t) noexcept 
# 389
{ return cref(__t.get()); } 
# 394
}
# 47 "/usr/include/c++/7/bits/std_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 56
template< class _Res, class ..._ArgTypes> 
# 57
struct _Maybe_unary_or_binary_function { }; 
# 60
template< class _Res, class _T1> 
# 61
struct _Maybe_unary_or_binary_function< _Res, _T1>  : public unary_function< _T1, _Res>  { 
# 62
}; 
# 65
template< class _Res, class _T1, class _T2> 
# 66
struct _Maybe_unary_or_binary_function< _Res, _T1, _T2>  : public binary_function< _T1, _T2, _Res>  { 
# 67
}; 
# 75
class bad_function_call : public exception { 
# 78
public: virtual ~bad_function_call() noexcept; 
# 80
virtual const char *what() const noexcept; 
# 81
}; 
# 89
template< class _Tp> 
# 90
struct __is_location_invariant : public is_trivially_copyable< _Tp> ::type { 
# 92
}; 
# 94
class _Undefined_class; 
# 96
union _Nocopy_types { 
# 98
void *_M_object; 
# 99
const void *_M_const_object; 
# 100
void (*_M_function_pointer)(void); 
# 101
void (_Undefined_class::*_M_member_pointer)(void); 
# 102
}; 
# 104
union [[gnu::may_alias]] _Any_data { 
# 106
void *_M_access() { return &((_M_pod_data)[0]); } 
# 107
const void *_M_access() const { return &((_M_pod_data)[0]); } 
# 109
template< class _Tp> _Tp &
# 111
_M_access() 
# 112
{ return *(static_cast< _Tp *>(this->_M_access())); } 
# 114
template< class _Tp> const _Tp &
# 116
_M_access() const 
# 117
{ return *(static_cast< const _Tp *>(this->_M_access())); } 
# 119
_Nocopy_types _M_unused; 
# 120
char _M_pod_data[sizeof(_Nocopy_types)]; 
# 121
}; 
# 123
enum _Manager_operation { 
# 125
__get_type_info, 
# 126
__get_functor_ptr, 
# 127
__clone_functor, 
# 128
__destroy_functor
# 129
}; 
# 133
template< class _Tp> 
# 134
struct _Simple_type_wrapper { 
# 136
_Simple_type_wrapper(_Tp __value) : __value(__value) { } 
# 138
_Tp __value; 
# 139
}; 
# 141
template< class _Tp> 
# 142
struct __is_location_invariant< _Simple_type_wrapper< _Tp> >  : public std::__is_location_invariant< _Tp>  { 
# 144
}; 
# 146
template< class _Signature> class function; 
# 150
class _Function_base { 
# 153
public: static const size_t _M_max_size = sizeof(_Nocopy_types); 
# 154
static const size_t _M_max_align = __alignof__(_Nocopy_types); 
# 156
template< class _Functor> 
# 157
class _Base_manager { 
# 160
protected: static const bool __stored_locally = (__is_location_invariant< _Functor> ::value && (sizeof(_Functor) <= _M_max_size) && (__alignof__(_Functor) <= _M_max_align) && ((_M_max_align % __alignof__(_Functor)) == (0))); 
# 166
typedef integral_constant< bool, __stored_locally>  _Local_storage; 
# 170
static _Functor *_M_get_pointer(const _Any_data &__source) 
# 171
{ 
# 172
const _Functor *__ptr = __stored_locally ? std::__addressof(__source.template _M_access< _Functor> ()) : __source.template _M_access< _Functor *> (); 
# 175
return const_cast< _Functor *>(__ptr); 
# 176
} 
# 181
static void _M_clone(_Any_data &__dest, const _Any_data &__source, true_type) 
# 182
{ 
# 183
::new (__dest._M_access()) _Functor(__source.template _M_access< _Functor> ()); 
# 184
} 
# 189
static void _M_clone(_Any_data &__dest, const _Any_data &__source, false_type) 
# 190
{ 
# 191
__dest.template _M_access< _Functor *> () = (new _Functor(*__source.template _M_access< _Functor *> ())); 
# 193
} 
# 198
static void _M_destroy(_Any_data &__victim, true_type) 
# 199
{ 
# 200
__victim.template _M_access< _Functor> ().~_Functor(); 
# 201
} 
# 205
static void _M_destroy(_Any_data &__victim, false_type) 
# 206
{ 
# 207
delete __victim.template _M_access< _Functor *> (); 
# 208
} 
# 212
public: static bool _M_manager(_Any_data &__dest, const _Any_data &__source, _Manager_operation 
# 213
__op) 
# 214
{ 
# 215
switch (__op) 
# 216
{ 
# 218
case __get_type_info:  
# 219
__dest.template _M_access< const type_info *> () = (&typeid(_Functor)); 
# 220
break; 
# 222
case __get_functor_ptr:  
# 223
__dest.template _M_access< _Functor *> () = (_M_get_pointer)(__source); 
# 224
break; 
# 226
case __clone_functor:  
# 227
_M_clone(__dest, __source, _Local_storage()); 
# 228
break; 
# 230
case __destroy_functor:  
# 231
_M_destroy(__dest, _Local_storage()); 
# 232
break; 
# 233
}  
# 234
return false; 
# 235
} 
# 238
static void _M_init_functor(_Any_data &__functor, _Functor &&__f) 
# 239
{ _M_init_functor(__functor, std::move(__f), _Local_storage()); } 
# 241
template< class _Signature> static bool 
# 243
_M_not_empty_function(const function< _Signature>  &__f) 
# 244
{ return static_cast< bool>(__f); } 
# 246
template< class _Tp> static bool 
# 248
_M_not_empty_function(_Tp *__fp) 
# 249
{ return __fp != nullptr; } 
# 251
template< class _Class, class _Tp> static bool 
# 253
_M_not_empty_function(_Tp (_Class::*__mp)) 
# 254
{ return __mp != nullptr; } 
# 256
template< class _Tp> static bool 
# 258
_M_not_empty_function(const _Tp &) 
# 259
{ return true; } 
# 263
private: static void _M_init_functor(_Any_data &__functor, _Functor &&__f, true_type) 
# 264
{ ::new (__functor._M_access()) _Functor(std::move(__f)); } 
# 267
static void _M_init_functor(_Any_data &__functor, _Functor &&__f, false_type) 
# 268
{ __functor.template _M_access< _Functor *> () = (new _Functor(std::move(__f))); } 
# 269
}; 
# 271
_Function_base() : _M_manager((nullptr)) { } 
# 273
~_Function_base() 
# 274
{ 
# 275
if (_M_manager) { 
# 276
(_M_manager)(_M_functor, _M_functor, __destroy_functor); }  
# 277
} 
# 279
bool _M_empty() const { return !(_M_manager); } 
# 281
typedef bool (*_Manager_type)(_Any_data &, const _Any_data &, _Manager_operation); 
# 284
_Any_data _M_functor; 
# 285
_Manager_type _M_manager; 
# 286
}; 
# 288
template< class _Signature, class _Functor> class _Function_handler; 
# 291
template< class _Res, class _Functor, class ..._ArgTypes> 
# 292
class _Function_handler< _Res (_ArgTypes ...), _Functor>  : public _Function_base::_Base_manager< _Functor>  { 
# 295
typedef typename std::_Function_base::template _Base_manager< _Functor>  _Base; 
# 299
public: static _Res _M_invoke(const std::_Any_data &__functor, _ArgTypes &&...__args) 
# 300
{ 
# 301
return (*_Base::_M_get_pointer(__functor))(std::forward< _ArgTypes> (__args)...); 
# 303
} 
# 304
}; 
# 306
template< class _Functor, class ..._ArgTypes> 
# 307
class _Function_handler< void (_ArgTypes ...), _Functor>  : public _Function_base::_Base_manager< _Functor>  { 
# 310
typedef typename std::_Function_base::template _Base_manager< _Functor>  _Base; 
# 314
public: static void _M_invoke(const std::_Any_data &__functor, _ArgTypes &&...__args) 
# 315
{ 
# 316
(*_Base::_M_get_pointer(__functor))(std::forward< _ArgTypes> (__args)...); 
# 318
} 
# 319
}; 
# 321
template< class _Class, class _Member, class _Res, class ...
# 322
_ArgTypes> 
# 323
class _Function_handler< _Res (_ArgTypes ...), _Member (_Class::*)>  : public std::_Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  { 
# 327
typedef std::_Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  _Base; 
# 331
public: static _Res _M_invoke(const std::_Any_data &__functor, _ArgTypes &&...__args) 
# 332
{ 
# 333
return std::__invoke((_Base::_M_get_pointer(__functor)->__value), std::forward< _ArgTypes> (__args)...); 
# 335
} 
# 336
}; 
# 338
template< class _Class, class _Member, class ..._ArgTypes> 
# 339
class _Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  : public _Function_base::_Base_manager< _Simple_type_wrapper< _Member (_Class::*)> >  { 
# 343
typedef _Member (_Class::*_Functor); 
# 344
typedef _Simple_type_wrapper< _Member (_Class::*)>  _Wrapper; 
# 345
typedef typename std::_Function_base::template _Base_manager< _Simple_type_wrapper< _Member (_Class::*)> >  _Base; 
# 349
public: static bool _M_manager(std::_Any_data &__dest, const std::_Any_data &__source, std::_Manager_operation 
# 350
__op) 
# 351
{ 
# 352
switch (__op) 
# 353
{ 
# 355
case __get_type_info:  
# 356
__dest.template _M_access< const std::type_info *> () = (&typeid(_Member (_Class::*))); 
# 357
break; 
# 359
case __get_functor_ptr:  
# 360
__dest.template _M_access< _Functor *> () = (&(_Base::_M_get_pointer(__source)->__value)); 
# 362
break; 
# 364
default:  
# 365
_Base::_M_manager(__dest, __source, __op); 
# 366
}  
# 367
return false; 
# 368
} 
# 371
static void _M_invoke(const std::_Any_data &__functor, _ArgTypes &&...__args) 
# 372
{ 
# 373
std::__invoke((_Base::_M_get_pointer(__functor)->__value), std::forward< _ArgTypes> (__args)...); 
# 375
} 
# 376
}; 
# 378
template< class _From, class _To> using __check_func_return_type = __or_< is_void< _To> , is_same< _From, _To> , is_convertible< _From, _To> > ; 
# 388
template< class _Res, class ..._ArgTypes> 
# 389
class function< _Res (_ArgTypes ...)>  : public _Maybe_unary_or_binary_function< _Res, _ArgTypes...> , private _Function_base { 
# 393
template< class _Func, class 
# 394
_Res2 = typename result_of< _Func &(_ArgTypes ...)> ::type> 
# 395
struct _Callable : public std::__check_func_return_type< _Res2, _Res>  { }; 
# 399
template< class _Tp> 
# 400
struct _Callable< std::function< _Res (_ArgTypes ...)> , _Tp>  : public std::false_type { }; 
# 402
template< class _Cond, class _Tp> using _Requires = typename enable_if< _Cond::value, _Tp> ::type; 
# 406
public: typedef _Res result_type; 
# 414
function() noexcept : std::_Function_base() 
# 415
{ } 
# 421
function(std::nullptr_t) noexcept : std::_Function_base() 
# 422
{ } 
# 432 "/usr/include/c++/7/bits/std_function.h" 3
function(const std::function< _Res (_ArgTypes ...)>  & __x); 
# 441 "/usr/include/c++/7/bits/std_function.h" 3
function(std::function< _Res (_ArgTypes ...)>  &&__x) noexcept : std::_Function_base() 
# 442
{ 
# 443
__x.swap(*this); 
# 444
} 
# 462 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Functor, class 
# 463
 = _Requires< __not_< is_same< _Functor, std::function< _Res (_ArgTypes ...)> > > , void> , class 
# 464
 = _Requires< _Callable< _Functor> , void> > 
# 462
function(_Functor); 
# 480 "/usr/include/c++/7/bits/std_function.h" 3
std::function< _Res (_ArgTypes ...)>  &operator=(const std::function< _Res (_ArgTypes ...)>  &__x) 
# 481
{ 
# 482
((std::function< _Res (_ArgTypes ...)> )(__x)).swap(*this); 
# 483
return *this; 
# 484
} 
# 498 "/usr/include/c++/7/bits/std_function.h" 3
std::function< _Res (_ArgTypes ...)>  &operator=(std::function< _Res (_ArgTypes ...)>  &&__x) noexcept 
# 499
{ 
# 500
((std::function< _Res (_ArgTypes ...)> )(std::move(__x))).swap(*this); 
# 501
return *this; 
# 502
} 
# 512 "/usr/include/c++/7/bits/std_function.h" 3
std::function< _Res (_ArgTypes ...)>  &operator=(std::nullptr_t) noexcept 
# 513
{ 
# 514
if (_M_manager) 
# 515
{ 
# 516
(_M_manager)(_M_functor, _M_functor, __destroy_functor); 
# 517
(_M_manager) = (nullptr); 
# 518
(_M_invoker) = nullptr; 
# 519
}  
# 520
return *this; 
# 521
} 
# 539 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Functor> _Requires< _Callable< typename decay< _Functor> ::type> , std::function< _Res (_ArgTypes ...)>  &>  
# 541
operator=(_Functor &&__f) 
# 542
{ 
# 543
((std::function< _Res (_ArgTypes ...)> )(std::forward< _Functor> (__f))).swap(*this); 
# 544
return *this; 
# 545
} 
# 548
template< class _Functor> std::function< _Res (_ArgTypes ...)>  &
# 550
operator=(reference_wrapper< _Functor>  __f) noexcept 
# 551
{ 
# 552
((std::function< _Res (_ArgTypes ...)> )(__f)).swap(*this); 
# 553
return *this; 
# 554
} 
# 565 "/usr/include/c++/7/bits/std_function.h" 3
void swap(std::function< _Res (_ArgTypes ...)>  &__x) noexcept 
# 566
{ 
# 567
std::swap(_M_functor, __x._M_functor); 
# 568
std::swap(_M_manager, __x._M_manager); 
# 569
std::swap(_M_invoker, __x._M_invoker); 
# 570
} 
# 582 "/usr/include/c++/7/bits/std_function.h" 3
explicit operator bool() const noexcept 
# 583
{ return !this->std::_Function_base::_M_empty(); } 
# 595 "/usr/include/c++/7/bits/std_function.h" 3
_Res operator()(_ArgTypes ...__args) const; 
# 608 "/usr/include/c++/7/bits/std_function.h" 3
const std::type_info &target_type() const noexcept; 
# 621 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Functor> _Functor *target() noexcept; 
# 623
template< class _Functor> const _Functor *target() const noexcept; 
# 628
private: using _Invoker_type = _Res (*)(const std::_Any_data &, _ArgTypes && ...); 
# 629
_Invoker_type _M_invoker; 
# 630
}; 
# 670 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Res, class ..._ArgTypes> 
# 672
function< _Res (_ArgTypes ...)> ::function(const std::function< _Res (_ArgTypes ...)>  &__x) : std::_Function_base() 
# 674
{ 
# 675
if (static_cast< bool>(__x)) 
# 676
{ 
# 677
(__x._M_manager)(_M_functor, __x._M_functor, __clone_functor); 
# 678
(_M_invoker) = (__x._M_invoker); 
# 679
(_M_manager) = (__x._M_manager); 
# 680
}  
# 681
} 
# 683
template< class _Res, class ..._ArgTypes> 
# 684
template< class _Functor, class , class > 
# 686
function< _Res (_ArgTypes ...)> ::function(_Functor __f) : std::_Function_base() 
# 688
{ 
# 689
typedef _Function_handler< _Res (_ArgTypes ...), _Functor>  _My_handler; 
# 691
if (_My_handler::_M_not_empty_function(__f)) 
# 692
{ 
# 693
_My_handler::_M_init_functor(_M_functor, std::move(__f)); 
# 694
(_M_invoker) = (&_My_handler::_M_invoke); 
# 695
(_M_manager) = (&_My_handler::_M_manager); 
# 696
}  
# 697
} 
# 699
template< class _Res, class ..._ArgTypes> _Res 
# 702
function< _Res (_ArgTypes ...)> ::operator()(_ArgTypes ...__args) const 
# 703
{ 
# 704
if (this->std::_Function_base::_M_empty()) { 
# 705
__throw_bad_function_call(); }  
# 706
return (_M_invoker)(_M_functor, std::forward< _ArgTypes> (__args)...); 
# 707
} 
# 710
template< class _Res, class ..._ArgTypes> const type_info &
# 713
function< _Res (_ArgTypes ...)> ::target_type() const noexcept 
# 714
{ 
# 715
if (_M_manager) 
# 716
{ 
# 717
std::_Any_data __typeinfo_result; 
# 718
(_M_manager)(__typeinfo_result, _M_functor, __get_type_info); 
# 719
return *__typeinfo_result.template _M_access< const std::type_info *> (); 
# 720
} else { 
# 722
return typeid(void); }  
# 723
} 
# 725
template< class _Res, class ..._ArgTypes> 
# 726
template< class _Functor> _Functor *
# 729
function< _Res (_ArgTypes ...)> ::target() noexcept 
# 730
{ 
# 731
const std::function< _Res (_ArgTypes ...)>  *__const_this = this; 
# 732
const _Functor *__func = __const_this->template target< _Functor> (); 
# 733
return const_cast< _Functor *>(__func); 
# 734
} 
# 736
template< class _Res, class ..._ArgTypes> 
# 737
template< class _Functor> const _Functor *
# 740
function< _Res (_ArgTypes ...)> ::target() const noexcept 
# 741
{ 
# 742
if ((typeid(_Functor) == target_type()) && (_M_manager)) 
# 743
{ 
# 744
std::_Any_data __ptr; 
# 745
(_M_manager)(__ptr, _M_functor, __get_functor_ptr); 
# 746
return __ptr.template _M_access< const _Functor *> (); 
# 747
} else { 
# 749
return nullptr; }  
# 750
} 
# 762 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Res, class ..._Args> inline bool 
# 764
operator==(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 765
{ return !(static_cast< bool>(__f)); } 
# 768
template< class _Res, class ..._Args> inline bool 
# 770
operator==(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 771
{ return !(static_cast< bool>(__f)); } 
# 780 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Res, class ..._Args> inline bool 
# 782
operator!=(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 783
{ return static_cast< bool>(__f); } 
# 786
template< class _Res, class ..._Args> inline bool 
# 788
operator!=(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 789
{ return static_cast< bool>(__f); } 
# 801 "/usr/include/c++/7/bits/std_function.h" 3
template< class _Res, class ..._Args> inline void 
# 803
swap(function< _Res (_Args ...)>  &__x, function< _Res (_Args ...)>  &__y) noexcept 
# 804
{ __x.swap(__y); } 
# 807
}
# 67 "/usr/include/c++/7/functional" 3
namespace std __attribute((__visibility__("default"))) { 
# 85 "/usr/include/c++/7/functional" 3
template< class ..._Types> 
# 86
struct _Pack : public integral_constant< unsigned long, sizeof...(_Types)>  { 
# 87
}; 
# 89
template< class _From, class _To, bool  = _From::value == _To::value> 
# 90
struct _AllConvertible : public false_type { 
# 91
}; 
# 93
template< class ..._From, class ..._To> 
# 94
struct _AllConvertible< _Pack< _From...> , _Pack< _To...> , true>  : public __and_< is_convertible< _From, _To> ...>  { 
# 96
}; 
# 98
template< class _Tp1, class _Tp2> using _NotSame = __not_< is_same< typename decay< _Tp1> ::type, typename decay< _Tp2> ::type> > ; 
# 102
template< class _Signature> struct _Mem_fn_traits; 
# 105
template< class _Res, class _Class, class ..._ArgTypes> 
# 106
struct _Mem_fn_traits_base { 
# 108
using __result_type = _Res; 
# 109
using __maybe_type = _Maybe_unary_or_binary_function< _Res, _Class *, _ArgTypes...> ; 
# 111
using __arity = integral_constant< size_t, sizeof...(_ArgTypes)> ; 
# 112
}; 
# 134 "/usr/include/c++/7/functional" 3
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 135
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 136
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 147 "/usr/include/c++/7/functional" 3
template< class _MemFunPtr, bool 
# 148
__is_mem_fn = is_member_function_pointer< _MemFunPtr> ::value> 
# 149
class _Mem_fn_base : public _Mem_fn_traits< _MemFunPtr> ::__maybe_type { 
# 152
using _Traits = _Mem_fn_traits< _MemFunPtr> ; 
# 154
using _Arity = typename _Mem_fn_traits< _MemFunPtr> ::__arity; 
# 155
using _Varargs = typename _Mem_fn_traits< _MemFunPtr> ::__vararg; 
# 157
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 160
_MemFunPtr _M_pmf; 
# 164
public: using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 167
constexpr explicit _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { } 
# 169
template< class ..._Args> auto 
# 171
operator()(_Args &&...__args) const noexcept(noexcept(std::__invoke(_M_pmf, std::forward< _Args> (__args)...)))->__decltype((std::__invoke(_M_pmf, std::forward< _Args> (__args)...))) 
# 175
{ return std::__invoke(_M_pmf, std::forward< _Args> (__args)...); } 
# 176
}; 
# 179
template< class _MemObjPtr> 
# 180
class _Mem_fn_base< _MemObjPtr, false>  { 
# 182
using _Arity = integral_constant< size_t, 0UL> ; 
# 183
using _Varargs = false_type; 
# 185
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 188
_MemObjPtr _M_pm; 
# 192
public: constexpr explicit _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { } 
# 194
template< class _Tp> auto 
# 196
operator()(_Tp &&__obj) const noexcept(noexcept(std::__invoke(_M_pm, std::forward< _Tp> (__obj))))->__decltype((std::__invoke(_M_pm, std::forward< _Tp> (__obj)))) 
# 199
{ return std::__invoke(_M_pm, std::forward< _Tp> (__obj)); } 
# 200
}; 
# 202
template< class _MemberPointer> struct _Mem_fn; 
# 205
template< class _Res, class _Class> 
# 206
struct _Mem_fn< _Res (_Class::*)>  : public _Mem_fn_base< _Res (_Class::*)>  { 
# 209
using _Mem_fn_base< _Res (_Class::*)> ::_Mem_fn_base;
# 210
}; 
# 219 "/usr/include/c++/7/functional" 3
template< class _Tp, class _Class> inline _Mem_fn< _Tp (_Class::*)>  
# 221
mem_fn(_Tp (_Class::*__pm)) noexcept 
# 222
{ 
# 223
return ((_Mem_fn< _Tp (_Class::*)> )(__pm)); 
# 224
} 
# 234 "/usr/include/c++/7/functional" 3
template< class _Tp> 
# 235
struct is_bind_expression : public false_type { 
# 236
}; 
# 245 "/usr/include/c++/7/functional" 3
template< class _Tp> 
# 246
struct is_placeholder : public integral_constant< int, 0>  { 
# 248
}; 
# 260 "/usr/include/c++/7/functional" 3
template< int _Num> struct _Placeholder { }; 
# 268
namespace placeholders { 
# 275
extern const _Placeholder< 1>  _1; 
# 276
extern const _Placeholder< 2>  _2; 
# 277
extern const _Placeholder< 3>  _3; 
# 278
extern const _Placeholder< 4>  _4; 
# 279
extern const _Placeholder< 5>  _5; 
# 280
extern const _Placeholder< 6>  _6; 
# 281
extern const _Placeholder< 7>  _7; 
# 282
extern const _Placeholder< 8>  _8; 
# 283
extern const _Placeholder< 9>  _9; 
# 284
extern const _Placeholder< 10>  _10; 
# 285
extern const _Placeholder< 11>  _11; 
# 286
extern const _Placeholder< 12>  _12; 
# 287
extern const _Placeholder< 13>  _13; 
# 288
extern const _Placeholder< 14>  _14; 
# 289
extern const _Placeholder< 15>  _15; 
# 290
extern const _Placeholder< 16>  _16; 
# 291
extern const _Placeholder< 17>  _17; 
# 292
extern const _Placeholder< 18>  _18; 
# 293
extern const _Placeholder< 19>  _19; 
# 294
extern const _Placeholder< 20>  _20; 
# 295
extern const _Placeholder< 21>  _21; 
# 296
extern const _Placeholder< 22>  _22; 
# 297
extern const _Placeholder< 23>  _23; 
# 298
extern const _Placeholder< 24>  _24; 
# 299
extern const _Placeholder< 25>  _25; 
# 300
extern const _Placeholder< 26>  _26; 
# 301
extern const _Placeholder< 27>  _27; 
# 302
extern const _Placeholder< 28>  _28; 
# 303
extern const _Placeholder< 29>  _29; 
# 305
}
# 314
template< int _Num> 
# 315
struct is_placeholder< _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 317
}; 
# 319
template< int _Num> 
# 320
struct is_placeholder< const _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 322
}; 
# 326
template< size_t __i, class _Tuple> using _Safe_tuple_element_t = typename enable_if< __i < tuple_size< _Tuple> ::value, tuple_element< __i, _Tuple> > ::type::type; 
# 342 "/usr/include/c++/7/functional" 3
template< class _Arg, bool 
# 343
_IsBindExp = is_bind_expression< _Arg> ::value, bool 
# 344
_IsPlaceholder = (is_placeholder< _Arg> ::value > 0)> class _Mu; 
# 352
template< class _Tp> 
# 353
class _Mu< reference_wrapper< _Tp> , false, false>  { 
# 362
public: 
# 360
template< class _CVRef, class _Tuple> _Tp &
# 362
operator()(_CVRef &__arg, _Tuple &) const volatile 
# 363
{ return __arg.get(); } 
# 364
}; 
# 372
template< class _Arg> 
# 373
class _Mu< _Arg, true, false>  { 
# 378
public: 
# 376
template< class _CVArg, class ..._Args> auto 
# 378
operator()(_CVArg &__arg, tuple< _Args...>  &
# 379
__tuple) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 381
{ 
# 384
typedef typename _Build_index_tuple< sizeof...(_Args)> ::__type _Indexes; 
# 385
return this->__call(__arg, __tuple, _Indexes()); 
# 386
} 
# 393
private: 
# 391
template< class _CVArg, class ..._Args, size_t ..._Indexes> auto 
# 393
__call(_CVArg &__arg, tuple< _Args...>  &__tuple, const _Index_tuple< _Indexes...>  &) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 396
{ 
# 397
return __arg(std::get< _Indexes> (std::move(__tuple))...); 
# 398
} 
# 399
}; 
# 406
template< class _Arg> 
# 407
class _Mu< _Arg, false, true>  { 
# 412
public: 
# 410
template< class _Tuple> _Safe_tuple_element_t< is_placeholder< _Arg> ::value - 1, _Tuple>  &&
# 412
operator()(const volatile _Arg &, _Tuple &__tuple) const volatile 
# 413
{ 
# 414
return std::get< is_placeholder< _Arg> ::value - 1> (std::move(__tuple)); 
# 416
} 
# 417
}; 
# 424
template< class _Arg> 
# 425
class _Mu< _Arg, false, false>  { 
# 430
public: 
# 428
template< class _CVArg, class _Tuple> _CVArg &&
# 430
operator()(_CVArg &&__arg, _Tuple &) const volatile 
# 431
{ return std::forward< _CVArg> (__arg); } 
# 432
}; 
# 435
template< size_t _Ind, class ..._Tp> inline auto 
# 437
__volget(volatile tuple< _Tp...>  &__tuple)->volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 439
{ return std::get< _Ind> (const_cast< tuple< _Tp...>  &>(__tuple)); } 
# 442
template< size_t _Ind, class ..._Tp> inline auto 
# 444
__volget(const volatile tuple< _Tp...>  &__tuple)->const volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 446
{ return std::get< _Ind> (const_cast< const tuple< _Tp...>  &>(__tuple)); } 
# 449
template< class _Signature> struct _Bind; 
# 452
template< class _Functor, class ..._Bound_args> 
# 453
class _Bind< _Functor (_Bound_args ...)>  : public _Weak_result_type< _Functor>  { 
# 457
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 459
_Functor _M_f; 
# 460
tuple< _Bound_args...>  _M_bound_args; 
# 463
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 465
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 466
{ 
# 467
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 470
} 
# 473
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 475
__call_c(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 476
{ 
# 477
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 480
} 
# 483
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 485
__call_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 487
{ 
# 488
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 491
} 
# 494
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 496
__call_c_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 498
{ 
# 499
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 502
} 
# 504
template< class _BoundArg, class _CallArgs> using _Mu_type = __decltype((_Mu< typename remove_cv< _BoundArg> ::type> ()(std::declval< _BoundArg &> (), std::declval< _CallArgs &> ()))); 
# 509
template< class _Fn, class _CallArgs, class ..._BArgs> using _Res_type_impl = typename result_of< _Fn &(_Mu_type< _BArgs, _CallArgs>  && ...)> ::type; 
# 513
template< class _CallArgs> using _Res_type = _Res_type_impl< _Functor, _CallArgs, _Bound_args...> ; 
# 516
template< class _CallArgs> using __dependent = typename enable_if< (bool)(tuple_size< _CallArgs> ::value + 1), _Functor> ::type; 
# 520
template< class _CallArgs, template< class >  class __cv_quals> using _Res_type_cv = _Res_type_impl< typename __cv_quals< __dependent< _CallArgs> > ::type, _CallArgs, typename __cv_quals< _Bound_args> ::type...> ; 
# 528
public: 
# 527
template< class ..._Args> explicit 
# 528
_Bind(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(std::forward< _Args> (__args)...) 
# 530
{ } 
# 532
template< class ..._Args> explicit 
# 533
_Bind(_Functor &&__f, _Args &&...__args) : _M_f(std::move(__f)), _M_bound_args(std::forward< _Args> (__args)...) 
# 535
{ } 
# 537
_Bind(const std::_Bind< _Functor (_Bound_args ...)>  &) = default;
# 539
_Bind(std::_Bind< _Functor (_Bound_args ...)>  &&__b) : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args)) 
# 541
{ } 
# 544
template< class ..._Args, class 
# 545
_Result = _Res_type< tuple< _Args...> > > _Result 
# 547
operator()(_Args &&...__args) 
# 548
{ 
# 549
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 552
} 
# 555
template< class ..._Args, class 
# 556
_Result = _Res_type_cv< tuple< _Args...> , std::add_const> > _Result 
# 558
operator()(_Args &&...__args) const 
# 559
{ 
# 560
return this->template __call_c< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 563
} 
# 572 "/usr/include/c++/7/functional" 3
template< class ..._Args, class 
# 573
_Result = _Res_type_cv< tuple< _Args...> , std::add_volatile> > _Result 
# 576
operator()(_Args &&...__args) volatile 
# 577
{ 
# 578
return this->template __call_v< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 581
} 
# 584
template< class ..._Args, class 
# 585
_Result = _Res_type_cv< tuple< _Args...> , std::add_cv> > _Result 
# 588
operator()(_Args &&...__args) const volatile 
# 589
{ 
# 590
return this->template __call_c_v< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 593
} 
# 594
}; 
# 597
template< class _Result, class _Signature> struct _Bind_result; 
# 600
template< class _Result, class _Functor, class ..._Bound_args> 
# 601
class _Bind_result< _Result, _Functor (_Bound_args ...)>  { 
# 604
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 606
_Functor _M_f; 
# 607
tuple< _Bound_args...>  _M_bound_args; 
# 610
template< class _Res> using __enable_if_void = typename enable_if< is_void< _Res> {}> ::type; 
# 614
template< class _Res> using __disable_if_void = typename enable_if< !is_void< _Res> {}, _Result> ::type; 
# 619
template< class _Res, class ..._Args, size_t ..._Indexes> __disable_if_void< _Res>  
# 621
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 622
{ 
# 623
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 625
} 
# 628
template< class _Res, class ..._Args, size_t ..._Indexes> __enable_if_void< _Res>  
# 630
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 631
{ 
# 632
std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 634
} 
# 637
template< class _Res, class ..._Args, size_t ..._Indexes> __disable_if_void< _Res>  
# 639
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 640
{ 
# 641
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 643
} 
# 646
template< class _Res, class ..._Args, size_t ..._Indexes> __enable_if_void< _Res>  
# 648
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 649
{ 
# 650
std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 652
} 
# 655
template< class _Res, class ..._Args, size_t ..._Indexes> __disable_if_void< _Res>  
# 657
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 658
{ 
# 659
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 661
} 
# 664
template< class _Res, class ..._Args, size_t ..._Indexes> __enable_if_void< _Res>  
# 666
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 667
{ 
# 668
std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 670
} 
# 673
template< class _Res, class ..._Args, size_t ..._Indexes> __disable_if_void< _Res>  
# 675
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 677
{ 
# 678
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 680
} 
# 683
template< class _Res, class ..._Args, size_t ..._Indexes> __enable_if_void< _Res>  
# 685
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 687
{ 
# 688
std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 690
} 
# 693
public: typedef _Result result_type; 
# 695
template< class ..._Args> explicit 
# 696
_Bind_result(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(std::forward< _Args> (__args)...) 
# 698
{ } 
# 700
template< class ..._Args> explicit 
# 701
_Bind_result(_Functor &&__f, _Args &&...__args) : _M_f(std::move(__f)), _M_bound_args(std::forward< _Args> (__args)...) 
# 703
{ } 
# 705
_Bind_result(const std::_Bind_result< _Result, _Functor (_Bound_args ...)>  &) = default;
# 707
_Bind_result(std::_Bind_result< _Result, _Functor (_Bound_args ...)>  &&__b) : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args)) 
# 709
{ } 
# 712
template< class ..._Args> result_type 
# 714
operator()(_Args &&...__args) 
# 715
{ 
# 716
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 719
} 
# 722
template< class ..._Args> result_type 
# 724
operator()(_Args &&...__args) const 
# 725
{ 
# 726
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 729
} 
# 732
template< class ..._Args> result_type 
# 735
operator()(_Args &&...__args) volatile 
# 736
{ 
# 737
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 740
} 
# 743
template< class ..._Args> result_type 
# 746
operator()(_Args &&...__args) const volatile 
# 747
{ 
# 748
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 751
} 
# 752
}; 
# 759
template< class _Signature> 
# 760
struct is_bind_expression< _Bind< _Signature> >  : public true_type { 
# 761
}; 
# 767
template< class _Signature> 
# 768
struct is_bind_expression< const _Bind< _Signature> >  : public true_type { 
# 769
}; 
# 775
template< class _Signature> 
# 776
struct is_bind_expression< volatile _Bind< _Signature> >  : public true_type { 
# 777
}; 
# 783
template< class _Signature> 
# 784
struct is_bind_expression< const volatile _Bind< _Signature> >  : public true_type { 
# 785
}; 
# 791
template< class _Result, class _Signature> 
# 792
struct is_bind_expression< _Bind_result< _Result, _Signature> >  : public true_type { 
# 793
}; 
# 799
template< class _Result, class _Signature> 
# 800
struct is_bind_expression< const _Bind_result< _Result, _Signature> >  : public true_type { 
# 801
}; 
# 807
template< class _Result, class _Signature> 
# 808
struct is_bind_expression< volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 809
}; 
# 815
template< class _Result, class _Signature> 
# 816
struct is_bind_expression< const volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 817
}; 
# 819
template< class _Func, class ..._BoundArgs> 
# 820
struct _Bind_check_arity { }; 
# 822
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 823
struct _Bind_check_arity< _Ret (*)(_Args ...), _BoundArgs...>  { 
# 825
static_assert((sizeof...(_BoundArgs) == sizeof...(_Args)), "Wrong number of arguments for function");
# 827
}; 
# 829
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 830
struct _Bind_check_arity< _Ret (*)(_Args ..., ...), _BoundArgs...>  { 
# 832
static_assert((sizeof...(_BoundArgs) >= sizeof...(_Args)), "Wrong number of arguments for function");
# 834
}; 
# 836
template< class _Tp, class _Class, class ..._BoundArgs> 
# 837
struct _Bind_check_arity< _Tp (_Class::*), _BoundArgs...>  { 
# 839
using _Arity = typename _Mem_fn< _Tp (_Class::*)> ::_Arity; 
# 840
using _Varargs = typename _Mem_fn< _Tp (_Class::*)> ::_Varargs; 
# 841
static_assert(((_Varargs::value) ? sizeof...(_BoundArgs) >= (_Arity::value + 1) : (sizeof...(_BoundArgs) == (_Arity::value + 1))), "Wrong number of arguments for pointer-to-member");
# 845
}; 
# 850
template< class _Tp, class _Tp2 = typename decay< _Tp> ::type> using __is_socketlike = __or_< is_integral< _Tp2> , is_enum< _Tp2> > ; 
# 853
template< bool _SocketLike, class _Func, class ..._BoundArgs> 
# 854
struct _Bind_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 857
typedef typename decay< _Func> ::type __func_type; 
# 858
typedef _Bind< __func_type (typename decay< _BoundArgs> ::type ...)>  type; 
# 859
}; 
# 864
template< class _Func, class ..._BoundArgs> 
# 865
struct _Bind_helper< true, _Func, _BoundArgs...>  { 
# 866
}; 
# 872
template< class _Func, class ..._BoundArgs> inline typename _Bind_helper< __or_< is_integral< typename decay< _Func> ::type> , is_enum< typename decay< _Func> ::type> > ::value, _Func, _BoundArgs...> ::type 
# 875
bind(_Func &&__f, _BoundArgs &&...__args) 
# 876
{ 
# 877
typedef _Bind_helper< false, _Func, _BoundArgs...>  __helper_type; 
# 878
return typename _Bind_helper< false, _Func, _BoundArgs...> ::type(std::forward< _Func> (__f), std::forward< _BoundArgs> (__args)...); 
# 880
} 
# 882
template< class _Result, class _Func, class ..._BoundArgs> 
# 883
struct _Bindres_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 886
typedef typename decay< _Func> ::type __functor_type; 
# 889
typedef _Bind_result< _Result, __functor_type (typename decay< _BoundArgs> ::type ...)>  type; 
# 890
}; 
# 896
template< class _Result, class _Func, class ..._BoundArgs> inline typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type 
# 899
bind(_Func &&__f, _BoundArgs &&...__args) 
# 900
{ 
# 901
typedef _Bindres_helper< _Result, _Func, _BoundArgs...>  __helper_type; 
# 902
return typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type(std::forward< _Func> (__f), std::forward< _BoundArgs> (__args)...); 
# 904
} 
# 908
template< class _Fn> 
# 909
class _Not_fn { 
# 911
template< class _Fn2, class ..._Args> using __inv_res_t = typename __invoke_result< _Fn2, _Args...> ::type; 
# 914
template< class _Tp> static __decltype((!std::declval< _Tp> ())) _S_not() noexcept(noexcept((!std::declval< _Tp> ()))); 
# 920
public: 
# 919
template< class _Fn2> 
# 920
_Not_fn(_Fn2 &&__fn, int) : _M_fn(std::forward< _Fn2> (__fn)) 
# 921
{ } 
# 923
_Not_fn(const _Not_fn & __fn) = default;
# 924
_Not_fn(_Not_fn && __fn) = default;
# 925
~_Not_fn() = default;
# 940 "/usr/include/c++/7/functional" 3
template< class ..._Args> __decltype((_S_not< __inv_res_t< _Fn &, _Args...> > ())) operator()(_Args &&...__args) & noexcept(__is_nothrow_invocable< _Fn &, _Args...> ::value && noexcept(_S_not< __inv_res_t< _Fn &, _Args...> > ())) { return !std::__invoke(std::forward< _Fn &> (_M_fn), std::forward< _Args> (__args)...); } 
# 941
template< class ..._Args> __decltype((_S_not< __inv_res_t< const _Fn &, _Args...> > ())) operator()(_Args &&...__args) const & noexcept(__is_nothrow_invocable< const _Fn &, _Args...> ::value && noexcept(_S_not< __inv_res_t< const _Fn &, _Args...> > ())) { return !std::__invoke(std::forward< const _Fn &> (_M_fn), std::forward< _Args> (__args)...); } 
# 942
template< class ..._Args> __decltype((_S_not< __inv_res_t< _Fn &&, _Args...> > ())) operator()(_Args &&...__args) && noexcept(__is_nothrow_invocable< _Fn &&, _Args...> ::value && noexcept(_S_not< __inv_res_t< _Fn &&, _Args...> > ())) { return !std::__invoke(std::forward< _Fn &&> (_M_fn), std::forward< _Args> (__args)...); } 
# 943
template< class ..._Args> __decltype((_S_not< __inv_res_t< const _Fn &&, _Args...> > ())) operator()(_Args &&...__args) const && noexcept(__is_nothrow_invocable< const _Fn &&, _Args...> ::value && noexcept(_S_not< __inv_res_t< const _Fn &&, _Args...> > ())) { return !std::__invoke(std::forward< const _Fn &&> (_M_fn), std::forward< _Args> (__args)...); } 
# 947
private: _Fn _M_fn; 
# 948
}; 
# 1246 "/usr/include/c++/7/functional" 3
}
# 124 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
# 1 "nvcc_internal_extended_lambda_implementation"
#define __NV_LAMBDA_WRAPPER_HELPER(X, Y) decltype(X), Y
template <typename T>
struct __nvdl_remove_ref { typedef T type; };

template<typename T>
struct __nvdl_remove_ref<T&> { typedef T type; };

template<typename T>
struct __nvdl_remove_ref<T&&> { typedef T type; };
template <typename T>
struct __nvdl_remove_const { typedef T type; };

template <typename T>
struct __nvdl_remove_const<T const> { typedef T type; };


template <typename U, U func, unsigned>
struct __nv_dl_tag { };
template <typename T>
struct __nv_lambda_array_wrapper { 
static_assert(sizeof(T) == 0, "nvcc internal error: unexpected failure in capturing array variable");
};

template<typename T, size_t D1>
struct __nv_lambda_array_wrapper<T [D1]> {T arr[D1];
__nv_lambda_array_wrapper(const T in[D1]) {
for(size_t i1 = 0; i1  < D1; ++i1) arr[i1] = in[i1];
}
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_array_wrapper<T [D1][D2]> {T arr[D1][D2];
__nv_lambda_array_wrapper(const T in[D1][D2]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2) arr[i1][i2] = in[i1][i2];
}
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_array_wrapper<T [D1][D2][D3]> {T arr[D1][D2][D3];
__nv_lambda_array_wrapper(const T in[D1][D2][D3]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3) arr[i1][i2][i3] = in[i1][i2][i3];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> {T arr[D1][D2][D3][D4];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4) arr[i1][i2][i3][i4] = in[i1][i2][i3][i4];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> {T arr[D1][D2][D3][D4][D5];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5) arr[i1][i2][i3][i4][i5] = in[i1][i2][i3][i4][i5];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> {T arr[D1][D2][D3][D4][D5][D6];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5][D6]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5)
for(size_t i6 = 0; i6  < D6; ++i6) arr[i1][i2][i3][i4][i5][i6] = in[i1][i2][i3][i4][i5][i6];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> {T arr[D1][D2][D3][D4][D5][D6][D7];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5][D6][D7]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5)
for(size_t i6 = 0; i6  < D6; ++i6)
for(size_t i7 = 0; i7  < D7; ++i7) arr[i1][i2][i3][i4][i5][i6][i7] = in[i1][i2][i3][i4][i5][i6][i7];
}
};

template <typename T>
struct __nv_lambda_field_type {
typedef T type;};
template<typename T, size_t D1>
struct __nv_lambda_field_type<T [D1]> {
typedef __nv_lambda_array_wrapper<T [D1]> type;
};

template<typename T, size_t D1>
struct __nv_lambda_field_type<const T [D1]> {
typedef const __nv_lambda_array_wrapper<T [D1]> type;
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_field_type<T [D1][D2]> {
typedef __nv_lambda_array_wrapper<T [D1][D2]> type;
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_field_type<const T [D1][D2]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_field_type<T [D1][D2][D3]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_field_type<const T [D1][D2][D3]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_field_type<T [D1][D2][D3][D4]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5][D6]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5][D6]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5][D6][D7]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5][D6][D7]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> type;
};
template <typename Tag,typename...CapturedVarTypePack>
struct __nv_dl_wrapper_t {
static_assert(sizeof...(CapturedVarTypePack) == 0,"nvcc internal error: unexpected number of captures!");
};
template <typename Tag>
struct __nv_dl_wrapper_t<Tag> {
__nv_dl_wrapper_t(Tag) { }
template <typename...U1>
int operator()(U1...) { return 0; }
};

namespace {template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
struct __nv_hdl_helper {
  typedef void * (*fp_copier_t)(void *);
  typedef OpFuncR (*fp_caller_t)(void *, OpFuncArgs...);
  typedef void (*fp_deleter_t) (void *);
  typedef OpFuncR (*fp_noobject_caller_t)(OpFuncArgs...);
  static fp_copier_t fp_copier;
  static fp_deleter_t fp_deleter;
  static fp_caller_t fp_caller;
  static fp_noobject_caller_t fp_noobject_caller;
};

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_copier_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_copier;

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_deleter_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_deleter;

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_caller_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_caller;
template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_noobject_caller_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_noobject_caller;
}
template <bool IsMutable, bool HasFuncPtrConv, typename Tag, typename OpFunc,typename...CapturedVarTypePack>
struct __nv_hdl_wrapper_t {
static_assert(sizeof...(CapturedVarTypePack) == 0,"nvcc internal error: unexpected number of captures in __host__ __device__ lambda!");
};

template <bool IsMutable, bool HasFuncPtrConv,typename ...CaptureArgs>
struct __nv_hdl_helper_trait_outer {
template <typename Tag, typename Lambda>
struct __nv_hdl_helper_trait : public  __nv_hdl_helper_trait<Tag,  decltype(&Lambda::operator())> { };
template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...) const>
{
template <typename Lambda>
static auto get(Lambda lam, CaptureArgs... args) ->  __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv, Tag, R(OpFuncArgs...),  CaptureArgs...>;
};

template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...)>
{
template <typename Lambda>
 static auto get(Lambda lam, CaptureArgs... args) -> __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv,Tag, R(OpFuncArgs...), CaptureArgs...>;

};
};
template<bool IsMutable, bool HasFuncPtrConv, typename Tag, typename...CaptureArgs>
struct __nv_hdl_create_wrapper_t {
template <typename Lambda>
static auto __nv_hdl_create_wrapper(Lambda &&lam, CaptureArgs... args) -> decltype(__nv_hdl_helper_trait_outer<IsMutable, HasFuncPtrConv, CaptureArgs...>::template __nv_hdl_helper_trait<Tag, Lambda>::get(lam, args...)) {
typedef decltype(__nv_hdl_helper_trait_outer<IsMutable, HasFuncPtrConv, CaptureArgs...>::template __nv_hdl_helper_trait<Tag, Lambda>::get(lam, args...)) container_type;
return container_type(Tag{}, std::move(lam), args...);
}
};

template<typename T> struct __nv_lambda_trait_remove_const { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_const<T  const> { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_volatile { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_volatile <T  volatile> {  typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_cv {
typedef typename  __nv_lambda_trait_remove_const< typename  __nv_lambda_trait_remove_volatile<T>::type >::type type;
};

template <typename T>
struct __nv_extended_device_lambda_trait_helper {
  static const bool value = false;
};
template <typename T1, typename...Pack>
struct __nv_extended_device_lambda_trait_helper<__nv_dl_wrapper_t<T1, Pack...> > {
  static const bool value = true;
};
#define __nv_is_extended_device_lambda_closure_type(X) __nv_extended_device_lambda_trait_helper< typename __nv_lambda_trait_remove_cv<X>::type>::value

template <typename>
struct __nv_extended_host_device_lambda_trait_helper {
  static const bool value = false;
};
template <bool B1, bool B2, typename T1, typename T2, typename...Pack>
struct __nv_extended_host_device_lambda_trait_helper<__nv_hdl_wrapper_t<B1, B2, T1, T2, Pack...> > {
  static const bool value = true;
};
#define __nv_is_extended_host_device_lambda_closure_type(X)  __nv_extended_host_device_lambda_trait_helper< typename __nv_lambda_trait_remove_cv<X>::type>::value

#if 0
# 124 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
struct __nv_lambda_preheader_injection { }; 
#endif
# 201 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 202
cudaLaunchKernel(const T *
# 203
func, dim3 
# 204
gridDim, dim3 
# 205
blockDim, void **
# 206
args, ::size_t 
# 207
sharedMem = 0, cudaStream_t 
# 208
stream = 0) 
# 210
{ 
# 211
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 212
} 
# 263 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 264
cudaLaunchCooperativeKernel(const T *
# 265
func, dim3 
# 266
gridDim, dim3 
# 267
blockDim, void **
# 268
args, ::size_t 
# 269
sharedMem = 0, cudaStream_t 
# 270
stream = 0) 
# 272
{ 
# 273
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 274
} 
# 307 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 308
event, unsigned 
# 309
flags) 
# 311
{ 
# 312
return ::cudaEventCreateWithFlags(event, flags); 
# 313
} 
# 372 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 373
ptr, ::size_t 
# 374
size, unsigned 
# 375
flags) 
# 377
{ 
# 378
return ::cudaHostAlloc(ptr, size, flags); 
# 379
} 
# 381
template< class T> static inline cudaError_t 
# 382
cudaHostAlloc(T **
# 383
ptr, ::size_t 
# 384
size, unsigned 
# 385
flags) 
# 387
{ 
# 388
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 389
} 
# 391
template< class T> static inline cudaError_t 
# 392
cudaHostGetDevicePointer(T **
# 393
pDevice, void *
# 394
pHost, unsigned 
# 395
flags) 
# 397
{ 
# 398
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 399
} 
# 501 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 502
cudaMallocManaged(T **
# 503
devPtr, ::size_t 
# 504
size, unsigned 
# 505
flags = 1) 
# 507
{ 
# 508
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 509
} 
# 591 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 592
cudaStreamAttachMemAsync(cudaStream_t 
# 593
stream, T *
# 594
devPtr, ::size_t 
# 595
length = 0, unsigned 
# 596
flags = 4) 
# 598
{ 
# 599
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 600
} 
# 602
template< class T> inline cudaError_t 
# 603
cudaMalloc(T **
# 604
devPtr, ::size_t 
# 605
size) 
# 607
{ 
# 608
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 609
} 
# 611
template< class T> static inline cudaError_t 
# 612
cudaMallocHost(T **
# 613
ptr, ::size_t 
# 614
size, unsigned 
# 615
flags = 0) 
# 617
{ 
# 618
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 619
} 
# 621
template< class T> static inline cudaError_t 
# 622
cudaMallocPitch(T **
# 623
devPtr, ::size_t *
# 624
pitch, ::size_t 
# 625
width, ::size_t 
# 626
height) 
# 628
{ 
# 629
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 630
} 
# 641 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 642
ptr, ::size_t 
# 643
size, cudaMemPool_t 
# 644
memPool, cudaStream_t 
# 645
stream) 
# 647
{ 
# 648
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 649
} 
# 651
template< class T> static inline cudaError_t 
# 652
cudaMallocAsync(T **
# 653
ptr, ::size_t 
# 654
size, cudaMemPool_t 
# 655
memPool, cudaStream_t 
# 656
stream) 
# 658
{ 
# 659
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 660
} 
# 662
template< class T> static inline cudaError_t 
# 663
cudaMallocAsync(T **
# 664
ptr, ::size_t 
# 665
size, cudaStream_t 
# 666
stream) 
# 668
{ 
# 669
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 670
} 
# 672
template< class T> static inline cudaError_t 
# 673
cudaMallocFromPoolAsync(T **
# 674
ptr, ::size_t 
# 675
size, cudaMemPool_t 
# 676
memPool, cudaStream_t 
# 677
stream) 
# 679
{ 
# 680
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 681
} 
# 720 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 721
cudaMemcpyToSymbol(const T &
# 722
symbol, const void *
# 723
src, ::size_t 
# 724
count, ::size_t 
# 725
offset = 0, cudaMemcpyKind 
# 726
kind = cudaMemcpyHostToDevice) 
# 728
{ 
# 729
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 730
} 
# 774 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 775
cudaMemcpyToSymbolAsync(const T &
# 776
symbol, const void *
# 777
src, ::size_t 
# 778
count, ::size_t 
# 779
offset = 0, cudaMemcpyKind 
# 780
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 781
stream = 0) 
# 783
{ 
# 784
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 785
} 
# 822 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 823
cudaMemcpyFromSymbol(void *
# 824
dst, const T &
# 825
symbol, ::size_t 
# 826
count, ::size_t 
# 827
offset = 0, cudaMemcpyKind 
# 828
kind = cudaMemcpyDeviceToHost) 
# 830
{ 
# 831
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 832
} 
# 876 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 877
cudaMemcpyFromSymbolAsync(void *
# 878
dst, const T &
# 879
symbol, ::size_t 
# 880
count, ::size_t 
# 881
offset = 0, cudaMemcpyKind 
# 882
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 883
stream = 0) 
# 885
{ 
# 886
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 887
} 
# 945 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 946
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 947
pGraphNode, cudaGraph_t 
# 948
graph, const cudaGraphNode_t *
# 949
pDependencies, ::size_t 
# 950
numDependencies, const T &
# 951
symbol, const void *
# 952
src, ::size_t 
# 953
count, ::size_t 
# 954
offset, cudaMemcpyKind 
# 955
kind) 
# 956
{ 
# 957
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 958
} 
# 1016 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1017
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1018
pGraphNode, cudaGraph_t 
# 1019
graph, const cudaGraphNode_t *
# 1020
pDependencies, ::size_t 
# 1021
numDependencies, void *
# 1022
dst, const T &
# 1023
symbol, ::size_t 
# 1024
count, ::size_t 
# 1025
offset, cudaMemcpyKind 
# 1026
kind) 
# 1027
{ 
# 1028
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1029
} 
# 1067 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1068
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1069
node, const T &
# 1070
symbol, const void *
# 1071
src, ::size_t 
# 1072
count, ::size_t 
# 1073
offset, cudaMemcpyKind 
# 1074
kind) 
# 1075
{ 
# 1076
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1077
} 
# 1115 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1116
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1117
node, void *
# 1118
dst, const T &
# 1119
symbol, ::size_t 
# 1120
count, ::size_t 
# 1121
offset, cudaMemcpyKind 
# 1122
kind) 
# 1123
{ 
# 1124
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1125
} 
# 1173 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1174
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1175
hGraphExec, cudaGraphNode_t 
# 1176
node, const T &
# 1177
symbol, const void *
# 1178
src, ::size_t 
# 1179
count, ::size_t 
# 1180
offset, cudaMemcpyKind 
# 1181
kind) 
# 1182
{ 
# 1183
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1184
} 
# 1232 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1233
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1234
hGraphExec, cudaGraphNode_t 
# 1235
node, void *
# 1236
dst, const T &
# 1237
symbol, ::size_t 
# 1238
count, ::size_t 
# 1239
offset, cudaMemcpyKind 
# 1240
kind) 
# 1241
{ 
# 1242
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1243
} 
# 1271 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1272
cudaUserObjectCreate(cudaUserObject_t *
# 1273
object_out, T *
# 1274
objectToWrap, unsigned 
# 1275
initialRefcount, unsigned 
# 1276
flags) 
# 1277
{ 
# 1278
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1281
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1284
} 
# 1286
template< class T> static inline cudaError_t 
# 1287
cudaUserObjectCreate(cudaUserObject_t *
# 1288
object_out, T *
# 1289
objectToWrap, unsigned 
# 1290
initialRefcount, cudaUserObjectFlags 
# 1291
flags) 
# 1292
{ 
# 1293
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1294
} 
# 1321 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1322
cudaGetSymbolAddress(void **
# 1323
devPtr, const T &
# 1324
symbol) 
# 1326
{ 
# 1327
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1328
} 
# 1353 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1354
cudaGetSymbolSize(::size_t *
# 1355
size, const T &
# 1356
symbol) 
# 1358
{ 
# 1359
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1360
} 
# 1397 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1398
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(::size_t *
# 1399
offset, const texture< T, dim, readMode>  &
# 1400
tex, const void *
# 1401
devPtr, const cudaChannelFormatDesc &
# 1402
desc, ::size_t 
# 1403
size = ((2147483647) * 2U) + 1U) 
# 1405 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
{ 
# 1406
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 1407
} 
# 1443 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1444
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(::size_t *
# 1445
offset, const texture< T, dim, readMode>  &
# 1446
tex, const void *
# 1447
devPtr, ::size_t 
# 1448
size = ((2147483647) * 2U) + 1U) 
# 1450 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
{ 
# 1451
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 1452
} 
# 1500 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1501
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(::size_t *
# 1502
offset, const texture< T, dim, readMode>  &
# 1503
tex, const void *
# 1504
devPtr, const cudaChannelFormatDesc &
# 1505
desc, ::size_t 
# 1506
width, ::size_t 
# 1507
height, ::size_t 
# 1508
pitch) 
# 1510
{ 
# 1511
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 1512
} 
# 1559 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1560
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(::size_t *
# 1561
offset, const texture< T, dim, readMode>  &
# 1562
tex, const void *
# 1563
devPtr, ::size_t 
# 1564
width, ::size_t 
# 1565
height, ::size_t 
# 1566
pitch) 
# 1568
{ 
# 1569
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1570
} 
# 1602 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1603
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1604
tex, cudaArray_const_t 
# 1605
array, const cudaChannelFormatDesc &
# 1606
desc) 
# 1608
{ 
# 1609
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1610
} 
# 1641 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1642
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1643
tex, cudaArray_const_t 
# 1644
array) 
# 1646
{ 
# 1647
cudaChannelFormatDesc desc; 
# 1648
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1650
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1651
} 
# 1683 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1684
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1685
tex, cudaMipmappedArray_const_t 
# 1686
mipmappedArray, const cudaChannelFormatDesc &
# 1687
desc) 
# 1689
{ 
# 1690
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1691
} 
# 1722 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1723
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1724
tex, cudaMipmappedArray_const_t 
# 1725
mipmappedArray) 
# 1727
{ 
# 1728
cudaChannelFormatDesc desc; 
# 1729
cudaArray_t levelArray; 
# 1730
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1732
if (err != (cudaSuccess)) { 
# 1733
return err; 
# 1734
}  
# 1735
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1737
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1738
} 
# 1765 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1766
__attribute((deprecated)) static inline cudaError_t cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1767
tex) 
# 1769
{ 
# 1770
return ::cudaUnbindTexture(&tex); 
# 1771
} 
# 1801 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1802
__attribute((deprecated)) static inline cudaError_t cudaGetTextureAlignmentOffset(::size_t *
# 1803
offset, const texture< T, dim, readMode>  &
# 1804
tex) 
# 1806
{ 
# 1807
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1808
} 
# 1853 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1854
cudaFuncSetCacheConfig(T *
# 1855
func, cudaFuncCache 
# 1856
cacheConfig) 
# 1858
{ 
# 1859
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1860
} 
# 1862
template< class T> static inline cudaError_t 
# 1863
cudaFuncSetSharedMemConfig(T *
# 1864
func, cudaSharedMemConfig 
# 1865
config) 
# 1867
{ 
# 1868
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1869
} 
# 1901 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1902
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1903
numBlocks, T 
# 1904
func, int 
# 1905
blockSize, ::size_t 
# 1906
dynamicSMemSize) 
# 1907
{ 
# 1908
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1909
} 
# 1953 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1954
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1955
numBlocks, T 
# 1956
func, int 
# 1957
blockSize, ::size_t 
# 1958
dynamicSMemSize, unsigned 
# 1959
flags) 
# 1960
{ 
# 1961
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1962
} 
# 1967
class __cudaOccupancyB2DHelper { 
# 1968
::size_t n; 
# 1970
public: __cudaOccupancyB2DHelper(::size_t n_) : n(n_) { } 
# 1971
::size_t operator()(int) 
# 1972
{ 
# 1973
return n; 
# 1974
} 
# 1975
}; 
# 2023 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2024
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 2025
minGridSize, int *
# 2026
blockSize, T 
# 2027
func, UnaryFunction 
# 2028
blockSizeToDynamicSMemSize, int 
# 2029
blockSizeLimit = 0, unsigned 
# 2030
flags = 0) 
# 2031
{ 
# 2032
cudaError_t status; 
# 2035
int device; 
# 2036
cudaFuncAttributes attr; 
# 2039
int maxThreadsPerMultiProcessor; 
# 2040
int warpSize; 
# 2041
int devMaxThreadsPerBlock; 
# 2042
int multiProcessorCount; 
# 2043
int funcMaxThreadsPerBlock; 
# 2044
int occupancyLimit; 
# 2045
int granularity; 
# 2048
int maxBlockSize = 0; 
# 2049
int numBlocks = 0; 
# 2050
int maxOccupancy = 0; 
# 2053
int blockSizeToTryAligned; 
# 2054
int blockSizeToTry; 
# 2055
int blockSizeLimitAligned; 
# 2056
int occupancyInBlocks; 
# 2057
int occupancyInThreads; 
# 2058
::size_t dynamicSMemSize; 
# 2064
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 2065
return cudaErrorInvalidValue; 
# 2066
}  
# 2072
status = ::cudaGetDevice(&device); 
# 2073
if (status != (cudaSuccess)) { 
# 2074
return status; 
# 2075
}  
# 2077
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 2081
if (status != (cudaSuccess)) { 
# 2082
return status; 
# 2083
}  
# 2085
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 2089
if (status != (cudaSuccess)) { 
# 2090
return status; 
# 2091
}  
# 2093
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 2097
if (status != (cudaSuccess)) { 
# 2098
return status; 
# 2099
}  
# 2101
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 2105
if (status != (cudaSuccess)) { 
# 2106
return status; 
# 2107
}  
# 2109
status = cudaFuncGetAttributes(&attr, func); 
# 2110
if (status != (cudaSuccess)) { 
# 2111
return status; 
# 2112
}  
# 2114
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 2120
occupancyLimit = maxThreadsPerMultiProcessor; 
# 2121
granularity = warpSize; 
# 2123
if (blockSizeLimit == 0) { 
# 2124
blockSizeLimit = devMaxThreadsPerBlock; 
# 2125
}  
# 2127
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 2128
blockSizeLimit = devMaxThreadsPerBlock; 
# 2129
}  
# 2131
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 2132
blockSizeLimit = funcMaxThreadsPerBlock; 
# 2133
}  
# 2135
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 2137
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 2141
if (blockSizeLimit < blockSizeToTryAligned) { 
# 2142
blockSizeToTry = blockSizeLimit; 
# 2143
} else { 
# 2144
blockSizeToTry = blockSizeToTryAligned; 
# 2145
}  
# 2147
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 2149
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 2156
if (status != (cudaSuccess)) { 
# 2157
return status; 
# 2158
}  
# 2160
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 2162
if (occupancyInThreads > maxOccupancy) { 
# 2163
maxBlockSize = blockSizeToTry; 
# 2164
numBlocks = occupancyInBlocks; 
# 2165
maxOccupancy = occupancyInThreads; 
# 2166
}  
# 2170
if (occupancyLimit == maxOccupancy) { 
# 2171
break; 
# 2172
}  
# 2173
}  
# 2181
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 2182
(*blockSize) = maxBlockSize; 
# 2184
return status; 
# 2185
} 
# 2219 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2220
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 2221
minGridSize, int *
# 2222
blockSize, T 
# 2223
func, UnaryFunction 
# 2224
blockSizeToDynamicSMemSize, int 
# 2225
blockSizeLimit = 0) 
# 2226
{ 
# 2227
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 2228
} 
# 2265 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2266
cudaOccupancyMaxPotentialBlockSize(int *
# 2267
minGridSize, int *
# 2268
blockSize, T 
# 2269
func, ::size_t 
# 2270
dynamicSMemSize = 0, int 
# 2271
blockSizeLimit = 0) 
# 2272
{ 
# 2273
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 2274
} 
# 2303 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2304
cudaOccupancyAvailableDynamicSMemPerBlock(::size_t *
# 2305
dynamicSmemSize, T 
# 2306
func, int 
# 2307
numBlocks, int 
# 2308
blockSize) 
# 2309
{ 
# 2310
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2311
} 
# 2362 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2363
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2364
minGridSize, int *
# 2365
blockSize, T 
# 2366
func, ::size_t 
# 2367
dynamicSMemSize = 0, int 
# 2368
blockSizeLimit = 0, unsigned 
# 2369
flags = 0) 
# 2370
{ 
# 2371
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2372
} 
# 2405 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2406
cudaFuncGetAttributes(cudaFuncAttributes *
# 2407
attr, T *
# 2408
entry) 
# 2410
{ 
# 2411
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2412
} 
# 2450 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2451
cudaFuncSetAttribute(T *
# 2452
entry, cudaFuncAttribute 
# 2453
attr, int 
# 2454
value) 
# 2456
{ 
# 2457
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2458
} 
# 2482 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim> 
# 2483
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2484
surf, cudaArray_const_t 
# 2485
array, const cudaChannelFormatDesc &
# 2486
desc) 
# 2488
{ 
# 2489
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 2490
} 
# 2513 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
template< class T, int dim> 
# 2514
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2515
surf, cudaArray_const_t 
# 2516
array) 
# 2518
{ 
# 2519
cudaChannelFormatDesc desc; 
# 2520
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 2522
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 2523
} 
# 2534 "/home/poweruser/junda.feng/anaconda3/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 66 "/usr/include/assert.h" 3
extern "C" {
# 69
extern void __assert_fail(const char * __assertion, const char * __file, unsigned __line, const char * __function) throw()
# 71
 __attribute((__noreturn__)); 
# 74
extern void __assert_perror_fail(int __errnum, const char * __file, unsigned __line, const char * __function) throw()
# 76
 __attribute((__noreturn__)); 
# 81
extern void __assert(const char * __assertion, const char * __file, int __line) throw()
# 82
 __attribute((__noreturn__)); 
# 85
}
# 43 "/usr/include/c++/7/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/7/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/7/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/7/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/7/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/7/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/7/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 163 "/usr/include/c++/7/bits/locale_classes.h" 3
explicit locale(const __cxx11::string &__s) : locale(__s.c_str()) { } 
# 177 "/usr/include/c++/7/bits/locale_classes.h" 3
locale(const locale &__base, const __cxx11::string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192 "/usr/include/c++/7/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 205 "/usr/include/c++/7/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220 "/usr/include/c++/7/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 234 "/usr/include/c++/7/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 245
name() const; 
# 255 "/usr/include/c++/7/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 264
bool operator!=(const locale &__other) const throw() 
# 265
{ return !this->operator==(__other); } 
# 282 "/usr/include/c++/7/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 299 "/usr/include/c++/7/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 305
static const locale &classic(); 
# 309
private: _Impl *_M_impl; 
# 312
static _Impl *_S_classic; 
# 315
static _Impl *_S_global; 
# 321
static const char *const *const _S_categories; 
# 333 "/usr/include/c++/7/bits/locale_classes.h" 3
enum { _S_categories_size = (6 + 6)}; 
# 336
static __gthread_once_t _S_once; 
# 340
explicit locale(_Impl *) throw(); 
# 343
static void _S_initialize(); 
# 346
static void _S_initialize_once() throw(); 
# 349
static category _S_normalize_category(category); 
# 352
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 355
static const id *const _S_twinned_facets[]; 
# 357
}; 
# 371 "/usr/include/c++/7/bits/locale_classes.h" 3
class locale::facet { 
# 374
friend class locale; 
# 375
friend class _Impl; 
# 377
mutable _Atomic_word _M_refcount; 
# 380
static __c_locale _S_c_locale; 
# 383
static const char _S_c_name[2]; 
# 386
static __gthread_once_t _S_once; 
# 390
static void _S_initialize_once(); 
# 403 "/usr/include/c++/7/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 404
{ } 
# 408
virtual ~facet(); 
# 411
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 415
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 418
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 421
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 426
static __c_locale _S_get_c_locale(); 
# 428
__attribute((const)) static const char *
# 429
_S_get_c_name() throw(); 
# 438 "/usr/include/c++/7/bits/locale_classes.h" 3
facet(const facet &) = delete;
# 441
facet &operator=(const facet &) = delete;
# 446
private: void _M_add_reference() const throw() 
# 447
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 450
void _M_remove_reference() const throw() 
# 451
{ 
# 453
; 
# 454
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 455
{ 
# 456
; 
# 457
try 
# 458
{ delete this; } 
# 459
catch (...) 
# 460
{ }  
# 461
}  
# 462
} 
# 464
const facet *_M_sso_shim(const id *) const; 
# 465
const facet *_M_cow_shim(const id *) const; 
# 468
protected: class __shim; 
# 469
}; 
# 483 "/usr/include/c++/7/bits/locale_classes.h" 3
class locale::id { 
# 486
friend class locale; 
# 487
friend class _Impl; 
# 489
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 493
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 500
mutable size_t _M_index; 
# 503
static _Atomic_word _S_refcount; 
# 506
void operator=(const id &); 
# 508
id(const id &); 
# 514
public: id() { } 
# 517
size_t _M_id() const throw(); 
# 518
}; 
# 522
class locale::_Impl { 
# 526
friend class locale; 
# 527
friend class facet; 
# 529
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 533
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 537
template< class _Cache> friend struct __use_cache; 
# 542
_Atomic_word _M_refcount; 
# 543
const facet **_M_facets; 
# 544
size_t _M_facets_size; 
# 545
const facet **_M_caches; 
# 546
char **_M_names; 
# 547
static const id *const _S_id_ctype[]; 
# 548
static const id *const _S_id_numeric[]; 
# 549
static const id *const _S_id_collate[]; 
# 550
static const id *const _S_id_time[]; 
# 551
static const id *const _S_id_monetary[]; 
# 552
static const id *const _S_id_messages[]; 
# 553
static const id *const *const _S_facet_categories[]; 
# 556
void _M_add_reference() throw() 
# 557
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 560
void _M_remove_reference() throw() 
# 561
{ 
# 563
; 
# 564
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 565
{ 
# 566
; 
# 567
try 
# 568
{ delete this; } 
# 569
catch (...) 
# 570
{ }  
# 571
}  
# 572
} 
# 574
_Impl(const _Impl &, size_t); 
# 575
_Impl(const char *, size_t); 
# 576
_Impl(size_t) throw(); 
# 578
~_Impl() throw(); 
# 580
_Impl(const _Impl &); 
# 583
void operator=(const _Impl &); 
# 586
bool _M_check_same_name() 
# 587
{ 
# 588
bool __ret = true; 
# 589
if ((_M_names)[1]) { 
# 591
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 592
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 593
return __ret; 
# 594
} 
# 597
void _M_replace_categories(const _Impl *, category); 
# 600
void _M_replace_category(const _Impl *, const id *const *); 
# 603
void _M_replace_facet(const _Impl *, const id *); 
# 606
void _M_install_facet(const id *, const facet *); 
# 608
template< class _Facet> void 
# 610
_M_init_facet(_Facet *__facet) 
# 611
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 613
template< class _Facet> void 
# 615
_M_init_facet_unchecked(_Facet *__facet) 
# 616
{ 
# 617
__facet->_M_add_reference(); 
# 618
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 619
} 
# 622
void _M_install_cache(const facet *, size_t); 
# 624
void _M_init_extra(facet **); 
# 625
void _M_init_extra(void *, void *, const char *, const char *); 
# 626
}; 
# 641 "/usr/include/c++/7/bits/locale_classes.h" 3
template< class _CharT> 
# 642
class __cxx11::collate : public locale::facet { 
# 648
public: typedef _CharT char_type; 
# 649
typedef basic_string< _CharT>  string_type; 
# 655
protected: __c_locale _M_c_locale_collate; 
# 659
public: static locale::id id; 
# 669 "/usr/include/c++/7/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 671
{ } 
# 683 "/usr/include/c++/7/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 685
{ } 
# 700 "/usr/include/c++/7/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 701
__lo2, const _CharT *__hi2) const 
# 702
{ return do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 719 "/usr/include/c++/7/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 720
{ return do_transform(__lo, __hi); } 
# 733 "/usr/include/c++/7/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 734
{ return do_hash(__lo, __hi); } 
# 738
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 741
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 746
protected: virtual ~collate() 
# 747
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 762 "/usr/include/c++/7/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 776 "/usr/include/c++/7/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 789 "/usr/include/c++/7/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 790
}; 
# 792
template< class _CharT> locale::id 
# 793
__cxx11::collate< _CharT> ::id; 
# 798
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 802
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 807
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 811
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 815
template< class _CharT> 
# 816
class __cxx11::collate_byname : public collate< _CharT>  { 
# 821
public: typedef _CharT char_type; 
# 822
typedef basic_string< _CharT>  string_type; 
# 826
explicit collate_byname(const char *__s, std::size_t __refs = 0) : collate< _CharT> (__refs) 
# 828
{ 
# 829
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 831
{ 
# 832
this->_S_destroy_c_locale((this->_M_c_locale_collate)); 
# 833
this->_S_create_c_locale((this->_M_c_locale_collate), __s); 
# 834
}  
# 835
} 
# 839
explicit collate_byname(const __cxx11::string &__s, std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 840
{ } 
# 845
protected: virtual ~collate_byname() { } 
# 846
}; 
# 849
}
# 39 "/usr/include/c++/7/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0); 
# 88
} 
# 102 "/usr/include/c++/7/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return ((__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i]))); 
# 114
} 
# 130 "/usr/include/c++/7/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = __one.c_str(); 
# 170
const _CharT *__pend = __one.data() + __one.length(); 
# 171
const _CharT *__q = __two.c_str(); 
# 172
const _CharT *__qend = __two.data() + __two.length(); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = __str.c_str(); 
# 208
const _CharT *__pend = __str.data() + __str.length(); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
__ret.append(__c, __res); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
__ret.push_back(_CharT()); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 172
wrong_protocol_type = 91
# 173
}; 
# 176
}
# 43 "/usr/include/c++/7/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
struct error_code; 
# 48
struct error_condition; 
# 49
class system_error; 
# 52
template< class _Tp> 
# 53
struct is_error_code_enum : public false_type { }; 
# 56
template< class _Tp> 
# 57
struct is_error_condition_enum : public false_type { }; 
# 60
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 61
}; 
# 71 "/usr/include/c++/7/system_error" 3
inline namespace _V2 { 
# 74
class error_category { 
# 77
public: constexpr error_category() noexcept = default;
# 79
virtual ~error_category(); 
# 81
error_category(const error_category &) = delete;
# 82
error_category &operator=(const error_category &) = delete;
# 85
virtual const char *name() const noexcept = 0; 
# 95
private: 
# 93
__attribute((__abi_tag__("cxx11"))) virtual __cow_string 
# 95
_M_message(int) const; 
# 100
public: 
# 98
__attribute((__abi_tag__("cxx11"))) virtual __cxx11::string 
# 100
message(int) const = 0; 
# 112 "/usr/include/c++/7/system_error" 3
virtual error_condition default_error_condition(int __i) const noexcept; 
# 115
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 118
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 121
bool operator<(const error_category &__other) const noexcept 
# 122
{ return less< const error_category *> ()(this, &__other); } 
# 125
bool operator==(const error_category &__other) const noexcept 
# 126
{ return this == (&__other); } 
# 129
bool operator!=(const error_category &__other) const noexcept 
# 130
{ return this != (&__other); } 
# 131
}; 
# 134
__attribute((const)) const error_category &system_category() noexcept; 
# 135
__attribute((const)) const error_category &generic_category() noexcept; 
# 137
}
# 139
inline error_code make_error_code(errc) noexcept; 
# 141
template< class _Tp> struct hash; 
# 146
struct error_code { 
# 148
error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 149
{ } 
# 151
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 152
{ } 
# 154
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 156
error_code(_ErrorCodeEnum __e) noexcept 
# 157
{ (*this) = make_error_code(__e); } 
# 160
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 161
{ 
# 162
(_M_value) = __v; 
# 163
(_M_cat) = (&__cat); 
# 164
} 
# 167
void clear() noexcept 
# 168
{ this->assign(0, system_category()); } 
# 171
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 174
operator=(_ErrorCodeEnum __e) noexcept 
# 175
{ return (*this) = make_error_code(__e); } 
# 178
int value() const noexcept { return _M_value; } 
# 181
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 184
error_condition default_error_condition() const noexcept; 
# 186
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 188
message() const 
# 189
{ return this->category().message(this->value()); } 
# 191
explicit operator bool() const noexcept 
# 192
{ return (_M_value) != 0; } 
# 196
friend struct hash< error_code> ; 
# 198
private: int _M_value; 
# 199
const _V2::error_category *_M_cat; 
# 200
}; 
# 204
inline error_code make_error_code(errc __e) noexcept 
# 205
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 208
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 209
{ 
# 210
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 213
} 
# 215
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 217
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 218
{ return (((__os << __e.category().name()) << ':') << __e.value()); } 
# 220
inline error_condition make_error_condition(errc) noexcept; 
# 224
struct error_condition { 
# 226
error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 227
{ } 
# 229
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 230
{ } 
# 232
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 234
error_condition(_ErrorConditionEnum __e) noexcept 
# 235
{ (*this) = make_error_condition(__e); } 
# 238
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 239
{ 
# 240
(_M_value) = __v; 
# 241
(_M_cat) = (&__cat); 
# 242
} 
# 245
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 248
operator=(_ErrorConditionEnum __e) noexcept 
# 249
{ return (*this) = make_error_condition(__e); } 
# 252
void clear() noexcept 
# 253
{ this->assign(0, generic_category()); } 
# 257
int value() const noexcept { return _M_value; } 
# 260
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 262
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 264
message() const 
# 265
{ return this->category().message(this->value()); } 
# 267
explicit operator bool() const noexcept 
# 268
{ return (_M_value) != 0; } 
# 272
private: int _M_value; 
# 273
const _V2::error_category *_M_cat; 
# 274
}; 
# 278
inline error_condition make_error_condition(errc __e) noexcept 
# 279
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 282
inline bool operator<(const error_condition &__lhs, const error_condition &
# 283
__rhs) noexcept 
# 284
{ 
# 285
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 288
} 
# 292
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 293
{ return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 294
} 
# 297
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 298
{ 
# 299
return (__lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value())); 
# 301
} 
# 304
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 305
{ 
# 306
return (__rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value())); 
# 308
} 
# 311
inline bool operator==(const error_condition &__lhs, const error_condition &
# 312
__rhs) noexcept 
# 313
{ 
# 314
return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 316
} 
# 319
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 320
{ return !(__lhs == __rhs); } 
# 323
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 324
{ return !(__lhs == __rhs); } 
# 327
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 328
{ return !(__lhs == __rhs); } 
# 331
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 332
__rhs) noexcept 
# 333
{ return !(__lhs == __rhs); } 
# 341
class system_error : public runtime_error { 
# 344
error_code _M_code; 
# 347
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 348
{ } 
# 350
system_error(error_code __ec, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 351
{ } 
# 353
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 354
{ } 
# 356
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 357
{ } 
# 359
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 361
{ } 
# 363
system_error(int __v, const _V2::error_category &__ecat, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 365
{ } 
# 367
virtual ~system_error() noexcept; 
# 370
const error_code &code() const noexcept { return _M_code; } 
# 371
}; 
# 374
}
# 378
namespace std __attribute((__visibility__("default"))) { 
# 386
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 390
size_t operator()(const error_code &__e) const noexcept 
# 391
{ 
# 392
const size_t __tmp = std::_Hash_impl::hash(__e._M_value); 
# 393
return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp); 
# 394
} 
# 395
}; 
# 415 "/usr/include/c++/7/system_error" 3
}
# 49 "/usr/include/c++/7/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = (1L << 0), 
# 60
_S_dec, 
# 61
_S_fixed = (1L << 2), 
# 62
_S_hex = (1L << 3), 
# 63
_S_internal = (1L << 4), 
# 64
_S_left = (1L << 5), 
# 65
_S_oct = (1L << 6), 
# 66
_S_right = (1L << 7), 
# 67
_S_scientific = (1L << 8), 
# 68
_S_showbase = (1L << 9), 
# 69
_S_showpoint = (1L << 10), 
# 70
_S_showpos = (1L << 11), 
# 71
_S_skipws = (1L << 12), 
# 72
_S_unitbuf = (1L << 13), 
# 73
_S_uppercase = (1L << 14), 
# 74
_S_adjustfield = ((_S_left | _S_right) | _S_internal), 
# 75
_S_basefield = ((_S_dec | _S_oct) | _S_hex), 
# 76
_S_floatfield = (_S_scientific | _S_fixed), 
# 77
_S_ios_fmtflags_end = (1L << 16), 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (~2147483647)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = (__a | __b); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = (__a & __b); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = (__a ^ __b); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = (1L << 0), 
# 114
_S_ate, 
# 115
_S_bin = (1L << 2), 
# 116
_S_in = (1L << 3), 
# 117
_S_out = (1L << 4), 
# 118
_S_trunc = (1L << 5), 
# 119
_S_ios_openmode_end = (1L << 16), 
# 120
_S_ios_openmode_max = 2147483647, 
# 121
_S_ios_openmode_min = (~2147483647)
# 122
}; 
# 125
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 126
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 129
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 130
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 133
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 134
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 137
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 138
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 141
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 142
{ return __a = (__a | __b); } 
# 145
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 146
{ return __a = (__a & __b); } 
# 149
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 150
{ return __a = (__a ^ __b); } 
# 153
enum _Ios_Iostate { 
# 155
_S_goodbit, 
# 156
_S_badbit, 
# 157
_S_eofbit, 
# 158
_S_failbit = (1L << 2), 
# 159
_S_ios_iostate_end = (1L << 16), 
# 160
_S_ios_iostate_max = 2147483647, 
# 161
_S_ios_iostate_min = (~2147483647)
# 162
}; 
# 165
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 166
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 169
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 170
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 173
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 174
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 177
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 178
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 181
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 182
{ return __a = (__a | __b); } 
# 185
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 186
{ return __a = (__a & __b); } 
# 189
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 190
{ return __a = (__a ^ __b); } 
# 193
enum _Ios_Seekdir { 
# 195
_S_beg, 
# 196
_S_cur, 
# 197
_S_end, 
# 198
_S_ios_seekdir_end = (1L << 16)
# 199
}; 
# 203
enum class io_errc { stream = 1}; 
# 205
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 207
const _V2::error_category &iostream_category() noexcept; 
# 210
inline error_code make_error_code(io_errc __e) noexcept 
# 211
{ return error_code(static_cast< int>(__e), iostream_category()); } 
# 214
inline error_condition make_error_condition(io_errc __e) noexcept 
# 215
{ return error_condition(static_cast< int>(__e), iostream_category()); } 
# 228 "/usr/include/c++/7/bits/ios_base.h" 3
class ios_base { 
# 255 "/usr/include/c++/7/bits/ios_base.h" 3
public: class __attribute((__abi_tag__("cxx11"))) failure : public system_error { 
# 259
public: explicit failure(const __cxx11::string & __str); 
# 263
explicit failure(const __cxx11::string &, const error_code &); 
# 266
explicit failure(const char *, const error_code & = io_errc::stream); 
# 270
virtual ~failure() throw(); 
# 273
virtual const char *what() const throw(); 
# 274
}; 
# 323 "/usr/include/c++/7/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 326
static const fmtflags boolalpha = _S_boolalpha; 
# 329
static const fmtflags dec = _S_dec; 
# 332
static const fmtflags fixed = _S_fixed; 
# 335
static const fmtflags hex = _S_hex; 
# 340
static const fmtflags internal = _S_internal; 
# 344
static const fmtflags left = _S_left; 
# 347
static const fmtflags oct = _S_oct; 
# 351
static const fmtflags right = _S_right; 
# 354
static const fmtflags scientific = _S_scientific; 
# 358
static const fmtflags showbase = _S_showbase; 
# 362
static const fmtflags showpoint = _S_showpoint; 
# 365
static const fmtflags showpos = _S_showpos; 
# 368
static const fmtflags skipws = _S_skipws; 
# 371
static const fmtflags unitbuf = _S_unitbuf; 
# 375
static const fmtflags uppercase = _S_uppercase; 
# 378
static const fmtflags adjustfield = _S_adjustfield; 
# 381
static const fmtflags basefield = _S_basefield; 
# 384
static const fmtflags floatfield = _S_floatfield; 
# 398 "/usr/include/c++/7/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 402
static const iostate badbit = _S_badbit; 
# 405
static const iostate eofbit = _S_eofbit; 
# 410
static const iostate failbit = _S_failbit; 
# 413
static const iostate goodbit = _S_goodbit; 
# 429 "/usr/include/c++/7/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 432
static const openmode app = _S_app; 
# 435
static const openmode ate = _S_ate; 
# 440
static const openmode binary = _S_bin; 
# 443
static const openmode in = _S_in; 
# 446
static const openmode out = _S_out; 
# 449
static const openmode trunc = _S_trunc; 
# 461 "/usr/include/c++/7/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 464
static const seekdir beg = _S_beg; 
# 467
static const seekdir cur = _S_cur; 
# 470
static const seekdir end = _S_end; 
# 473
typedef int io_state; 
# 474
typedef int open_mode; 
# 475
typedef int seek_dir; 
# 477
typedef std::streampos streampos; 
# 478
typedef std::streamoff streamoff; 
# 487 "/usr/include/c++/7/bits/ios_base.h" 3
enum event { 
# 489
erase_event, 
# 490
imbue_event, 
# 491
copyfmt_event
# 492
}; 
# 504 "/usr/include/c++/7/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 517 "/usr/include/c++/7/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 520
protected: streamsize _M_precision; 
# 521
streamsize _M_width; 
# 522
fmtflags _M_flags; 
# 523
iostate _M_exception; 
# 524
iostate _M_streambuf_state; 
# 528
struct _Callback_list { 
# 531
_Callback_list *_M_next; 
# 532
event_callback _M_fn; 
# 533
int _M_index; 
# 534
_Atomic_word _M_refcount; 
# 536
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 537
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 538
{ } 
# 541
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 545
int _M_remove_reference() 
# 546
{ 
# 548
; 
# 549
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 550
if (__res == 0) 
# 551
{ 
# 552
; 
# 553
}  
# 554
return __res; 
# 555
} 
# 556
}; 
# 558
_Callback_list *_M_callbacks; 
# 561
void _M_call_callbacks(event __ev) throw(); 
# 564
void _M_dispose_callbacks() throw(); 
# 567
struct _Words { 
# 569
void *_M_pword; 
# 570
long _M_iword; 
# 571
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 572
}; 
# 575
_Words _M_word_zero; 
# 579
enum { _S_local_word_size = 8}; 
# 580
_Words _M_local_word[_S_local_word_size]; 
# 583
int _M_word_size; 
# 584
_Words *_M_word; 
# 587
_Words &_M_grow_words(int __index, bool __iword); 
# 590
locale _M_ios_locale; 
# 593
void _M_init() throw(); 
# 601
public: class Init { 
# 603
friend class ios_base; 
# 605
public: Init(); 
# 606
~Init(); 
# 609
private: static _Atomic_word _S_refcount; 
# 610
static bool _S_synced_with_stdio; 
# 611
}; 
# 619
fmtflags flags() const 
# 620
{ return _M_flags; } 
# 630 "/usr/include/c++/7/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 631
{ 
# 632
fmtflags __old = _M_flags; 
# 633
(_M_flags) = __fmtfl; 
# 634
return __old; 
# 635
} 
# 646 "/usr/include/c++/7/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 647
{ 
# 648
fmtflags __old = _M_flags; 
# 649
((_M_flags) |= __fmtfl); 
# 650
return __old; 
# 651
} 
# 663 "/usr/include/c++/7/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 664
{ 
# 665
fmtflags __old = _M_flags; 
# 666
((_M_flags) &= ((~__mask))); 
# 667
((_M_flags) |= ((__fmtfl & __mask))); 
# 668
return __old; 
# 669
} 
# 678
void unsetf(fmtflags __mask) 
# 679
{ ((_M_flags) &= ((~__mask))); } 
# 689 "/usr/include/c++/7/bits/ios_base.h" 3
streamsize precision() const 
# 690
{ return _M_precision; } 
# 698
streamsize precision(streamsize __prec) 
# 699
{ 
# 700
streamsize __old = _M_precision; 
# 701
(_M_precision) = __prec; 
# 702
return __old; 
# 703
} 
# 712
streamsize width() const 
# 713
{ return _M_width; } 
# 721
streamsize width(streamsize __wide) 
# 722
{ 
# 723
streamsize __old = _M_width; 
# 724
(_M_width) = __wide; 
# 725
return __old; 
# 726
} 
# 740 "/usr/include/c++/7/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 752 "/usr/include/c++/7/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 763 "/usr/include/c++/7/bits/ios_base.h" 3
locale getloc() const 
# 764
{ return _M_ios_locale; } 
# 774 "/usr/include/c++/7/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 775
{ return _M_ios_locale; } 
# 793 "/usr/include/c++/7/bits/ios_base.h" 3
static int xalloc() throw(); 
# 809 "/usr/include/c++/7/bits/ios_base.h" 3
long &iword(int __ix) 
# 810
{ 
# 811
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 813
return __word._M_iword; 
# 814
} 
# 830 "/usr/include/c++/7/bits/ios_base.h" 3
void *&pword(int __ix) 
# 831
{ 
# 832
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 834
return __word._M_pword; 
# 835
} 
# 846 "/usr/include/c++/7/bits/ios_base.h" 3
virtual ~ios_base(); 
# 849
protected: ios_base() throw(); 
# 861 "/usr/include/c++/7/bits/ios_base.h" 3
public: ios_base(const ios_base &) = delete;
# 864
ios_base &operator=(const ios_base &) = delete;
# 868
protected: void _M_move(ios_base &) noexcept; 
# 871
void _M_swap(ios_base & __rhs) noexcept; 
# 873
}; 
# 878
inline ios_base &boolalpha(ios_base &__base) 
# 879
{ 
# 880
__base.setf(ios_base::boolalpha); 
# 881
return __base; 
# 882
} 
# 886
inline ios_base &noboolalpha(ios_base &__base) 
# 887
{ 
# 888
__base.unsetf(ios_base::boolalpha); 
# 889
return __base; 
# 890
} 
# 894
inline ios_base &showbase(ios_base &__base) 
# 895
{ 
# 896
__base.setf(ios_base::showbase); 
# 897
return __base; 
# 898
} 
# 902
inline ios_base &noshowbase(ios_base &__base) 
# 903
{ 
# 904
__base.unsetf(ios_base::showbase); 
# 905
return __base; 
# 906
} 
# 910
inline ios_base &showpoint(ios_base &__base) 
# 911
{ 
# 912
__base.setf(ios_base::showpoint); 
# 913
return __base; 
# 914
} 
# 918
inline ios_base &noshowpoint(ios_base &__base) 
# 919
{ 
# 920
__base.unsetf(ios_base::showpoint); 
# 921
return __base; 
# 922
} 
# 926
inline ios_base &showpos(ios_base &__base) 
# 927
{ 
# 928
__base.setf(ios_base::showpos); 
# 929
return __base; 
# 930
} 
# 934
inline ios_base &noshowpos(ios_base &__base) 
# 935
{ 
# 936
__base.unsetf(ios_base::showpos); 
# 937
return __base; 
# 938
} 
# 942
inline ios_base &skipws(ios_base &__base) 
# 943
{ 
# 944
__base.setf(ios_base::skipws); 
# 945
return __base; 
# 946
} 
# 950
inline ios_base &noskipws(ios_base &__base) 
# 951
{ 
# 952
__base.unsetf(ios_base::skipws); 
# 953
return __base; 
# 954
} 
# 958
inline ios_base &uppercase(ios_base &__base) 
# 959
{ 
# 960
__base.setf(ios_base::uppercase); 
# 961
return __base; 
# 962
} 
# 966
inline ios_base &nouppercase(ios_base &__base) 
# 967
{ 
# 968
__base.unsetf(ios_base::uppercase); 
# 969
return __base; 
# 970
} 
# 974
inline ios_base &unitbuf(ios_base &__base) 
# 975
{ 
# 976
__base.setf(ios_base::unitbuf); 
# 977
return __base; 
# 978
} 
# 982
inline ios_base &nounitbuf(ios_base &__base) 
# 983
{ 
# 984
__base.unsetf(ios_base::unitbuf); 
# 985
return __base; 
# 986
} 
# 991
inline ios_base &internal(ios_base &__base) 
# 992
{ 
# 993
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 994
return __base; 
# 995
} 
# 999
inline ios_base &left(ios_base &__base) 
# 1000
{ 
# 1001
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1002
return __base; 
# 1003
} 
# 1007
inline ios_base &right(ios_base &__base) 
# 1008
{ 
# 1009
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1010
return __base; 
# 1011
} 
# 1016
inline ios_base &dec(ios_base &__base) 
# 1017
{ 
# 1018
__base.setf(ios_base::dec, ios_base::basefield); 
# 1019
return __base; 
# 1020
} 
# 1024
inline ios_base &hex(ios_base &__base) 
# 1025
{ 
# 1026
__base.setf(ios_base::hex, ios_base::basefield); 
# 1027
return __base; 
# 1028
} 
# 1032
inline ios_base &oct(ios_base &__base) 
# 1033
{ 
# 1034
__base.setf(ios_base::oct, ios_base::basefield); 
# 1035
return __base; 
# 1036
} 
# 1041
inline ios_base &fixed(ios_base &__base) 
# 1042
{ 
# 1043
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1044
return __base; 
# 1045
} 
# 1049
inline ios_base &scientific(ios_base &__base) 
# 1050
{ 
# 1051
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1052
return __base; 
# 1053
} 
# 1061
inline ios_base &hexfloat(ios_base &__base) 
# 1062
{ 
# 1063
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1064
return __base; 
# 1065
} 
# 1069
inline ios_base &defaultfloat(ios_base &__base) 
# 1070
{ 
# 1071
__base.unsetf(ios_base::floatfield); 
# 1072
return __base; 
# 1073
} 
# 1077
}
# 45 "/usr/include/c++/7/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 119 "/usr/include/c++/7/streambuf" 3
template< class _CharT, class _Traits> 
# 120
class basic_streambuf { 
# 129
public: typedef _CharT char_type; 
# 130
typedef _Traits traits_type; 
# 131
typedef typename _Traits::int_type int_type; 
# 132
typedef typename _Traits::pos_type pos_type; 
# 133
typedef typename _Traits::off_type off_type; 
# 138
typedef basic_streambuf __streambuf_type; 
# 141
friend class basic_ios< char_type, traits_type> ; 
# 142
friend class basic_istream< char_type, traits_type> ; 
# 143
friend class basic_ostream< char_type, traits_type> ; 
# 144
friend class istreambuf_iterator< char_type, traits_type> ; 
# 145
friend class ostreambuf_iterator< char_type, traits_type> ; 
# 148
friend streamsize __copy_streambufs_eof<> (basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 150
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 156
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 162
template< class _CharT2, class _Traits2> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, _CharT2 *); 
# 166
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 171
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 184
protected: char_type *_M_in_beg; 
# 185
char_type *_M_in_cur; 
# 186
char_type *_M_in_end; 
# 187
char_type *_M_out_beg; 
# 188
char_type *_M_out_cur; 
# 189
char_type *_M_out_end; 
# 192
locale _M_buf_locale; 
# 197
public: virtual ~basic_streambuf() 
# 198
{ } 
# 209 "/usr/include/c++/7/streambuf" 3
locale pubimbue(const locale &__loc) 
# 210
{ 
# 211
locale __tmp(getloc()); 
# 212
imbue(__loc); 
# 213
((_M_buf_locale) = __loc); 
# 214
return __tmp; 
# 215
} 
# 226 "/usr/include/c++/7/streambuf" 3
locale getloc() const 
# 227
{ return _M_buf_locale; } 
# 239 "/usr/include/c++/7/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 240
{ return setbuf(__s, __n); } 
# 251 "/usr/include/c++/7/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 252
__mode = (ios_base::in | ios_base::out)) 
# 253
{ return seekoff(__off, __way, __mode); } 
# 263 "/usr/include/c++/7/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 264
__mode = (ios_base::in | ios_base::out)) 
# 265
{ return seekpos(__sp, __mode); } 
# 271
int pubsync() { return sync(); } 
# 284 "/usr/include/c++/7/streambuf" 3
streamsize in_avail() 
# 285
{ 
# 286
const streamsize __ret = egptr() - gptr(); 
# 287
return (__ret) ? __ret : showmanyc(); 
# 288
} 
# 298 "/usr/include/c++/7/streambuf" 3
int_type snextc() 
# 299
{ 
# 300
int_type __ret = traits_type::eof(); 
# 301
if (__builtin_expect(!traits_type::eq_int_type(sbumpc(), __ret), true)) { 
# 303
__ret = sgetc(); }  
# 304
return __ret; 
# 305
} 
# 316 "/usr/include/c++/7/streambuf" 3
int_type sbumpc() 
# 317
{ 
# 318
int_type __ret; 
# 319
if (__builtin_expect(gptr() < egptr(), true)) 
# 320
{ 
# 321
__ret = traits_type::to_int_type(*gptr()); 
# 322
gbump(1); 
# 323
} else { 
# 325
__ret = uflow(); }  
# 326
return __ret; 
# 327
} 
# 338 "/usr/include/c++/7/streambuf" 3
int_type sgetc() 
# 339
{ 
# 340
int_type __ret; 
# 341
if (__builtin_expect(gptr() < egptr(), true)) { 
# 342
__ret = traits_type::to_int_type(*gptr()); } else { 
# 344
__ret = underflow(); }  
# 345
return __ret; 
# 346
} 
# 357 "/usr/include/c++/7/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 358
{ return xsgetn(__s, __n); } 
# 372 "/usr/include/c++/7/streambuf" 3
int_type sputbackc(char_type __c) 
# 373
{ 
# 374
int_type __ret; 
# 375
const bool __testpos = eback() < gptr(); 
# 376
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, gptr()[-1])), false)) { 
# 378
__ret = pbackfail(traits_type::to_int_type(__c)); } else 
# 380
{ 
# 381
gbump(-1); 
# 382
__ret = traits_type::to_int_type(*gptr()); 
# 383
}  
# 384
return __ret; 
# 385
} 
# 397 "/usr/include/c++/7/streambuf" 3
int_type sungetc() 
# 398
{ 
# 399
int_type __ret; 
# 400
if (__builtin_expect(eback() < gptr(), true)) 
# 401
{ 
# 402
gbump(-1); 
# 403
__ret = traits_type::to_int_type(*gptr()); 
# 404
} else { 
# 406
__ret = pbackfail(); }  
# 407
return __ret; 
# 408
} 
# 424 "/usr/include/c++/7/streambuf" 3
int_type sputc(char_type __c) 
# 425
{ 
# 426
int_type __ret; 
# 427
if (__builtin_expect(pptr() < epptr(), true)) 
# 428
{ 
# 429
(*pptr()) = __c; 
# 430
pbump(1); 
# 431
__ret = traits_type::to_int_type(__c); 
# 432
} else { 
# 434
__ret = overflow(traits_type::to_int_type(__c)); }  
# 435
return __ret; 
# 436
} 
# 450 "/usr/include/c++/7/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 451
{ return xsputn(__s, __n); } 
# 463 "/usr/include/c++/7/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 467
{ } 
# 482 "/usr/include/c++/7/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 485
char_type *gptr() const { return _M_in_cur; } 
# 488
char_type *egptr() const { return _M_in_end; } 
# 498 "/usr/include/c++/7/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 509 "/usr/include/c++/7/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 510
{ 
# 511
(_M_in_beg) = __gbeg; 
# 512
(_M_in_cur) = __gnext; 
# 513
(_M_in_end) = __gend; 
# 514
} 
# 529 "/usr/include/c++/7/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 532
char_type *pptr() const { return _M_out_cur; } 
# 535
char_type *epptr() const { return _M_out_end; } 
# 545 "/usr/include/c++/7/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 555 "/usr/include/c++/7/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 556
{ 
# 557
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 558
(_M_out_end) = __pend; 
# 559
} 
# 576 "/usr/include/c++/7/streambuf" 3
virtual void imbue(const locale &__loc) 
# 577
{ } 
# 591 "/usr/include/c++/7/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 592
{ return this; } 
# 602 "/usr/include/c++/7/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 604
{ return (pos_type)((off_type)(-1)); } 
# 614 "/usr/include/c++/7/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 616
{ return (pos_type)((off_type)(-1)); } 
# 627 "/usr/include/c++/7/streambuf" 3
virtual int sync() { return 0; } 
# 649 "/usr/include/c++/7/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 665 "/usr/include/c++/7/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 687 "/usr/include/c++/7/streambuf" 3
virtual int_type underflow() 
# 688
{ return traits_type::eof(); } 
# 700 "/usr/include/c++/7/streambuf" 3
virtual int_type uflow() 
# 701
{ 
# 702
int_type __ret = traits_type::eof(); 
# 703
const bool __testeof = traits_type::eq_int_type(underflow(), __ret); 
# 705
if (!__testeof) 
# 706
{ 
# 707
__ret = traits_type::to_int_type(*gptr()); 
# 708
gbump(1); 
# 709
}  
# 710
return __ret; 
# 711
} 
# 724 "/usr/include/c++/7/streambuf" 3
virtual int_type pbackfail(int_type __c = traits_type::eof()) 
# 725
{ return traits_type::eof(); } 
# 742 "/usr/include/c++/7/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 768 "/usr/include/c++/7/streambuf" 3
virtual int_type overflow(int_type __c = traits_type::eof()) 
# 769
{ return traits_type::eof(); } 
# 783 "/usr/include/c++/7/streambuf" 3
public: void stossc() 
# 784
{ 
# 785
if (gptr() < egptr()) { 
# 786
gbump(1); } else { 
# 788
uflow(); }  
# 789
} 
# 794
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 797
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 804
protected: basic_streambuf(const basic_streambuf &); 
# 807
basic_streambuf &operator=(const basic_streambuf &); 
# 811
void swap(basic_streambuf &__sb) 
# 812
{ 
# 813
std::swap(_M_in_beg, __sb._M_in_beg); 
# 814
std::swap(_M_in_cur, __sb._M_in_cur); 
# 815
std::swap(_M_in_end, __sb._M_in_end); 
# 816
std::swap(_M_out_beg, __sb._M_out_beg); 
# 817
std::swap(_M_out_cur, __sb._M_out_cur); 
# 818
std::swap(_M_out_end, __sb._M_out_end); 
# 819
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 820
} 
# 822
}; 
# 825
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 829
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 838
template<> streamsize __copy_streambufs_eof(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout, bool & __ineof); 
# 843
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout, bool & __ineof); 
# 848
}
# 39 "/usr/include/c++/7/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = egptr() - gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = epptr() - pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = __sbin->sgetc(); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = __sbout->sputc(_Traits::to_char_type(__c)); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = __sbin->snextc(); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char> ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< char>  *, basic_streambuf< char>  *, bool &);
# 160
extern template class basic_streambuf< wchar_t> ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< wchar_t>  *, basic_streambuf< wchar_t>  *, bool &);
# 173
}
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
typedef unsigned long wctype_t; 
# 57 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
enum { 
# 58
__ISwupper, 
# 59
__ISwlower, 
# 60
__ISwalpha, 
# 61
__ISwdigit, 
# 62
__ISwxdigit, 
# 63
__ISwspace, 
# 64
__ISwprint, 
# 65
__ISwgraph, 
# 66
__ISwblank, 
# 67
__ISwcntrl, 
# 68
__ISwpunct, 
# 69
__ISwalnum, 
# 71
_ISwupper = ((__ISwupper < 8) ? (int)((1UL << __ISwupper) << 24) : ((__ISwupper < 16) ? (int)((1UL << __ISwupper) << 8) : ((__ISwupper < 24) ? (int)((1UL << __ISwupper) >> 8) : ((int)((1UL << __ISwupper) >> 24))))), 
# 72
_ISwlower = ((__ISwlower < 8) ? (int)((1UL << __ISwlower) << 24) : ((__ISwlower < 16) ? (int)((1UL << __ISwlower) << 8) : ((__ISwlower < 24) ? (int)((1UL << __ISwlower) >> 8) : ((int)((1UL << __ISwlower) >> 24))))), 
# 73
_ISwalpha = ((__ISwalpha < 8) ? (int)((1UL << __ISwalpha) << 24) : ((__ISwalpha < 16) ? (int)((1UL << __ISwalpha) << 8) : ((__ISwalpha < 24) ? (int)((1UL << __ISwalpha) >> 8) : ((int)((1UL << __ISwalpha) >> 24))))), 
# 74
_ISwdigit = ((__ISwdigit < 8) ? (int)((1UL << __ISwdigit) << 24) : ((__ISwdigit < 16) ? (int)((1UL << __ISwdigit) << 8) : ((__ISwdigit < 24) ? (int)((1UL << __ISwdigit) >> 8) : ((int)((1UL << __ISwdigit) >> 24))))), 
# 75
_ISwxdigit = ((__ISwxdigit < 8) ? (int)((1UL << __ISwxdigit) << 24) : ((__ISwxdigit < 16) ? (int)((1UL << __ISwxdigit) << 8) : ((__ISwxdigit < 24) ? (int)((1UL << __ISwxdigit) >> 8) : ((int)((1UL << __ISwxdigit) >> 24))))), 
# 76
_ISwspace = ((__ISwspace < 8) ? (int)((1UL << __ISwspace) << 24) : ((__ISwspace < 16) ? (int)((1UL << __ISwspace) << 8) : ((__ISwspace < 24) ? (int)((1UL << __ISwspace) >> 8) : ((int)((1UL << __ISwspace) >> 24))))), 
# 77
_ISwprint = ((__ISwprint < 8) ? (int)((1UL << __ISwprint) << 24) : ((__ISwprint < 16) ? (int)((1UL << __ISwprint) << 8) : ((__ISwprint < 24) ? (int)((1UL << __ISwprint) >> 8) : ((int)((1UL << __ISwprint) >> 24))))), 
# 78
_ISwgraph = ((__ISwgraph < 8) ? (int)((1UL << __ISwgraph) << 24) : ((__ISwgraph < 16) ? (int)((1UL << __ISwgraph) << 8) : ((__ISwgraph < 24) ? (int)((1UL << __ISwgraph) >> 8) : ((int)((1UL << __ISwgraph) >> 24))))), 
# 79
_ISwblank = ((__ISwblank < 8) ? (int)((1UL << __ISwblank) << 24) : ((__ISwblank < 16) ? (int)((1UL << __ISwblank) << 8) : ((__ISwblank < 24) ? (int)((1UL << __ISwblank) >> 8) : ((int)((1UL << __ISwblank) >> 24))))), 
# 80
_ISwcntrl = ((__ISwcntrl < 8) ? (int)((1UL << __ISwcntrl) << 24) : ((__ISwcntrl < 16) ? (int)((1UL << __ISwcntrl) << 8) : ((__ISwcntrl < 24) ? (int)((1UL << __ISwcntrl) >> 8) : ((int)((1UL << __ISwcntrl) >> 24))))), 
# 81
_ISwpunct = ((__ISwpunct < 8) ? (int)((1UL << __ISwpunct) << 24) : ((__ISwpunct < 16) ? (int)((1UL << __ISwpunct) << 8) : ((__ISwpunct < 24) ? (int)((1UL << __ISwpunct) >> 8) : ((int)((1UL << __ISwpunct) >> 24))))), 
# 82
_ISwalnum = ((__ISwalnum < 8) ? (int)((1UL << __ISwalnum) << 24) : ((__ISwalnum < 16) ? (int)((1UL << __ISwalnum) << 8) : ((__ISwalnum < 24) ? (int)((1UL << __ISwalnum) >> 8) : ((int)((1UL << __ISwalnum) >> 24)))))
# 83
}; 
# 87
extern "C" {
# 95
extern int iswalnum(wint_t __wc) throw(); 
# 101
extern int iswalpha(wint_t __wc) throw(); 
# 104
extern int iswcntrl(wint_t __wc) throw(); 
# 108
extern int iswdigit(wint_t __wc) throw(); 
# 112
extern int iswgraph(wint_t __wc) throw(); 
# 117
extern int iswlower(wint_t __wc) throw(); 
# 120
extern int iswprint(wint_t __wc) throw(); 
# 125
extern int iswpunct(wint_t __wc) throw(); 
# 130
extern int iswspace(wint_t __wc) throw(); 
# 135
extern int iswupper(wint_t __wc) throw(); 
# 140
extern int iswxdigit(wint_t __wc) throw(); 
# 146
extern int iswblank(wint_t __wc) throw(); 
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
extern wctype_t wctype(const char * __property) throw(); 
# 159
extern int iswctype(wint_t __wc, wctype_t __desc) throw(); 
# 166
extern wint_t towlower(wint_t __wc) throw(); 
# 169
extern wint_t towupper(wint_t __wc) throw(); 
# 171
}
# 44 "/usr/include/wctype.h" 3
extern "C" {
# 48
typedef const __int32_t *wctrans_t; 
# 52
extern wctrans_t wctrans(const char * __property) throw(); 
# 55
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw(); 
# 63
extern int iswalnum_l(wint_t __wc, locale_t __locale) throw(); 
# 69
extern int iswalpha_l(wint_t __wc, locale_t __locale) throw(); 
# 72
extern int iswcntrl_l(wint_t __wc, locale_t __locale) throw(); 
# 76
extern int iswdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 80
extern int iswgraph_l(wint_t __wc, locale_t __locale) throw(); 
# 85
extern int iswlower_l(wint_t __wc, locale_t __locale) throw(); 
# 88
extern int iswprint_l(wint_t __wc, locale_t __locale) throw(); 
# 93
extern int iswpunct_l(wint_t __wc, locale_t __locale) throw(); 
# 98
extern int iswspace_l(wint_t __wc, locale_t __locale) throw(); 
# 103
extern int iswupper_l(wint_t __wc, locale_t __locale) throw(); 
# 108
extern int iswxdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 113
extern int iswblank_l(wint_t __wc, locale_t __locale) throw(); 
# 117
extern wctype_t wctype_l(const char * __property, locale_t __locale) throw(); 
# 122
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) throw(); 
# 130
extern wint_t towlower_l(wint_t __wc, locale_t __locale) throw(); 
# 133
extern wint_t towupper_l(wint_t __wc, locale_t __locale) throw(); 
# 137
extern wctrans_t wctrans_l(const char * __property, locale_t __locale) throw(); 
# 141
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) throw(); 
# 146
}
# 80 "/usr/include/c++/7/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/7/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/7/bits/streambuf_iterator.h" 3
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 64
public: typedef _CharT char_type; 
# 65
typedef _Traits traits_type; 
# 66
typedef typename _Traits::int_type int_type; 
# 67
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 68
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 71
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 77
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 83
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 97
private: mutable streambuf_type *_M_sbuf; 
# 98
mutable int_type _M_c; 
# 102
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 103
{ } 
# 106
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 108
~istreambuf_iterator() = default;
# 112
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) 
# 113
{ } 
# 116
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 117
{ } 
# 123
char_type operator*() const 
# 124
{ 
# 132
return traits_type::to_char_type(_M_get()); 
# 133
} 
# 137
istreambuf_iterator &operator++() 
# 138
{ 
# 141
; 
# 142
if (_M_sbuf) 
# 143
{ 
# 144
(_M_sbuf)->sbumpc(); 
# 145
(_M_c) = traits_type::eof(); 
# 146
}  
# 147
return *this; 
# 148
} 
# 152
istreambuf_iterator operator++(int) 
# 153
{ 
# 156
; 
# 158
istreambuf_iterator __old = *this; 
# 159
if (_M_sbuf) 
# 160
{ 
# 161
(__old._M_c) = (_M_sbuf)->sbumpc(); 
# 162
(_M_c) = traits_type::eof(); 
# 163
}  
# 164
return __old; 
# 165
} 
# 172
bool equal(const istreambuf_iterator &__b) const 
# 173
{ return _M_at_eof() == __b._M_at_eof(); } 
# 177
private: int_type _M_get() const 
# 178
{ 
# 179
const int_type __eof = traits_type::eof(); 
# 180
int_type __ret = __eof; 
# 181
if (_M_sbuf) 
# 182
{ 
# 183
if (!traits_type::eq_int_type(_M_c, __eof)) { 
# 184
__ret = (_M_c); } else { 
# 185
if (!traits_type::eq_int_type(__ret = (_M_sbuf)->sgetc(), __eof)) { 
# 187
(_M_c) = __ret; } else { 
# 189
(_M_sbuf) = 0; }  }  
# 190
}  
# 191
return __ret; 
# 192
} 
# 195
bool _M_at_eof() const 
# 196
{ 
# 197
const int_type __eof = traits_type::eof(); 
# 198
return traits_type::eq_int_type(_M_get(), __eof); 
# 199
} 
# 200
}; 
# 202
template< class _CharT, class _Traits> inline bool 
# 204
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 205
__b) 
# 206
{ return __a.equal(__b); } 
# 208
template< class _CharT, class _Traits> inline bool 
# 210
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 211
__b) 
# 212
{ return !__a.equal(__b); } 
# 215
template< class _CharT, class _Traits> 
# 216
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 223
public: typedef _CharT char_type; 
# 224
typedef _Traits traits_type; 
# 225
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 226
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 229
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 236
private: streambuf_type *_M_sbuf; 
# 237
bool _M_failed; 
# 241
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_failed((!(_M_sbuf))) 
# 242
{ } 
# 245
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 246
{ } 
# 250
ostreambuf_iterator &operator=(_CharT __c) 
# 251
{ 
# 252
if ((!(_M_failed)) && _Traits::eq_int_type((_M_sbuf)->sputc(__c), _Traits::eof())) { 
# 254
(_M_failed) = true; }  
# 255
return *this; 
# 256
} 
# 260
ostreambuf_iterator &operator*() 
# 261
{ return *this; } 
# 265
ostreambuf_iterator &operator++(int) 
# 266
{ return *this; } 
# 270
ostreambuf_iterator &operator++() 
# 271
{ return *this; } 
# 275
bool failed() const noexcept 
# 276
{ return _M_failed; } 
# 279
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 280
{ 
# 281
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect((this->_M_sbuf)->sputn(__ws, __len) != __len, false))) { 
# 284
(_M_failed) = true; }  
# 285
return *this; 
# 286
} 
# 287
}; 
# 290
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 293
copy(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 294
__last, ostreambuf_iterator< _CharT>  
# 295
__result) 
# 296
{ 
# 297
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 298
{ 
# 299
bool __ineof; 
# 300
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 301
if (!__ineof) { 
# 302
(__result._M_failed) = true; }  
# 303
}  
# 304
return __result; 
# 305
} 
# 307
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 310
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT>  
# 311
__result) 
# 312
{ 
# 313
const streamsize __num = __last - __first; 
# 314
if (__num > (0)) { 
# 315
__result._M_put(__first, __num); }  
# 316
return __result; 
# 317
} 
# 319
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 322
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT>  
# 323
__result) 
# 324
{ 
# 325
const streamsize __num = __last - __first; 
# 326
if (__num > (0)) { 
# 327
__result._M_put(__first, __num); }  
# 328
return __result; 
# 329
} 
# 331
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 334
__copy_move_a2(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 335
__last, _CharT *__result) 
# 336
{ 
# 337
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 338
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 339
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 340
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 342
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 343
{ 
# 344
streambuf_type *__sb = ((__first._M_sbuf)); 
# 345
int_type __c = __sb->sgetc(); 
# 346
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 347
{ 
# 348
const streamsize __n = __sb->egptr() - __sb->gptr(); 
# 349
if (__n > (1)) 
# 350
{ 
# 351
traits_type::copy(__result, __sb->gptr(), __n); 
# 352
__sb->__safe_gbump(__n); 
# 353
__result += __n; 
# 354
__c = __sb->underflow(); 
# 355
} else 
# 357
{ 
# 358
(*(__result++)) = traits_type::to_char_type(__c); 
# 359
__c = __sb->snextc(); 
# 360
}  
# 361
}  
# 362
}  
# 363
return __result; 
# 364
} 
# 366
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT> > ::__type 
# 369
find(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 370
__last, const _CharT &__val) 
# 371
{ 
# 372
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 373
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 374
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 375
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 377
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 378
{ 
# 379
const int_type __ival = traits_type::to_int_type(__val); 
# 380
streambuf_type *__sb = ((__first._M_sbuf)); 
# 381
int_type __c = __sb->sgetc(); 
# 382
while ((!traits_type::eq_int_type(__c, traits_type::eof())) && (!traits_type::eq_int_type(__c, __ival))) 
# 384
{ 
# 385
streamsize __n = __sb->egptr() - __sb->gptr(); 
# 386
if (__n > (1)) 
# 387
{ 
# 388
const _CharT *__p = traits_type::find(__sb->gptr(), __n, __val); 
# 390
if (__p) { 
# 391
__n = (__p - __sb->gptr()); }  
# 392
__sb->__safe_gbump(__n); 
# 393
__c = __sb->sgetc(); 
# 394
} else { 
# 396
__c = __sb->snextc(); }  
# 397
}  
# 399
if (!traits_type::eq_int_type(__c, traits_type::eof())) { 
# 400
(__first._M_c) = __c; } else { 
# 402
(__first._M_sbuf) = 0; }  
# 403
}  
# 404
return __first; 
# 405
} 
# 410
}
# 50 "/usr/include/c++/7/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 79
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 84
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 89
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 94
template< class _CharT, class _Traits> 
# 95
struct __pad { 
# 98
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 100
}; 
# 107
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 116
template< class _CharT> inline ostreambuf_iterator< _CharT>  
# 119
__write(ostreambuf_iterator< _CharT>  __s, const _CharT *__ws, int __len) 
# 120
{ 
# 121
__s._M_put(__ws, __len); 
# 122
return __s; 
# 123
} 
# 126
template< class _CharT, class _OutIter> inline _OutIter 
# 129
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 130
{ 
# 131
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 132
(*__s) = (__ws[__j]); }  
# 133
return __s; 
# 134
} 
# 149 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _CharT> 
# 150
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 155
public: typedef _CharT char_type; 
# 169 "/usr/include/c++/7/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 170
{ return this->do_is(__m, __c); } 
# 186 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 187
{ return this->do_is(__lo, __hi, __vec); } 
# 202 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 203
{ return do_scan_is(__m, __lo, __hi); } 
# 218 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 219
{ return do_scan_not(__m, __lo, __hi); } 
# 232 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 233
{ return this->do_toupper(__c); } 
# 247 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 248
{ return this->do_toupper(__lo, __hi); } 
# 261 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 262
{ return this->do_tolower(__c); } 
# 276 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 277
{ return this->do_tolower(__lo, __hi); } 
# 293 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 294
{ return this->do_widen(__c); } 
# 312 "/usr/include/c++/7/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 313
{ return this->do_widen(__lo, __hi, __to); } 
# 331 "/usr/include/c++/7/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 332
{ return this->do_narrow(__c, __dfault); } 
# 353 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 354
__dfault, char *__to) const 
# 355
{ return this->do_narrow(__lo, __hi, __dfault, __to); } 
# 359
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 362
virtual ~__ctype_abstract_base() { } 
# 378 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 397 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 416 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 435 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 453 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 470 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 486 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 503 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 522 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 543 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 564 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 589 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 591
}; 
# 611 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _CharT> 
# 612
class ctype : public __ctype_abstract_base< _CharT>  { 
# 616
public: typedef _CharT char_type; 
# 617
typedef typename __ctype_abstract_base< _CharT> ::mask mask; 
# 620
static std::locale::id id; 
# 623
explicit ctype(std::size_t __refs = 0) : __ctype_abstract_base< _CharT> (__refs) { } 
# 627
protected: virtual ~ctype(); 
# 630
virtual bool do_is(mask __m, char_type __c) const; 
# 633
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 636
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 639
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 643
virtual char_type do_toupper(char_type __c) const; 
# 646
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 649
virtual char_type do_tolower(char_type __c) const; 
# 652
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 655
virtual char_type do_widen(char __c) const; 
# 658
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 661
virtual char do_narrow(char_type, char __dfault) const; 
# 664
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 666
}; 
# 668
template< class _CharT> locale::id 
# 669
ctype< _CharT> ::id; 
# 681 "/usr/include/c++/7/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 686
public: typedef char char_type; 
# 690
protected: __c_locale _M_c_locale_ctype; 
# 691
bool _M_del; 
# 692
__to_type _M_toupper; 
# 693
__to_type _M_tolower; 
# 694
const mask *_M_table; 
# 695
mutable char _M_widen_ok; 
# 696
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 697
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 698
mutable char _M_narrow_ok; 
# 703
public: static locale::id id; 
# 705
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 718 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 731 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 744 "/usr/include/c++/7/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 759 "/usr/include/c++/7/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 773 "/usr/include/c++/7/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 787 "/usr/include/c++/7/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 802 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 803
{ return this->do_toupper(__c); } 
# 819 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 820
{ return this->do_toupper(__lo, __hi); } 
# 835 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 836
{ return this->do_tolower(__c); } 
# 852 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 853
{ return this->do_tolower(__lo, __hi); } 
# 872 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 873
{ 
# 874
if (_M_widen_ok) { 
# 875
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 876
this->_M_widen_init(); 
# 877
return this->do_widen(__c); 
# 878
} 
# 899 "/usr/include/c++/7/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 900
{ 
# 901
if ((_M_widen_ok) == 1) 
# 902
{ 
# 903
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 904
return __hi; 
# 905
}  
# 906
if (!(_M_widen_ok)) { 
# 907
this->_M_widen_init(); }  
# 908
return this->do_widen(__lo, __hi, __to); 
# 909
} 
# 930 "/usr/include/c++/7/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 931
{ 
# 932
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 933
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 934
const char __t = this->do_narrow(__c, __dfault); 
# 935
if (__t != __dfault) { 
# 936
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 937
return __t; 
# 938
} 
# 963 "/usr/include/c++/7/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 964
__dfault, char *__to) const 
# 965
{ 
# 966
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 967
{ 
# 968
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 969
return __hi; 
# 970
}  
# 971
if (!(_M_narrow_ok)) { 
# 972
this->_M_narrow_init(); }  
# 973
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 974
} 
# 981
const mask *table() const throw() 
# 982
{ return _M_table; } 
# 986
static const mask *classic_table() throw(); 
# 996
protected: virtual ~ctype(); 
# 1012 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1029 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1045 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1062 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1082 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1083
{ return __c; } 
# 1105 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1106
{ 
# 1107
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1108
return __hi; 
# 1109
} 
# 1131 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault __attribute((__unused__))) const 
# 1132
{ return __c; } 
# 1157 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1158
__dfault __attribute((__unused__)), char *__to) const 
# 1159
{ 
# 1160
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1161
return __hi; 
# 1162
} 
# 1165
private: void _M_narrow_init() const; 
# 1166
void _M_widen_init() const; 
# 1167
}; 
# 1182 "/usr/include/c++/7/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1187
public: typedef wchar_t char_type; 
# 1188
typedef wctype_t __wmask_type; 
# 1191
protected: __c_locale _M_c_locale_ctype; 
# 1194
bool _M_narrow_ok; 
# 1195
char _M_narrow[128]; 
# 1196
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1199
mask _M_bit[16]; 
# 1200
__wmask_type _M_wmask[16]; 
# 1205
public: static locale::id id; 
# 1215 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1226 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1230
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1234
virtual ~ctype(); 
# 1250 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1269 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1287 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1305 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1322 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1339 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1355 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1372 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1392 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1414 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1437 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1463 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1468
void _M_initialize_ctype() throw(); 
# 1469
}; 
# 1473
template< class _CharT> 
# 1474
class ctype_byname : public ctype< _CharT>  { 
# 1477
public: typedef typename ctype< _CharT> ::mask mask; 
# 1480
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1484
explicit ctype_byname(const __cxx11::string &__s, std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1485
{ } 
# 1490
protected: virtual ~ctype_byname() { } 
# 1491
}; 
# 1495
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1499
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1503
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1508
protected: virtual ~ctype_byname(); 
# 1509
}; 
# 1513
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1517
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1521
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1526
protected: virtual ~ctype_byname(); 
# 1527
}; 
# 1531
}
# 37 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1536 "/usr/include/c++/7/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1541
class __num_base { 
# 1547
public: enum { 
# 1548
_S_ominus, 
# 1549
_S_oplus, 
# 1550
_S_ox, 
# 1551
_S_oX, 
# 1552
_S_odigits, 
# 1553
_S_odigits_end = (_S_odigits + 16), 
# 1554
_S_oudigits = _S_odigits_end, 
# 1555
_S_oudigits_end = (_S_oudigits + 16), 
# 1556
_S_oe = (_S_odigits + 14), 
# 1557
_S_oE = (_S_oudigits + 14), 
# 1558
_S_oend = _S_oudigits_end
# 1559
}; 
# 1566
static const char *_S_atoms_out; 
# 1570
static const char *_S_atoms_in; 
# 1573
enum { 
# 1574
_S_iminus, 
# 1575
_S_iplus, 
# 1576
_S_ix, 
# 1577
_S_iX, 
# 1578
_S_izero, 
# 1579
_S_ie = (_S_izero + 14), 
# 1580
_S_iE = (_S_izero + 20), 
# 1581
_S_iend = 26
# 1582
}; 
# 1587
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1588
}; 
# 1590
template< class _CharT> 
# 1591
struct __numpunct_cache : public locale::facet { 
# 1593
const char *_M_grouping; 
# 1594
size_t _M_grouping_size; 
# 1595
bool _M_use_grouping; 
# 1596
const _CharT *_M_truename; 
# 1597
size_t _M_truename_size; 
# 1598
const _CharT *_M_falsename; 
# 1599
size_t _M_falsename_size; 
# 1600
_CharT _M_decimal_point; 
# 1601
_CharT _M_thousands_sep; 
# 1607
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1613
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1615
bool _M_allocated; 
# 1617
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1623
{ } 
# 1625
virtual ~__numpunct_cache(); 
# 1628
void _M_cache(const locale & __loc); 
# 1632
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1635
explicit __numpunct_cache(const __numpunct_cache &); 
# 1636
}; 
# 1638
template< class _CharT> 
# 1639
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1640
{ 
# 1641
if (_M_allocated) 
# 1642
{ 
# 1643
delete [] (_M_grouping); 
# 1644
delete [] (_M_truename); 
# 1645
delete [] (_M_falsename); 
# 1646
}  
# 1647
} 
# 1649
inline namespace __cxx11 { 
# 1665 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _CharT> 
# 1666
class numpunct : public locale::facet { 
# 1672
public: typedef _CharT char_type; 
# 1673
typedef basic_string< _CharT>  string_type; 
# 1675
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1678
protected: __cache_type *_M_data; 
# 1682
public: static locale::id id; 
# 1690
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1692
{ _M_initialize_numpunct(); } 
# 1704 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1706
{ _M_initialize_numpunct(); } 
# 1718 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1720
{ _M_initialize_numpunct(__cloc); } 
# 1732 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1733
{ return do_decimal_point(); } 
# 1745 "/usr/include/c++/7/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1746
{ return do_thousands_sep(); } 
# 1776 "/usr/include/c++/7/bits/locale_facets.h" 3
string grouping() const 
# 1777
{ return do_grouping(); } 
# 1789 "/usr/include/c++/7/bits/locale_facets.h" 3
string_type truename() const 
# 1790
{ return do_truename(); } 
# 1802 "/usr/include/c++/7/bits/locale_facets.h" 3
string_type falsename() const 
# 1803
{ return do_falsename(); } 
# 1808
protected: virtual ~numpunct(); 
# 1819 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1820
{ return (_M_data)->_M_decimal_point; } 
# 1831 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1832
{ return (_M_data)->_M_thousands_sep; } 
# 1844 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1845
{ return (_M_data)->_M_grouping; } 
# 1857 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1858
{ return (_M_data)->_M_truename; } 
# 1870 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1871
{ return (_M_data)->_M_falsename; } 
# 1875
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1876
}; 
# 1878
template< class _CharT> locale::id 
# 1879
numpunct< _CharT> ::id; 
# 1882
template<> numpunct< char> ::~numpunct(); 
# 1886
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1890
template<> numpunct< wchar_t> ::~numpunct(); 
# 1894
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1898
template< class _CharT> 
# 1899
class numpunct_byname : public numpunct< _CharT>  { 
# 1902
public: typedef _CharT char_type; 
# 1903
typedef basic_string< _CharT>  string_type; 
# 1906
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : numpunct< _CharT> (__refs) 
# 1908
{ 
# 1909
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1911
{ 
# 1912
std::__c_locale __tmp; 
# 1913
this->_S_create_c_locale(__tmp, __s); 
# 1914
this->_M_initialize_numpunct(__tmp); 
# 1915
this->_S_destroy_c_locale(__tmp); 
# 1916
}  
# 1917
} 
# 1921
explicit numpunct_byname(const __cxx11::string &__s, std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1922
{ } 
# 1927
protected: virtual ~numpunct_byname() { } 
# 1928
}; 
# 1930
}
# 1947 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1948
class num_get : public locale::facet { 
# 1954
public: typedef _CharT char_type; 
# 1955
typedef _InIter iter_type; 
# 1959
static locale::id id; 
# 1969 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 1995 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 1996
__err, bool &__v) const 
# 1997
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2032 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2033
__err, long &__v) const 
# 2034
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2037
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2038
__err, unsigned short &__v) const 
# 2039
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2042
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2043
__err, unsigned &__v) const 
# 2044
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2047
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2048
__err, unsigned long &__v) const 
# 2049
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2053
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2054
__err, long long &__v) const 
# 2055
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2058
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2059
__err, unsigned long long &__v) const 
# 2060
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2092 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2093
__err, float &__v) const 
# 2094
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2097
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2098
__err, double &__v) const 
# 2099
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2102
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2103
__err, long double &__v) const 
# 2104
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2135 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2136
__err, void *&__v) const 
# 2137
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2141
protected: virtual ~num_get() { } 
# 2143
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2145
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, __cxx11::string &) const; 
# 2148
template< class _ValueT> 
# 2149
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2148
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2154
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2156
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2157
{ 
# 2158
int __ret = (-1); 
# 2159
if (__len <= (10)) 
# 2160
{ 
# 2161
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2162
__ret = (__c - ((_CharT2)'0')); }  
# 2163
} else 
# 2165
{ 
# 2166
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2167
__ret = (__c - ((_CharT2)'0')); } else { 
# 2168
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2169
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2170
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2171
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2172
}  
# 2173
return __ret; 
# 2174
} 
# 2176
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2179
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2180
{ 
# 2181
int __ret = (-1); 
# 2182
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2183
if (__q) 
# 2184
{ 
# 2185
__ret = (__q - __zero); 
# 2186
if (__ret > 15) { 
# 2187
__ret -= 6; }  
# 2188
}  
# 2189
return __ret; 
# 2190
} 
# 2208 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2211
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2212
__err, long &__v) const 
# 2213
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2216
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2217
__err, unsigned short &__v) const 
# 2218
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2221
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2222
__err, unsigned &__v) const 
# 2223
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2226
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2227
__err, unsigned long &__v) const 
# 2228
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2232
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2233
__err, long long &__v) const 
# 2234
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2237
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2238
__err, unsigned long long &__v) const 
# 2239
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2243
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2246
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2256
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2261
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2270 "/usr/include/c++/7/bits/locale_facets.h" 3
}; 
# 2272
template< class _CharT, class _InIter> locale::id 
# 2273
num_get< _CharT, _InIter> ::id; 
# 2288 "/usr/include/c++/7/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2289
class num_put : public locale::facet { 
# 2295
public: typedef _CharT char_type; 
# 2296
typedef _OutIter iter_type; 
# 2300
static locale::id id; 
# 2310 "/usr/include/c++/7/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2328 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2329
{ return this->do_put(__s, __io, __fill, __v); } 
# 2370 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2371
{ return this->do_put(__s, __io, __fill, __v); } 
# 2374
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2375
__v) const 
# 2376
{ return this->do_put(__s, __io, __fill, __v); } 
# 2380
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2381
{ return this->do_put(__s, __io, __fill, __v); } 
# 2384
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2385
__v) const 
# 2386
{ return this->do_put(__s, __io, __fill, __v); } 
# 2433 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2434
{ return this->do_put(__s, __io, __fill, __v); } 
# 2437
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2438
__v) const 
# 2439
{ return this->do_put(__s, __io, __fill, __v); } 
# 2458 "/usr/include/c++/7/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2459
__v) const 
# 2460
{ return this->do_put(__s, __io, __fill, __v); } 
# 2463
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2469
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2473
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2479
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2484
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2489
virtual ~num_put() { } 
# 2506 "/usr/include/c++/7/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2509
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2510
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2513
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2514
__v) const 
# 2515
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2519
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2520
__v) const 
# 2521
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2524
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2525
__v) const 
# 2526
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2530
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2538
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2542
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2550
}; 
# 2552
template< class _CharT, class _OutIter> locale::id 
# 2553
num_put< _CharT, _OutIter> ::id; 
# 2563
template< class _CharT> inline bool 
# 2565
isspace(_CharT __c, const locale &__loc) 
# 2566
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c); } 
# 2569
template< class _CharT> inline bool 
# 2571
isprint(_CharT __c, const locale &__loc) 
# 2572
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c); } 
# 2575
template< class _CharT> inline bool 
# 2577
iscntrl(_CharT __c, const locale &__loc) 
# 2578
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c); } 
# 2581
template< class _CharT> inline bool 
# 2583
isupper(_CharT __c, const locale &__loc) 
# 2584
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c); } 
# 2587
template< class _CharT> inline bool 
# 2589
islower(_CharT __c, const locale &__loc) 
# 2590
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c); } 
# 2593
template< class _CharT> inline bool 
# 2595
isalpha(_CharT __c, const locale &__loc) 
# 2596
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c); } 
# 2599
template< class _CharT> inline bool 
# 2601
isdigit(_CharT __c, const locale &__loc) 
# 2602
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c); } 
# 2605
template< class _CharT> inline bool 
# 2607
ispunct(_CharT __c, const locale &__loc) 
# 2608
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c); } 
# 2611
template< class _CharT> inline bool 
# 2613
isxdigit(_CharT __c, const locale &__loc) 
# 2614
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c); } 
# 2617
template< class _CharT> inline bool 
# 2619
isalnum(_CharT __c, const locale &__loc) 
# 2620
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c); } 
# 2623
template< class _CharT> inline bool 
# 2625
isgraph(_CharT __c, const locale &__loc) 
# 2626
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c); } 
# 2630
template< class _CharT> inline bool 
# 2632
isblank(_CharT __c, const locale &__loc) 
# 2633
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c); } 
# 2637
template< class _CharT> inline _CharT 
# 2639
toupper(_CharT __c, const locale &__loc) 
# 2640
{ return use_facet< ctype< _CharT> > (__loc).toupper(__c); } 
# 2643
template< class _CharT> inline _CharT 
# 2645
tolower(_CharT __c, const locale &__loc) 
# 2646
{ return use_facet< ctype< _CharT> > (__loc).tolower(__c); } 
# 2649
}
# 35 "/usr/include/c++/7/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
__tmp->_M_cache(__loc); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const __cxx11::string &__g = __np.grouping(); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT>  &__tn = __np.truename(); 
# 97
(_M_truename_size) = __tn.size(); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
__tn.copy(__truename, _M_truename_size); 
# 101
const __cxx11::basic_string< _CharT>  &__fn = __np.falsename(); 
# 102
(_M_falsename_size) = __fn.size(); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
__fn.copy(__falsename, _M_falsename_size); 
# 106
(_M_decimal_point) = __np.decimal_point(); 
# 107
(_M_thousands_sep) = __np.thousands_sep(); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out); 
# 113
__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139 "/usr/include/c++/7/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const __cxx11::string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11"))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, __cxx11::string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = char_type(); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
__cxx11::string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
}   } else { 
# 263
while (!__testeof) 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
}   }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11"))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = char_type(); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
__cxx11::string __found_grouping; 
# 467
if (__lc->_M_use_grouping) { 
# 468
__found_grouping.reserve(32); }  
# 469
bool __testfail = false; 
# 470
bool __testoverflow = false; 
# 471
const __unsigned_type __max = (__negative && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) ? -__gnu_cxx::template __numeric_traits< _ValueT> ::__min : __gnu_cxx::template __numeric_traits< _ValueT> ::__max; 
# 475
const __unsigned_type __smax = __max / __base; 
# 476
__unsigned_type __result = (0); 
# 477
int __digit = 0; 
# 478
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 480
if (!(__lc->_M_allocated)) { 
# 482
while (!__testeof) 
# 483
{ 
# 484
__digit = _M_find(__lit_zero, __len, __c); 
# 485
if (__digit == (-1)) { 
# 486
break; }  
# 488
if (__result > __smax) { 
# 489
__testoverflow = true; } else 
# 491
{ 
# 492
__result *= __base; 
# 493
__testoverflow |= (__result > (__max - __digit)); 
# 494
__result += __digit; 
# 495
++__sep_pos; 
# 496
}  
# 498
if ((++__beg) != __end) { 
# 499
__c = (*__beg); } else { 
# 501
__testeof = true; }  
# 502
}  } else { 
# 504
while (!__testeof) 
# 505
{ 
# 508
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 509
{ 
# 512
if (__sep_pos) 
# 513
{ 
# 514
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 515
__sep_pos = 0; 
# 516
} else 
# 518
{ 
# 519
__testfail = true; 
# 520
break; 
# 521
}  
# 522
} else { 
# 523
if (__c == (__lc->_M_decimal_point)) { 
# 524
break; } else 
# 526
{ 
# 527
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 529
if (!__q) { 
# 530
break; }  
# 532
__digit = (__q - __lit_zero); 
# 533
if (__digit > 15) { 
# 534
__digit -= 6; }  
# 535
if (__result > __smax) { 
# 536
__testoverflow = true; } else 
# 538
{ 
# 539
__result *= __base; 
# 540
__testoverflow |= (__result > (__max - __digit)); 
# 541
__result += __digit; 
# 542
++__sep_pos; 
# 543
}  
# 544
}  }  
# 546
if ((++__beg) != __end) { 
# 547
__c = (*__beg); } else { 
# 549
__testeof = true; }  
# 550
}  }  
# 554
if (__found_grouping.size()) 
# 555
{ 
# 557
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 559
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 562
__err = ios_base::failbit; }  
# 563
}  
# 567
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 569
{ 
# 570
__v = 0; 
# 571
__err = ios_base::failbit; 
# 572
} else { 
# 573
if (__testoverflow) 
# 574
{ 
# 575
if (__negative && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) { 
# 577
__v = __gnu_cxx::template __numeric_traits< _ValueT> ::__min; } else { 
# 579
__v = __gnu_cxx::template __numeric_traits< _ValueT> ::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = (*__beg); 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
__cxx11::string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
__cxx11::string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735 "/usr/include/c++/7/bits/locale_facets.tcc" 3
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
__cxx11::string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 777
template< class _CharT, class _OutIter> void 
# 780
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 781
__new, const _CharT *__cs, int &__len) const 
# 782
{ 
# 785
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 787
__len = (static_cast< int>(__w)); 
# 788
} 
# 792
template< class _CharT, class _ValueT> int 
# 794
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 795
__flags, bool __dec) 
# 796
{ 
# 797
_CharT *__buf = __bufend; 
# 798
if (__builtin_expect(__dec, true)) 
# 799
{ 
# 801
do 
# 802
{ 
# 803
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 804
__v /= 10; 
# 805
} 
# 806
while (__v != 0); 
# 807
} else { 
# 808
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 809
{ 
# 811
do 
# 812
{ 
# 813
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 814
__v >>= 3; 
# 815
} 
# 816
while (__v != 0); 
# 817
} else 
# 819
{ 
# 821
const bool __uppercase = (__flags & ios_base::uppercase); 
# 822
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 824
do 
# 825
{ 
# 826
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 827
__v >>= 4; 
# 828
} 
# 829
while (__v != 0); 
# 830
}  }  
# 831
return __bufend - __buf; 
# 832
} 
# 836
template< class _CharT, class _OutIter> void 
# 839
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 840
__new, _CharT *__cs, int &__len) const 
# 841
{ 
# 842
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 844
__len = (__p - __new); 
# 845
} 
# 847
template< class _CharT, class _OutIter> 
# 848
template< class _ValueT> _OutIter 
# 851
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 852
__v) const 
# 853
{ 
# 854
using __gnu_cxx::__add_unsigned;
# 855
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 856
typedef __numpunct_cache< _CharT>  __cache_type; 
# 857
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 858
const locale &__loc = __io._M_getloc(); 
# 859
const __cache_type *__lc = __uc(__loc); 
# 860
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 861
const ios_base::fmtflags __flags = __io.flags(); 
# 864
const int __ilen = ((5) * sizeof(_ValueT)); 
# 865
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 870
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 871
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 873
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 876
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 877
__cs += (__ilen - __len); 
# 880
if (__lc->_M_use_grouping) 
# 881
{ 
# 884
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 887
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 889
__cs = (__cs2 + 2); 
# 890
}  
# 893
if (__builtin_expect(__dec, true)) 
# 894
{ 
# 896
if (__v >= 0) 
# 897
{ 
# 898
if (((bool)(__flags & ios_base::showpos)) && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) { 
# 900
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 901
} else { 
# 903
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 904
} else { 
# 905
if (((bool)(__flags & ios_base::showbase)) && __v) 
# 906
{ 
# 907
if (__basefield == ios_base::oct) { 
# 908
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 910
{ 
# 912
const bool __uppercase = (__flags & ios_base::uppercase); 
# 913
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 915
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 916
__len += 2; 
# 917
}  
# 918
}  }  
# 921
const streamsize __w = __io.width(); 
# 922
if (__w > (static_cast< streamsize>(__len))) 
# 923
{ 
# 924
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 926
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 927
__cs = __cs3; 
# 928
}  
# 929
__io.width(0); 
# 933
return std::__write(__s, __cs, __len); 
# 934
} 
# 936
template< class _CharT, class _OutIter> void 
# 939
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 940
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 941
__cs, int &__len) const 
# 942
{ 
# 946
const int __declen = (__p) ? __p - __cs : __len; 
# 947
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 952
int __newlen = __p2 - __new; 
# 953
if (__p) 
# 954
{ 
# 955
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 956
__newlen += (__len - __declen); 
# 957
}  
# 958
__len = __newlen; 
# 959
} 
# 971 "/usr/include/c++/7/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 972
template< class _ValueT> _OutIter 
# 975
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 976
__v) const 
# 977
{ 
# 978
typedef __numpunct_cache< _CharT>  __cache_type; 
# 979
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 980
const locale &__loc = __io._M_getloc(); 
# 981
const __cache_type *__lc = __uc(__loc); 
# 984
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 986
const int __max_digits = (__gnu_cxx::template __numeric_traits< _ValueT> ::__digits10); 
# 990
int __len; 
# 992
char __fbuf[16]; 
# 993
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 997
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1002
int __cs_size = (__max_digits * 3); 
# 1003
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1004
if (__use_prec) { 
# 1005
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1008
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1012
if (__len >= __cs_size) 
# 1013
{ 
# 1014
__cs_size = (__len + 1); 
# 1015
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1016
if (__use_prec) { 
# 1017
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1020
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1022
}  
# 1044 "/usr/include/c++/7/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1046
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1048
__ctype.widen(__cs, __cs + __len, __ws); 
# 1051
_CharT *__wp = (0); 
# 1052
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1053
if (__p) 
# 1054
{ 
# 1055
__wp = (__ws + (__p - __cs)); 
# 1056
(*__wp) = (__lc->_M_decimal_point); 
# 1057
}  
# 1062
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1065
{ 
# 1068
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1071
streamsize __off = (0); 
# 1072
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1073
{ 
# 1074
__off = (1); 
# 1075
(__ws2[0]) = (__ws[0]); 
# 1076
__len -= 1; 
# 1077
}  
# 1079
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1082
__len += __off; 
# 1084
__ws = __ws2; 
# 1085
}  
# 1088
const streamsize __w = __io.width(); 
# 1089
if (__w > (static_cast< streamsize>(__len))) 
# 1090
{ 
# 1091
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1093
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1094
__ws = __ws3; 
# 1095
}  
# 1096
__io.width(0); 
# 1100
return std::__write(__s, __ws, __len); 
# 1101
} 
# 1103
template< class _CharT, class _OutIter> _OutIter 
# 1106
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1107
{ 
# 1108
const ios_base::fmtflags __flags = __io.flags(); 
# 1109
if (((__flags & ios_base::boolalpha)) == 0) 
# 1110
{ 
# 1111
const long __l = __v; 
# 1112
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1113
} else 
# 1115
{ 
# 1116
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1117
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1118
const locale &__loc = __io._M_getloc(); 
# 1119
const __cache_type *__lc = __uc(__loc); 
# 1121
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1123
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1126
const streamsize __w = __io.width(); 
# 1127
if (__w > (static_cast< streamsize>(__len))) 
# 1128
{ 
# 1129
const streamsize __plen = __w - __len; 
# 1130
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1134
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1135
__io.width(0); 
# 1137
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1138
{ 
# 1139
__s = std::__write(__s, __name, __len); 
# 1140
__s = std::__write(__s, __ps, __plen); 
# 1141
} else 
# 1143
{ 
# 1144
__s = std::__write(__s, __ps, __plen); 
# 1145
__s = std::__write(__s, __name, __len); 
# 1146
}  
# 1147
return __s; 
# 1148
}  
# 1149
__io.width(0); 
# 1150
__s = std::__write(__s, __name, __len); 
# 1151
}  
# 1152
return __s; 
# 1153
} 
# 1155
template< class _CharT, class _OutIter> _OutIter 
# 1158
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1159
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1169 "/usr/include/c++/7/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> _OutIter 
# 1172
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1173
__v) const 
# 1174
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1176
template< class _CharT, class _OutIter> _OutIter 
# 1179
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1180
__v) const 
# 1181
{ 
# 1182
const ios_base::fmtflags __flags = __io.flags(); 
# 1183
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1185
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1189
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1191
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1193
__io.flags(__flags); 
# 1194
return __s; 
# 1195
} 
# 1206 "/usr/include/c++/7/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1208
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1209
__news, const _CharT *__olds, streamsize 
# 1210
__newlen, streamsize __oldlen) 
# 1211
{ 
# 1212
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1213
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1216
if (__adjust == ios_base::left) 
# 1217
{ 
# 1218
_Traits::copy(__news, __olds, __oldlen); 
# 1219
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1220
return; 
# 1221
}  
# 1223
size_t __mod = (0); 
# 1224
if (__adjust == ios_base::internal) 
# 1225
{ 
# 1229
const locale &__loc = __io._M_getloc(); 
# 1230
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1232
if ((__ctype.widen('-') == (__olds[0])) || (__ctype.widen('+') == (__olds[0]))) 
# 1234
{ 
# 1235
(__news[0]) = (__olds[0]); 
# 1236
__mod = (1); 
# 1237
++__news; 
# 1238
} else { 
# 1239
if ((__ctype.widen('0') == (__olds[0])) && (__oldlen > (1)) && ((__ctype.widen('x') == (__olds[1])) || (__ctype.widen('X') == (__olds[1])))) 
# 1243
{ 
# 1244
(__news[0]) = (__olds[0]); 
# 1245
(__news[1]) = (__olds[1]); 
# 1246
__mod = (2); 
# 1247
__news += 2; 
# 1248
}  }  
# 1250
}  
# 1251
_Traits::assign(__news, __plen, __fill); 
# 1252
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1253
} 
# 1255
template< class _CharT> _CharT *
# 1257
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1258
__gbeg, size_t __gsize, const _CharT *
# 1259
__first, const _CharT *__last) 
# 1260
{ 
# 1261
size_t __idx = (0); 
# 1262
size_t __ctr = (0); 
# 1264
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1267
{ 
# 1268
__last -= (__gbeg[__idx]); 
# 1269
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1270
}  
# 1272
while (__first != __last) { 
# 1273
(*(__s++)) = (*(__first++)); }  
# 1275
while (__ctr--) 
# 1276
{ 
# 1277
(*(__s++)) = __sep; 
# 1278
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1279
(*(__s++)) = (*(__first++)); }  
# 1280
}  
# 1282
while (__idx--) 
# 1283
{ 
# 1284
(*(__s++)) = __sep; 
# 1285
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1286
(*(__s++)) = (*(__first++)); }  
# 1287
}  
# 1289
return __s; 
# 1290
} 
# 1295
extern template class __cxx11::numpunct< char> ;
# 1296
extern template class __cxx11::numpunct_byname< char> ;
# 1297
extern template class num_get< char> ;
# 1298
extern template class num_put< char> ;
# 1301
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1305
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1309
extern template const num_put< char>  &use_facet< num_put< char> > (const locale &);
# 1313
extern template const num_get< char>  &use_facet< num_get< char> > (const locale &);
# 1317
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1321
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1325
extern template bool has_facet< num_put< char> > (const locale &) throw();
# 1329
extern template bool has_facet< num_get< char> > (const locale &) throw();
# 1334
extern template class __cxx11::numpunct< wchar_t> ;
# 1335
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1336
extern template class num_get< wchar_t> ;
# 1337
extern template class num_put< wchar_t> ;
# 1340
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1344
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1348
extern template const num_put< wchar_t>  &use_facet< num_put< wchar_t> > (const locale &);
# 1352
extern template const num_get< wchar_t>  &use_facet< num_get< wchar_t> > (const locale &);
# 1356
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1360
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1364
extern template bool has_facet< num_put< wchar_t> > (const locale &) throw();
# 1368
extern template bool has_facet< num_get< wchar_t> > (const locale &) throw();
# 1375
}
# 41 "/usr/include/c++/7/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66 "/usr/include/c++/7/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117 "/usr/include/c++/7/bits/basic_ios.h" 3
public: explicit operator bool() const 
# 118
{ return !fail(); } 
# 125
bool operator!() const 
# 126
{ return fail(); } 
# 137 "/usr/include/c++/7/bits/basic_ios.h" 3
iostate rdstate() const 
# 138
{ return _M_streambuf_state; } 
# 148 "/usr/include/c++/7/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ clear(((rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((_M_streambuf_state) |= __state); 
# 169
if (((exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((rdstate()) & eofbit)) != 0; } 
# 201 "/usr/include/c++/7/bits/basic_ios.h" 3
bool fail() const 
# 202
{ return (((rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((rdstate()) & badbit)) != 0; } 
# 222 "/usr/include/c++/7/bits/basic_ios.h" 3
iostate exceptions() const 
# 223
{ return _M_exception; } 
# 257 "/usr/include/c++/7/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 258
{ 
# 259
(_M_exception) = __except; 
# 260
clear(_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295 "/usr/include/c++/7/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307 "/usr/include/c++/7/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347 "/usr/include/c++/7/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361 "/usr/include/c++/7/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390 "/usr/include/c++/7/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = this->fill(); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410 "/usr/include/c++/7/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 430 "/usr/include/c++/7/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 431
{ return __check_facet(_M_ctype).narrow(__c, __dfault); } 
# 449 "/usr/include/c++/7/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 450
{ return __check_facet(_M_ctype).widen(__c); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(_M_ios_locale); 
# 483
this->tie(__rhs.tie(nullptr)); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ this->move(__rhs); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs._M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/7/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if (this->rdbuf()) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = (__state | badbit); }  
# 47
if (((exceptions()) & (rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= (_S_local_word_size)) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
this->tie(__rhs.tie()); 
# 99
this->fill(__rhs.fill()); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if (this->rdbuf() != 0) { 
# 120
this->rdbuf()->pubimbue(__loc); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/7/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = std::__addressof(use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = std::__addressof(use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = std::__addressof(use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char> ;
# 181
extern template class basic_ios< wchar_t> ;
# 186
}
# 41 "/usr/include/c++/7/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/7/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ this->init(__sb); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/7/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/7/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/7/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/7/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 270 "/usr/include/c++/7/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 303 "/usr/include/c++/7/ostream" 3
__ostream_type &put(char_type __c); 
# 311
void _M_write(const char_type *__s, std::streamsize __n) 
# 312
{ 
# 313
const std::streamsize __put = this->rdbuf()->sputn(__s, __n); 
# 314
if (__put != __n) { 
# 315
this->setstate(ios_base::badbit); }  
# 316
} 
# 335 "/usr/include/c++/7/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 348 "/usr/include/c++/7/ostream" 3
__ostream_type &flush(); 
# 358 "/usr/include/c++/7/ostream" 3
pos_type tellp(); 
# 369 "/usr/include/c++/7/ostream" 3
__ostream_type &seekp(pos_type); 
# 381 "/usr/include/c++/7/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 384
protected: basic_ostream() 
# 385
{ this->init(0); } 
# 389
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 391
basic_ostream(const basic_ostream &) = delete;
# 393
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 395
{ __ios_type::move(__rhs); } 
# 399
basic_ostream &operator=(const basic_ostream &) = delete;
# 402
basic_ostream &operator=(basic_ostream &&__rhs) 
# 403
{ 
# 404
swap(__rhs); 
# 405
return *this; 
# 406
} 
# 409
void swap(basic_ostream &__rhs) 
# 410
{ __ios_type::swap(__rhs); } 
# 413
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 416
}; 
# 425 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> 
# 426
class basic_ostream< _CharT, _Traits> ::sentry { 
# 429
bool _M_ok; 
# 430
basic_ostream &_M_os; 
# 445 "/usr/include/c++/7/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 454 "/usr/include/c++/7/ostream" 3
~sentry() 
# 455
{ 
# 457
if (((bool)((_M_os).flags() & ios_base::unitbuf)) && (!uncaught_exception())) 
# 458
{ 
# 460
if ((_M_os).rdbuf() && ((_M_os).rdbuf()->pubsync() == (-1))) { 
# 461
(_M_os).setstate(ios_base::badbit); }  
# 462
}  
# 463
} 
# 475 "/usr/include/c++/7/ostream" 3
explicit operator bool() const 
# 476
{ return _M_ok; } 
# 477
}; 
# 495 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 497
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 498
{ return __ostream_insert(__out, &__c, 1); } 
# 500
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 502
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 503
{ return (__out << __out.widen(__c)); } 
# 506
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 508
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 509
{ return __ostream_insert(__out, &__c, 1); } 
# 512
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 514
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 515
{ return (__out << (static_cast< char>(__c))); } 
# 517
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 519
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 520
{ return (__out << (static_cast< char>(__c))); } 
# 537 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 539
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 540
{ 
# 541
if (!__s) { 
# 542
__out.setstate(ios_base::badbit); } else { 
# 544
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 546
return __out; 
# 547
} 
# 549
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 554
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 556
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 557
{ 
# 558
if (!__s) { 
# 559
__out.setstate(ios_base::badbit); } else { 
# 561
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 563
return __out; 
# 564
} 
# 567
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 569
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 570
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 572
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 574
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 575
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 588 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 590
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 591
{ return flush(__os.put(__os.widen('\n'))); } 
# 600 "/usr/include/c++/7/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 602
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 603
{ return __os.put(_CharT()); } 
# 610
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 612
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 613
{ return __os.flush(); } 
# 616
template< class _Ch, class _Up> basic_ostream< _Ch, _Up>  &__is_convertible_to_basic_ostream_test(basic_ostream< _Ch, _Up>  *); 
# 620
template< class _Tp, class  = void> 
# 621
struct __is_convertible_to_basic_ostream_impl { 
# 623
using __ostream_type = void; 
# 624
}; 
# 626
template< class _Tp> using __do_is_convertible_to_basic_ostream_impl = __decltype((__is_convertible_to_basic_ostream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 631
template< class _Tp> 
# 632
struct __is_convertible_to_basic_ostream_impl< _Tp, __void_t< __do_is_convertible_to_basic_ostream_impl< _Tp> > >  { 
# 636
using __ostream_type = __do_is_convertible_to_basic_ostream_impl< _Tp> ; 
# 638
}; 
# 640
template< class _Tp> 
# 641
struct __is_convertible_to_basic_ostream : public __is_convertible_to_basic_ostream_impl< _Tp>  { 
# 645
using type = __not_< is_void< typename __is_convertible_to_basic_ostream_impl< _Tp> ::__ostream_type> > ; 
# 647
static constexpr bool value = (type::value); 
# 648
}; 
# 650
template< class _Ostream, class _Tp, class  = void> 
# 651
struct __is_insertable : public false_type { }; 
# 653
template< class _Ostream, class _Tp> 
# 654
struct __is_insertable< _Ostream, _Tp, __void_t< __decltype((declval< _Ostream &> () << declval< const _Tp &> ()))> >  : public true_type { 
# 657
}; 
# 659
template< class _Ostream> using __rvalue_ostream_type = typename __is_convertible_to_basic_ostream< _Ostream> ::__ostream_type; 
# 674 "/usr/include/c++/7/ostream" 3
template< class _Ostream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Ostream> > , __is_convertible_to_basic_ostream< _Ostream> , __is_insertable< __rvalue_ostream_type< _Ostream> , const _Tp &> > ::value, __rvalue_ostream_type< _Ostream> > ::type 
# 682
operator<<(_Ostream &&__os, const _Tp &__x) 
# 683
{ 
# 684
__rvalue_ostream_type< _Ostream>  __ret_os = __os; 
# 685
__ret_os << __x; 
# 686
return __ret_os; 
# 687
} 
# 691
}
# 41 "/usr/include/c++/7/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if (__os.tie() && __os.good()) { 
# 52
__os.tie()->flush(); }  
# 54
if (__os.good()) { 
# 55
(_M_ok) = true; } else { 
# 57
__os.setstate(ios_base::failbit); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (__np.put(*this, *this, this->fill(), __v).failed()) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
this->_M_setstate(ios_base::badbit); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ this->_M_setstate(ios_base::badbit); }  
# 83
if (__err) { 
# 84
this->setstate(__err); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, this->rdbuf())) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
this->_M_setstate(ios_base::badbit); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ this->_M_setstate(ios_base::failbit); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
this->setstate(__err); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = this->rdbuf()->sputc(__c); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
this->_M_setstate(ios_base::badbit); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ this->_M_setstate(ios_base::badbit); }  
# 174
if (__err) { 
# 175
this->setstate(__err); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
this->_M_setstate(ios_base::badbit); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ this->_M_setstate(ios_base::badbit); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if (this->rdbuf() && (this->rdbuf()->pubsync() == (-1))) { 
# 220
(__err |= std::ios_base::badbit); }  
# 221
} 
# 222
catch (__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
this->_M_setstate(ios_base::badbit); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ this->_M_setstate(ios_base::badbit); }  
# 229
if (__err) { 
# 230
this->setstate(__err); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!this->fail()) { 
# 243
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out); }  
# 244
} 
# 245
catch (__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
this->_M_setstate(ios_base::badbit); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ this->_M_setstate(ios_base::badbit); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!this->fail()) 
# 264
{ 
# 267
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
this->_M_setstate(ios_base::badbit); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ this->_M_setstate(ios_base::badbit); }  
# 282
if (__err) { 
# 283
this->setstate(__err); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 291
{ 
# 292
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!this->fail()) 
# 296
{ 
# 299
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
this->_M_setstate(ios_base::badbit); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ this->_M_setstate(ios_base::badbit); }  
# 314
if (__err) { 
# 315
this->setstate(__err); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
__out.setstate(ios_base::badbit); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = __out.widen(__s[__i]); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
__out._M_setstate(ios_base::badbit); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ __out._M_setstate(ios_base::badbit); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char> ;
# 360
extern template basic_ostream< char>  &endl(basic_ostream< char>  & __os);
# 361
extern template basic_ostream< char>  &ends(basic_ostream< char>  & __os);
# 362
extern template basic_ostream< char>  &flush(basic_ostream< char>  & __os);
# 363
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, char __c);
# 364
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, unsigned char __c);
# 365
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, signed char __c);
# 366
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const char * __s);
# 367
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const signed char * __s);
# 370
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long __v);
# 371
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(bool __v);
# 374
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long long __v);
# 375
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(double __v);
# 378
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long double __v);
# 379
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t> ;
# 383
extern template basic_ostream< wchar_t>  &endl(basic_ostream< wchar_t>  & __os);
# 384
extern template basic_ostream< wchar_t>  &ends(basic_ostream< wchar_t>  & __os);
# 385
extern template basic_ostream< wchar_t>  &flush(basic_ostream< wchar_t>  & __os);
# 386
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, char __c);
# 388
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/7/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ this->init(__sb); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/7/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/7/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/7/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/7/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/7/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/7/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/7/istream" 3
int_type get(); 
# 316 "/usr/include/c++/7/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/7/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/7/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return this->get(__s, __n, this->widen('\n')); } 
# 377 "/usr/include/c++/7/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/7/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return this->get(__sb, this->widen('\n')); } 
# 416 "/usr/include/c++/7/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/7/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return this->getline(__s, __n, this->widen('\n')); } 
# 451 "/usr/include/c++/7/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/7/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/7/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/7/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/7/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/7/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/7/istream" 3
int sync(); 
# 571 "/usr/include/c++/7/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/7/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/7/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ this->init(0); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char>  &basic_istream< char> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n); 
# 658
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n, int_type __delim); 
# 685 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722 "/usr/include/c++/7/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734 "/usr/include/c++/7/istream" 3
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 792 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT * __s); 
# 799
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __in, char * __s); 
# 801
template< class _Traits> inline basic_istream< char, _Traits>  &
# 803
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 804
{ return (__in >> (reinterpret_cast< char *>(__s))); } 
# 806
template< class _Traits> inline basic_istream< char, _Traits>  &
# 808
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 809
{ return (__in >> (reinterpret_cast< char *>(__s))); } 
# 823 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> 
# 824
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 832
public: typedef _CharT char_type; 
# 833
typedef typename _Traits::int_type int_type; 
# 834
typedef typename _Traits::pos_type pos_type; 
# 835
typedef typename _Traits::off_type off_type; 
# 836
typedef _Traits traits_type; 
# 839
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 840
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 849
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 850
{ } 
# 856
virtual ~basic_iostream() { } 
# 859
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 860
{ } 
# 863
basic_iostream(const basic_iostream &) = delete;
# 865
basic_iostream(basic_iostream &&__rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) 
# 867
{ } 
# 871
basic_iostream &operator=(const basic_iostream &) = delete;
# 874
basic_iostream &operator=(basic_iostream &&__rhs) 
# 875
{ 
# 876
swap(__rhs); 
# 877
return *this; 
# 878
} 
# 881
void swap(basic_iostream &__rhs) 
# 882
{ __istream_type::swap(__rhs); } 
# 884
}; 
# 906 "/usr/include/c++/7/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 911
template< class _Ch, class _Up> basic_istream< _Ch, _Up>  &__is_convertible_to_basic_istream_test(basic_istream< _Ch, _Up>  *); 
# 915
template< class _Tp, class  = void> 
# 916
struct __is_convertible_to_basic_istream_impl { 
# 918
using __istream_type = void; 
# 919
}; 
# 921
template< class _Tp> using __do_is_convertible_to_basic_istream_impl = __decltype((__is_convertible_to_basic_istream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 926
template< class _Tp> 
# 927
struct __is_convertible_to_basic_istream_impl< _Tp, __void_t< __do_is_convertible_to_basic_istream_impl< _Tp> > >  { 
# 931
using __istream_type = __do_is_convertible_to_basic_istream_impl< _Tp> ; 
# 933
}; 
# 935
template< class _Tp> 
# 936
struct __is_convertible_to_basic_istream : public __is_convertible_to_basic_istream_impl< _Tp>  { 
# 940
using type = __not_< is_void< typename __is_convertible_to_basic_istream_impl< _Tp> ::__istream_type> > ; 
# 942
static constexpr bool value = (type::value); 
# 943
}; 
# 945
template< class _Istream, class _Tp, class  = void> 
# 946
struct __is_extractable : public false_type { }; 
# 948
template< class _Istream, class _Tp> 
# 949
struct __is_extractable< _Istream, _Tp, __void_t< __decltype((declval< _Istream &> () >> declval< _Tp> ()))> >  : public true_type { 
# 952
}; 
# 954
template< class _Istream> using __rvalue_istream_type = typename __is_convertible_to_basic_istream< _Istream> ::__istream_type; 
# 972 "/usr/include/c++/7/istream" 3
template< class _Istream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Istream> > , __is_convertible_to_basic_istream< _Istream> , __is_extractable< __rvalue_istream_type< _Istream> , _Tp &&> > ::value, __rvalue_istream_type< _Istream> > ::type 
# 980
operator>>(_Istream &&__is, _Tp &&__x) 
# 981
{ 
# 982
__rvalue_istream_type< _Istream>  __ret_is = __is; 
# 983
__ret_is >> std::forward< _Tp> (__x); 
# 984
return __ret_is; 
# 985
} 
# 989
}
# 41 "/usr/include/c++/7/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if (__in.good()) { 
# 51
try 
# 52
{ 
# 53
if (__in.tie()) { 
# 54
__in.tie()->flush(); }  
# 55
if ((!__noskip) && ((bool)(__in.flags() & ios_base::skipws))) 
# 56
{ 
# 57
const __int_type __eof = traits_type::eof(); 
# 58
__streambuf_type *__sb = __in.rdbuf(); 
# 59
__int_type __c = __sb->sgetc(); 
# 61
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 62
while ((!traits_type::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, traits_type::to_char_type(__c))) { 
# 65
__c = __sb->snextc(); }  
# 70
if (traits_type::eq_int_type(__c, __eof)) { 
# 71
(__err |= std::ios_base::eofbit); }  
# 72
}  
# 73
} 
# 74
catch (__cxxabiv1::__forced_unwind &) 
# 75
{ 
# 76
__in._M_setstate(ios_base::badbit); 
# 77
throw; 
# 78
} 
# 79
catch (...) 
# 80
{ __in._M_setstate(ios_base::badbit); }  }  
# 82
if (__in.good() && (__err == std::ios_base::goodbit)) { 
# 83
(_M_ok) = true; } else 
# 85
{ 
# 86
(__err |= std::ios_base::failbit); 
# 87
__in.setstate(__err); 
# 88
}  
# 89
} 
# 91
template< class _CharT, class _Traits> 
# 92
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 95
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 96
{ 
# 97
sentry __cerb(*this, false); 
# 98
if (__cerb) 
# 99
{ 
# 100
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 101
try 
# 102
{ 
# 103
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 104
__ng.get(*this, 0, *this, __err, __v); 
# 105
} 
# 106
catch (__cxxabiv1::__forced_unwind &) 
# 107
{ 
# 108
this->_M_setstate(ios_base::badbit); 
# 109
throw; 
# 110
} 
# 111
catch (...) 
# 112
{ this->_M_setstate(ios_base::badbit); }  
# 113
if (__err) { 
# 114
this->setstate(__err); }  
# 115
}  
# 116
return *this; 
# 117
} 
# 119
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 122
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 123
{ 
# 126
sentry __cerb(*this, false); 
# 127
if (__cerb) 
# 128
{ 
# 129
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 130
try 
# 131
{ 
# 132
long __l; 
# 133
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 134
__ng.get(*this, 0, *this, __err, __l); 
# 138
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 139
{ 
# 140
(__err |= std::ios_base::failbit); 
# 141
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 142
} else { 
# 143
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 144
{ 
# 145
(__err |= std::ios_base::failbit); 
# 146
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 147
} else { 
# 149
__n = ((short)__l); }  }  
# 150
} 
# 151
catch (__cxxabiv1::__forced_unwind &) 
# 152
{ 
# 153
this->_M_setstate(ios_base::badbit); 
# 154
throw; 
# 155
} 
# 156
catch (...) 
# 157
{ this->_M_setstate(ios_base::badbit); }  
# 158
if (__err) { 
# 159
this->setstate(__err); }  
# 160
}  
# 161
return *this; 
# 162
} 
# 164
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 167
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 168
{ 
# 171
sentry __cerb(*this, false); 
# 172
if (__cerb) 
# 173
{ 
# 174
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 175
try 
# 176
{ 
# 177
long __l; 
# 178
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 179
__ng.get(*this, 0, *this, __err, __l); 
# 183
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 184
{ 
# 185
(__err |= std::ios_base::failbit); 
# 186
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 187
} else { 
# 188
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 189
{ 
# 190
(__err |= std::ios_base::failbit); 
# 191
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 192
} else { 
# 194
__n = ((int)__l); }  }  
# 195
} 
# 196
catch (__cxxabiv1::__forced_unwind &) 
# 197
{ 
# 198
this->_M_setstate(ios_base::badbit); 
# 199
throw; 
# 200
} 
# 201
catch (...) 
# 202
{ this->_M_setstate(ios_base::badbit); }  
# 203
if (__err) { 
# 204
this->setstate(__err); }  
# 205
}  
# 206
return *this; 
# 207
} 
# 209
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 212
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 213
{ 
# 214
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 215
sentry __cerb(*this, false); 
# 216
if (__cerb && __sbout) 
# 217
{ 
# 218
try 
# 219
{ 
# 220
bool __ineof; 
# 221
if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof)) { 
# 222
(__err |= std::ios_base::failbit); }  
# 223
if (__ineof) { 
# 224
(__err |= std::ios_base::eofbit); }  
# 225
} 
# 226
catch (__cxxabiv1::__forced_unwind &) 
# 227
{ 
# 228
this->_M_setstate(ios_base::failbit); 
# 229
throw; 
# 230
} 
# 231
catch (...) 
# 232
{ this->_M_setstate(ios_base::failbit); }  
# 233
} else { 
# 234
if (!__sbout) { 
# 235
(__err |= std::ios_base::failbit); }  }  
# 236
if (__err) { 
# 237
this->setstate(__err); }  
# 238
return *this; 
# 239
} 
# 241
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 244
basic_istream< _CharT, _Traits> ::get() 
# 245
{ 
# 246
const int_type __eof = traits_type::eof(); 
# 247
int_type __c = __eof; 
# 248
(_M_gcount) = (0); 
# 249
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 250
sentry __cerb(*this, true); 
# 251
if (__cerb) 
# 252
{ 
# 253
try 
# 254
{ 
# 255
__c = this->rdbuf()->sbumpc(); 
# 257
if (!traits_type::eq_int_type(__c, __eof)) { 
# 258
(_M_gcount) = (1); } else { 
# 260
(__err |= std::ios_base::eofbit); }  
# 261
} 
# 262
catch (__cxxabiv1::__forced_unwind &) 
# 263
{ 
# 264
this->_M_setstate(ios_base::badbit); 
# 265
throw; 
# 266
} 
# 267
catch (...) 
# 268
{ this->_M_setstate(ios_base::badbit); }  
# 269
}  
# 270
if (!(_M_gcount)) { 
# 271
(__err |= std::ios_base::failbit); }  
# 272
if (__err) { 
# 273
this->setstate(__err); }  
# 274
return __c; 
# 275
} 
# 277
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 280
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 281
{ 
# 282
(_M_gcount) = (0); 
# 283
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 284
sentry __cerb(*this, true); 
# 285
if (__cerb) 
# 286
{ 
# 287
try 
# 288
{ 
# 289
const int_type __cb = this->rdbuf()->sbumpc(); 
# 291
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 292
{ 
# 293
(_M_gcount) = (1); 
# 294
__c = traits_type::to_char_type(__cb); 
# 295
} else { 
# 297
(__err |= std::ios_base::eofbit); }  
# 298
} 
# 299
catch (__cxxabiv1::__forced_unwind &) 
# 300
{ 
# 301
this->_M_setstate(ios_base::badbit); 
# 302
throw; 
# 303
} 
# 304
catch (...) 
# 305
{ this->_M_setstate(ios_base::badbit); }  
# 306
}  
# 307
if (!(_M_gcount)) { 
# 308
(__err |= std::ios_base::failbit); }  
# 309
if (__err) { 
# 310
this->setstate(__err); }  
# 311
return *this; 
# 312
} 
# 314
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 317
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 318
{ 
# 319
(_M_gcount) = (0); 
# 320
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 321
sentry __cerb(*this, true); 
# 322
if (__cerb) 
# 323
{ 
# 324
try 
# 325
{ 
# 326
const int_type __idelim = traits_type::to_int_type(__delim); 
# 327
const int_type __eof = traits_type::eof(); 
# 328
__streambuf_type *__sb = this->rdbuf(); 
# 329
int_type __c = __sb->sgetc(); 
# 331
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 334
{ 
# 335
(*(__s++)) = traits_type::to_char_type(__c); 
# 336
++(_M_gcount); 
# 337
__c = __sb->snextc(); 
# 338
}  
# 339
if (traits_type::eq_int_type(__c, __eof)) { 
# 340
(__err |= std::ios_base::eofbit); }  
# 341
} 
# 342
catch (__cxxabiv1::__forced_unwind &) 
# 343
{ 
# 344
this->_M_setstate(ios_base::badbit); 
# 345
throw; 
# 346
} 
# 347
catch (...) 
# 348
{ this->_M_setstate(ios_base::badbit); }  
# 349
}  
# 352
if (__n > (0)) { 
# 353
(*__s) = char_type(); }  
# 354
if (!(_M_gcount)) { 
# 355
(__err |= std::ios_base::failbit); }  
# 356
if (__err) { 
# 357
this->setstate(__err); }  
# 358
return *this; 
# 359
} 
# 361
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 364
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 365
{ 
# 366
(_M_gcount) = (0); 
# 367
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 368
sentry __cerb(*this, true); 
# 369
if (__cerb) 
# 370
{ 
# 371
try 
# 372
{ 
# 373
const int_type __idelim = traits_type::to_int_type(__delim); 
# 374
const int_type __eof = traits_type::eof(); 
# 375
__streambuf_type *__this_sb = this->rdbuf(); 
# 376
int_type __c = __this_sb->sgetc(); 
# 377
char_type __c2 = traits_type::to_char_type(__c); 
# 379
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type(__sb.sputc(__c2), __eof))) 
# 382
{ 
# 383
++(_M_gcount); 
# 384
__c = __this_sb->snextc(); 
# 385
__c2 = traits_type::to_char_type(__c); 
# 386
}  
# 387
if (traits_type::eq_int_type(__c, __eof)) { 
# 388
(__err |= std::ios_base::eofbit); }  
# 389
} 
# 390
catch (__cxxabiv1::__forced_unwind &) 
# 391
{ 
# 392
this->_M_setstate(ios_base::badbit); 
# 393
throw; 
# 394
} 
# 395
catch (...) 
# 396
{ this->_M_setstate(ios_base::badbit); }  
# 397
}  
# 398
if (!(_M_gcount)) { 
# 399
(__err |= std::ios_base::failbit); }  
# 400
if (__err) { 
# 401
this->setstate(__err); }  
# 402
return *this; 
# 403
} 
# 405
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 408
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 409
{ 
# 410
(_M_gcount) = (0); 
# 411
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 412
sentry __cerb(*this, true); 
# 413
if (__cerb) 
# 414
{ 
# 415
try 
# 416
{ 
# 417
const int_type __idelim = traits_type::to_int_type(__delim); 
# 418
const int_type __eof = traits_type::eof(); 
# 419
__streambuf_type *__sb = this->rdbuf(); 
# 420
int_type __c = __sb->sgetc(); 
# 422
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 425
{ 
# 426
(*(__s++)) = traits_type::to_char_type(__c); 
# 427
__c = __sb->snextc(); 
# 428
++(_M_gcount); 
# 429
}  
# 430
if (traits_type::eq_int_type(__c, __eof)) { 
# 431
(__err |= std::ios_base::eofbit); } else 
# 433
{ 
# 434
if (traits_type::eq_int_type(__c, __idelim)) 
# 435
{ 
# 436
__sb->sbumpc(); 
# 437
++(_M_gcount); 
# 438
} else { 
# 440
(__err |= std::ios_base::failbit); }  
# 441
}  
# 442
} 
# 443
catch (__cxxabiv1::__forced_unwind &) 
# 444
{ 
# 445
this->_M_setstate(ios_base::badbit); 
# 446
throw; 
# 447
} 
# 448
catch (...) 
# 449
{ this->_M_setstate(ios_base::badbit); }  
# 450
}  
# 453
if (__n > (0)) { 
# 454
(*__s) = char_type(); }  
# 455
if (!(_M_gcount)) { 
# 456
(__err |= std::ios_base::failbit); }  
# 457
if (__err) { 
# 458
this->setstate(__err); }  
# 459
return *this; 
# 460
} 
# 465
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 468
basic_istream< _CharT, _Traits> ::ignore() 
# 469
{ 
# 470
(_M_gcount) = (0); 
# 471
sentry __cerb(*this, true); 
# 472
if (__cerb) 
# 473
{ 
# 474
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 475
try 
# 476
{ 
# 477
const int_type __eof = traits_type::eof(); 
# 478
__streambuf_type *__sb = this->rdbuf(); 
# 480
if (traits_type::eq_int_type(__sb->sbumpc(), __eof)) { 
# 481
(__err |= std::ios_base::eofbit); } else { 
# 483
(_M_gcount) = (1); }  
# 484
} 
# 485
catch (__cxxabiv1::__forced_unwind &) 
# 486
{ 
# 487
this->_M_setstate(ios_base::badbit); 
# 488
throw; 
# 489
} 
# 490
catch (...) 
# 491
{ this->_M_setstate(ios_base::badbit); }  
# 492
if (__err) { 
# 493
this->setstate(__err); }  
# 494
}  
# 495
return *this; 
# 496
} 
# 498
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 501
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 502
{ 
# 503
(_M_gcount) = (0); 
# 504
sentry __cerb(*this, true); 
# 505
if (__cerb && (__n > (0))) 
# 506
{ 
# 507
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 508
try 
# 509
{ 
# 510
const int_type __eof = traits_type::eof(); 
# 511
__streambuf_type *__sb = this->rdbuf(); 
# 512
int_type __c = __sb->sgetc(); 
# 521 "/usr/include/c++/7/bits/istream.tcc" 3
bool __large_ignore = false; 
# 522
while (true) 
# 523
{ 
# 524
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 526
{ 
# 527
++(_M_gcount); 
# 528
__c = __sb->snextc(); 
# 529
}  
# 530
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 532
{ 
# 533
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 535
__large_ignore = true; 
# 536
} else { 
# 538
break; }  
# 539
}  
# 541
if (__large_ignore) { 
# 542
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 544
if (traits_type::eq_int_type(__c, __eof)) { 
# 545
(__err |= std::ios_base::eofbit); }  
# 546
} 
# 547
catch (__cxxabiv1::__forced_unwind &) 
# 548
{ 
# 549
this->_M_setstate(ios_base::badbit); 
# 550
throw; 
# 551
} 
# 552
catch (...) 
# 553
{ this->_M_setstate(ios_base::badbit); }  
# 554
if (__err) { 
# 555
this->setstate(__err); }  
# 556
}  
# 557
return *this; 
# 558
} 
# 560
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 563
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 564
{ 
# 565
(_M_gcount) = (0); 
# 566
sentry __cerb(*this, true); 
# 567
if (__cerb && (__n > (0))) 
# 568
{ 
# 569
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 570
try 
# 571
{ 
# 572
const int_type __eof = traits_type::eof(); 
# 573
__streambuf_type *__sb = this->rdbuf(); 
# 574
int_type __c = __sb->sgetc(); 
# 577
bool __large_ignore = false; 
# 578
while (true) 
# 579
{ 
# 580
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 583
{ 
# 584
++(_M_gcount); 
# 585
__c = __sb->snextc(); 
# 586
}  
# 587
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 590
{ 
# 591
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 593
__large_ignore = true; 
# 594
} else { 
# 596
break; }  
# 597
}  
# 599
if (__large_ignore) { 
# 600
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 602
if (traits_type::eq_int_type(__c, __eof)) { 
# 603
(__err |= std::ios_base::eofbit); } else { 
# 604
if (traits_type::eq_int_type(__c, __delim)) 
# 605
{ 
# 606
if ((_M_gcount) < __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 608
++(_M_gcount); }  
# 609
__sb->sbumpc(); 
# 610
}  }  
# 611
} 
# 612
catch (__cxxabiv1::__forced_unwind &) 
# 613
{ 
# 614
this->_M_setstate(ios_base::badbit); 
# 615
throw; 
# 616
} 
# 617
catch (...) 
# 618
{ this->_M_setstate(ios_base::badbit); }  
# 619
if (__err) { 
# 620
this->setstate(__err); }  
# 621
}  
# 622
return *this; 
# 623
} 
# 625
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 628
basic_istream< _CharT, _Traits> ::peek() 
# 629
{ 
# 630
int_type __c = traits_type::eof(); 
# 631
(_M_gcount) = (0); 
# 632
sentry __cerb(*this, true); 
# 633
if (__cerb) 
# 634
{ 
# 635
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 636
try 
# 637
{ 
# 638
__c = this->rdbuf()->sgetc(); 
# 639
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 640
(__err |= std::ios_base::eofbit); }  
# 641
} 
# 642
catch (__cxxabiv1::__forced_unwind &) 
# 643
{ 
# 644
this->_M_setstate(ios_base::badbit); 
# 645
throw; 
# 646
} 
# 647
catch (...) 
# 648
{ this->_M_setstate(ios_base::badbit); }  
# 649
if (__err) { 
# 650
this->setstate(__err); }  
# 651
}  
# 652
return __c; 
# 653
} 
# 655
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 658
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 659
{ 
# 660
(_M_gcount) = (0); 
# 661
sentry __cerb(*this, true); 
# 662
if (__cerb) 
# 663
{ 
# 664
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 665
try 
# 666
{ 
# 667
(_M_gcount) = this->rdbuf()->sgetn(__s, __n); 
# 668
if ((_M_gcount) != __n) { 
# 669
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 670
} 
# 671
catch (__cxxabiv1::__forced_unwind &) 
# 672
{ 
# 673
this->_M_setstate(ios_base::badbit); 
# 674
throw; 
# 675
} 
# 676
catch (...) 
# 677
{ this->_M_setstate(ios_base::badbit); }  
# 678
if (__err) { 
# 679
this->setstate(__err); }  
# 680
}  
# 681
return *this; 
# 682
} 
# 684
template< class _CharT, class _Traits> streamsize 
# 687
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 688
{ 
# 689
(_M_gcount) = (0); 
# 690
sentry __cerb(*this, true); 
# 691
if (__cerb) 
# 692
{ 
# 693
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 694
try 
# 695
{ 
# 697
const std::streamsize __num = this->rdbuf()->in_avail(); 
# 698
if (__num > (0)) { 
# 699
(_M_gcount) = this->rdbuf()->sgetn(__s, std::min(__num, __n)); } else { 
# 700
if (__num == (-1)) { 
# 701
(__err |= std::ios_base::eofbit); }  }  
# 702
} 
# 703
catch (__cxxabiv1::__forced_unwind &) 
# 704
{ 
# 705
this->_M_setstate(ios_base::badbit); 
# 706
throw; 
# 707
} 
# 708
catch (...) 
# 709
{ this->_M_setstate(ios_base::badbit); }  
# 710
if (__err) { 
# 711
this->setstate(__err); }  
# 712
}  
# 713
return _M_gcount; 
# 714
} 
# 716
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 719
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 720
{ 
# 723
(_M_gcount) = (0); 
# 725
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 726
sentry __cerb(*this, true); 
# 727
if (__cerb) 
# 728
{ 
# 729
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 730
try 
# 731
{ 
# 732
const int_type __eof = traits_type::eof(); 
# 733
__streambuf_type *__sb = this->rdbuf(); 
# 734
if ((!__sb) || traits_type::eq_int_type(__sb->sputbackc(__c), __eof)) { 
# 736
(__err |= std::ios_base::badbit); }  
# 737
} 
# 738
catch (__cxxabiv1::__forced_unwind &) 
# 739
{ 
# 740
this->_M_setstate(ios_base::badbit); 
# 741
throw; 
# 742
} 
# 743
catch (...) 
# 744
{ this->_M_setstate(ios_base::badbit); }  
# 745
if (__err) { 
# 746
this->setstate(__err); }  
# 747
}  
# 748
return *this; 
# 749
} 
# 751
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 754
basic_istream< _CharT, _Traits> ::unget() 
# 755
{ 
# 758
(_M_gcount) = (0); 
# 760
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 761
sentry __cerb(*this, true); 
# 762
if (__cerb) 
# 763
{ 
# 764
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 765
try 
# 766
{ 
# 767
const int_type __eof = traits_type::eof(); 
# 768
__streambuf_type *__sb = this->rdbuf(); 
# 769
if ((!__sb) || traits_type::eq_int_type(__sb->sungetc(), __eof)) { 
# 771
(__err |= std::ios_base::badbit); }  
# 772
} 
# 773
catch (__cxxabiv1::__forced_unwind &) 
# 774
{ 
# 775
this->_M_setstate(ios_base::badbit); 
# 776
throw; 
# 777
} 
# 778
catch (...) 
# 779
{ this->_M_setstate(ios_base::badbit); }  
# 780
if (__err) { 
# 781
this->setstate(__err); }  
# 782
}  
# 783
return *this; 
# 784
} 
# 786
template< class _CharT, class _Traits> int 
# 789
basic_istream< _CharT, _Traits> ::sync() 
# 790
{ 
# 793
int __ret = (-1); 
# 794
sentry __cerb(*this, true); 
# 795
if (__cerb) 
# 796
{ 
# 797
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 798
try 
# 799
{ 
# 800
__streambuf_type *__sb = this->rdbuf(); 
# 801
if (__sb) 
# 802
{ 
# 803
if (__sb->pubsync() == (-1)) { 
# 804
(__err |= std::ios_base::badbit); } else { 
# 806
__ret = 0; }  
# 807
}  
# 808
} 
# 809
catch (__cxxabiv1::__forced_unwind &) 
# 810
{ 
# 811
this->_M_setstate(ios_base::badbit); 
# 812
throw; 
# 813
} 
# 814
catch (...) 
# 815
{ this->_M_setstate(ios_base::badbit); }  
# 816
if (__err) { 
# 817
this->setstate(__err); }  
# 818
}  
# 819
return __ret; 
# 820
} 
# 822
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 825
basic_istream< _CharT, _Traits> ::tellg() 
# 826
{ 
# 829
pos_type __ret = ((pos_type)(-1)); 
# 830
sentry __cerb(*this, true); 
# 831
if (__cerb) 
# 832
{ 
# 833
try 
# 834
{ 
# 835
if (!this->fail()) { 
# 836
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in); }  
# 838
} 
# 839
catch (__cxxabiv1::__forced_unwind &) 
# 840
{ 
# 841
this->_M_setstate(ios_base::badbit); 
# 842
throw; 
# 843
} 
# 844
catch (...) 
# 845
{ this->_M_setstate(ios_base::badbit); }  
# 846
}  
# 847
return __ret; 
# 848
} 
# 850
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 853
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 854
{ 
# 858
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 859
sentry __cerb(*this, true); 
# 860
if (__cerb) 
# 861
{ 
# 862
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 863
try 
# 864
{ 
# 865
if (!this->fail()) 
# 866
{ 
# 868
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in); 
# 872
if (__p == ((pos_type)((off_type)(-1)))) { 
# 873
(__err |= std::ios_base::failbit); }  
# 874
}  
# 875
} 
# 876
catch (__cxxabiv1::__forced_unwind &) 
# 877
{ 
# 878
this->_M_setstate(ios_base::badbit); 
# 879
throw; 
# 880
} 
# 881
catch (...) 
# 882
{ this->_M_setstate(ios_base::badbit); }  
# 883
if (__err) { 
# 884
this->setstate(__err); }  
# 885
}  
# 886
return *this; 
# 887
} 
# 889
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 892
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 893
{ 
# 897
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 898
sentry __cerb(*this, true); 
# 899
if (__cerb) 
# 900
{ 
# 901
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 902
try 
# 903
{ 
# 904
if (!this->fail()) 
# 905
{ 
# 907
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in); 
# 911
if (__p == ((pos_type)((off_type)(-1)))) { 
# 912
(__err |= std::ios_base::failbit); }  
# 913
}  
# 914
} 
# 915
catch (__cxxabiv1::__forced_unwind &) 
# 916
{ 
# 917
this->_M_setstate(ios_base::badbit); 
# 918
throw; 
# 919
} 
# 920
catch (...) 
# 921
{ this->_M_setstate(ios_base::badbit); }  
# 922
if (__err) { 
# 923
this->setstate(__err); }  
# 924
}  
# 925
return *this; 
# 926
} 
# 929
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 931
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 932
{ 
# 933
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 934
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 936
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 937
if (__cerb) 
# 938
{ 
# 939
ios_base::iostate __err = ios_base::goodbit; 
# 940
try 
# 941
{ 
# 942
const __int_type __cb = __in.rdbuf()->sbumpc(); 
# 943
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 944
__c = _Traits::to_char_type(__cb); } else { 
# 946
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 947
} 
# 948
catch (__cxxabiv1::__forced_unwind &) 
# 949
{ 
# 950
__in._M_setstate(ios_base::badbit); 
# 951
throw; 
# 952
} 
# 953
catch (...) 
# 954
{ __in._M_setstate(ios_base::badbit); }  
# 955
if (__err) { 
# 956
__in.setstate(__err); }  
# 957
}  
# 958
return __in; 
# 959
} 
# 961
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 963
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 964
{ 
# 965
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 966
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 967
typedef typename _Traits::int_type int_type; 
# 968
typedef _CharT char_type; 
# 969
typedef ctype< _CharT>  __ctype_type; 
# 971
streamsize __extracted = (0); 
# 972
ios_base::iostate __err = ios_base::goodbit; 
# 973
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 974
if (__cerb) 
# 975
{ 
# 976
try 
# 977
{ 
# 979
streamsize __num = __in.width(); 
# 980
if (__num <= (0)) { 
# 981
__num = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 983
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 985
const int_type __eof = _Traits::eof(); 
# 986
__streambuf_type *__sb = __in.rdbuf(); 
# 987
int_type __c = __sb->sgetc(); 
# 989
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) 
# 993
{ 
# 994
(*(__s++)) = _Traits::to_char_type(__c); 
# 995
++__extracted; 
# 996
__c = __sb->snextc(); 
# 997
}  
# 998
if (_Traits::eq_int_type(__c, __eof)) { 
# 999
(__err |= ios_base::eofbit); }  
# 1003
(*__s) = char_type(); 
# 1004
__in.width(0); 
# 1005
} 
# 1006
catch (__cxxabiv1::__forced_unwind &) 
# 1007
{ 
# 1008
__in._M_setstate(ios_base::badbit); 
# 1009
throw; 
# 1010
} 
# 1011
catch (...) 
# 1012
{ __in._M_setstate(ios_base::badbit); }  
# 1013
}  
# 1014
if (!__extracted) { 
# 1015
(__err |= ios_base::failbit); }  
# 1016
if (__err) { 
# 1017
__in.setstate(__err); }  
# 1018
return __in; 
# 1019
} 
# 1022
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1024
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1025
{ 
# 1026
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1027
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1028
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1029
typedef ctype< _CharT>  __ctype_type; 
# 1031
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1032
const __int_type __eof = _Traits::eof(); 
# 1033
__streambuf_type *__sb = __in.rdbuf(); 
# 1034
__int_type __c = __sb->sgetc(); 
# 1036
while ((!_Traits::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, _Traits::to_char_type(__c))) { 
# 1038
__c = __sb->snextc(); }  
# 1040
if (_Traits::eq_int_type(__c, __eof)) { 
# 1041
__in.setstate(ios_base::eofbit); }  
# 1042
return __in; 
# 1043
} 
# 1048
extern template class basic_istream< char> ;
# 1049
extern template basic_istream< char>  &ws(basic_istream< char>  & __is);
# 1050
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, char & __c);
# 1051
extern template basic_istream< char>  &operator>>(basic_istream< char>  &, char *);
# 1052
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char & __c);
# 1053
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char & __c);
# 1054
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char * __s);
# 1055
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char * __s);
# 1057
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned short & __v);
# 1058
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned & __v);
# 1059
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long & __v);
# 1060
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long & __v);
# 1061
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(bool & __v);
# 1063
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long long & __v);
# 1064
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long long & __v);
# 1066
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(float & __v);
# 1067
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(double & __v);
# 1068
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long double & __v);
# 1069
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(void *& __v);
# 1071
extern template class basic_iostream< char> ;
# 1074
extern template class basic_istream< wchar_t> ;
# 1075
extern template basic_istream< wchar_t>  &ws(basic_istream< wchar_t>  & __is);
# 1076
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __in, wchar_t & __c);
# 1077
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  &, wchar_t *);
# 1079
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned short & __v);
# 1080
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned & __v);
# 1081
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long & __v);
# 1082
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long & __v);
# 1083
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(bool & __v);
# 1085
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long long & __v);
# 1086
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long long & __v);
# 1088
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(float & __v);
# 1089
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(double & __v);
# 1090
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long double & __v);
# 1091
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(void *& __v);
# 1093
extern template class basic_iostream< wchar_t> ;
# 1098
}
# 42 "/usr/include/c++/7/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/7/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 63 "/usr/include/c++/7/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72
template< class _T1, class ..._Args> inline void 
# 74
_Construct(_T1 *__p, _Args &&...__args) 
# 75
{ ::new (static_cast< void *>(__p)) _T1(std::forward< _Args> (__args)...); } 
# 87 "/usr/include/c++/7/bits/stl_construct.h" 3
template< class _T1> inline void 
# 89
_Construct_novalue(_T1 *__p) 
# 90
{ ::new (static_cast< void *>(__p)) _T1; } 
# 95
template< class _Tp> inline void 
# 97
_Destroy(_Tp *__pointer) 
# 98
{ __pointer->~_Tp(); } 
# 100
template< bool > 
# 101
struct _Destroy_aux { 
# 103
template< class _ForwardIterator> static void 
# 105
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 106
{ 
# 107
for (; __first != __last; ++__first) { 
# 108
std::_Destroy(std::__addressof(*__first)); }  
# 109
} 
# 110
}; 
# 113
template<> struct _Destroy_aux< true>  { 
# 115
template< class _ForwardIterator> static void 
# 117
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 118
}; 
# 125
template< class _ForwardIterator> inline void 
# 127
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 128
{ 
# 130
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 133
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 136
std::template _Destroy_aux< __has_trivial_destructor(_Value_type)> ::__destroy(__first, __last); 
# 138
} 
# 140
template< bool > 
# 141
struct _Destroy_n_aux { 
# 143
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 145
__destroy_n(_ForwardIterator __first, _Size __count) 
# 146
{ 
# 147
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 148
std::_Destroy(std::__addressof(*__first)); }  
# 149
return __first; 
# 150
} 
# 151
}; 
# 154
template<> struct _Destroy_n_aux< true>  { 
# 156
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 158
__destroy_n(_ForwardIterator __first, _Size __count) 
# 159
{ 
# 160
std::advance(__first, __count); 
# 161
return __first; 
# 162
} 
# 163
}; 
# 170
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 172
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 173
{ 
# 175
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 178
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 181
return std::template _Destroy_n_aux< __has_trivial_destructor(_Value_type)> ::__destroy_n(__first, __count); 
# 183
} 
# 191
template< class _ForwardIterator, class _Allocator> void 
# 193
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 194
__alloc) 
# 195
{ 
# 196
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 197
for (; __first != __last; ++__first) { 
# 198
__traits::destroy(__alloc, std::__addressof(*__first)); }  
# 199
} 
# 201
template< class _ForwardIterator, class _Tp> inline void 
# 203
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 205
{ 
# 206
_Destroy(__first, __last); 
# 207
} 
# 233 "/usr/include/c++/7/bits/stl_construct.h" 3
}
# 67 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< bool _TrivialValueTypes> 
# 72
struct __uninitialized_copy { 
# 74
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 76
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 77
__result) 
# 78
{ 
# 79
_ForwardIterator __cur = __result; 
# 80
try 
# 81
{ 
# 82
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 83
std::_Construct(std::__addressof(*__cur), *__first); }  
# 84
return __cur; 
# 85
} 
# 86
catch (...) 
# 87
{ 
# 88
std::_Destroy(__result, __cur); 
# 89
throw; 
# 90
}  
# 91
} 
# 92
}; 
# 95
template<> struct __uninitialized_copy< true>  { 
# 97
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 99
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 100
__result) 
# 101
{ return std::copy(__first, __last, __result); } 
# 102
}; 
# 113 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 115
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 116
__result) 
# 117
{ 
# 119
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType1; 
# 121
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 126
typedef typename iterator_traits< _InputIterator> ::reference _RefType1; 
# 127
typedef typename iterator_traits< _ForwardIterator> ::reference _RefType2; 
# 128
const bool __assignable = (is_assignable< typename iterator_traits< _ForwardIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ::value); 
# 131
return std::template __uninitialized_copy< __is_trivial(_ValueType1) && __is_trivial(_ValueType2) && __assignable> ::__uninit_copy(__first, __last, __result); 
# 135
} 
# 138
template< bool _TrivialValueType> 
# 139
struct __uninitialized_fill { 
# 141
template< class _ForwardIterator, class _Tp> static void 
# 143
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 144
__x) 
# 145
{ 
# 146
_ForwardIterator __cur = __first; 
# 147
try 
# 148
{ 
# 149
for (; __cur != __last; ++__cur) { 
# 150
std::_Construct(std::__addressof(*__cur), __x); }  
# 151
} 
# 152
catch (...) 
# 153
{ 
# 154
std::_Destroy(__first, __cur); 
# 155
throw; 
# 156
}  
# 157
} 
# 158
}; 
# 161
template<> struct __uninitialized_fill< true>  { 
# 163
template< class _ForwardIterator, class _Tp> static void 
# 165
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 166
__x) 
# 167
{ std::fill(__first, __last, __x); } 
# 168
}; 
# 179 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 181
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 182
__x) 
# 183
{ 
# 185
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 190
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 193
std::template __uninitialized_fill< __is_trivial(_ValueType) && __assignable> ::__uninit_fill(__first, __last, __x); 
# 195
} 
# 198
template< bool _TrivialValueType> 
# 199
struct __uninitialized_fill_n { 
# 201
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 203
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 204
__x) 
# 205
{ 
# 206
_ForwardIterator __cur = __first; 
# 207
try 
# 208
{ 
# 209
for (; __n > 0; (--__n), (++__cur)) { 
# 210
std::_Construct(std::__addressof(*__cur), __x); }  
# 211
return __cur; 
# 212
} 
# 213
catch (...) 
# 214
{ 
# 215
std::_Destroy(__first, __cur); 
# 216
throw; 
# 217
}  
# 218
} 
# 219
}; 
# 222
template<> struct __uninitialized_fill_n< true>  { 
# 224
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 226
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 227
__x) 
# 228
{ return std::fill_n(__first, __n, __x); } 
# 229
}; 
# 242 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 244
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) 
# 245
{ 
# 247
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 252
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 254
return __uninitialized_fill_n< __is_trivial(_ValueType) && __assignable> ::__uninit_fill_n(__first, __n, __x); 
# 256
} 
# 264
template< class _InputIterator, class _ForwardIterator, class 
# 265
_Allocator> _ForwardIterator 
# 267
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 268
__result, _Allocator &__alloc) 
# 269
{ 
# 270
_ForwardIterator __cur = __result; 
# 271
try 
# 272
{ 
# 273
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 274
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 275
__traits::construct(__alloc, std::__addressof(*__cur), *__first); }  
# 276
return __cur; 
# 277
} 
# 278
catch (...) 
# 279
{ 
# 280
std::_Destroy(__result, __cur, __alloc); 
# 281
throw; 
# 282
}  
# 283
} 
# 285
template< class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 287
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 288
__result, allocator< _Tp>  &) 
# 289
{ return std::uninitialized_copy(__first, __last, __result); } 
# 291
template< class _InputIterator, class _ForwardIterator, class 
# 292
_Allocator> inline _ForwardIterator 
# 294
__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 295
__result, _Allocator &__alloc) 
# 296
{ 
# 297
return std::__uninitialized_copy_a(std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc); 
# 300
} 
# 302
template< class _InputIterator, class _ForwardIterator, class 
# 303
_Allocator> inline _ForwardIterator 
# 305
__uninitialized_move_if_noexcept_a(_InputIterator __first, _InputIterator 
# 306
__last, _ForwardIterator 
# 307
__result, _Allocator &
# 308
__alloc) 
# 309
{ 
# 310
return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first), std::__make_move_if_noexcept_iterator(__last), __result, __alloc); 
# 313
} 
# 315
template< class _ForwardIterator, class _Tp, class _Allocator> void 
# 317
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 318
__x, _Allocator &__alloc) 
# 319
{ 
# 320
_ForwardIterator __cur = __first; 
# 321
try 
# 322
{ 
# 323
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 324
for (; __cur != __last; ++__cur) { 
# 325
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 326
} 
# 327
catch (...) 
# 328
{ 
# 329
std::_Destroy(__first, __cur, __alloc); 
# 330
throw; 
# 331
}  
# 332
} 
# 334
template< class _ForwardIterator, class _Tp, class _Tp2> inline void 
# 336
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 337
__x, allocator< _Tp2>  &) 
# 338
{ std::uninitialized_fill(__first, __last, __x); } 
# 340
template< class _ForwardIterator, class _Size, class _Tp, class 
# 341
_Allocator> _ForwardIterator 
# 343
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 344
__x, _Allocator &__alloc) 
# 345
{ 
# 346
_ForwardIterator __cur = __first; 
# 347
try 
# 348
{ 
# 349
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 350
for (; __n > 0; (--__n), (++__cur)) { 
# 351
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 352
return __cur; 
# 353
} 
# 354
catch (...) 
# 355
{ 
# 356
std::_Destroy(__first, __cur, __alloc); 
# 357
throw; 
# 358
}  
# 359
} 
# 361
template< class _ForwardIterator, class _Size, class _Tp, class 
# 362
_Tp2> inline _ForwardIterator 
# 364
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 365
__x, allocator< _Tp2>  &) 
# 366
{ return std::uninitialized_fill_n(__first, __n, __x); } 
# 378 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 379
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 381
__uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 
# 382
__last1, _InputIterator2 
# 383
__first2, _InputIterator2 
# 384
__last2, _ForwardIterator 
# 385
__result, _Allocator &
# 386
__alloc) 
# 387
{ 
# 388
_ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc); 
# 391
try 
# 392
{ 
# 393
return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc); 
# 394
} 
# 395
catch (...) 
# 396
{ 
# 397
std::_Destroy(__result, __mid, __alloc); 
# 398
throw; 
# 399
}  
# 400
} 
# 406
template< class _InputIterator1, class _InputIterator2, class 
# 407
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 409
__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 
# 410
__last1, _InputIterator2 
# 411
__first2, _InputIterator2 
# 412
__last2, _ForwardIterator 
# 413
__result, _Allocator &
# 414
__alloc) 
# 415
{ 
# 416
_ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc); 
# 419
try 
# 420
{ 
# 421
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc); 
# 422
} 
# 423
catch (...) 
# 424
{ 
# 425
std::_Destroy(__result, __mid, __alloc); 
# 426
throw; 
# 427
}  
# 428
} 
# 433
template< class _ForwardIterator, class _Tp, class _InputIterator, class 
# 434
_Allocator> inline _ForwardIterator 
# 436
__uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 437
__x, _InputIterator __first, _InputIterator 
# 438
__last, _Allocator &__alloc) 
# 439
{ 
# 440
std::__uninitialized_fill_a(__result, __mid, __x, __alloc); 
# 441
try 
# 442
{ 
# 443
return std::__uninitialized_move_a(__first, __last, __mid, __alloc); 
# 444
} 
# 445
catch (...) 
# 446
{ 
# 447
std::_Destroy(__result, __mid, __alloc); 
# 448
throw; 
# 449
}  
# 450
} 
# 455
template< class _InputIterator, class _ForwardIterator, class _Tp, class 
# 456
_Allocator> inline void 
# 458
__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 459
__first2, _ForwardIterator 
# 460
__last2, const _Tp &__x, _Allocator &
# 461
__alloc) 
# 462
{ 
# 463
_ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc); 
# 466
try 
# 467
{ 
# 468
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc); 
# 469
} 
# 470
catch (...) 
# 471
{ 
# 472
std::_Destroy(__first2, __mid2, __alloc); 
# 473
throw; 
# 474
}  
# 475
} 
# 481
template< bool _TrivialValueType> 
# 482
struct __uninitialized_default_1 { 
# 484
template< class _ForwardIterator> static void 
# 486
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 487
{ 
# 488
_ForwardIterator __cur = __first; 
# 489
try 
# 490
{ 
# 491
for (; __cur != __last; ++__cur) { 
# 492
std::_Construct(std::__addressof(*__cur)); }  
# 493
} 
# 494
catch (...) 
# 495
{ 
# 496
std::_Destroy(__first, __cur); 
# 497
throw; 
# 498
}  
# 499
} 
# 500
}; 
# 503
template<> struct __uninitialized_default_1< true>  { 
# 505
template< class _ForwardIterator> static void 
# 507
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 508
{ 
# 510
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 512
std::fill(__first, __last, _ValueType()); 
# 513
} 
# 514
}; 
# 516
template< bool _TrivialValueType> 
# 517
struct __uninitialized_default_n_1 { 
# 519
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 521
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 522
{ 
# 523
_ForwardIterator __cur = __first; 
# 524
try 
# 525
{ 
# 526
for (; __n > 0; (--__n), (++__cur)) { 
# 527
std::_Construct(std::__addressof(*__cur)); }  
# 528
return __cur; 
# 529
} 
# 530
catch (...) 
# 531
{ 
# 532
std::_Destroy(__first, __cur); 
# 533
throw; 
# 534
}  
# 535
} 
# 536
}; 
# 539
template<> struct __uninitialized_default_n_1< true>  { 
# 541
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 543
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 544
{ 
# 546
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 548
return std::fill_n(__first, __n, _ValueType()); 
# 549
} 
# 550
}; 
# 555
template< class _ForwardIterator> inline void 
# 557
__uninitialized_default(_ForwardIterator __first, _ForwardIterator 
# 558
__last) 
# 559
{ 
# 561
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 563
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 565
std::template __uninitialized_default_1< __is_trivial(_ValueType) && __assignable> ::__uninit_default(__first, __last); 
# 568
} 
# 572
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 574
__uninitialized_default_n(_ForwardIterator __first, _Size __n) 
# 575
{ 
# 577
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 579
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 581
return __uninitialized_default_n_1< __is_trivial(_ValueType) && __assignable> ::__uninit_default_n(__first, __n); 
# 584
} 
# 590
template< class _ForwardIterator, class _Allocator> void 
# 592
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 593
__last, _Allocator &
# 594
__alloc) 
# 595
{ 
# 596
_ForwardIterator __cur = __first; 
# 597
try 
# 598
{ 
# 599
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 600
for (; __cur != __last; ++__cur) { 
# 601
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 602
} 
# 603
catch (...) 
# 604
{ 
# 605
std::_Destroy(__first, __cur, __alloc); 
# 606
throw; 
# 607
}  
# 608
} 
# 610
template< class _ForwardIterator, class _Tp> inline void 
# 612
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 613
__last, allocator< _Tp>  &) 
# 615
{ std::__uninitialized_default(__first, __last); } 
# 621
template< class _ForwardIterator, class _Size, class _Allocator> _ForwardIterator 
# 623
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator &
# 624
__alloc) 
# 625
{ 
# 626
_ForwardIterator __cur = __first; 
# 627
try 
# 628
{ 
# 629
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 630
for (; __n > 0; (--__n), (++__cur)) { 
# 631
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 632
return __cur; 
# 633
} 
# 634
catch (...) 
# 635
{ 
# 636
std::_Destroy(__first, __cur, __alloc); 
# 637
throw; 
# 638
}  
# 639
} 
# 641
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 643
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator< _Tp>  &) 
# 645
{ return std::__uninitialized_default_n(__first, __n); } 
# 647
template< bool _TrivialValueType> 
# 648
struct __uninitialized_default_novalue_1 { 
# 650
template< class _ForwardIterator> static void 
# 652
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 653
__last) 
# 654
{ 
# 655
_ForwardIterator __cur = __first; 
# 656
try 
# 657
{ 
# 658
for (; __cur != __last; ++__cur) { 
# 659
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 660
} 
# 661
catch (...) 
# 662
{ 
# 663
std::_Destroy(__first, __cur); 
# 664
throw; 
# 665
}  
# 666
} 
# 667
}; 
# 670
template<> struct __uninitialized_default_novalue_1< true>  { 
# 672
template< class _ForwardIterator> static void 
# 674
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 675
__last) 
# 676
{ 
# 677
} 
# 678
}; 
# 680
template< bool _TrivialValueType> 
# 681
struct __uninitialized_default_novalue_n_1 { 
# 683
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 685
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 686
{ 
# 687
_ForwardIterator __cur = __first; 
# 688
try 
# 689
{ 
# 690
for (; __n > 0; (--__n), (++__cur)) { 
# 691
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 692
return __cur; 
# 693
} 
# 694
catch (...) 
# 695
{ 
# 696
std::_Destroy(__first, __cur); 
# 697
throw; 
# 698
}  
# 699
} 
# 700
}; 
# 703
template<> struct __uninitialized_default_novalue_n_1< true>  { 
# 705
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 707
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 708
{ return std::next(__first, __n); } 
# 709
}; 
# 714
template< class _ForwardIterator> inline void 
# 716
__uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 717
__last) 
# 718
{ 
# 720
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 722
std::template __uninitialized_default_novalue_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue(__first, __last); 
# 725
} 
# 729
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 731
__uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 732
{ 
# 734
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 736
return __uninitialized_default_novalue_n_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue_n(__first, __n); 
# 739
} 
# 741
template< class _InputIterator, class _Size, class 
# 742
_ForwardIterator> _ForwardIterator 
# 744
__uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 745
__result, input_iterator_tag) 
# 746
{ 
# 747
_ForwardIterator __cur = __result; 
# 748
try 
# 749
{ 
# 750
for (; __n > 0; ((--__n), (++__first)), (++__cur)) { 
# 751
std::_Construct(std::__addressof(*__cur), *__first); }  
# 752
return __cur; 
# 753
} 
# 754
catch (...) 
# 755
{ 
# 756
std::_Destroy(__result, __cur); 
# 757
throw; 
# 758
}  
# 759
} 
# 761
template< class _RandomAccessIterator, class _Size, class 
# 762
_ForwardIterator> inline _ForwardIterator 
# 764
__uninitialized_copy_n(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 765
__result, random_access_iterator_tag) 
# 767
{ return std::uninitialized_copy(__first, __first + __n, __result); } 
# 769
template< class _InputIterator, class _Size, class 
# 770
_ForwardIterator> pair< _InputIterator, _ForwardIterator>  
# 772
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 773
__result, input_iterator_tag) 
# 774
{ 
# 775
_ForwardIterator __cur = __result; 
# 776
try 
# 777
{ 
# 778
for (; __n > 0; ((--__n), (++__first)), (++__cur)) { 
# 779
std::_Construct(std::__addressof(*__cur), *__first); }  
# 780
return {__first, __cur}; 
# 781
} 
# 782
catch (...) 
# 783
{ 
# 784
std::_Destroy(__result, __cur); 
# 785
throw; 
# 786
}  
# 787
} 
# 789
template< class _RandomAccessIterator, class _Size, class 
# 790
_ForwardIterator> inline pair< _RandomAccessIterator, _ForwardIterator>  
# 792
__uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 793
__result, random_access_iterator_tag) 
# 795
{ 
# 796
auto __second_res = uninitialized_copy(__first, __first + __n, __result); 
# 797
auto __first_res = std::next(__first, __n); 
# 798
return {__first_res, __second_res}; 
# 799
} 
# 810 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline _ForwardIterator 
# 812
uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 813
__result) 
# 814
{ return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 815
} 
# 817
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 819
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 820
__result) 
# 821
{ 
# 822
return std::__uninitialized_copy_n_pair(__first, __n, __result, std::__iterator_category(__first)); 
# 825
} 
# 885 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
}
# 68 "/usr/include/c++/7/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class _Tp, class _Alloc> 
# 74
struct _Vector_base { 
# 77
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other _Tp_alloc_type; 
# 79
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::pointer pointer; 
# 81
struct _Vector_impl : public _Tp_alloc_type { 
# 84
typename _Vector_base< _Tp, _Alloc> ::pointer _M_start; 
# 85
typename _Vector_base< _Tp, _Alloc> ::pointer _M_finish; 
# 86
typename _Vector_base< _Tp, _Alloc> ::pointer _M_end_of_storage; 
# 88
_Vector_impl() : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage() 
# 90
{ } 
# 92
_Vector_impl(const typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage() 
# 94
{ } 
# 97
_Vector_impl(typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)), _M_start(), _M_finish(), _M_end_of_storage() 
# 100
{ } 
# 103
void _M_swap_data(_Vector_impl &__x) noexcept 
# 104
{ 
# 105
std::swap(_M_start, __x._M_start); 
# 106
std::swap(_M_finish, __x._M_finish); 
# 107
std::swap(_M_end_of_storage, __x._M_end_of_storage); 
# 108
} 
# 109
}; 
# 112
typedef _Alloc allocator_type; 
# 115
_Tp_alloc_type &_M_get_Tp_allocator() noexcept 
# 116
{ return *(static_cast< _Tp_alloc_type *>(&(this->_M_impl))); } 
# 119
const _Tp_alloc_type &_M_get_Tp_allocator() const noexcept 
# 120
{ return *(static_cast< const _Tp_alloc_type *>(&(this->_M_impl))); } 
# 123
allocator_type get_allocator() const noexcept 
# 124
{ return (allocator_type)_M_get_Tp_allocator(); } 
# 126
_Vector_base() : _M_impl() 
# 127
{ } 
# 129
_Vector_base(const allocator_type &__a) noexcept : _M_impl(__a) 
# 130
{ } 
# 132
_Vector_base(size_t __n) : _M_impl() 
# 134
{ _M_create_storage(__n); } 
# 136
_Vector_base(size_t __n, const allocator_type &__a) : _M_impl(__a) 
# 138
{ _M_create_storage(__n); } 
# 141
_Vector_base(_Tp_alloc_type &&__a) noexcept : _M_impl(std::move(__a)) 
# 142
{ } 
# 144
_Vector_base(_Vector_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Tp_allocator())) 
# 146
{ (this->_M_impl)._M_swap_data(__x._M_impl); } 
# 148
_Vector_base(_Vector_base &&__x, const allocator_type &__a) : _M_impl(__a) 
# 150
{ 
# 151
if (__x.get_allocator() == __a) { 
# 152
(this->_M_impl)._M_swap_data(__x._M_impl); } else 
# 154
{ 
# 155
size_t __n = ((__x._M_impl)._M_finish) - ((__x._M_impl)._M_start); 
# 156
_M_create_storage(__n); 
# 157
}  
# 158
} 
# 161
~_Vector_base() noexcept 
# 162
{ _M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 163
} 
# 166
_Vector_impl _M_impl; 
# 169
pointer _M_allocate(size_t __n) 
# 170
{ 
# 171
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 172
return (__n != (0)) ? _Tr::allocate(_M_impl, __n) : pointer(); 
# 173
} 
# 176
void _M_deallocate(pointer __p, size_t __n) 
# 177
{ 
# 178
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 179
if (__p) { 
# 180
_Tr::deallocate(_M_impl, __p, __n); }  
# 181
} 
# 185
private: void _M_create_storage(size_t __n) 
# 186
{ 
# 187
((this->_M_impl)._M_start) = _M_allocate(__n); 
# 188
((this->_M_impl)._M_finish) = ((this->_M_impl)._M_start); 
# 189
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 190
} 
# 191
}; 
# 215 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 216
class vector : protected _Vector_base< _Tp, _Alloc>  { 
# 227 "/usr/include/c++/7/bits/stl_vector.h" 3
typedef _Vector_base< _Tp, _Alloc>  _Base; 
# 228
typedef typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 229
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Alloc_traits; 
# 232
public: typedef _Tp value_type; 
# 233
typedef typename _Vector_base< _Tp, _Alloc> ::pointer pointer; 
# 234
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_pointer const_pointer; 
# 235
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::reference reference; 
# 236
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_reference const_reference; 
# 237
typedef __gnu_cxx::__normal_iterator< pointer, vector>  iterator; 
# 239
typedef __gnu_cxx::__normal_iterator< const_pointer, vector>  const_iterator; 
# 240
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 241
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 242
typedef std::size_t size_type; 
# 243
typedef std::ptrdiff_t difference_type; 
# 244
typedef _Alloc allocator_type; 
# 247
protected: using _Vector_base< _Tp, _Alloc> ::_M_allocate;
# 248
using _Vector_base< _Tp, _Alloc> ::_M_deallocate;
# 249
using _Vector_base< _Tp, _Alloc> ::_M_impl;
# 250
using _Vector_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 259
public: vector() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _Base() 
# 263
{ } 
# 270
explicit vector(const allocator_type &__a) noexcept : _Base(__a) 
# 271
{ } 
# 283 "/usr/include/c++/7/bits/stl_vector.h" 3
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : _Base(__n, __a) 
# 285
{ _M_default_initialize(__n); } 
# 295 "/usr/include/c++/7/bits/stl_vector.h" 3
vector(size_type __n, const value_type &__value, const allocator_type &
# 296
__a = allocator_type()) : _Base(__n, __a) 
# 298
{ _M_fill_initialize(__n, __value); } 
# 326 "/usr/include/c++/7/bits/stl_vector.h" 3
vector(const vector &__x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator())) 
# 329
{ 
# 330
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 334
} 
# 344 "/usr/include/c++/7/bits/stl_vector.h" 3
vector(vector &&__x) noexcept : _Base(std::move(__x)) 
# 345
{ } 
# 348
vector(const vector &__x, const allocator_type &__a) : _Base(__x.size(), __a) 
# 350
{ 
# 351
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 355
} 
# 358
vector(vector &&__rv, const allocator_type &__m) noexcept(_Alloc_traits::_S_always_equal()) : _Base(std::move(__rv), __m) 
# 361
{ 
# 362
if (__rv.get_allocator() != __m) 
# 363
{ 
# 364
((this->_M_impl)._M_finish) = std::__uninitialized_move_a(__rv.begin(), __rv.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 368
__rv.clear(); 
# 369
}  
# 370
} 
# 383 "/usr/include/c++/7/bits/stl_vector.h" 3
vector(initializer_list< value_type>  __l, const allocator_type &
# 384
__a = allocator_type()) : _Base(__a) 
# 386
{ 
# 387
_M_range_initialize(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 389
} 
# 409 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 410
 = std::_RequireInputIter< _InputIterator> > 
# 411
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 412
__a = allocator_type()) : _Base(__a) 
# 414
{ _M_initialize_dispatch(__first, __last, std::__false_type()); } 
# 433 "/usr/include/c++/7/bits/stl_vector.h" 3
~vector() noexcept 
# 434
{ std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 435
} 
# 447 "/usr/include/c++/7/bits/stl_vector.h" 3
vector &operator=(const vector & __x); 
# 461 "/usr/include/c++/7/bits/stl_vector.h" 3
vector &operator=(vector &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 462
{ 
# 463
constexpr bool __move_storage = (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()); 
# 466
_M_move_assign(std::move(__x), std::__bool_constant< __move_storage> ()); 
# 467
return *this; 
# 468
} 
# 482 "/usr/include/c++/7/bits/stl_vector.h" 3
vector &operator=(initializer_list< value_type>  __l) 
# 483
{ 
# 484
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 486
return *this; 
# 487
} 
# 501 "/usr/include/c++/7/bits/stl_vector.h" 3
void assign(size_type __n, const value_type &__val) 
# 502
{ _M_fill_assign(__n, __val); } 
# 517 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 518
 = std::_RequireInputIter< _InputIterator> > void 
# 520
assign(_InputIterator __first, _InputIterator __last) 
# 521
{ _M_assign_dispatch(__first, __last, std::__false_type()); } 
# 546 "/usr/include/c++/7/bits/stl_vector.h" 3
void assign(initializer_list< value_type>  __l) 
# 547
{ 
# 548
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 550
} 
# 554
using _Vector_base< _Tp, _Alloc> ::get_allocator;
# 563
iterator begin() noexcept 
# 564
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start))); } 
# 572
const_iterator begin() const noexcept 
# 573
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 581
iterator end() noexcept 
# 582
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 590
const_iterator end() const noexcept 
# 591
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 599
reverse_iterator rbegin() noexcept 
# 600
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 608
const_reverse_iterator rbegin() const noexcept 
# 609
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 617
reverse_iterator rend() noexcept 
# 618
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 626
const_reverse_iterator rend() const noexcept 
# 627
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 636
const_iterator cbegin() const noexcept 
# 637
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 645
const_iterator cend() const noexcept 
# 646
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 654
const_reverse_iterator crbegin() const noexcept 
# 655
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 663
const_reverse_iterator crend() const noexcept 
# 664
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 670
size_type size() const noexcept 
# 671
{ return (size_type)(((this->_M_impl)._M_finish) - ((this->_M_impl)._M_start)); } 
# 675
size_type max_size() const noexcept 
# 676
{ return _Alloc_traits::max_size(_M_get_Tp_allocator()); } 
# 689 "/usr/include/c++/7/bits/stl_vector.h" 3
void resize(size_type __new_size) 
# 690
{ 
# 691
if (__new_size > size()) { 
# 692
_M_default_append(__new_size - size()); } else { 
# 693
if (__new_size < size()) { 
# 694
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 695
} 
# 709 "/usr/include/c++/7/bits/stl_vector.h" 3
void resize(size_type __new_size, const value_type &__x) 
# 710
{ 
# 711
if (__new_size > size()) { 
# 712
_M_fill_insert(end(), __new_size - size(), __x); } else { 
# 713
if (__new_size < size()) { 
# 714
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 715
} 
# 741 "/usr/include/c++/7/bits/stl_vector.h" 3
void shrink_to_fit() 
# 742
{ _M_shrink_to_fit(); } 
# 750
size_type capacity() const noexcept 
# 751
{ return (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 752
} 
# 759
bool empty() const noexcept 
# 760
{ return begin() == end(); } 
# 780 "/usr/include/c++/7/bits/stl_vector.h" 3
void reserve(size_type __n); 
# 795 "/usr/include/c++/7/bits/stl_vector.h" 3
reference operator[](size_type __n) noexcept 
# 796
{ 
# 797
; 
# 798
return *(((this->_M_impl)._M_start) + __n); 
# 799
} 
# 813 "/usr/include/c++/7/bits/stl_vector.h" 3
const_reference operator[](size_type __n) const noexcept 
# 814
{ 
# 815
; 
# 816
return *(((this->_M_impl)._M_start) + __n); 
# 817
} 
# 822
protected: void _M_range_check(size_type __n) const 
# 823
{ 
# 824
if (__n >= size()) { 
# 825
__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 829
} 
# 844 "/usr/include/c++/7/bits/stl_vector.h" 3
public: reference at(size_type __n) 
# 845
{ 
# 846
_M_range_check(__n); 
# 847
return (*this)[__n]; 
# 848
} 
# 862 "/usr/include/c++/7/bits/stl_vector.h" 3
const_reference at(size_type __n) const 
# 863
{ 
# 864
_M_range_check(__n); 
# 865
return (*this)[__n]; 
# 866
} 
# 873
reference front() noexcept 
# 874
{ 
# 875
; 
# 876
return *begin(); 
# 877
} 
# 884
const_reference front() const noexcept 
# 885
{ 
# 886
; 
# 887
return *begin(); 
# 888
} 
# 895
reference back() noexcept 
# 896
{ 
# 897
; 
# 898
return *(end() - 1); 
# 899
} 
# 906
const_reference back() const noexcept 
# 907
{ 
# 908
; 
# 909
return *(end() - 1); 
# 910
} 
# 920 "/usr/include/c++/7/bits/stl_vector.h" 3
_Tp *data() noexcept 
# 921
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 924
const _Tp *data() const noexcept 
# 925
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 939 "/usr/include/c++/7/bits/stl_vector.h" 3
void push_back(const value_type &__x) 
# 940
{ 
# 941
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 942
{ 
# 943
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 945
++((this->_M_impl)._M_finish); 
# 946
} else { 
# 948
_M_realloc_insert(end(), __x); }  
# 949
} 
# 953
void push_back(value_type &&__x) 
# 954
{ emplace_back(std::move(__x)); } 
# 956
template< class ..._Args> void emplace_back(_Args && ...__args); 
# 975 "/usr/include/c++/7/bits/stl_vector.h" 3
void pop_back() noexcept 
# 976
{ 
# 977
; 
# 978
--((this->_M_impl)._M_finish); 
# 979
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 980
} 
# 995 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class ..._Args> iterator 
# 997
emplace(const_iterator __position, _Args &&...__args) 
# 998
{ return _M_emplace_aux(__position, std::forward< _Args> (__args)...); } 
# 1012 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator insert(const_iterator __position, const value_type & __x); 
# 1042 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator insert(const_iterator __position, value_type &&__x) 
# 1043
{ return _M_insert_rval(__position, std::move(__x)); } 
# 1059 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator insert(const_iterator __position, initializer_list< value_type>  __l) 
# 1060
{ 
# 1061
auto __offset = __position - cbegin(); 
# 1062
_M_range_insert(begin() + __offset, __l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 1064
return begin() + __offset; 
# 1065
} 
# 1084 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator insert(const_iterator __position, size_type __n, const value_type &__x) 
# 1085
{ 
# 1086
difference_type __offset = __position - cbegin(); 
# 1087
_M_fill_insert(begin() + __offset, __n, __x); 
# 1088
return begin() + __offset; 
# 1089
} 
# 1125 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 1126
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1128
insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 1129
__last) 
# 1130
{ 
# 1131
difference_type __offset = __position - cbegin(); 
# 1132
_M_insert_dispatch(begin() + __offset, __first, __last, std::__false_type()); 
# 1134
return begin() + __offset; 
# 1135
} 
# 1179 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator erase(const_iterator __position) 
# 1180
{ return _M_erase(begin() + (__position - cbegin())); } 
# 1206 "/usr/include/c++/7/bits/stl_vector.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 1207
{ 
# 1208
const auto __beg = begin(); 
# 1209
const auto __cbeg = cbegin(); 
# 1210
return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg)); 
# 1211
} 
# 1229 "/usr/include/c++/7/bits/stl_vector.h" 3
void swap(vector &__x) noexcept 
# 1230
{ 
# 1233
; 
# 1235
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1236
_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1238
} 
# 1247
void clear() noexcept 
# 1248
{ _M_erase_at_end(((this->_M_impl)._M_start)); } 
# 1257
protected: 
# 1255
template< class _ForwardIterator> pointer 
# 1257
_M_allocate_and_copy(size_type __n, _ForwardIterator 
# 1258
__first, _ForwardIterator __last) 
# 1259
{ 
# 1260
pointer __result = this->_M_allocate(__n); 
# 1261
try 
# 1262
{ 
# 1263
std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator()); 
# 1265
return __result; 
# 1266
} 
# 1267
catch (...) 
# 1268
{ 
# 1269
_M_deallocate(__result, __n); 
# 1270
throw; 
# 1271
}  
# 1272
} 
# 1281 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _Integer> void 
# 1283
_M_initialize_dispatch(_Integer __n, _Integer __value, std::__true_type) 
# 1284
{ 
# 1285
((this->_M_impl)._M_start) = _M_allocate(static_cast< size_type>(__n)); 
# 1286
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + (static_cast< size_type>(__n))); 
# 1288
_M_fill_initialize(static_cast< size_type>(__n), __value); 
# 1289
} 
# 1292
template< class _InputIterator> void 
# 1294
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1296
{ 
# 1298
typedef typename iterator_traits< _InputIterator> ::iterator_category _IterCategory; 
# 1299
_M_range_initialize(__first, __last, _IterCategory()); 
# 1300
} 
# 1303
template< class _InputIterator> void 
# 1305
_M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1307
{ 
# 1308
try { 
# 1309
for (; __first != __last; ++__first) { 
# 1311
emplace_back(*__first); }  
# 1315
} catch (...) { 
# 1316
clear(); 
# 1317
throw; 
# 1318
}  
# 1319
} 
# 1322
template< class _ForwardIterator> void 
# 1324
_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1326
{ 
# 1327
const size_type __n = std::distance(__first, __last); 
# 1328
((this->_M_impl)._M_start) = this->_M_allocate(__n); 
# 1329
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 1330
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__first, __last, ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 1334
} 
# 1339
void _M_fill_initialize(size_type __n, const value_type &__value) 
# 1340
{ 
# 1341
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_start), __n, __value, _M_get_Tp_allocator()); 
# 1344
} 
# 1349
void _M_default_initialize(size_type __n) 
# 1350
{ 
# 1351
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_start), __n, _M_get_Tp_allocator()); 
# 1354
} 
# 1364 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _Integer> void 
# 1366
_M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) 
# 1367
{ _M_fill_assign(__n, __val); } 
# 1370
template< class _InputIterator> void 
# 1372
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1374
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 1377
template< class _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1383
template< class _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1391
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1399
template< class _Integer> void 
# 1401
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type) 
# 1403
{ _M_fill_insert(__pos, __n, __val); } 
# 1406
template< class _InputIterator> void 
# 1408
_M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator 
# 1409
__last, std::__false_type) 
# 1410
{ 
# 1411
_M_range_insert(__pos, __first, __last, std::__iterator_category(__first)); 
# 1413
} 
# 1416
template< class _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1422
template< class _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1430
void _M_fill_insert(iterator __pos, size_type __n, const value_type & __x); 
# 1435
void _M_default_append(size_type __n); 
# 1438
bool _M_shrink_to_fit(); 
# 1451 "/usr/include/c++/7/bits/stl_vector.h" 3
struct _Temporary_value { 
# 1453
template< class ..._Args> explicit 
# 1455
_Temporary_value(vector *__vec, _Args &&...__args) : _M_this(__vec) 
# 1456
{ 
# 1457
_Alloc_traits::construct(((_M_this)->_M_impl), _M_ptr(), std::forward< _Args> (__args)...); 
# 1459
} 
# 1461
~_Temporary_value() 
# 1462
{ _Alloc_traits::destroy(((_M_this)->_M_impl), _M_ptr()); } 
# 1465
value_type &_M_val() { return *(reinterpret_cast< _Tp *>(&(__buf))); } 
# 1469
private: pointer _M_ptr() { return pointer_traits< pointer> ::pointer_to(_M_val()); } 
# 1471
vector *_M_this; 
# 1472
typename aligned_storage< sizeof(_Tp), __alignof__(_Tp)> ::type __buf; 
# 1473
}; 
# 1477
template< class _Arg> void _M_insert_aux(iterator __position, _Arg && __arg); 
# 1481
template< class ..._Args> void _M_realloc_insert(iterator __position, _Args && ...__args); 
# 1487
iterator _M_insert_rval(const_iterator __position, value_type && __v); 
# 1490
template< class ..._Args> iterator _M_emplace_aux(const_iterator __position, _Args && ...__args); 
# 1496
iterator _M_emplace_aux(const_iterator __position, value_type &&__v) 
# 1497
{ return _M_insert_rval(__position, std::move(__v)); } 
# 1502
size_type _M_check_len(size_type __n, const char *__s) const 
# 1503
{ 
# 1504
if ((max_size() - size()) < __n) { 
# 1505
__throw_length_error(__s); }  
# 1507
const size_type __len = size() + std::max(size(), __n); 
# 1508
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1509
} 
# 1516
void _M_erase_at_end(pointer __pos) noexcept 
# 1517
{ 
# 1518
std::_Destroy(__pos, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 1519
((this->_M_impl)._M_finish) = __pos; 
# 1520
} 
# 1523
iterator _M_erase(iterator __position); 
# 1526
iterator _M_erase(iterator __first, iterator __last); 
# 1534
private: void _M_move_assign(vector &&__x, std::true_type) noexcept 
# 1535
{ 
# 1536
vector __tmp(get_allocator()); 
# 1537
(this->_M_impl)._M_swap_data((__tmp._M_impl)); 
# 1538
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1539
std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1540
} 
# 1545
void _M_move_assign(vector &&__x, std::false_type) 
# 1546
{ 
# 1547
if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator()) { 
# 1548
_M_move_assign(std::move(__x), std::true_type()); } else 
# 1550
{ 
# 1553
this->assign(std::__make_move_if_noexcept_iterator(__x.begin()), std::__make_move_if_noexcept_iterator(__x.end())); 
# 1555
__x.clear(); 
# 1556
}  
# 1557
} 
# 1560
template< class _Up> _Up *
# 1562
_M_data_ptr(_Up *__ptr) const noexcept 
# 1563
{ return __ptr; } 
# 1566
template< class _Ptr> typename pointer_traits< _Ptr> ::element_type *
# 1568
_M_data_ptr(_Ptr __ptr) const 
# 1569
{ return (empty()) ? nullptr : std::__addressof(*__ptr); } 
# 1586 "/usr/include/c++/7/bits/stl_vector.h" 3
}; 
# 1599 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1601
operator==(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1602
{ return ((__x.size() == __y.size()) && std::equal(__x.begin(), __x.end(), __y.begin())); 
# 1603
} 
# 1616 "/usr/include/c++/7/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1618
operator<(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1619
{ return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end()); 
# 1620
} 
# 1623
template< class _Tp, class _Alloc> inline bool 
# 1625
operator!=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1626
{ return !(__x == __y); } 
# 1629
template< class _Tp, class _Alloc> inline bool 
# 1631
operator>(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1632
{ return __y < __x; } 
# 1635
template< class _Tp, class _Alloc> inline bool 
# 1637
operator<=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1638
{ return !(__y < __x); } 
# 1641
template< class _Tp, class _Alloc> inline bool 
# 1643
operator>=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1644
{ return !(__x < __y); } 
# 1647
template< class _Tp, class _Alloc> inline void 
# 1649
swap(vector< _Tp, _Alloc>  &__x, vector< _Tp, _Alloc>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 1651
{ __x.swap(__y); } 
# 1654
}
# 63 "/usr/include/c++/7/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
typedef unsigned long _Bit_type; 
# 68
enum { _S_word_bit = ((int)((8) * sizeof(_Bit_type)))}; 
# 70
struct _Bit_reference { 
# 72
_Bit_type *_M_p; 
# 73
_Bit_type _M_mask; 
# 75
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 76
{ } 
# 78
_Bit_reference() noexcept : _M_p((0)), _M_mask((0)) { } 
# 80
operator bool() const noexcept 
# 81
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 84
_Bit_reference &operator=(bool __x) noexcept 
# 85
{ 
# 86
if (__x) { 
# 87
(*(_M_p)) |= (_M_mask); } else { 
# 89
(*(_M_p)) &= (~(_M_mask)); }  
# 90
return *this; 
# 91
} 
# 94
_Bit_reference &operator=(const _Bit_reference &__x) noexcept 
# 95
{ return ((*this) = ((bool)__x)); } 
# 98
bool operator==(const _Bit_reference &__x) const 
# 99
{ return ((bool)(*this)) == ((bool)__x); } 
# 102
bool operator<(const _Bit_reference &__x) const 
# 103
{ return (!((bool)(*this))) && ((bool)__x); } 
# 106
void flip() noexcept 
# 107
{ (*(_M_p)) ^= (_M_mask); } 
# 108
}; 
# 112
inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept 
# 113
{ 
# 114
bool __tmp = __x; 
# 115
(__x = __y); 
# 116
(__y = __tmp); 
# 117
} 
# 120
inline void swap(_Bit_reference __x, bool &__y) noexcept 
# 121
{ 
# 122
bool __tmp = __x; 
# 123
(__x = __y); 
# 124
__y = __tmp; 
# 125
} 
# 128
inline void swap(bool &__x, _Bit_reference __y) noexcept 
# 129
{ 
# 130
bool __tmp = __x; 
# 131
__x = __y; 
# 132
(__y = __tmp); 
# 133
} 
# 136
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 139
_Bit_type *_M_p; 
# 140
unsigned _M_offset; 
# 142
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 143
{ } 
# 146
void _M_bump_up() 
# 147
{ 
# 148
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 149
{ 
# 150
(_M_offset) = (0); 
# 151
++(_M_p); 
# 152
}  
# 153
} 
# 156
void _M_bump_down() 
# 157
{ 
# 158
if (((_M_offset)--) == (0)) 
# 159
{ 
# 160
(_M_offset) = (((int)_S_word_bit) - 1); 
# 161
--(_M_p); 
# 162
}  
# 163
} 
# 166
void _M_incr(ptrdiff_t __i) 
# 167
{ 
# 168
difference_type __n = __i + (_M_offset); 
# 169
(_M_p) += (__n / ((int)_S_word_bit)); 
# 170
__n = (__n % ((int)_S_word_bit)); 
# 171
if (__n < (0)) 
# 172
{ 
# 173
__n += ((int)_S_word_bit); 
# 174
--(_M_p); 
# 175
}  
# 176
(_M_offset) = (static_cast< unsigned>(__n)); 
# 177
} 
# 180
bool operator==(const _Bit_iterator_base &__i) const 
# 181
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); } 
# 184
bool operator<(const _Bit_iterator_base &__i) const 
# 185
{ 
# 186
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset))); 
# 188
} 
# 191
bool operator!=(const _Bit_iterator_base &__i) const 
# 192
{ return !((*this) == __i); } 
# 195
bool operator>(const _Bit_iterator_base &__i) const 
# 196
{ return (__i < (*this)); } 
# 199
bool operator<=(const _Bit_iterator_base &__i) const 
# 200
{ return !(__i < (*this)); } 
# 203
bool operator>=(const _Bit_iterator_base &__i) const 
# 204
{ return !((*this) < __i); } 
# 205
}; 
# 208
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 209
{ 
# 210
return (((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset)); 
# 212
} 
# 214
struct _Bit_iterator : public _Bit_iterator_base { 
# 216
typedef _Bit_reference reference; 
# 217
typedef _Bit_reference *pointer; 
# 218
typedef _Bit_iterator iterator; 
# 220
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 222
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 223
{ } 
# 226
iterator _M_const_cast() const 
# 227
{ return *this; } 
# 230
reference operator*() const 
# 231
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 234
iterator &operator++() 
# 235
{ 
# 236
this->_M_bump_up(); 
# 237
return *this; 
# 238
} 
# 241
iterator operator++(int) 
# 242
{ 
# 243
iterator __tmp = *this; 
# 244
this->_M_bump_up(); 
# 245
return __tmp; 
# 246
} 
# 249
iterator &operator--() 
# 250
{ 
# 251
this->_M_bump_down(); 
# 252
return *this; 
# 253
} 
# 256
iterator operator--(int) 
# 257
{ 
# 258
iterator __tmp = *this; 
# 259
this->_M_bump_down(); 
# 260
return __tmp; 
# 261
} 
# 264
iterator &operator+=(difference_type __i) 
# 265
{ 
# 266
this->_M_incr(__i); 
# 267
return *this; 
# 268
} 
# 271
iterator &operator-=(difference_type __i) 
# 272
{ 
# 273
((*this) += (-__i)); 
# 274
return *this; 
# 275
} 
# 278
iterator operator+(difference_type __i) const 
# 279
{ 
# 280
iterator __tmp = *this; 
# 281
return (__tmp += __i); 
# 282
} 
# 285
iterator operator-(difference_type __i) const 
# 286
{ 
# 287
iterator __tmp = *this; 
# 288
return (__tmp -= __i); 
# 289
} 
# 292
reference operator[](difference_type __i) const 
# 293
{ return (*(((*this) + __i))); } 
# 294
}; 
# 297
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x) 
# 298
{ return (__x + __n); } 
# 300
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 302
typedef bool reference; 
# 303
typedef bool const_reference; 
# 304
typedef const bool *pointer; 
# 305
typedef _Bit_const_iterator const_iterator; 
# 307
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 309
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 310
{ } 
# 312
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 313
{ } 
# 316
_Bit_iterator _M_const_cast() const 
# 317
{ return _Bit_iterator(_M_p, _M_offset); } 
# 320
const_reference operator*() const 
# 321
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 324
const_iterator &operator++() 
# 325
{ 
# 326
this->_M_bump_up(); 
# 327
return *this; 
# 328
} 
# 331
const_iterator operator++(int) 
# 332
{ 
# 333
const_iterator __tmp = *this; 
# 334
this->_M_bump_up(); 
# 335
return __tmp; 
# 336
} 
# 339
const_iterator &operator--() 
# 340
{ 
# 341
this->_M_bump_down(); 
# 342
return *this; 
# 343
} 
# 346
const_iterator operator--(int) 
# 347
{ 
# 348
const_iterator __tmp = *this; 
# 349
this->_M_bump_down(); 
# 350
return __tmp; 
# 351
} 
# 354
const_iterator &operator+=(difference_type __i) 
# 355
{ 
# 356
this->_M_incr(__i); 
# 357
return *this; 
# 358
} 
# 361
const_iterator &operator-=(difference_type __i) 
# 362
{ 
# 363
((*this) += (-__i)); 
# 364
return *this; 
# 365
} 
# 368
const_iterator operator+(difference_type __i) const 
# 369
{ 
# 370
const_iterator __tmp = *this; 
# 371
return (__tmp += __i); 
# 372
} 
# 375
const_iterator operator-(difference_type __i) const 
# 376
{ 
# 377
const_iterator __tmp = *this; 
# 378
return (__tmp -= __i); 
# 379
} 
# 382
const_reference operator[](difference_type __i) const 
# 383
{ return (*(((*this) + __i))); } 
# 384
}; 
# 387
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x) 
# 388
{ return (__x + __n); } 
# 391
inline void __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x) 
# 392
{ 
# 393
for (; (__first != __last); (++__first)) { 
# 394
(((*__first)) = __x); }  
# 395
} 
# 398
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x) 
# 399
{ 
# 400
if ((__first._M_p) != (__last._M_p)) 
# 401
{ 
# 402
std::fill((__first._M_p) + 1, __last._M_p, __x ? ~0 : 0); 
# 403
__fill_bvector(__first, _Bit_iterator((__first._M_p) + 1, 0), __x); 
# 404
__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x); 
# 405
} else { 
# 407
__fill_bvector(__first, __last, __x); }  
# 408
} 
# 410
template< class _Alloc> 
# 411
struct _Bvector_base { 
# 414
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Bit_type> ::other _Bit_alloc_type; 
# 416
typedef __gnu_cxx::__alloc_traits< _Bit_alloc_type>  _Bit_alloc_traits; 
# 417
typedef typename __gnu_cxx::__alloc_traits< _Bit_alloc_type> ::pointer _Bit_pointer; 
# 419
struct _Bvector_impl : public _Bit_alloc_type { 
# 422
std::_Bit_iterator _M_start; 
# 423
std::_Bit_iterator _M_finish; 
# 424
typename _Bvector_base< _Alloc> ::_Bit_pointer _M_end_of_storage; 
# 426
_Bvector_impl() : _Bvector_base< _Alloc> ::_Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage() 
# 428
{ } 
# 430
_Bvector_impl(const typename _Bvector_base< _Alloc> ::_Bit_alloc_type &__a) : _Bvector_base< _Alloc> ::_Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage() 
# 432
{ } 
# 435
_Bvector_impl(typename _Bvector_base< _Alloc> ::_Bit_alloc_type &&__a) : _Bvector_base< _Alloc> ::_Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(), _M_end_of_storage() 
# 438
{ } 
# 442
std::_Bit_type *_M_end_addr() const noexcept 
# 443
{ 
# 444
if (_M_end_of_storage) { 
# 445
return std::__addressof((_M_end_of_storage)[-1]) + 1; }  
# 446
return 0; 
# 447
} 
# 448
}; 
# 451
typedef _Alloc allocator_type; 
# 454
_Bit_alloc_type &_M_get_Bit_allocator() noexcept 
# 455
{ return *(static_cast< _Bit_alloc_type *>(&(this->_M_impl))); } 
# 458
const _Bit_alloc_type &_M_get_Bit_allocator() const noexcept 
# 459
{ return *(static_cast< const _Bit_alloc_type *>(&(this->_M_impl))); } 
# 462
allocator_type get_allocator() const noexcept 
# 463
{ return (allocator_type)_M_get_Bit_allocator(); } 
# 465
_Bvector_base() : _M_impl() 
# 466
{ } 
# 468
_Bvector_base(const allocator_type &__a) : _M_impl(__a) 
# 469
{ } 
# 472
_Bvector_base(_Bvector_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Bit_allocator())) 
# 474
{ 
# 475
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 476
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 477
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 478
((__x._M_impl)._M_start) = _Bit_iterator(); 
# 479
((__x._M_impl)._M_finish) = _Bit_iterator(); 
# 480
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 481
} 
# 484
~_Bvector_base() 
# 485
{ _M_deallocate(); } 
# 488
protected: _Bvector_impl _M_impl; 
# 491
_Bit_pointer _M_allocate(size_t __n) 
# 492
{ return _Bit_alloc_traits::allocate(_M_impl, (_S_nword)(__n)); } 
# 495
void _M_deallocate() 
# 496
{ 
# 497
if (((_M_impl)._M_start)._M_p) 
# 498
{ 
# 499
const size_t __n = (_M_impl)._M_end_addr() - (((_M_impl)._M_start)._M_p); 
# 500
_Bit_alloc_traits::deallocate(_M_impl, ((_M_impl)._M_end_of_storage) - __n, __n); 
# 503
((_M_impl)._M_start) = (((_M_impl)._M_finish) = _Bit_iterator()); 
# 504
((_M_impl)._M_end_of_storage) = _Bit_pointer(); 
# 505
}  
# 506
} 
# 509
static size_t _S_nword(size_t __n) 
# 510
{ return ((__n + ((int)_S_word_bit)) - (1)) / ((int)_S_word_bit); } 
# 511
}; 
# 514
}
# 519
namespace std __attribute((__visibility__("default"))) { 
# 542 "/usr/include/c++/7/bits/stl_bvector.h" 3
template< class _Alloc> 
# 543
class vector< bool, _Alloc>  : protected _Bvector_base< _Alloc>  { 
# 545
typedef _Bvector_base< _Alloc>  _Base; 
# 546
typedef typename _Bvector_base< _Alloc> ::_Bit_pointer _Bit_pointer; 
# 547
typedef typename _Bvector_base< _Alloc> ::_Bit_alloc_traits _Bit_alloc_traits; 
# 550
template< class > friend struct hash; 
# 554
public: typedef bool value_type; 
# 555
typedef std::size_t size_type; 
# 556
typedef std::ptrdiff_t difference_type; 
# 557
typedef std::_Bit_reference reference; 
# 558
typedef bool const_reference; 
# 559
typedef std::_Bit_reference *pointer; 
# 560
typedef const bool *const_pointer; 
# 561
typedef std::_Bit_iterator iterator; 
# 562
typedef std::_Bit_const_iterator const_iterator; 
# 563
typedef std::reverse_iterator< std::_Bit_const_iterator>  const_reverse_iterator; 
# 564
typedef std::reverse_iterator< std::_Bit_iterator>  reverse_iterator; 
# 565
typedef _Alloc allocator_type; 
# 567
allocator_type get_allocator() const 
# 568
{ return _Base::get_allocator(); } 
# 571
protected: using _Bvector_base< _Alloc> ::_M_allocate;
# 572
using _Bvector_base< _Alloc> ::_M_deallocate;
# 573
using _Bvector_base< _Alloc> ::_S_nword;
# 574
using _Bvector_base< _Alloc> ::_M_get_Bit_allocator;
# 577
public: vector() noexcept(is_nothrow_default_constructible< allocator_type> ::value) : _Base() 
# 581
{ } 
# 584
explicit vector(const allocator_type &__a) : _Base(__a) 
# 585
{ } 
# 589
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : vector(__n, false, __a) 
# 591
{ } 
# 593
vector(size_type __n, const bool &__value, const allocator_type &
# 594
__a = allocator_type()) : _Base(__a) 
# 596
{ 
# 597
_M_initialize(__n); 
# 598
std::fill((((this->_M_impl)._M_start)._M_p), (this->_M_impl)._M_end_addr(), __value ? ~0 : 0); 
# 600
} 
# 613 "/usr/include/c++/7/bits/stl_bvector.h" 3
vector(const std::vector< bool, _Alloc>  &__x) : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator())) 
# 615
{ 
# 616
_M_initialize(__x.size()); 
# 617
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 618
} 
# 621
vector(std::vector< bool, _Alloc>  &&__x) noexcept : _Base(std::move(__x)) 
# 622
{ } 
# 624
vector(std::vector< bool, _Alloc>  &&__x, const allocator_type &__a) noexcept(_Bit_alloc_traits::_S_always_equal()) : _Base(__a) 
# 627
{ 
# 628
if (__x.get_allocator() == __a) 
# 629
{ 
# 630
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 631
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 632
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 633
((__x._M_impl)._M_start) = std::_Bit_iterator(); 
# 634
((__x._M_impl)._M_finish) = std::_Bit_iterator(); 
# 635
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 636
} else 
# 638
{ 
# 639
_M_initialize(__x.size()); 
# 640
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 641
__x.clear(); 
# 642
}  
# 643
} 
# 645
vector(const std::vector< bool, _Alloc>  &__x, const allocator_type &__a) : _Base(__a) 
# 647
{ 
# 648
_M_initialize(__x.size()); 
# 649
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 650
} 
# 652
vector(std::initializer_list< bool>  __l, const allocator_type &
# 653
__a = allocator_type()) : _Base(__a) 
# 655
{ 
# 656
_M_initialize_range(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 658
} 
# 662
template< class _InputIterator, class 
# 663
 = std::_RequireInputIter< _InputIterator> > 
# 664
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 665
__a = allocator_type()) : _Base(__a) 
# 667
{ _M_initialize_dispatch(__first, __last, std::__false_type()); } 
# 679 "/usr/include/c++/7/bits/stl_bvector.h" 3
~vector() noexcept { } 
# 682
std::vector< bool, _Alloc>  &operator=(const std::vector< bool, _Alloc>  &__x) 
# 683
{ 
# 684
if ((&__x) == this) { 
# 685
return *this; }  
# 687
if (_Bit_alloc_traits::_S_propagate_on_copy_assign()) 
# 688
{ 
# 689
if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator()) 
# 690
{ 
# 691
this->_M_deallocate(); 
# 692
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 694
_M_initialize(__x.size()); 
# 695
} else { 
# 697
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); }  
# 699
}  
# 701
if (__x.size() > capacity()) 
# 702
{ 
# 703
this->_M_deallocate(); 
# 704
_M_initialize(__x.size()); 
# 705
}  
# 706
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 708
return *this; 
# 709
} 
# 713
std::vector< bool, _Alloc>  &operator=(std::vector< bool, _Alloc>  &&__x) noexcept(_Bit_alloc_traits::_S_nothrow_move()) 
# 714
{ 
# 715
if (_Bit_alloc_traits::_S_propagate_on_move_assign() || (this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())) 
# 717
{ 
# 718
this->_M_deallocate(); 
# 719
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 720
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 721
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 722
((__x._M_impl)._M_start) = std::_Bit_iterator(); 
# 723
((__x._M_impl)._M_finish) = std::_Bit_iterator(); 
# 724
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 725
std::__alloc_on_move(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 727
} else 
# 729
{ 
# 730
if (__x.size() > capacity()) 
# 731
{ 
# 732
this->_M_deallocate(); 
# 733
_M_initialize(__x.size()); 
# 734
}  
# 735
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 737
__x.clear(); 
# 738
}  
# 739
return *this; 
# 740
} 
# 743
std::vector< bool, _Alloc>  &operator=(std::initializer_list< bool>  __l) 
# 744
{ 
# 745
this->assign(__l.begin(), __l.end()); 
# 746
return *this; 
# 747
} 
# 755
void assign(size_type __n, const bool &__x) 
# 756
{ _M_fill_assign(__n, __x); } 
# 759
template< class _InputIterator, class 
# 760
 = std::_RequireInputIter< _InputIterator> > void 
# 762
assign(_InputIterator __first, _InputIterator __last) 
# 763
{ _M_assign_dispatch(__first, __last, std::__false_type()); } 
# 776 "/usr/include/c++/7/bits/stl_bvector.h" 3
void assign(std::initializer_list< bool>  __l) 
# 777
{ this->assign(__l.begin(), __l.end()); } 
# 781
iterator begin() noexcept 
# 782
{ return (this->_M_impl)._M_start; } 
# 785
const_iterator begin() const noexcept 
# 786
{ return (this->_M_impl)._M_start; } 
# 789
iterator end() noexcept 
# 790
{ return (this->_M_impl)._M_finish; } 
# 793
const_iterator end() const noexcept 
# 794
{ return (this->_M_impl)._M_finish; } 
# 797
reverse_iterator rbegin() noexcept 
# 798
{ return ((std::reverse_iterator< std::_Bit_iterator> )(end())); } 
# 801
const_reverse_iterator rbegin() const noexcept 
# 802
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 805
reverse_iterator rend() noexcept 
# 806
{ return ((std::reverse_iterator< std::_Bit_iterator> )(begin())); } 
# 809
const_reverse_iterator rend() const noexcept 
# 810
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 814
const_iterator cbegin() const noexcept 
# 815
{ return (this->_M_impl)._M_start; } 
# 818
const_iterator cend() const noexcept 
# 819
{ return (this->_M_impl)._M_finish; } 
# 822
const_reverse_iterator crbegin() const noexcept 
# 823
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 826
const_reverse_iterator crend() const noexcept 
# 827
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 831
size_type size() const noexcept 
# 832
{ return (size_type)((end()) - (begin())); } 
# 835
size_type max_size() const noexcept 
# 836
{ 
# 837
const size_type __isize = ((__gnu_cxx::__numeric_traits_integer< std::streamsize> ::__max - ((int)_S_word_bit)) + (1)); 
# 840
const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator()); 
# 842
return (__asize <= (__isize / ((int)_S_word_bit))) ? __asize * ((int)_S_word_bit) : __isize; 
# 844
} 
# 847
size_type capacity() const noexcept 
# 848
{ return (size_type)(const_iterator((this->_M_impl)._M_end_addr(), 0) - (begin())); 
# 849
} 
# 852
bool empty() const noexcept 
# 853
{ return ((begin()) == (end())); } 
# 856
reference operator[](size_type __n) 
# 857
{ 
# 858
return (*iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 860
} 
# 863
const_reference operator[](size_type __n) const 
# 864
{ 
# 865
return (*const_iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 867
} 
# 871
protected: void _M_range_check(size_type __n) const 
# 872
{ 
# 873
if (__n >= size()) { 
# 874
__throw_out_of_range_fmt("vector<bool>::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 878
} 
# 882
public: reference at(size_type __n) 
# 883
{ _M_range_check(__n); return (*this)[__n]; } 
# 886
const_reference at(size_type __n) const 
# 887
{ _M_range_check(__n); return (*this)[__n]; } 
# 890
void reserve(size_type __n) 
# 891
{ 
# 892
if (__n > max_size()) { 
# 893
__throw_length_error("vector::reserve"); }  
# 894
if (capacity() < __n) { 
# 895
_M_reallocate(__n); }  
# 896
} 
# 899
reference front() 
# 900
{ return (*(begin())); } 
# 903
const_reference front() const 
# 904
{ return (*(begin())); } 
# 907
reference back() 
# 908
{ return (*(((end()) - (1)))); } 
# 911
const_reference back() const 
# 912
{ return (*(((end()) - (1)))); } 
# 920
void data() noexcept { } 
# 923
void push_back(bool __x) 
# 924
{ 
# 925
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) { 
# 926
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 928
_M_insert_aux(end(), __x); }  
# 929
} 
# 932
void swap(std::vector< bool, _Alloc>  &__x) noexcept 
# 933
{ 
# 934
std::swap(((this->_M_impl)._M_start), ((__x._M_impl)._M_start)); 
# 935
std::swap(((this->_M_impl)._M_finish), ((__x._M_impl)._M_finish)); 
# 936
std::swap(((this->_M_impl)._M_end_of_storage), ((__x._M_impl)._M_end_of_storage)); 
# 938
_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 940
} 
# 944
static void swap(reference __x, reference __y) noexcept 
# 945
{ 
# 946
bool __tmp = __x; 
# 947
(__x = __y); 
# 948
(__y = __tmp); 
# 949
} 
# 953
iterator insert(const_iterator __position, const bool &__x = ((bool)0)) 
# 957
{ 
# 958
const difference_type __n = (__position - (begin())); 
# 959
if (((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) && (__position == (end()))) { 
# 961
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 963
_M_insert_aux(__position._M_const_cast(), __x); }  
# 964
return ((begin()) + __n); 
# 965
} 
# 968
template< class _InputIterator, class 
# 969
 = std::_RequireInputIter< _InputIterator> > iterator 
# 971
insert(const_iterator __position, _InputIterator 
# 972
__first, _InputIterator __last) 
# 973
{ 
# 974
difference_type __offset = __position - cbegin(); 
# 975
_M_insert_dispatch(__position._M_const_cast(), __first, __last, std::__false_type()); 
# 977
return ((begin()) + __offset); 
# 978
} 
# 992 "/usr/include/c++/7/bits/stl_bvector.h" 3
iterator insert(const_iterator __position, size_type __n, const bool &__x) 
# 993
{ 
# 994
difference_type __offset = __position - cbegin(); 
# 995
_M_fill_insert(__position._M_const_cast(), __n, __x); 
# 996
return ((begin()) + __offset); 
# 997
} 
# 1006
iterator insert(const_iterator __p, std::initializer_list< bool>  __l) 
# 1007
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1011
void pop_back() 
# 1012
{ --((this->_M_impl)._M_finish); } 
# 1016
iterator erase(const_iterator __position) 
# 1020
{ return _M_erase(__position._M_const_cast()); } 
# 1024
iterator erase(const_iterator __first, const_iterator __last) 
# 1028
{ return _M_erase(__first._M_const_cast(), __last._M_const_cast()); } 
# 1031
void resize(size_type __new_size, bool __x = ((bool)0)) 
# 1032
{ 
# 1033
if (__new_size < size()) { 
# 1034
_M_erase_at_end(((begin()) + ((difference_type)__new_size))); } else { 
# 1036
insert(end(), __new_size - size(), __x); }  
# 1037
} 
# 1041
void shrink_to_fit() 
# 1042
{ _M_shrink_to_fit(); } 
# 1046
void flip() noexcept 
# 1047
{ 
# 1048
std::_Bit_type *const __end = (this->_M_impl)._M_end_addr(); 
# 1049
for (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p)); __p != __end; ++__p) { 
# 1050
(*__p) = (~(*__p)); }  
# 1051
} 
# 1054
void clear() noexcept 
# 1055
{ _M_erase_at_end(begin()); } 
# 1058
template< class ..._Args> void 
# 1064
emplace_back(_Args &&...__args) 
# 1065
{ 
# 1066
push_back(bool(__args...)); 
# 1070
} 
# 1072
template< class ..._Args> iterator 
# 1074
emplace(const_iterator __pos, _Args &&...__args) 
# 1075
{ return insert(__pos, bool(__args...)); } 
# 1081
protected: iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator 
# 1082
__result) 
# 1083
{ 
# 1084
std::_Bit_type *__q = std::copy(__first._M_p, __last._M_p, __result._M_p); 
# 1085
return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0)); 
# 1087
} 
# 1090
void _M_initialize(size_type __n) 
# 1091
{ 
# 1092
if (__n) 
# 1093
{ 
# 1094
_Bit_pointer __q = this->_M_allocate(__n); 
# 1095
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 1096
((this->_M_impl)._M_start) = iterator(std::__addressof(*__q), 0); 
# 1097
} else 
# 1099
{ 
# 1100
((this->_M_impl)._M_end_of_storage) = _Bit_pointer(); 
# 1101
((this->_M_impl)._M_start) = iterator(0, 0); 
# 1102
}  
# 1103
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + ((difference_type)__n)); 
# 1104
} 
# 1107
void _M_reallocate(size_type __n); 
# 1111
bool _M_shrink_to_fit(); 
# 1118
template< class _Integer> void 
# 1120
_M_initialize_dispatch(_Integer __n, _Integer __x, std::__true_type) 
# 1121
{ 
# 1122
_M_initialize(static_cast< size_type>(__n)); 
# 1123
std::fill((((this->_M_impl)._M_start)._M_p), (this->_M_impl)._M_end_addr(), (__x) ? ~0 : 0); 
# 1125
} 
# 1127
template< class _InputIterator> void 
# 1129
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1131
{ _M_initialize_range(__first, __last, std::__iterator_category(__first)); 
# 1132
} 
# 1134
template< class _InputIterator> void 
# 1136
_M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1138
{ 
# 1139
for (; __first != __last; ++__first) { 
# 1140
push_back(*__first); }  
# 1141
} 
# 1143
template< class _ForwardIterator> void 
# 1145
_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1147
{ 
# 1148
const size_type __n = std::distance(__first, __last); 
# 1149
_M_initialize(__n); 
# 1150
std::copy(__first, __last, ((this->_M_impl)._M_start)); 
# 1151
} 
# 1155
template< class _Integer> void 
# 1157
_M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) 
# 1158
{ _M_fill_assign(__n, __val); } 
# 1160
template< class _InputIterator> void 
# 1162
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1164
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 1167
void _M_fill_assign(std::size_t __n, bool __x) 
# 1168
{ 
# 1169
if (__n > size()) 
# 1170
{ 
# 1171
std::fill((((this->_M_impl)._M_start)._M_p), (this->_M_impl)._M_end_addr(), __x ? ~0 : 0); 
# 1173
insert(end(), __n - size(), __x); 
# 1174
} else 
# 1176
{ 
# 1177
_M_erase_at_end(((begin()) + __n)); 
# 1178
std::fill((((this->_M_impl)._M_start)._M_p), (this->_M_impl)._M_end_addr(), __x ? ~0 : 0); 
# 1180
}  
# 1181
} 
# 1183
template< class _InputIterator> void 
# 1185
_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1187
{ 
# 1188
iterator __cur = begin(); 
# 1189
for (; (__first != __last) && (__cur != (end())); (++__cur), (++__first)) { 
# 1190
(*__cur) = (*__first); }  
# 1191
if (__first == __last) { 
# 1192
_M_erase_at_end(__cur); } else { 
# 1194
insert(end(), __first, __last); }  
# 1195
} 
# 1197
template< class _ForwardIterator> void 
# 1199
_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1201
{ 
# 1202
const size_type __len = std::distance(__first, __last); 
# 1203
if (__len < size()) { 
# 1204
_M_erase_at_end(std::copy(__first, __last, begin())); } else 
# 1206
{ 
# 1207
_ForwardIterator __mid = __first; 
# 1208
std::advance(__mid, size()); 
# 1209
std::copy(__first, __mid, begin()); 
# 1210
insert(end(), __mid, __last); 
# 1211
}  
# 1212
} 
# 1218
template< class _Integer> void 
# 1220
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x, std::__true_type) 
# 1222
{ _M_fill_insert(__pos, __n, __x); } 
# 1224
template< class _InputIterator> void 
# 1226
_M_insert_dispatch(iterator __pos, _InputIterator 
# 1227
__first, _InputIterator __last, std::__false_type) 
# 1229
{ _M_insert_range(__pos, __first, __last, std::__iterator_category(__first)); 
# 1230
} 
# 1233
void _M_fill_insert(iterator __position, size_type __n, bool __x); 
# 1235
template< class _InputIterator> void 
# 1237
_M_insert_range(iterator __pos, _InputIterator __first, _InputIterator 
# 1238
__last, std::input_iterator_tag) 
# 1239
{ 
# 1240
for (; __first != __last; ++__first) 
# 1241
{ 
# 1242
__pos = insert(__pos, *__first); 
# 1243
(++__pos); 
# 1244
}  
# 1245
} 
# 1247
template< class _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1253
void _M_insert_aux(iterator __position, bool __x); 
# 1256
size_type _M_check_len(size_type __n, const char *__s) const 
# 1257
{ 
# 1258
if ((max_size() - size()) < __n) { 
# 1259
__throw_length_error(__s); }  
# 1261
const size_type __len = size() + std::max(size(), __n); 
# 1262
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1263
} 
# 1266
void _M_erase_at_end(iterator __pos) 
# 1267
{ ((this->_M_impl)._M_finish) = __pos; } 
# 1270
iterator _M_erase(iterator __pos); 
# 1273
iterator _M_erase(iterator __first, iterator __last); 
# 1274
}; 
# 1277
}
# 1283
namespace std __attribute((__visibility__("default"))) { 
# 1289
template< class _Alloc> 
# 1290
struct hash< vector< bool, _Alloc> >  : public __hash_base< unsigned long, vector< bool, _Alloc> >  { 
# 1294
std::size_t operator()(const vector< bool, _Alloc>  &) const noexcept; 
# 1295
}; 
# 1298
}
# 59 "/usr/include/c++/7/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template< class _Tp, class _Alloc> void 
# 66
vector< _Tp, _Alloc> ::reserve(size_type __n) 
# 67
{ 
# 68
if (__n > max_size()) { 
# 69
__throw_length_error("vector::reserve"); }  
# 70
if (capacity() < __n) 
# 71
{ 
# 72
const size_type __old_size = size(); 
# 73
pointer __tmp = _M_allocate_and_copy(__n, std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_start)), std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_finish))); 
# 76
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 78
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 81
((this->_M_impl)._M_start) = __tmp; 
# 82
((this->_M_impl)._M_finish) = (__tmp + __old_size); 
# 83
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 84
}  
# 85
} 
# 88
template< class _Tp, class _Alloc> 
# 89
template< class ..._Args> void 
# 96
vector< _Tp, _Alloc> ::emplace_back(_Args &&...__args) 
# 97
{ 
# 98
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 99
{ 
# 100
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 102
++((this->_M_impl)._M_finish); 
# 103
} else { 
# 105
_M_realloc_insert(end(), std::forward< _Args> (__args)...); }  
# 109
} 
# 112
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 116
vector< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 120
{ 
# 121
const size_type __n = __position - begin(); 
# 122
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 123
if (__position == end()) 
# 124
{ 
# 125
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 127
++((this->_M_impl)._M_finish); 
# 128
} else 
# 130
{ 
# 132
const auto __pos = begin() + (__position - cbegin()); 
# 135
_Temporary_value __x_copy(this, __x); 
# 136
_M_insert_aux(__pos, std::move(__x_copy._M_val())); 
# 140
}  } else { 
# 143
_M_realloc_insert(begin() + (__position - cbegin()), __x); }  
# 148
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 149
} 
# 151
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 154
vector< _Tp, _Alloc> ::_M_erase(iterator __position) 
# 155
{ 
# 156
if ((__position + 1) != end()) { 
# 157
std::move(__position + 1, end(), __position); }  
# 158
--((this->_M_impl)._M_finish); 
# 159
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 160
return __position; 
# 161
} 
# 163
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 166
vector< _Tp, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 167
{ 
# 168
if (__first != __last) 
# 169
{ 
# 170
if (__last != end()) { 
# 171
std::move(__last, end(), __first); }  
# 172
_M_erase_at_end(__first.base() + (end() - __last)); 
# 173
}  
# 174
return __first; 
# 175
} 
# 177
template< class _Tp, class _Alloc> vector< _Tp, _Alloc>  &
# 180
vector< _Tp, _Alloc> ::operator=(const vector &__x) 
# 181
{ 
# 182
if ((&__x) != this) 
# 183
{ 
# 185
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 186
{ 
# 187
if ((!_Alloc_traits::_S_always_equal()) && (_M_get_Tp_allocator() != __x._M_get_Tp_allocator())) 
# 189
{ 
# 191
clear(); 
# 192
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 195
((this->_M_impl)._M_start) = nullptr; 
# 196
((this->_M_impl)._M_finish) = nullptr; 
# 197
((this->_M_impl)._M_end_of_storage) = nullptr; 
# 198
}  
# 199
std::__alloc_on_copy(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 201
}  
# 203
const size_type __xlen = __x.size(); 
# 204
if (__xlen > capacity()) 
# 205
{ 
# 206
pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end()); 
# 208
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 210
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 213
((this->_M_impl)._M_start) = __tmp; 
# 214
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __xlen); 
# 215
} else { 
# 216
if (size() >= __xlen) 
# 217
{ 
# 218
std::_Destroy(std::copy(__x.begin(), __x.end(), begin()), end(), _M_get_Tp_allocator()); 
# 220
} else 
# 222
{ 
# 223
std::copy(((__x._M_impl)._M_start), ((__x._M_impl)._M_start) + size(), ((this->_M_impl)._M_start)); 
# 225
std::__uninitialized_copy_a(((__x._M_impl)._M_start) + size(), ((__x._M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 229
}  }  
# 230
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __xlen); 
# 231
}  
# 232
return *this; 
# 233
} 
# 235
template< class _Tp, class _Alloc> void 
# 238
vector< _Tp, _Alloc> ::_M_fill_assign(std::size_t __n, const value_type &__val) 
# 239
{ 
# 240
if (__n > capacity()) 
# 241
{ 
# 242
vector __tmp(__n, __val, _M_get_Tp_allocator()); 
# 243
(__tmp._M_impl)._M_swap_data((this->_M_impl)); 
# 244
} else { 
# 245
if (__n > size()) 
# 246
{ 
# 247
std::fill(begin(), end(), __val); 
# 248
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - size(), __val, _M_get_Tp_allocator()); 
# 252
} else { 
# 254
_M_erase_at_end(std::fill_n(((this->_M_impl)._M_start), __n, __val)); }  }  
# 255
} 
# 257
template< class _Tp, class _Alloc> 
# 258
template< class _InputIterator> void 
# 261
vector< _Tp, _Alloc> ::_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 263
{ 
# 264
pointer __cur(((this->_M_impl)._M_start)); 
# 265
for (; (__first != __last) && (__cur != ((this->_M_impl)._M_finish)); (++__cur), (++__first)) { 
# 267
(*__cur) = (*__first); }  
# 268
if (__first == __last) { 
# 269
_M_erase_at_end(__cur); } else { 
# 271
_M_range_insert(end(), __first, __last, std::__iterator_category(__first)); }  
# 273
} 
# 275
template< class _Tp, class _Alloc> 
# 276
template< class _ForwardIterator> void 
# 279
vector< _Tp, _Alloc> ::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 281
{ 
# 282
const size_type __len = std::distance(__first, __last); 
# 284
if (__len > capacity()) 
# 285
{ 
# 286
pointer __tmp(_M_allocate_and_copy(__len, __first, __last)); 
# 287
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 289
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 292
((this->_M_impl)._M_start) = __tmp; 
# 293
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __len); 
# 294
((this->_M_impl)._M_end_of_storage) = ((this->_M_impl)._M_finish); 
# 295
} else { 
# 296
if (size() >= __len) { 
# 297
_M_erase_at_end(std::copy(__first, __last, ((this->_M_impl)._M_start))); } else 
# 299
{ 
# 300
_ForwardIterator __mid = __first; 
# 301
std::advance(__mid, size()); 
# 302
std::copy(__first, __mid, ((this->_M_impl)._M_start)); 
# 303
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 307
}  }  
# 308
} 
# 311
template< class _Tp, class _Alloc> auto 
# 314
vector< _Tp, _Alloc> ::_M_insert_rval(const_iterator __position, value_type &&__v)->iterator 
# 315
{ 
# 316
const auto __n = __position - cbegin(); 
# 317
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 318
if (__position == cend()) 
# 319
{ 
# 320
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(__v)); 
# 322
++((this->_M_impl)._M_finish); 
# 323
} else { 
# 325
_M_insert_aux(begin() + __n, std::move(__v)); }  } else { 
# 327
_M_realloc_insert(begin() + __n, std::move(__v)); }  
# 329
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 330
} 
# 332
template< class _Tp, class _Alloc> 
# 333
template< class ..._Args> auto 
# 336
vector< _Tp, _Alloc> ::_M_emplace_aux(const_iterator __position, _Args &&...__args)->iterator 
# 338
{ 
# 339
const auto __n = __position - cbegin(); 
# 340
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 341
if (__position == cend()) 
# 342
{ 
# 343
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 345
++((this->_M_impl)._M_finish); 
# 346
} else 
# 348
{ 
# 352
_Temporary_value __tmp(this, std::forward< _Args> (__args)...); 
# 353
_M_insert_aux(begin() + __n, std::move(__tmp._M_val())); 
# 354
}  } else { 
# 356
_M_realloc_insert(begin() + __n, std::forward< _Args> (__args)...); }  
# 358
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 359
} 
# 361
template< class _Tp, class _Alloc> 
# 362
template< class _Arg> void 
# 365
vector< _Tp, _Alloc> ::_M_insert_aux(iterator __position, _Arg &&__arg) 
# 372
{ 
# 373
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(*(((this->_M_impl)._M_finish) - 1))); 
# 376
++((this->_M_impl)._M_finish); 
# 380
std::move_backward(__position.base(), ((this->_M_impl)._M_finish) - 2, ((this->_M_impl)._M_finish) - 1); 
# 386
(*__position) = std::forward< _Arg> (__arg); 
# 388
} 
# 391
template< class _Tp, class _Alloc> 
# 392
template< class ..._Args> void 
# 395
vector< _Tp, _Alloc> ::_M_realloc_insert(iterator __position, _Args &&...__args) 
# 402
{ 
# 403
const size_type __len = _M_check_len((size_type)1, "vector::_M_realloc_insert"); 
# 405
const size_type __elems_before = __position - begin(); 
# 406
pointer __new_start(this->_M_allocate(__len)); 
# 407
pointer __new_finish(__new_start); 
# 408
try 
# 409
{ 
# 415
_Alloc_traits::construct((this->_M_impl), __new_start + __elems_before, std::forward< _Args> (__args)...); 
# 422
__new_finish = pointer(); 
# 424
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 429
++__new_finish; 
# 431
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 435
} 
# 436
catch (...) 
# 437
{ 
# 438
if (!__new_finish) { 
# 439
_Alloc_traits::destroy((this->_M_impl), __new_start + __elems_before); } else { 
# 442
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 443
_M_deallocate(__new_start, __len); 
# 444
throw; 
# 445
}  
# 446
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 448
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 451
((this->_M_impl)._M_start) = __new_start; 
# 452
((this->_M_impl)._M_finish) = __new_finish; 
# 453
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 454
} 
# 456
template< class _Tp, class _Alloc> void 
# 459
vector< _Tp, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, const value_type &__x) 
# 460
{ 
# 461
if (__n != (0)) 
# 462
{ 
# 463
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 465
{ 
# 469
_Temporary_value __tmp(this, __x); 
# 470
value_type &__x_copy = __tmp._M_val(); 
# 472
const size_type __elems_after = end() - __position; 
# 473
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 474
if (__elems_after > __n) 
# 475
{ 
# 476
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 480
((this->_M_impl)._M_finish) += __n; 
# 481
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 483
std::fill(__position.base(), __position.base() + __n, __x_copy); 
# 485
} else 
# 487
{ 
# 488
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - __elems_after, __x_copy, _M_get_Tp_allocator()); 
# 493
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 496
((this->_M_impl)._M_finish) += __elems_after; 
# 497
std::fill(__position.base(), __old_finish, __x_copy); 
# 498
}  
# 499
} else 
# 501
{ 
# 502
const size_type __len = _M_check_len(__n, "vector::_M_fill_insert"); 
# 504
const size_type __elems_before = __position - begin(); 
# 505
pointer __new_start(this->_M_allocate(__len)); 
# 506
pointer __new_finish(__new_start); 
# 507
try 
# 508
{ 
# 510
std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator()); 
# 513
__new_finish = pointer(); 
# 515
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 520
__new_finish += __n; 
# 522
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 526
} 
# 527
catch (...) 
# 528
{ 
# 529
if (!__new_finish) { 
# 530
std::_Destroy(__new_start + __elems_before, (__new_start + __elems_before) + __n, _M_get_Tp_allocator()); } else { 
# 534
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 536
_M_deallocate(__new_start, __len); 
# 537
throw; 
# 538
}  
# 539
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 541
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 544
((this->_M_impl)._M_start) = __new_start; 
# 545
((this->_M_impl)._M_finish) = __new_finish; 
# 546
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 547
}  
# 548
}  
# 549
} 
# 552
template< class _Tp, class _Alloc> void 
# 555
vector< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 556
{ 
# 557
if (__n != (0)) 
# 558
{ 
# 559
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 561
{ 
# 562
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_finish), __n, _M_get_Tp_allocator()); 
# 565
} else 
# 567
{ 
# 568
const size_type __len = _M_check_len(__n, "vector::_M_default_append"); 
# 570
const size_type __size = size(); 
# 571
pointer __new_start(this->_M_allocate(__len)); 
# 572
pointer __destroy_from = pointer(); 
# 573
try 
# 574
{ 
# 575
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 577
__destroy_from = (__new_start + __size); 
# 578
std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 581
} 
# 582
catch (...) 
# 583
{ 
# 584
if (__destroy_from) { 
# 585
std::_Destroy(__destroy_from, __destroy_from + __n, _M_get_Tp_allocator()); }  
# 587
_M_deallocate(__new_start, __len); 
# 588
throw; 
# 589
}  
# 590
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 592
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 595
((this->_M_impl)._M_start) = __new_start; 
# 596
((this->_M_impl)._M_finish) = ((__new_start + __size) + __n); 
# 597
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 598
}  
# 599
}  
# 600
} 
# 602
template< class _Tp, class _Alloc> bool 
# 605
vector< _Tp, _Alloc> ::_M_shrink_to_fit() 
# 606
{ 
# 607
if (capacity() == size()) { 
# 608
return false; }  
# 609
return std::template __shrink_to_fit_aux< vector> ::_S_do_it(*this); 
# 610
} 
# 613
template< class _Tp, class _Alloc> 
# 614
template< class _InputIterator> void 
# 617
vector< _Tp, _Alloc> ::_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator 
# 618
__last, std::input_iterator_tag) 
# 619
{ 
# 620
for (; __first != __last; ++__first) 
# 621
{ 
# 622
__pos = insert(__pos, *__first); 
# 623
++__pos; 
# 624
}  
# 625
} 
# 627
template< class _Tp, class _Alloc> 
# 628
template< class _ForwardIterator> void 
# 631
vector< _Tp, _Alloc> ::_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 632
__last, std::forward_iterator_tag) 
# 633
{ 
# 634
if (__first != __last) 
# 635
{ 
# 636
const size_type __n = std::distance(__first, __last); 
# 637
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 639
{ 
# 640
const size_type __elems_after = end() - __position; 
# 641
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 642
if (__elems_after > __n) 
# 643
{ 
# 644
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 648
((this->_M_impl)._M_finish) += __n; 
# 649
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 651
std::copy(__first, __last, __position); 
# 652
} else 
# 654
{ 
# 655
_ForwardIterator __mid = __first; 
# 656
std::advance(__mid, __elems_after); 
# 657
std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 660
((this->_M_impl)._M_finish) += (__n - __elems_after); 
# 661
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 665
((this->_M_impl)._M_finish) += __elems_after; 
# 666
std::copy(__first, __mid, __position); 
# 667
}  
# 668
} else 
# 670
{ 
# 671
const size_type __len = _M_check_len(__n, "vector::_M_range_insert"); 
# 673
pointer __new_start(this->_M_allocate(__len)); 
# 674
pointer __new_finish(__new_start); 
# 675
try 
# 676
{ 
# 677
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 681
__new_finish = std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator()); 
# 685
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 689
} 
# 690
catch (...) 
# 691
{ 
# 692
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 694
_M_deallocate(__new_start, __len); 
# 695
throw; 
# 696
}  
# 697
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 699
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 702
((this->_M_impl)._M_start) = __new_start; 
# 703
((this->_M_impl)._M_finish) = __new_finish; 
# 704
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 705
}  
# 706
}  
# 707
} 
# 711
template< class _Alloc> void 
# 714
vector< bool, _Alloc> ::_M_reallocate(size_type __n) 
# 715
{ 
# 716
_Bit_pointer __q = this->_M_allocate(__n); 
# 717
iterator __start(std::__addressof(*__q), 0); 
# 718
iterator __finish(_M_copy_aligned(begin(), end(), __start)); 
# 719
this->_M_deallocate(); 
# 720
((this->_M_impl)._M_start) = __start; 
# 721
((this->_M_impl)._M_finish) = __finish; 
# 722
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 723
} 
# 725
template< class _Alloc> void 
# 728
vector< bool, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, bool __x) 
# 729
{ 
# 730
if (__n == (0)) { 
# 731
return; }  
# 732
if ((capacity() - size()) >= __n) 
# 733
{ 
# 734
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 736
std::fill(__position, (__position + ((difference_type)__n)), __x); 
# 737
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 738
} else 
# 740
{ 
# 741
const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert"); 
# 743
_Bit_pointer __q = this->_M_allocate(__len); 
# 744
iterator __start(std::__addressof(*__q), 0); 
# 745
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 746
std::fill(__i, (__i + ((difference_type)__n)), __x); 
# 747
iterator __finish = std::copy(__position, end(), (__i + ((difference_type)__n))); 
# 749
this->_M_deallocate(); 
# 750
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 751
((this->_M_impl)._M_start) = __start; 
# 752
((this->_M_impl)._M_finish) = __finish; 
# 753
}  
# 754
} 
# 756
template< class _Alloc> 
# 757
template< class _ForwardIterator> void 
# 760
vector< bool, _Alloc> ::_M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 761
__last, std::forward_iterator_tag) 
# 762
{ 
# 763
if (__first != __last) 
# 764
{ 
# 765
size_type __n = std::distance(__first, __last); 
# 766
if ((capacity() - size()) >= __n) 
# 767
{ 
# 768
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 771
std::copy(__first, __last, __position); 
# 772
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 773
} else 
# 775
{ 
# 776
const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range"); 
# 778
_Bit_pointer __q = this->_M_allocate(__len); 
# 779
iterator __start(std::__addressof(*__q), 0); 
# 780
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 781
__i = std::copy(__first, __last, __i); 
# 782
iterator __finish = std::copy(__position, end(), __i); 
# 783
this->_M_deallocate(); 
# 784
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 785
((this->_M_impl)._M_start) = __start; 
# 786
((this->_M_impl)._M_finish) = __finish; 
# 787
}  
# 788
}  
# 789
} 
# 791
template< class _Alloc> void 
# 794
vector< bool, _Alloc> ::_M_insert_aux(iterator __position, bool __x) 
# 795
{ 
# 796
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) 
# 797
{ 
# 798
std::copy_backward(__position, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish) + 1); 
# 800
(((*__position)) = __x); 
# 801
++((this->_M_impl)._M_finish); 
# 802
} else 
# 804
{ 
# 805
const size_type __len = _M_check_len((size_type)1, "vector<bool>::_M_insert_aux"); 
# 807
_Bit_pointer __q = this->_M_allocate(__len); 
# 808
iterator __start(std::__addressof(*__q), 0); 
# 809
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 810
(((*(__i++))) = __x); 
# 811
iterator __finish = std::copy(__position, end(), __i); 
# 812
this->_M_deallocate(); 
# 813
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 814
((this->_M_impl)._M_start) = __start; 
# 815
((this->_M_impl)._M_finish) = __finish; 
# 816
}  
# 817
} 
# 819
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 822
vector< bool, _Alloc> ::_M_erase(iterator __position) 
# 823
{ 
# 824
if ((((__position + (1))) != (end()))) { 
# 825
std::copy((__position + (1)), end(), __position); }  
# 826
--((this->_M_impl)._M_finish); 
# 827
return __position; 
# 828
} 
# 830
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 833
vector< bool, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 834
{ 
# 835
if ((__first != __last)) { 
# 836
_M_erase_at_end(std::copy(__last, end(), __first)); }  
# 837
return __first; 
# 838
} 
# 841
template< class _Alloc> bool 
# 844
vector< bool, _Alloc> ::_M_shrink_to_fit() 
# 845
{ 
# 846
if ((capacity() - size()) < ((int)_S_word_bit)) { 
# 847
return false; }  
# 848
try 
# 849
{ 
# 850
_M_reallocate(size()); 
# 851
return true; 
# 852
} 
# 853
catch (...) 
# 854
{ return false; }  
# 855
} 
# 859
}
# 863
namespace std __attribute((__visibility__("default"))) { 
# 867
template< class _Alloc> size_t 
# 870
hash< vector< bool, _Alloc> > ::operator()(const vector< bool, _Alloc>  &__b) const noexcept 
# 871
{ 
# 872
std::size_t __hash = (0); 
# 873
using std::_S_word_bit;
# 874
using std::_Bit_type;
# 876
const std::size_t __words = __b.size() / _S_word_bit; 
# 877
if (__words) 
# 878
{ 
# 879
const std::size_t __clength = (__words * sizeof(std::_Bit_type)); 
# 880
__hash = std::_Hash_impl::hash((((__b._M_impl)._M_start)._M_p), __clength); 
# 881
}  
# 883
const std::size_t __extrabits = __b.size() % _S_word_bit; 
# 884
if (__extrabits) 
# 885
{ 
# 886
std::_Bit_type __hiword = (*(((__b._M_impl)._M_finish)._M_p)); 
# 887
__hiword &= (~((~(static_cast< std::_Bit_type>(0))) << __extrabits)); 
# 889
const std::size_t __clength = (((__extrabits + (8)) - (1)) / (8)); 
# 891
if (__words) { 
# 892
__hash = std::_Hash_impl::hash(&__hiword, __clength, __hash); } else { 
# 894
__hash = std::_Hash_impl::hash(&__hiword, __clength); }  
# 895
}  
# 897
return __hash; 
# 898
} 
# 901
}
# 158 "/usr/include/c++/7/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/7/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr bool is_specialized = false; 
# 211
static constexpr int digits = 0; 
# 214
static constexpr int digits10 = 0; 
# 219
static constexpr int max_digits10 = 0; 
# 223
static constexpr bool is_signed = false; 
# 226
static constexpr bool is_integer = false; 
# 231
static constexpr bool is_exact = false; 
# 235
static constexpr int radix = 0; 
# 239
static constexpr int min_exponent = 0; 
# 243
static constexpr int min_exponent10 = 0; 
# 248
static constexpr int max_exponent = 0; 
# 252
static constexpr int max_exponent10 = 0; 
# 255
static constexpr bool has_infinity = false; 
# 259
static constexpr bool has_quiet_NaN = false; 
# 263
static constexpr bool has_signaling_NaN = false; 
# 266
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr bool has_denorm_loss = false; 
# 274
static constexpr bool is_iec559 = false; 
# 279
static constexpr bool is_bounded = false; 
# 288 "/usr/include/c++/7/limits" 3
static constexpr bool is_modulo = false; 
# 291
static constexpr bool traps = false; 
# 294
static constexpr bool tinyness_before = false; 
# 299
static constexpr float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/7/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 383 "/usr/include/c++/7/limits" 3
template<> struct numeric_limits< bool>  { 
# 385
static constexpr bool is_specialized = true; 
# 388
static constexpr bool min() noexcept { return false; } 
# 391
static constexpr bool max() noexcept { return true; } 
# 395
static constexpr bool lowest() noexcept { return min(); } 
# 397
static constexpr int digits = 1; 
# 398
static constexpr int digits10 = 0; 
# 400
static constexpr int max_digits10 = 0; 
# 402
static constexpr bool is_signed = false; 
# 403
static constexpr bool is_integer = true; 
# 404
static constexpr bool is_exact = true; 
# 405
static constexpr int radix = 2; 
# 408
static constexpr bool epsilon() noexcept { return false; } 
# 411
static constexpr bool round_error() noexcept { return false; } 
# 413
static constexpr int min_exponent = 0; 
# 414
static constexpr int min_exponent10 = 0; 
# 415
static constexpr int max_exponent = 0; 
# 416
static constexpr int max_exponent10 = 0; 
# 418
static constexpr bool has_infinity = false; 
# 419
static constexpr bool has_quiet_NaN = false; 
# 420
static constexpr bool has_signaling_NaN = false; 
# 421
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 423
static constexpr bool has_denorm_loss = false; 
# 426
static constexpr bool infinity() noexcept { return false; } 
# 429
static constexpr bool quiet_NaN() noexcept { return false; } 
# 432
static constexpr bool signaling_NaN() noexcept { return false; } 
# 435
static constexpr bool denorm_min() noexcept { return false; } 
# 437
static constexpr bool is_iec559 = false; 
# 438
static constexpr bool is_bounded = true; 
# 439
static constexpr bool is_modulo = false; 
# 444
static constexpr bool traps = true; 
# 445
static constexpr bool tinyness_before = false; 
# 446
static constexpr float_round_style round_style = round_toward_zero; 
# 448
}; 
# 452
template<> struct numeric_limits< char>  { 
# 454
static constexpr bool is_specialized = true; 
# 457
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 460
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 464
static constexpr char lowest() noexcept { return min(); } 
# 467
static constexpr int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 468
static constexpr int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 470
static constexpr int max_digits10 = 0; 
# 472
static constexpr bool is_signed = (((char)(-1)) < 0); 
# 473
static constexpr bool is_integer = true; 
# 474
static constexpr bool is_exact = true; 
# 475
static constexpr int radix = 2; 
# 478
static constexpr char epsilon() noexcept { return 0; } 
# 481
static constexpr char round_error() noexcept { return 0; } 
# 483
static constexpr int min_exponent = 0; 
# 484
static constexpr int min_exponent10 = 0; 
# 485
static constexpr int max_exponent = 0; 
# 486
static constexpr int max_exponent10 = 0; 
# 488
static constexpr bool has_infinity = false; 
# 489
static constexpr bool has_quiet_NaN = false; 
# 490
static constexpr bool has_signaling_NaN = false; 
# 491
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 493
static constexpr bool has_denorm_loss = false; 
# 496
static constexpr char infinity() noexcept { return ((char)0); } 
# 499
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 502
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 505
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 507
static constexpr bool is_iec559 = false; 
# 508
static constexpr bool is_bounded = true; 
# 509
static constexpr bool is_modulo = (!is_signed); 
# 511
static constexpr bool traps = true; 
# 512
static constexpr bool tinyness_before = false; 
# 513
static constexpr float_round_style round_style = round_toward_zero; 
# 515
}; 
# 519
template<> struct numeric_limits< signed char>  { 
# 521
static constexpr bool is_specialized = true; 
# 524
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 527
static constexpr signed char max() noexcept { return 127; } 
# 531
static constexpr signed char lowest() noexcept { return min(); } 
# 534
static constexpr int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 535
static constexpr int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 538
static constexpr int max_digits10 = 0; 
# 540
static constexpr bool is_signed = true; 
# 541
static constexpr bool is_integer = true; 
# 542
static constexpr bool is_exact = true; 
# 543
static constexpr int radix = 2; 
# 546
static constexpr signed char epsilon() noexcept { return 0; } 
# 549
static constexpr signed char round_error() noexcept { return 0; } 
# 551
static constexpr int min_exponent = 0; 
# 552
static constexpr int min_exponent10 = 0; 
# 553
static constexpr int max_exponent = 0; 
# 554
static constexpr int max_exponent10 = 0; 
# 556
static constexpr bool has_infinity = false; 
# 557
static constexpr bool has_quiet_NaN = false; 
# 558
static constexpr bool has_signaling_NaN = false; 
# 559
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 561
static constexpr bool has_denorm_loss = false; 
# 564
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 567
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 570
static constexpr signed char signaling_NaN() noexcept 
# 571
{ return static_cast< signed char>(0); } 
# 574
static constexpr signed char denorm_min() noexcept 
# 575
{ return static_cast< signed char>(0); } 
# 577
static constexpr bool is_iec559 = false; 
# 578
static constexpr bool is_bounded = true; 
# 579
static constexpr bool is_modulo = false; 
# 581
static constexpr bool traps = true; 
# 582
static constexpr bool tinyness_before = false; 
# 583
static constexpr float_round_style round_style = round_toward_zero; 
# 585
}; 
# 589
template<> struct numeric_limits< unsigned char>  { 
# 591
static constexpr bool is_specialized = true; 
# 594
static constexpr unsigned char min() noexcept { return 0; } 
# 597
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 601
static constexpr unsigned char lowest() noexcept { return min(); } 
# 604
static constexpr int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 606
static constexpr int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 609
static constexpr int max_digits10 = 0; 
# 611
static constexpr bool is_signed = false; 
# 612
static constexpr bool is_integer = true; 
# 613
static constexpr bool is_exact = true; 
# 614
static constexpr int radix = 2; 
# 617
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 620
static constexpr unsigned char round_error() noexcept { return 0; } 
# 622
static constexpr int min_exponent = 0; 
# 623
static constexpr int min_exponent10 = 0; 
# 624
static constexpr int max_exponent = 0; 
# 625
static constexpr int max_exponent10 = 0; 
# 627
static constexpr bool has_infinity = false; 
# 628
static constexpr bool has_quiet_NaN = false; 
# 629
static constexpr bool has_signaling_NaN = false; 
# 630
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 632
static constexpr bool has_denorm_loss = false; 
# 635
static constexpr unsigned char infinity() noexcept 
# 636
{ return static_cast< unsigned char>(0); } 
# 639
static constexpr unsigned char quiet_NaN() noexcept 
# 640
{ return static_cast< unsigned char>(0); } 
# 643
static constexpr unsigned char signaling_NaN() noexcept 
# 644
{ return static_cast< unsigned char>(0); } 
# 647
static constexpr unsigned char denorm_min() noexcept 
# 648
{ return static_cast< unsigned char>(0); } 
# 650
static constexpr bool is_iec559 = false; 
# 651
static constexpr bool is_bounded = true; 
# 652
static constexpr bool is_modulo = true; 
# 654
static constexpr bool traps = true; 
# 655
static constexpr bool tinyness_before = false; 
# 656
static constexpr float_round_style round_style = round_toward_zero; 
# 658
}; 
# 662
template<> struct numeric_limits< wchar_t>  { 
# 664
static constexpr bool is_specialized = true; 
# 667
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 670
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 674
static constexpr wchar_t lowest() noexcept { return min(); } 
# 677
static constexpr int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 678
static constexpr int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 681
static constexpr int max_digits10 = 0; 
# 683
static constexpr bool is_signed = (((wchar_t)(-1)) < 0); 
# 684
static constexpr bool is_integer = true; 
# 685
static constexpr bool is_exact = true; 
# 686
static constexpr int radix = 2; 
# 689
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 692
static constexpr wchar_t round_error() noexcept { return 0; } 
# 694
static constexpr int min_exponent = 0; 
# 695
static constexpr int min_exponent10 = 0; 
# 696
static constexpr int max_exponent = 0; 
# 697
static constexpr int max_exponent10 = 0; 
# 699
static constexpr bool has_infinity = false; 
# 700
static constexpr bool has_quiet_NaN = false; 
# 701
static constexpr bool has_signaling_NaN = false; 
# 702
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 704
static constexpr bool has_denorm_loss = false; 
# 707
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 710
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 713
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 716
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 718
static constexpr bool is_iec559 = false; 
# 719
static constexpr bool is_bounded = true; 
# 720
static constexpr bool is_modulo = (!is_signed); 
# 722
static constexpr bool traps = true; 
# 723
static constexpr bool tinyness_before = false; 
# 724
static constexpr float_round_style round_style = round_toward_zero; 
# 726
}; 
# 731
template<> struct numeric_limits< char16_t>  { 
# 733
static constexpr bool is_specialized = true; 
# 736
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 739
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 742
static constexpr char16_t lowest() noexcept { return min(); } 
# 744
static constexpr int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 745
static constexpr int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 746
static constexpr int max_digits10 = 0; 
# 747
static constexpr bool is_signed = (((char16_t)(-1)) < 0); 
# 748
static constexpr bool is_integer = true; 
# 749
static constexpr bool is_exact = true; 
# 750
static constexpr int radix = 2; 
# 753
static constexpr char16_t epsilon() noexcept { return 0; } 
# 756
static constexpr char16_t round_error() noexcept { return 0; } 
# 758
static constexpr int min_exponent = 0; 
# 759
static constexpr int min_exponent10 = 0; 
# 760
static constexpr int max_exponent = 0; 
# 761
static constexpr int max_exponent10 = 0; 
# 763
static constexpr bool has_infinity = false; 
# 764
static constexpr bool has_quiet_NaN = false; 
# 765
static constexpr bool has_signaling_NaN = false; 
# 766
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 767
static constexpr bool has_denorm_loss = false; 
# 770
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 773
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 776
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 779
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 781
static constexpr bool is_iec559 = false; 
# 782
static constexpr bool is_bounded = true; 
# 783
static constexpr bool is_modulo = (!is_signed); 
# 785
static constexpr bool traps = true; 
# 786
static constexpr bool tinyness_before = false; 
# 787
static constexpr float_round_style round_style = round_toward_zero; 
# 788
}; 
# 792
template<> struct numeric_limits< char32_t>  { 
# 794
static constexpr bool is_specialized = true; 
# 797
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 800
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 803
static constexpr char32_t lowest() noexcept { return min(); } 
# 805
static constexpr int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 806
static constexpr int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 807
static constexpr int max_digits10 = 0; 
# 808
static constexpr bool is_signed = (((char32_t)(-1)) < (0)); 
# 809
static constexpr bool is_integer = true; 
# 810
static constexpr bool is_exact = true; 
# 811
static constexpr int radix = 2; 
# 814
static constexpr char32_t epsilon() noexcept { return 0; } 
# 817
static constexpr char32_t round_error() noexcept { return 0; } 
# 819
static constexpr int min_exponent = 0; 
# 820
static constexpr int min_exponent10 = 0; 
# 821
static constexpr int max_exponent = 0; 
# 822
static constexpr int max_exponent10 = 0; 
# 824
static constexpr bool has_infinity = false; 
# 825
static constexpr bool has_quiet_NaN = false; 
# 826
static constexpr bool has_signaling_NaN = false; 
# 827
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 828
static constexpr bool has_denorm_loss = false; 
# 831
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 834
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 837
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 840
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 842
static constexpr bool is_iec559 = false; 
# 843
static constexpr bool is_bounded = true; 
# 844
static constexpr bool is_modulo = (!is_signed); 
# 846
static constexpr bool traps = true; 
# 847
static constexpr bool tinyness_before = false; 
# 848
static constexpr float_round_style round_style = round_toward_zero; 
# 849
}; 
# 854
template<> struct numeric_limits< short>  { 
# 856
static constexpr bool is_specialized = true; 
# 859
static constexpr short min() noexcept { return (-32767) - 1; } 
# 862
static constexpr short max() noexcept { return 32767; } 
# 866
static constexpr short lowest() noexcept { return min(); } 
# 869
static constexpr int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 870
static constexpr int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 872
static constexpr int max_digits10 = 0; 
# 874
static constexpr bool is_signed = true; 
# 875
static constexpr bool is_integer = true; 
# 876
static constexpr bool is_exact = true; 
# 877
static constexpr int radix = 2; 
# 880
static constexpr short epsilon() noexcept { return 0; } 
# 883
static constexpr short round_error() noexcept { return 0; } 
# 885
static constexpr int min_exponent = 0; 
# 886
static constexpr int min_exponent10 = 0; 
# 887
static constexpr int max_exponent = 0; 
# 888
static constexpr int max_exponent10 = 0; 
# 890
static constexpr bool has_infinity = false; 
# 891
static constexpr bool has_quiet_NaN = false; 
# 892
static constexpr bool has_signaling_NaN = false; 
# 893
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 895
static constexpr bool has_denorm_loss = false; 
# 898
static constexpr short infinity() noexcept { return ((short)0); } 
# 901
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 904
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 907
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 909
static constexpr bool is_iec559 = false; 
# 910
static constexpr bool is_bounded = true; 
# 911
static constexpr bool is_modulo = false; 
# 913
static constexpr bool traps = true; 
# 914
static constexpr bool tinyness_before = false; 
# 915
static constexpr float_round_style round_style = round_toward_zero; 
# 917
}; 
# 921
template<> struct numeric_limits< unsigned short>  { 
# 923
static constexpr bool is_specialized = true; 
# 926
static constexpr unsigned short min() noexcept { return 0; } 
# 929
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 933
static constexpr unsigned short lowest() noexcept { return min(); } 
# 936
static constexpr int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 938
static constexpr int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 941
static constexpr int max_digits10 = 0; 
# 943
static constexpr bool is_signed = false; 
# 944
static constexpr bool is_integer = true; 
# 945
static constexpr bool is_exact = true; 
# 946
static constexpr int radix = 2; 
# 949
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 952
static constexpr unsigned short round_error() noexcept { return 0; } 
# 954
static constexpr int min_exponent = 0; 
# 955
static constexpr int min_exponent10 = 0; 
# 956
static constexpr int max_exponent = 0; 
# 957
static constexpr int max_exponent10 = 0; 
# 959
static constexpr bool has_infinity = false; 
# 960
static constexpr bool has_quiet_NaN = false; 
# 961
static constexpr bool has_signaling_NaN = false; 
# 962
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 964
static constexpr bool has_denorm_loss = false; 
# 967
static constexpr unsigned short infinity() noexcept 
# 968
{ return static_cast< unsigned short>(0); } 
# 971
static constexpr unsigned short quiet_NaN() noexcept 
# 972
{ return static_cast< unsigned short>(0); } 
# 975
static constexpr unsigned short signaling_NaN() noexcept 
# 976
{ return static_cast< unsigned short>(0); } 
# 979
static constexpr unsigned short denorm_min() noexcept 
# 980
{ return static_cast< unsigned short>(0); } 
# 982
static constexpr bool is_iec559 = false; 
# 983
static constexpr bool is_bounded = true; 
# 984
static constexpr bool is_modulo = true; 
# 986
static constexpr bool traps = true; 
# 987
static constexpr bool tinyness_before = false; 
# 988
static constexpr float_round_style round_style = round_toward_zero; 
# 990
}; 
# 994
template<> struct numeric_limits< int>  { 
# 996
static constexpr bool is_specialized = true; 
# 999
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1002
static constexpr int max() noexcept { return 2147483647; } 
# 1006
static constexpr int lowest() noexcept { return min(); } 
# 1009
static constexpr int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1010
static constexpr int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1012
static constexpr int max_digits10 = 0; 
# 1014
static constexpr bool is_signed = true; 
# 1015
static constexpr bool is_integer = true; 
# 1016
static constexpr bool is_exact = true; 
# 1017
static constexpr int radix = 2; 
# 1020
static constexpr int epsilon() noexcept { return 0; } 
# 1023
static constexpr int round_error() noexcept { return 0; } 
# 1025
static constexpr int min_exponent = 0; 
# 1026
static constexpr int min_exponent10 = 0; 
# 1027
static constexpr int max_exponent = 0; 
# 1028
static constexpr int max_exponent10 = 0; 
# 1030
static constexpr bool has_infinity = false; 
# 1031
static constexpr bool has_quiet_NaN = false; 
# 1032
static constexpr bool has_signaling_NaN = false; 
# 1033
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1035
static constexpr bool has_denorm_loss = false; 
# 1038
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1041
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1044
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1047
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1049
static constexpr bool is_iec559 = false; 
# 1050
static constexpr bool is_bounded = true; 
# 1051
static constexpr bool is_modulo = false; 
# 1053
static constexpr bool traps = true; 
# 1054
static constexpr bool tinyness_before = false; 
# 1055
static constexpr float_round_style round_style = round_toward_zero; 
# 1057
}; 
# 1061
template<> struct numeric_limits< unsigned>  { 
# 1063
static constexpr bool is_specialized = true; 
# 1066
static constexpr unsigned min() noexcept { return 0; } 
# 1069
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1073
static constexpr unsigned lowest() noexcept { return min(); } 
# 1076
static constexpr int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1078
static constexpr int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1081
static constexpr int max_digits10 = 0; 
# 1083
static constexpr bool is_signed = false; 
# 1084
static constexpr bool is_integer = true; 
# 1085
static constexpr bool is_exact = true; 
# 1086
static constexpr int radix = 2; 
# 1089
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1092
static constexpr unsigned round_error() noexcept { return 0; } 
# 1094
static constexpr int min_exponent = 0; 
# 1095
static constexpr int min_exponent10 = 0; 
# 1096
static constexpr int max_exponent = 0; 
# 1097
static constexpr int max_exponent10 = 0; 
# 1099
static constexpr bool has_infinity = false; 
# 1100
static constexpr bool has_quiet_NaN = false; 
# 1101
static constexpr bool has_signaling_NaN = false; 
# 1102
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1104
static constexpr bool has_denorm_loss = false; 
# 1107
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1110
static constexpr unsigned quiet_NaN() noexcept 
# 1111
{ return static_cast< unsigned>(0); } 
# 1114
static constexpr unsigned signaling_NaN() noexcept 
# 1115
{ return static_cast< unsigned>(0); } 
# 1118
static constexpr unsigned denorm_min() noexcept 
# 1119
{ return static_cast< unsigned>(0); } 
# 1121
static constexpr bool is_iec559 = false; 
# 1122
static constexpr bool is_bounded = true; 
# 1123
static constexpr bool is_modulo = true; 
# 1125
static constexpr bool traps = true; 
# 1126
static constexpr bool tinyness_before = false; 
# 1127
static constexpr float_round_style round_style = round_toward_zero; 
# 1129
}; 
# 1133
template<> struct numeric_limits< long>  { 
# 1135
static constexpr bool is_specialized = true; 
# 1138
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1141
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1145
static constexpr long lowest() noexcept { return min(); } 
# 1148
static constexpr int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1149
static constexpr int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1151
static constexpr int max_digits10 = 0; 
# 1153
static constexpr bool is_signed = true; 
# 1154
static constexpr bool is_integer = true; 
# 1155
static constexpr bool is_exact = true; 
# 1156
static constexpr int radix = 2; 
# 1159
static constexpr long epsilon() noexcept { return 0; } 
# 1162
static constexpr long round_error() noexcept { return 0; } 
# 1164
static constexpr int min_exponent = 0; 
# 1165
static constexpr int min_exponent10 = 0; 
# 1166
static constexpr int max_exponent = 0; 
# 1167
static constexpr int max_exponent10 = 0; 
# 1169
static constexpr bool has_infinity = false; 
# 1170
static constexpr bool has_quiet_NaN = false; 
# 1171
static constexpr bool has_signaling_NaN = false; 
# 1172
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1174
static constexpr bool has_denorm_loss = false; 
# 1177
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1180
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1183
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1186
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1188
static constexpr bool is_iec559 = false; 
# 1189
static constexpr bool is_bounded = true; 
# 1190
static constexpr bool is_modulo = false; 
# 1192
static constexpr bool traps = true; 
# 1193
static constexpr bool tinyness_before = false; 
# 1194
static constexpr float_round_style round_style = round_toward_zero; 
# 1196
}; 
# 1200
template<> struct numeric_limits< unsigned long>  { 
# 1202
static constexpr bool is_specialized = true; 
# 1205
static constexpr unsigned long min() noexcept { return 0; } 
# 1208
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1212
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1215
static constexpr int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1217
static constexpr int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1220
static constexpr int max_digits10 = 0; 
# 1222
static constexpr bool is_signed = false; 
# 1223
static constexpr bool is_integer = true; 
# 1224
static constexpr bool is_exact = true; 
# 1225
static constexpr int radix = 2; 
# 1228
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1231
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1233
static constexpr int min_exponent = 0; 
# 1234
static constexpr int min_exponent10 = 0; 
# 1235
static constexpr int max_exponent = 0; 
# 1236
static constexpr int max_exponent10 = 0; 
# 1238
static constexpr bool has_infinity = false; 
# 1239
static constexpr bool has_quiet_NaN = false; 
# 1240
static constexpr bool has_signaling_NaN = false; 
# 1241
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1243
static constexpr bool has_denorm_loss = false; 
# 1246
static constexpr unsigned long infinity() noexcept 
# 1247
{ return static_cast< unsigned long>(0); } 
# 1250
static constexpr unsigned long quiet_NaN() noexcept 
# 1251
{ return static_cast< unsigned long>(0); } 
# 1254
static constexpr unsigned long signaling_NaN() noexcept 
# 1255
{ return static_cast< unsigned long>(0); } 
# 1258
static constexpr unsigned long denorm_min() noexcept 
# 1259
{ return static_cast< unsigned long>(0); } 
# 1261
static constexpr bool is_iec559 = false; 
# 1262
static constexpr bool is_bounded = true; 
# 1263
static constexpr bool is_modulo = true; 
# 1265
static constexpr bool traps = true; 
# 1266
static constexpr bool tinyness_before = false; 
# 1267
static constexpr float_round_style round_style = round_toward_zero; 
# 1269
}; 
# 1273
template<> struct numeric_limits< long long>  { 
# 1275
static constexpr bool is_specialized = true; 
# 1278
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1281
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1285
static constexpr long long lowest() noexcept { return min(); } 
# 1288
static constexpr int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1290
static constexpr int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1293
static constexpr int max_digits10 = 0; 
# 1295
static constexpr bool is_signed = true; 
# 1296
static constexpr bool is_integer = true; 
# 1297
static constexpr bool is_exact = true; 
# 1298
static constexpr int radix = 2; 
# 1301
static constexpr long long epsilon() noexcept { return 0; } 
# 1304
static constexpr long long round_error() noexcept { return 0; } 
# 1306
static constexpr int min_exponent = 0; 
# 1307
static constexpr int min_exponent10 = 0; 
# 1308
static constexpr int max_exponent = 0; 
# 1309
static constexpr int max_exponent10 = 0; 
# 1311
static constexpr bool has_infinity = false; 
# 1312
static constexpr bool has_quiet_NaN = false; 
# 1313
static constexpr bool has_signaling_NaN = false; 
# 1314
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1316
static constexpr bool has_denorm_loss = false; 
# 1319
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1322
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1325
static constexpr long long signaling_NaN() noexcept 
# 1326
{ return static_cast< long long>(0); } 
# 1329
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1331
static constexpr bool is_iec559 = false; 
# 1332
static constexpr bool is_bounded = true; 
# 1333
static constexpr bool is_modulo = false; 
# 1335
static constexpr bool traps = true; 
# 1336
static constexpr bool tinyness_before = false; 
# 1337
static constexpr float_round_style round_style = round_toward_zero; 
# 1339
}; 
# 1343
template<> struct numeric_limits< unsigned long long>  { 
# 1345
static constexpr bool is_specialized = true; 
# 1348
static constexpr unsigned long long min() noexcept { return 0; } 
# 1351
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1355
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1358
static constexpr int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1360
static constexpr int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1363
static constexpr int max_digits10 = 0; 
# 1365
static constexpr bool is_signed = false; 
# 1366
static constexpr bool is_integer = true; 
# 1367
static constexpr bool is_exact = true; 
# 1368
static constexpr int radix = 2; 
# 1371
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1374
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1376
static constexpr int min_exponent = 0; 
# 1377
static constexpr int min_exponent10 = 0; 
# 1378
static constexpr int max_exponent = 0; 
# 1379
static constexpr int max_exponent10 = 0; 
# 1381
static constexpr bool has_infinity = false; 
# 1382
static constexpr bool has_quiet_NaN = false; 
# 1383
static constexpr bool has_signaling_NaN = false; 
# 1384
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1386
static constexpr bool has_denorm_loss = false; 
# 1389
static constexpr unsigned long long infinity() noexcept 
# 1390
{ return static_cast< unsigned long long>(0); } 
# 1393
static constexpr unsigned long long quiet_NaN() noexcept 
# 1394
{ return static_cast< unsigned long long>(0); } 
# 1397
static constexpr unsigned long long signaling_NaN() noexcept 
# 1398
{ return static_cast< unsigned long long>(0); } 
# 1401
static constexpr unsigned long long denorm_min() noexcept 
# 1402
{ return static_cast< unsigned long long>(0); } 
# 1404
static constexpr bool is_iec559 = false; 
# 1405
static constexpr bool is_bounded = true; 
# 1406
static constexpr bool is_modulo = true; 
# 1408
static constexpr bool traps = true; 
# 1409
static constexpr bool tinyness_before = false; 
# 1410
static constexpr float_round_style round_style = round_toward_zero; 
# 1412
}; 
# 1594 "/usr/include/c++/7/limits" 3
template<> struct numeric_limits< float>  { 
# 1596
static constexpr bool is_specialized = true; 
# 1599
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1602
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1606
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1609
static constexpr int digits = 24; 
# 1610
static constexpr int digits10 = 6; 
# 1612
static constexpr int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1615
static constexpr bool is_signed = true; 
# 1616
static constexpr bool is_integer = false; 
# 1617
static constexpr bool is_exact = false; 
# 1618
static constexpr int radix = 2; 
# 1621
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1624
static constexpr float round_error() noexcept { return (0.5F); } 
# 1626
static constexpr int min_exponent = (-125); 
# 1627
static constexpr int min_exponent10 = (-37); 
# 1628
static constexpr int max_exponent = 128; 
# 1629
static constexpr int max_exponent10 = 38; 
# 1631
static constexpr bool has_infinity = (1); 
# 1632
static constexpr bool has_quiet_NaN = (1); 
# 1633
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1634
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1636
static constexpr bool has_denorm_loss = false; 
# 1640
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1643
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1646
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1649
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1651
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1653
static constexpr bool is_bounded = true; 
# 1654
static constexpr bool is_modulo = false; 
# 1656
static constexpr bool traps = false; 
# 1657
static constexpr bool tinyness_before = false; 
# 1659
static constexpr float_round_style round_style = round_to_nearest; 
# 1661
}; 
# 1669
template<> struct numeric_limits< double>  { 
# 1671
static constexpr bool is_specialized = true; 
# 1674
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1677
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1681
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1684
static constexpr int digits = 53; 
# 1685
static constexpr int digits10 = 15; 
# 1687
static constexpr int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1690
static constexpr bool is_signed = true; 
# 1691
static constexpr bool is_integer = false; 
# 1692
static constexpr bool is_exact = false; 
# 1693
static constexpr int radix = 2; 
# 1696
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1699
static constexpr double round_error() noexcept { return (0.5); } 
# 1701
static constexpr int min_exponent = (-1021); 
# 1702
static constexpr int min_exponent10 = (-307); 
# 1703
static constexpr int max_exponent = 1024; 
# 1704
static constexpr int max_exponent10 = 308; 
# 1706
static constexpr bool has_infinity = (1); 
# 1707
static constexpr bool has_quiet_NaN = (1); 
# 1708
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1709
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1711
static constexpr bool has_denorm_loss = false; 
# 1715
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1718
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1721
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1724
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1726
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1728
static constexpr bool is_bounded = true; 
# 1729
static constexpr bool is_modulo = false; 
# 1731
static constexpr bool traps = false; 
# 1732
static constexpr bool tinyness_before = false; 
# 1734
static constexpr float_round_style round_style = round_to_nearest; 
# 1736
}; 
# 1744
template<> struct numeric_limits< long double>  { 
# 1746
static constexpr bool is_specialized = true; 
# 1749
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1752
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1756
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1759
static constexpr int digits = 64; 
# 1760
static constexpr int digits10 = 18; 
# 1762
static constexpr int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1765
static constexpr bool is_signed = true; 
# 1766
static constexpr bool is_integer = false; 
# 1767
static constexpr bool is_exact = false; 
# 1768
static constexpr int radix = 2; 
# 1771
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1774
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1776
static constexpr int min_exponent = (-16381); 
# 1777
static constexpr int min_exponent10 = (-4931); 
# 1778
static constexpr int max_exponent = 16384; 
# 1779
static constexpr int max_exponent10 = 4932; 
# 1781
static constexpr bool has_infinity = (1); 
# 1782
static constexpr bool has_quiet_NaN = (1); 
# 1783
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1784
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1786
static constexpr bool has_denorm_loss = false; 
# 1790
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1793
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1796
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1799
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1801
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1803
static constexpr bool is_bounded = true; 
# 1804
static constexpr bool is_modulo = false; 
# 1806
static constexpr bool traps = false; 
# 1807
static constexpr bool tinyness_before = false; 
# 1809
static constexpr float_round_style round_style = round_to_nearest; 
# 1811
}; 
# 1818
}
# 37 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
namespace __detail { 
# 44
template< class _Tp> inline bool 
# 46
_Power_of_2(_Tp __x) 
# 47
{ 
# 48
return ((__x - 1) & __x) == 0; 
# 49
} 
# 51
}
# 60
template< class _IntType = int> 
# 61
class uniform_int_distribution { 
# 63
static_assert((std::template is_integral< _IntType> ::value), "template argument must be an integral type");
# 68
public: typedef _IntType result_type; 
# 70
struct param_type { 
# 72
typedef uniform_int_distribution distribution_type; 
# 75
explicit param_type(_IntType __a = 0, _IntType 
# 76
__b = std::template numeric_limits< _IntType> ::max()) : _M_a(__a), _M_b(__b) 
# 78
{ 
# 79
; 
# 80
} 
# 83
result_type a() const 
# 84
{ return _M_a; } 
# 87
result_type b() const 
# 88
{ return _M_b; } 
# 91
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 92
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 95
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 96
{ return !(__p1 == __p2); } 
# 99
private: _IntType _M_a; 
# 100
_IntType _M_b; 
# 101
}; 
# 108
explicit uniform_int_distribution(_IntType __a = 0, _IntType 
# 109
__b = std::template numeric_limits< _IntType> ::max()) : _M_param(__a, __b) 
# 111
{ } 
# 114
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 116
{ } 
# 124
void reset() { } 
# 127
result_type a() const 
# 128
{ return (_M_param).a(); } 
# 131
result_type b() const 
# 132
{ return (_M_param).b(); } 
# 138
param_type param() const 
# 139
{ return _M_param; } 
# 146
void param(const param_type &__param) 
# 147
{ (_M_param) = __param; } 
# 153
result_type min() const 
# 154
{ return a(); } 
# 160
result_type max() const 
# 161
{ return b(); } 
# 166
template< class _UniformRandomNumberGenerator> result_type 
# 168
operator()(_UniformRandomNumberGenerator &__urng) 
# 169
{ return this->operator()(__urng, _M_param); } 
# 171
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 176
template< class _ForwardIterator, class 
# 177
_UniformRandomNumberGenerator> void 
# 179
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 180
__urng) 
# 181
{ this->__generate(__f, __t, __urng, _M_param); } 
# 183
template< class _ForwardIterator, class 
# 184
_UniformRandomNumberGenerator> void 
# 186
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 187
__urng, const param_type &
# 188
__p) 
# 189
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 191
template< class _UniformRandomNumberGenerator> void 
# 193
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 194
__urng, const param_type &
# 195
__p) 
# 196
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 203
friend inline bool operator==(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 204
__d2) 
# 205
{ return (__d1._M_param) == (__d2._M_param); } 
# 208
private: template< class _ForwardIterator, class 
# 209
_UniformRandomNumberGenerator> void 
# 208
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 215
param_type _M_param; 
# 216
}; 
# 218
template< class _IntType> 
# 219
template< class _UniformRandomNumberGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 222
uniform_int_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 223
__param) 
# 224
{ 
# 226
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 227
typedef typename make_unsigned< result_type> ::type __utype; 
# 229
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 231
const __uctype __urngmin = __urng.min(); 
# 232
const __uctype __urngmax = __urng.max(); 
# 233
const __uctype __urngrange = __urngmax - __urngmin; 
# 234
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 237
__uctype __ret; 
# 239
if (__urngrange > __urange) 
# 240
{ 
# 242
const __uctype __uerange = __urange + 1; 
# 243
const __uctype __scaling = __urngrange / __uerange; 
# 244
const __uctype __past = __uerange * __scaling; 
# 245
do { 
# 246
__ret = (((__uctype)__urng()) - __urngmin); } 
# 247
while (__ret >= __past); 
# 248
__ret /= __scaling; 
# 249
} else { 
# 250
if (__urngrange < __urange) 
# 251
{ 
# 267 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 268
do 
# 269
{ 
# 270
const __uctype __uerngrange = __urngrange + 1; 
# 271
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 273
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 274
} 
# 275
while ((__ret > __urange) || (__ret < __tmp)); 
# 276
} else { 
# 278
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 280
return __ret + __param.a(); 
# 281
} 
# 284
template< class _IntType> 
# 285
template< class _ForwardIterator, class 
# 286
_UniformRandomNumberGenerator> void 
# 289
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 290
__urng, const param_type &
# 291
__param) 
# 292
{ 
# 295
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 296
typedef typename make_unsigned< result_type> ::type __utype; 
# 298
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 300
const __uctype __urngmin = __urng.min(); 
# 301
const __uctype __urngmax = __urng.max(); 
# 302
const __uctype __urngrange = __urngmax - __urngmin; 
# 303
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 306
__uctype __ret; 
# 308
if (__urngrange > __urange) 
# 309
{ 
# 310
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 312
{ 
# 313
while (__f != __t) 
# 314
{ 
# 315
__ret = (((__uctype)__urng()) - __urngmin); 
# 316
(*(__f++)) = ((__ret & __urange) + __param.a()); 
# 317
}  
# 318
} else 
# 320
{ 
# 322
const __uctype __uerange = __urange + 1; 
# 323
const __uctype __scaling = __urngrange / __uerange; 
# 324
const __uctype __past = __uerange * __scaling; 
# 325
while (__f != __t) 
# 326
{ 
# 327
do { 
# 328
__ret = (((__uctype)__urng()) - __urngmin); } 
# 329
while (__ret >= __past); 
# 330
(*(__f++)) = ((__ret / __scaling) + __param.a()); 
# 331
}  
# 332
}  
# 333
} else { 
# 334
if (__urngrange < __urange) 
# 335
{ 
# 351 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 352
while (__f != __t) 
# 353
{ 
# 354
do 
# 355
{ 
# 356
const __uctype __uerngrange = __urngrange + 1; 
# 357
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 359
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 360
} 
# 361
while ((__ret > __urange) || (__ret < __tmp)); 
# 362
(*(__f++)) = __ret; 
# 363
}  
# 364
} else { 
# 366
while (__f != __t) { 
# 367
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + __param.a()); }  }  }  
# 368
} 
# 373
}
# 37 "/usr/include/c++/7/bits/random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, size_t __bits, class 
# 57
_UniformRandomNumberGenerator> _RealType 
# 56
generate_canonical(_UniformRandomNumberGenerator & __g); 
# 66
namespace __detail { 
# 70
template< class _UIntType, size_t __w, bool 
# 71
 = __w < (static_cast< size_t>(std::template numeric_limits< _UIntType> ::digits))> 
# 73
struct _Shift { 
# 74
static const _UIntType __value = (0); }; 
# 76
template< class _UIntType, size_t __w> 
# 77
struct _Shift< _UIntType, __w, true>  { 
# 78
static const _UIntType __value = (((_UIntType)1) << __w); }; 
# 80
template< int __s, int 
# 81
__which = ((((__s) <= ((8) * sizeof(int))) + ((__s) <= ((8) * sizeof(long)))) + ((__s) <= ((8) * sizeof(long long)))) + (__s <= 128)> 
# 86
struct _Select_uint_least_t { 
# 88
static_assert((__which < 0), "sorry, would be too much trouble for a slow result");
# 90
}; 
# 92
template< int __s> 
# 93
struct _Select_uint_least_t< __s, 4>  { 
# 94
typedef unsigned type; }; 
# 96
template< int __s> 
# 97
struct _Select_uint_least_t< __s, 3>  { 
# 98
typedef unsigned long type; }; 
# 100
template< int __s> 
# 101
struct _Select_uint_least_t< __s, 2>  { 
# 102
typedef unsigned long long type; }; 
# 105
template< int __s> 
# 106
struct _Select_uint_least_t< __s, 1>  { 
# 107
typedef unsigned __int128 type; }; 
# 111
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool 
# 112
__big_enough = (!(__m & (__m - 1))) || (((((_Tp)(-1)) - __c) / __a) >= (__m - 1)), bool 
# 114
__schrage_ok = (__m % __a) < (__m / __a)> 
# 115
struct _Mod { 
# 118
typedef typename _Select_uint_least_t< (std::__lg(__a) + std::__lg(__m)) + 2> ::type _Tp2; 
# 120
static _Tp __calc(_Tp __x) 
# 121
{ return static_cast< _Tp>(((((_Tp2)__a) * __x) + __c) % __m); } 
# 122
}; 
# 125
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> 
# 126
struct _Mod< _Tp, __m, __a, __c, false, true>  { 
# 129
static _Tp __calc(_Tp __x); 
# 130
}; 
# 135
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s> 
# 136
struct _Mod< _Tp, __m, __a, __c, true, __s>  { 
# 139
static _Tp __calc(_Tp __x) 
# 140
{ 
# 141
_Tp __res = (__a * __x) + __c; 
# 142
if (__m) { 
# 143
__res %= __m; }  
# 144
return __res; 
# 145
} 
# 146
}; 
# 148
template< class _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0> inline _Tp 
# 150
__mod(_Tp __x) 
# 151
{ return _Mod< _Tp, __m, __a, __c> ::__calc(__x); } 
# 157
template< class _Engine, class _DInputType> 
# 158
struct _Adaptor { 
# 160
static_assert((std::template is_floating_point< _DInputType> ::value), "template argument must be a floating point type");
# 164
_Adaptor(_Engine &__g) : _M_g(__g) 
# 165
{ } 
# 168
_DInputType min() const 
# 169
{ return (_DInputType)0; } 
# 172
_DInputType max() const 
# 173
{ return (_DInputType)1; } 
# 181
_DInputType operator()() 
# 182
{ 
# 183
return std::generate_canonical< _DInputType, numeric_limits< _DInputType> ::digits, _Engine> (_M_g); 
# 186
} 
# 189
private: _Engine &_M_g; 
# 190
}; 
# 193
}
# 235 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 236
class linear_congruential_engine { 
# 238
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 240
static_assert(((__m == 0U) || ((__a < __m) && (__c < __m))), "template argument substituting __m out of bounds");
# 245
public: typedef _UIntType result_type; 
# 248
static constexpr result_type multiplier = (__a); 
# 250
static constexpr result_type increment = (__c); 
# 252
static constexpr result_type modulus = (__m); 
# 253
static constexpr result_type default_seed = (1U); 
# 263 "/usr/include/c++/7/bits/random.h" 3
explicit linear_congruential_engine(result_type __s = default_seed) 
# 264
{ seed(__s); } 
# 272
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, linear_congruential_engine> ::value> ::type> explicit 
# 276
linear_congruential_engine(_Sseq &__q) 
# 277
{ seed(__q); } 
# 286
void seed(result_type __s = default_seed); 
# 295 "/usr/include/c++/7/bits/random.h" 3
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 306
static constexpr result_type min() 
# 307
{ return (__c == 0U) ? 1U : 0U; } 
# 313
static constexpr result_type max() 
# 314
{ return __m - 1U; } 
# 320
void discard(unsigned long long __z) 
# 321
{ 
# 322
for (; __z != 0ULL; --__z) { 
# 323
(*this)(); }  
# 324
} 
# 330
result_type operator()() 
# 331
{ 
# 332
(_M_x) = __detail::__mod< _UIntType, __m, __a, __c> (_M_x); 
# 333
return _M_x; 
# 334
} 
# 348 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const linear_congruential_engine< _UIntType, __a, __c, __m>  &__lhs, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 349
__rhs) 
# 350
{ return (__lhs._M_x) == (__rhs._M_x); } 
# 360 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 361
__m1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 360
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 380 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 381
__m1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 380
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 388
private: _UIntType _M_x; 
# 389
}; 
# 402 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> inline bool 
# 404
operator!=(const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 405
__lhs, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 407
__rhs) 
# 408
{ return !(__lhs == __rhs); } 
# 439 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, size_t __w, size_t 
# 440
__n, size_t __m, size_t __r, _UIntType 
# 441
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 442
__b, size_t __t, _UIntType 
# 443
__c, size_t __l, _UIntType __f> 
# 444
class mersenne_twister_engine { 
# 446
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 448
static_assert((((1U) <= __m) && (__m <= __n)), "template argument substituting __m out of bounds");
# 450
static_assert((__r <= __w), "template argument substituting __r out of bound");
# 452
static_assert((__u <= __w), "template argument substituting __u out of bound");
# 454
static_assert((__s <= __w), "template argument substituting __s out of bound");
# 456
static_assert((__t <= __w), "template argument substituting __t out of bound");
# 458
static_assert((__l <= __w), "template argument substituting __l out of bound");
# 460
static_assert((__w <= std::template numeric_limits< _UIntType> ::digits), "template argument substituting __w out of bound");
# 462
static_assert((__a <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __a out of bound");
# 464
static_assert((__b <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __b out of bound");
# 466
static_assert((__c <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __c out of bound");
# 468
static_assert((__d <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __d out of bound");
# 470
static_assert((__f <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __f out of bound");
# 475
public: typedef _UIntType result_type; 
# 478
static constexpr size_t word_size = __w; 
# 479
static constexpr size_t state_size = __n; 
# 480
static constexpr size_t shift_size = __m; 
# 481
static constexpr size_t mask_bits = __r; 
# 482
static constexpr result_type xor_mask = (__a); 
# 483
static constexpr size_t tempering_u = __u; 
# 484
static constexpr result_type tempering_d = (__d); 
# 485
static constexpr size_t tempering_s = __s; 
# 486
static constexpr result_type tempering_b = (__b); 
# 487
static constexpr size_t tempering_t = __t; 
# 488
static constexpr result_type tempering_c = (__c); 
# 489
static constexpr size_t tempering_l = __l; 
# 490
static constexpr result_type initialization_multiplier = (__f); 
# 491
static constexpr result_type default_seed = (5489U); 
# 495
explicit mersenne_twister_engine(result_type __sd = default_seed) 
# 496
{ seed(__sd); } 
# 504
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, mersenne_twister_engine> ::value> ::type> explicit 
# 508
mersenne_twister_engine(_Sseq &__q) 
# 509
{ seed(__q); } 
# 512
void seed(result_type __sd = default_seed); 
# 514
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 522
static constexpr result_type min() 
# 523
{ return 0; } 
# 529
static constexpr result_type max() 
# 530
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 536
void discard(unsigned long long __z); 
# 539
result_type operator()(); 
# 554 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &__lhs, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 555
__rhs) 
# 556
{ return (std::equal(__lhs._M_x, (__lhs._M_x) + state_size, __rhs._M_x) && ((__lhs._M_p) == (__rhs._M_p))); 
# 557
} 
# 571 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, size_t 
# 572
__w1, size_t __n1, size_t 
# 573
__m1, size_t __r1, _UIntType1 
# 574
__a1, size_t __u1, _UIntType1 
# 575
__d1, size_t __s1, _UIntType1 
# 576
__b1, size_t __t1, _UIntType1 
# 577
__c1, size_t __l1, _UIntType1 __f1, class 
# 578
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 571
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 597 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, size_t 
# 598
__w1, size_t __n1, size_t 
# 599
__m1, size_t __r1, _UIntType1 
# 600
__a1, size_t __u1, _UIntType1 
# 601
__d1, size_t __s1, _UIntType1 
# 602
__b1, size_t __t1, _UIntType1 
# 603
__c1, size_t __l1, _UIntType1 __f1, class 
# 604
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 597
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 612
private: void _M_gen_rand(); 
# 614
_UIntType _M_x[state_size]; 
# 615
size_t _M_p; 
# 616
}; 
# 630 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, size_t __w, size_t 
# 631
__n, size_t __m, size_t __r, _UIntType 
# 632
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 633
__b, size_t __t, _UIntType 
# 634
__c, size_t __l, _UIntType __f> inline bool 
# 636
operator!=(const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 637
__lhs, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 639
__rhs) 
# 640
{ return !(__lhs == __rhs); } 
# 658 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 659
class subtract_with_carry_engine { 
# 661
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 663
static_assert((((0U) < __s) && (__s < __r)), "0 < s < r");
# 665
static_assert((((0U) < __w) && (__w <= std::template numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 670
public: typedef _UIntType result_type; 
# 673
static constexpr size_t word_size = __w; 
# 674
static constexpr size_t short_lag = __s; 
# 675
static constexpr size_t long_lag = __r; 
# 676
static constexpr result_type default_seed = (19780503U); 
# 683
explicit subtract_with_carry_engine(result_type __sd = default_seed) 
# 684
{ seed(__sd); } 
# 692
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, subtract_with_carry_engine> ::value> ::type> explicit 
# 696
subtract_with_carry_engine(_Sseq &__q) 
# 697
{ seed(__q); } 
# 712 "/usr/include/c++/7/bits/random.h" 3
void seed(result_type __sd = default_seed); 
# 718
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 727
static constexpr result_type min() 
# 728
{ return 0; } 
# 735
static constexpr result_type max() 
# 736
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 742
void discard(unsigned long long __z) 
# 743
{ 
# 744
for (; __z != 0ULL; --__z) { 
# 745
(*this)(); }  
# 746
} 
# 752
result_type operator()(); 
# 767 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &__lhs, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 768
__rhs) 
# 769
{ return (std::equal(__lhs._M_x, (__lhs._M_x) + long_lag, __rhs._M_x) && ((__lhs._M_carry) == (__rhs._M_carry)) && ((__lhs._M_p) == (__rhs._M_p))); 
# 771
} 
# 785 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 786
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 785
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 804 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 805
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 804
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 813
private: _UIntType _M_x[long_lag]; 
# 814
_UIntType _M_carry; 
# 815
size_t _M_p; 
# 816
}; 
# 830 "/usr/include/c++/7/bits/random.h" 3
template< class _UIntType, size_t __w, size_t __s, size_t __r> inline bool 
# 832
operator!=(const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 833
__lhs, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 835
__rhs) 
# 836
{ return !(__lhs == __rhs); } 
# 845 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine, size_t __p, size_t __r> 
# 846
class discard_block_engine { 
# 848
static_assert((((1) <= __r) && (__r <= __p)), "template argument substituting __r out of bounds");
# 853
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 856
static constexpr size_t block_size = __p; 
# 857
static constexpr size_t used_block = __r; 
# 864
discard_block_engine() : _M_b(), _M_n((0)) 
# 865
{ } 
# 874
explicit discard_block_engine(const _RandomNumberEngine &__rng) : _M_b(__rng), _M_n((0)) 
# 875
{ } 
# 884
explicit discard_block_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)), _M_n((0)) 
# 885
{ } 
# 894
explicit discard_block_engine(result_type __s) : _M_b(__s), _M_n((0)) 
# 895
{ } 
# 902
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, discard_block_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 907
discard_block_engine(_Sseq &__q) : _M_b(__q), _M_n((0)) 
# 909
{ } 
# 916
void seed() 
# 917
{ 
# 918
(_M_b).seed(); 
# 919
(_M_n) = (0); 
# 920
} 
# 927
void seed(result_type __s) 
# 928
{ 
# 929
(_M_b).seed(__s); 
# 930
(_M_n) = (0); 
# 931
} 
# 938
template< class _Sseq> void 
# 940
seed(_Sseq &__q) 
# 941
{ 
# 942
(_M_b).seed(__q); 
# 943
(_M_n) = (0); 
# 944
} 
# 951
const _RandomNumberEngine &base() const noexcept 
# 952
{ return _M_b; } 
# 958
static constexpr result_type min() 
# 959
{ return _RandomNumberEngine::min(); } 
# 965
static constexpr result_type max() 
# 966
{ return _RandomNumberEngine::max(); } 
# 972
void discard(unsigned long long __z) 
# 973
{ 
# 974
for (; __z != 0ULL; --__z) { 
# 975
(*this)(); }  
# 976
} 
# 982
result_type operator()(); 
# 996 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const discard_block_engine< _RandomNumberEngine, __p, __r>  &__lhs, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 997
__rhs) 
# 998
{ return ((__lhs._M_b) == (__rhs._M_b)) && ((__lhs._M_n) == (__rhs._M_n)); } 
# 1011 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1012
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1011
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1029 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1030
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1029
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1037
private: _RandomNumberEngine _M_b; 
# 1038
size_t _M_n; 
# 1039
}; 
# 1052 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine, size_t __p, size_t __r> inline bool 
# 1054
operator!=(const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1055
__lhs, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1057
__rhs) 
# 1058
{ return !(__lhs == __rhs); } 
# 1065
template< class _RandomNumberEngine, size_t __w, class _UIntType> 
# 1066
class independent_bits_engine { 
# 1068
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 1070
static_assert((((0U) < __w) && (__w <= std::template numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 1075
public: typedef _UIntType result_type; 
# 1082
independent_bits_engine() : _M_b() 
# 1083
{ } 
# 1092
explicit independent_bits_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1093
{ } 
# 1102
explicit independent_bits_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1103
{ } 
# 1112
explicit independent_bits_engine(result_type __s) : _M_b(__s) 
# 1113
{ } 
# 1120
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, independent_bits_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 1125
independent_bits_engine(_Sseq &__q) : _M_b(__q) 
# 1127
{ } 
# 1134
void seed() 
# 1135
{ (_M_b).seed(); } 
# 1142
void seed(result_type __s) 
# 1143
{ (_M_b).seed(__s); } 
# 1150
template< class _Sseq> void 
# 1152
seed(_Sseq &__q) 
# 1153
{ (_M_b).seed(__q); } 
# 1160
const _RandomNumberEngine &base() const noexcept 
# 1161
{ return _M_b; } 
# 1167
static constexpr result_type min() 
# 1168
{ return 0U; } 
# 1174
static constexpr result_type max() 
# 1175
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 1181
void discard(unsigned long long __z) 
# 1182
{ 
# 1183
for (; __z != 0ULL; --__z) { 
# 1184
(*this)(); }  
# 1185
} 
# 1191
result_type operator()(); 
# 1206 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &__lhs, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1207
__rhs) 
# 1208
{ return (__lhs._M_b) == (__rhs._M_b); } 
# 1222 "/usr/include/c++/7/bits/random.h" 3
template< class _CharT, class _Traits> friend inline basic_istream< _CharT, _Traits>  &
# 1224
operator>>(std::basic_istream< _CharT, _Traits>  &__is, independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1226
__x) 
# 1227
{ 
# 1228
__is >> (__x._M_b); 
# 1229
return __is; 
# 1230
} 
# 1233
private: _RandomNumberEngine _M_b; 
# 1234
}; 
# 1248 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine, size_t __w, class _UIntType> inline bool 
# 1250
operator!=(const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1251
__lhs, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1253
__rhs) 
# 1254
{ return !(__lhs == __rhs); } 
# 1266 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine, size_t __w, class _UIntType, class 
# 1267
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1269
operator<<(basic_ostream< _CharT, _Traits>  &__os, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1271
__x) 
# 1272
{ 
# 1273
__os << __x.base(); 
# 1274
return __os; 
# 1275
} 
# 1283
template< class _RandomNumberEngine, size_t __k> 
# 1284
class shuffle_order_engine { 
# 1286
static_assert(((1U) <= __k), "template argument substituting __k out of bound");
# 1291
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 1293
static constexpr size_t table_size = __k; 
# 1300
shuffle_order_engine() : _M_b() 
# 1302
{ _M_initialize(); } 
# 1311
explicit shuffle_order_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1313
{ _M_initialize(); } 
# 1322
explicit shuffle_order_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1324
{ _M_initialize(); } 
# 1333
explicit shuffle_order_engine(result_type __s) : _M_b(__s) 
# 1335
{ _M_initialize(); } 
# 1342
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, shuffle_order_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 1347
shuffle_order_engine(_Sseq &__q) : _M_b(__q) 
# 1349
{ _M_initialize(); } 
# 1356
void seed() 
# 1357
{ 
# 1358
(_M_b).seed(); 
# 1359
_M_initialize(); 
# 1360
} 
# 1367
void seed(result_type __s) 
# 1368
{ 
# 1369
(_M_b).seed(__s); 
# 1370
_M_initialize(); 
# 1371
} 
# 1378
template< class _Sseq> void 
# 1380
seed(_Sseq &__q) 
# 1381
{ 
# 1382
(_M_b).seed(__q); 
# 1383
_M_initialize(); 
# 1384
} 
# 1390
const _RandomNumberEngine &base() const noexcept 
# 1391
{ return _M_b; } 
# 1397
static constexpr result_type min() 
# 1398
{ return _RandomNumberEngine::min(); } 
# 1404
static constexpr result_type max() 
# 1405
{ return _RandomNumberEngine::max(); } 
# 1411
void discard(unsigned long long __z) 
# 1412
{ 
# 1413
for (; __z != 0ULL; --__z) { 
# 1414
(*this)(); }  
# 1415
} 
# 1421
result_type operator()(); 
# 1435 "/usr/include/c++/7/bits/random.h" 3
friend inline bool operator==(const shuffle_order_engine< _RandomNumberEngine, __k>  &__lhs, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1436
__rhs) 
# 1437
{ return (((__lhs._M_b) == (__rhs._M_b)) && std::equal(__lhs._M_v, (__lhs._M_v) + __k, __rhs._M_v) && ((__lhs._M_y) == (__rhs._M_y))); 
# 1439
} 
# 1452 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __k1, class 
# 1453
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1452
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1470 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __k1, class 
# 1471
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1470
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1477
private: void _M_initialize() 
# 1478
{ 
# 1479
for (size_t __i = (0); __i < __k; ++__i) { 
# 1480
((_M_v)[__i]) = (_M_b)(); }  
# 1481
(_M_y) = (_M_b)(); 
# 1482
} 
# 1484
_RandomNumberEngine _M_b; 
# 1485
result_type _M_v[__k]; 
# 1486
result_type _M_y; 
# 1487
}; 
# 1500 "/usr/include/c++/7/bits/random.h" 3
template< class _RandomNumberEngine, size_t __k> inline bool 
# 1502
operator!=(const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1503
__lhs, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1505
__rhs) 
# 1506
{ return !(__lhs == __rhs); } 
# 1513
typedef linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL>  minstd_rand0; 
# 1519
typedef linear_congruential_engine< unsigned long, 48271UL, 0UL, 2147483647UL>  minstd_rand; 
# 1535 "/usr/include/c++/7/bits/random.h" 3
typedef mersenne_twister_engine< unsigned long, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>  mt19937; 
# 1547
typedef mersenne_twister_engine< unsigned long, 64UL, 312UL, 156UL, 31UL, 13043109905998158313UL, 29UL, 6148914691236517205UL, 17UL, 8202884508482404352UL, 37UL, 18444473444759240704UL, 43UL, 6364136223846793005UL>  mt19937_64; 
# 1550
typedef subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL>  ranlux24_base; 
# 1553
typedef subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL>  ranlux48_base; 
# 1555
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL> , 223UL, 23UL>  ranlux24; 
# 1557
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL> , 389UL, 11UL>  ranlux48; 
# 1559
typedef shuffle_order_engine< linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL> , 256UL>  knuth_b; 
# 1561
typedef minstd_rand0 default_random_engine; 
# 1567
class random_device { 
# 1571
public: typedef unsigned result_type; 
# 1578
explicit random_device(const __cxx11::string &__token = "default") 
# 1579
{ 
# 1580
this->_M_init(__token); 
# 1581
} 
# 1583
~random_device() 
# 1584
{ this->_M_fini(); } 
# 1597 "/usr/include/c++/7/bits/random.h" 3
static constexpr result_type min() 
# 1598
{ return std::numeric_limits< unsigned> ::min(); } 
# 1601
static constexpr result_type max() 
# 1602
{ return std::numeric_limits< unsigned> ::max(); } 
# 1605
double entropy() const noexcept 
# 1606
{ return (0.0); } 
# 1609
result_type operator()() 
# 1610
{ 
# 1612
return this->_M_getval(); 
# 1616
} 
# 1619
random_device(const random_device &) = delete;
# 1620
void operator=(const random_device &) = delete;
# 1624
private: void _M_init(const __cxx11::string & __token); 
# 1625
void _M_init_pretr1(const __cxx11::string & __token); 
# 1626
void _M_fini(); 
# 1628
result_type _M_getval(); 
# 1629
result_type _M_getval_pretr1(); 
# 1632
union { 
# 1633
void *_M_file; 
# 1634
mt19937 _M_mt; 
# 1635
}; 
# 1636
}; 
# 1658 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType> inline bool 
# 1660
operator!=(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 1661
__d2) 
# 1662
{ return !(__d1 == __d2); } 
# 1674 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_int_distribution< _IntType>  &); 
# 1688 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_int_distribution< _IntType>  &); 
# 1701 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 1702
class uniform_real_distribution { 
# 1704
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 1709
public: typedef _RealType result_type; 
# 1712
struct param_type { 
# 1714
typedef uniform_real_distribution distribution_type; 
# 1717
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 1718
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 1720
{ 
# 1721
; 
# 1722
} 
# 1725
result_type a() const 
# 1726
{ return _M_a; } 
# 1729
result_type b() const 
# 1730
{ return _M_b; } 
# 1733
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 1734
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 1737
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 1738
{ return !(__p1 == __p2); } 
# 1741
private: _RealType _M_a; 
# 1742
_RealType _M_b; 
# 1743
}; 
# 1753
explicit uniform_real_distribution(_RealType __a = (_RealType)0, _RealType 
# 1754
__b = (_RealType)1) : _M_param(__a, __b) 
# 1756
{ } 
# 1759
explicit uniform_real_distribution(const param_type &__p) : _M_param(__p) 
# 1761
{ } 
# 1769
void reset() { } 
# 1772
result_type a() const 
# 1773
{ return (_M_param).a(); } 
# 1776
result_type b() const 
# 1777
{ return (_M_param).b(); } 
# 1783
param_type param() const 
# 1784
{ return _M_param; } 
# 1791
void param(const param_type &__param) 
# 1792
{ (_M_param) = __param; } 
# 1798
result_type min() const 
# 1799
{ return a(); } 
# 1805
result_type max() const 
# 1806
{ return b(); } 
# 1811
template< class _UniformRandomNumberGenerator> result_type 
# 1813
operator()(_UniformRandomNumberGenerator &__urng) 
# 1814
{ return this->operator()(__urng, _M_param); } 
# 1816
template< class _UniformRandomNumberGenerator> result_type 
# 1818
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1819
__p) 
# 1820
{ 
# 1822
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1823
return (__aurng() * (__p.b() - __p.a())) + __p.a(); 
# 1824
} 
# 1826
template< class _ForwardIterator, class 
# 1827
_UniformRandomNumberGenerator> void 
# 1829
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1830
__urng) 
# 1831
{ this->__generate(__f, __t, __urng, _M_param); } 
# 1833
template< class _ForwardIterator, class 
# 1834
_UniformRandomNumberGenerator> void 
# 1836
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1837
__urng, const param_type &
# 1838
__p) 
# 1839
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 1841
template< class _UniformRandomNumberGenerator> void 
# 1843
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 1844
__urng, const param_type &
# 1845
__p) 
# 1846
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 1853
friend inline bool operator==(const uniform_real_distribution< _RealType>  &__d1, const uniform_real_distribution< _RealType>  &
# 1854
__d2) 
# 1855
{ return (__d1._M_param) == (__d2._M_param); } 
# 1858
private: template< class _ForwardIterator, class 
# 1859
_UniformRandomNumberGenerator> void 
# 1858
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 1865
param_type _M_param; 
# 1866
}; 
# 1872
template< class _IntType> inline bool 
# 1874
operator!=(const uniform_real_distribution< _IntType>  &__d1, const uniform_real_distribution< _IntType>  &
# 1875
__d2) 
# 1876
{ return !(__d1 == __d2); } 
# 1888 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_real_distribution< _RealType>  &); 
# 1902 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_real_distribution< _RealType>  &); 
# 1924 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 1925
class normal_distribution { 
# 1927
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 1932
public: typedef _RealType result_type; 
# 1935
struct param_type { 
# 1937
typedef normal_distribution distribution_type; 
# 1940
explicit param_type(_RealType __mean = (_RealType)0, _RealType 
# 1941
__stddev = (_RealType)1) : _M_mean(__mean), _M_stddev(__stddev) 
# 1943
{ 
# 1944
; 
# 1945
} 
# 1948
_RealType mean() const 
# 1949
{ return _M_mean; } 
# 1952
_RealType stddev() const 
# 1953
{ return _M_stddev; } 
# 1956
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 1957
{ return (((__p1._M_mean) == (__p2._M_mean)) && ((__p1._M_stddev) == (__p2._M_stddev))); 
# 1958
} 
# 1961
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 1962
{ return !(__p1 == __p2); } 
# 1965
private: _RealType _M_mean; 
# 1966
_RealType _M_stddev; 
# 1967
}; 
# 1975
explicit normal_distribution(result_type __mean = (result_type)0, result_type 
# 1976
__stddev = (result_type)1) : _M_param(__mean, __stddev), _M_saved_available(false) 
# 1978
{ } 
# 1981
explicit normal_distribution(const param_type &__p) : _M_param(__p), _M_saved_available(false) 
# 1983
{ } 
# 1989
void reset() 
# 1990
{ (_M_saved_available) = false; } 
# 1996
_RealType mean() const 
# 1997
{ return (_M_param).mean(); } 
# 2003
_RealType stddev() const 
# 2004
{ return (_M_param).stddev(); } 
# 2010
param_type param() const 
# 2011
{ return _M_param; } 
# 2018
void param(const param_type &__param) 
# 2019
{ (_M_param) = __param; } 
# 2025
result_type min() const 
# 2026
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 2032
result_type max() const 
# 2033
{ return std::template numeric_limits< result_type> ::max(); } 
# 2038
template< class _UniformRandomNumberGenerator> result_type 
# 2040
operator()(_UniformRandomNumberGenerator &__urng) 
# 2041
{ return this->operator()(__urng, _M_param); } 
# 2043
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2048
template< class _ForwardIterator, class 
# 2049
_UniformRandomNumberGenerator> void 
# 2051
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2052
__urng) 
# 2053
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2055
template< class _ForwardIterator, class 
# 2056
_UniformRandomNumberGenerator> void 
# 2058
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2059
__urng, const param_type &
# 2060
__p) 
# 2061
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2063
template< class _UniformRandomNumberGenerator> void 
# 2065
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2066
__urng, const param_type &
# 2067
__p) 
# 2068
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2075
template< class _RealType1> friend bool operator==(const std::normal_distribution< _RealType1>  & __d1, const std::normal_distribution< _RealType1>  & __d2); 
# 2090 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::normal_distribution< _RealType1>  & __x); 
# 2105 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::normal_distribution< _RealType1>  & __x); 
# 2111
private: template< class _ForwardIterator, class 
# 2112
_UniformRandomNumberGenerator> void 
# 2111
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2118
param_type _M_param; 
# 2119
result_type _M_saved; 
# 2120
bool _M_saved_available; 
# 2121
}; 
# 2126
template< class _RealType> inline bool 
# 2128
operator!=(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 2129
__d2) 
# 2130
{ return !(__d1 == __d2); } 
# 2142 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 2143
class lognormal_distribution { 
# 2145
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2150
public: typedef _RealType result_type; 
# 2153
struct param_type { 
# 2155
typedef lognormal_distribution distribution_type; 
# 2158
explicit param_type(_RealType __m = (_RealType)0, _RealType 
# 2159
__s = (_RealType)1) : _M_m(__m), _M_s(__s) 
# 2161
{ } 
# 2164
_RealType m() const 
# 2165
{ return _M_m; } 
# 2168
_RealType s() const 
# 2169
{ return _M_s; } 
# 2172
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2173
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_s) == (__p2._M_s)); } 
# 2176
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2177
{ return !(__p1 == __p2); } 
# 2180
private: _RealType _M_m; 
# 2181
_RealType _M_s; 
# 2182
}; 
# 2185
explicit lognormal_distribution(_RealType __m = (_RealType)0, _RealType 
# 2186
__s = (_RealType)1) : _M_param(__m, __s), _M_nd() 
# 2188
{ } 
# 2191
explicit lognormal_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2193
{ } 
# 2199
void reset() 
# 2200
{ (_M_nd).reset(); } 
# 2206
_RealType m() const 
# 2207
{ return (_M_param).m(); } 
# 2210
_RealType s() const 
# 2211
{ return (_M_param).s(); } 
# 2217
param_type param() const 
# 2218
{ return _M_param; } 
# 2225
void param(const param_type &__param) 
# 2226
{ (_M_param) = __param; } 
# 2232
result_type min() const 
# 2233
{ return (result_type)0; } 
# 2239
result_type max() const 
# 2240
{ return std::template numeric_limits< result_type> ::max(); } 
# 2245
template< class _UniformRandomNumberGenerator> result_type 
# 2247
operator()(_UniformRandomNumberGenerator &__urng) 
# 2248
{ return this->operator()(__urng, _M_param); } 
# 2250
template< class _UniformRandomNumberGenerator> result_type 
# 2252
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2253
__p) 
# 2254
{ return std::exp((__p.s() * (_M_nd)(__urng)) + __p.m()); } 
# 2256
template< class _ForwardIterator, class 
# 2257
_UniformRandomNumberGenerator> void 
# 2259
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2260
__urng) 
# 2261
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2263
template< class _ForwardIterator, class 
# 2264
_UniformRandomNumberGenerator> void 
# 2266
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2267
__urng, const param_type &
# 2268
__p) 
# 2269
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2271
template< class _UniformRandomNumberGenerator> void 
# 2273
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2274
__urng, const param_type &
# 2275
__p) 
# 2276
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2284
friend inline bool operator==(const lognormal_distribution< _RealType>  &__d1, const lognormal_distribution< _RealType>  &
# 2285
__d2) 
# 2286
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd))); 
# 2287
} 
# 2299 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::lognormal_distribution< _RealType1>  & __x); 
# 2314 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::lognormal_distribution< _RealType1>  & __x); 
# 2320
private: template< class _ForwardIterator, class 
# 2321
_UniformRandomNumberGenerator> void 
# 2320
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2327
param_type _M_param; 
# 2329
normal_distribution< result_type>  _M_nd; 
# 2330
}; 
# 2335
template< class _RealType> inline bool 
# 2337
operator!=(const lognormal_distribution< _RealType>  &__d1, const lognormal_distribution< _RealType>  &
# 2338
__d2) 
# 2339
{ return !(__d1 == __d2); } 
# 2351 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 2352
class gamma_distribution { 
# 2354
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2359
public: typedef _RealType result_type; 
# 2362
struct param_type { 
# 2364
typedef gamma_distribution distribution_type; 
# 2365
friend class gamma_distribution; 
# 2368
explicit param_type(_RealType __alpha_val = (_RealType)1, _RealType 
# 2369
__beta_val = (_RealType)1) : _M_alpha(__alpha_val), _M_beta(__beta_val) 
# 2371
{ 
# 2372
; 
# 2373
_M_initialize(); 
# 2374
} 
# 2377
_RealType alpha() const 
# 2378
{ return _M_alpha; } 
# 2381
_RealType beta() const 
# 2382
{ return _M_beta; } 
# 2385
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2386
{ return (((__p1._M_alpha) == (__p2._M_alpha)) && ((__p1._M_beta) == (__p2._M_beta))); 
# 2387
} 
# 2390
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2391
{ return !(__p1 == __p2); } 
# 2395
private: void _M_initialize(); 
# 2397
_RealType _M_alpha; 
# 2398
_RealType _M_beta; 
# 2400
_RealType _M_malpha, _M_a2; 
# 2401
}; 
# 2409
explicit gamma_distribution(_RealType __alpha_val = (_RealType)1, _RealType 
# 2410
__beta_val = (_RealType)1) : _M_param(__alpha_val, __beta_val), _M_nd() 
# 2412
{ } 
# 2415
explicit gamma_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2417
{ } 
# 2423
void reset() 
# 2424
{ (_M_nd).reset(); } 
# 2430
_RealType alpha() const 
# 2431
{ return (_M_param).alpha(); } 
# 2437
_RealType beta() const 
# 2438
{ return (_M_param).beta(); } 
# 2444
param_type param() const 
# 2445
{ return _M_param; } 
# 2452
void param(const param_type &__param) 
# 2453
{ (_M_param) = __param; } 
# 2459
result_type min() const 
# 2460
{ return (result_type)0; } 
# 2466
result_type max() const 
# 2467
{ return std::template numeric_limits< result_type> ::max(); } 
# 2472
template< class _UniformRandomNumberGenerator> result_type 
# 2474
operator()(_UniformRandomNumberGenerator &__urng) 
# 2475
{ return this->operator()(__urng, _M_param); } 
# 2477
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2482
template< class _ForwardIterator, class 
# 2483
_UniformRandomNumberGenerator> void 
# 2485
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2486
__urng) 
# 2487
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2489
template< class _ForwardIterator, class 
# 2490
_UniformRandomNumberGenerator> void 
# 2492
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2493
__urng, const param_type &
# 2494
__p) 
# 2495
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2497
template< class _UniformRandomNumberGenerator> void 
# 2499
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2500
__urng, const param_type &
# 2501
__p) 
# 2502
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2510
friend inline bool operator==(const gamma_distribution< _RealType>  &__d1, const gamma_distribution< _RealType>  &
# 2511
__d2) 
# 2512
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd))); 
# 2513
} 
# 2525 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::gamma_distribution< _RealType1>  & __x); 
# 2539 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::gamma_distribution< _RealType1>  & __x); 
# 2545
private: template< class _ForwardIterator, class 
# 2546
_UniformRandomNumberGenerator> void 
# 2545
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2552
param_type _M_param; 
# 2554
normal_distribution< result_type>  _M_nd; 
# 2555
}; 
# 2560
template< class _RealType> inline bool 
# 2562
operator!=(const gamma_distribution< _RealType>  &__d1, const gamma_distribution< _RealType>  &
# 2563
__d2) 
# 2564
{ return !(__d1 == __d2); } 
# 2573 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 2574
class chi_squared_distribution { 
# 2576
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2581
public: typedef _RealType result_type; 
# 2584
struct param_type { 
# 2586
typedef chi_squared_distribution distribution_type; 
# 2589
explicit param_type(_RealType __n = (_RealType)1) : _M_n(__n) 
# 2591
{ } 
# 2594
_RealType n() const 
# 2595
{ return _M_n; } 
# 2598
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2599
{ return (__p1._M_n) == (__p2._M_n); } 
# 2602
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2603
{ return !(__p1 == __p2); } 
# 2606
private: _RealType _M_n; 
# 2607
}; 
# 2610
explicit chi_squared_distribution(_RealType __n = (_RealType)1) : _M_param(__n), _M_gd(__n / 2) 
# 2612
{ } 
# 2615
explicit chi_squared_distribution(const param_type &__p) : _M_param(__p), _M_gd(__p.n() / 2) 
# 2617
{ } 
# 2623
void reset() 
# 2624
{ (_M_gd).reset(); } 
# 2630
_RealType n() const 
# 2631
{ return (_M_param).n(); } 
# 2637
param_type param() const 
# 2638
{ return _M_param; } 
# 2645
void param(const param_type &__param) 
# 2646
{ 
# 2647
(_M_param) = __param; 
# 2649
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2650
(_M_gd).param(param_type{__param.n() / 2}); 
# 2651
} 
# 2657
result_type min() const 
# 2658
{ return (result_type)0; } 
# 2664
result_type max() const 
# 2665
{ return std::template numeric_limits< result_type> ::max(); } 
# 2670
template< class _UniformRandomNumberGenerator> result_type 
# 2672
operator()(_UniformRandomNumberGenerator &__urng) 
# 2673
{ return 2 * (_M_gd)(__urng); } 
# 2675
template< class _UniformRandomNumberGenerator> result_type 
# 2677
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2678
__p) 
# 2679
{ 
# 2681
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2682
return 2 * (_M_gd)(__urng, (param_type)(__p.n() / 2)); 
# 2683
} 
# 2685
template< class _ForwardIterator, class 
# 2686
_UniformRandomNumberGenerator> void 
# 2688
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2689
__urng) 
# 2690
{ this->__generate_impl(__f, __t, __urng); } 
# 2692
template< class _ForwardIterator, class 
# 2693
_UniformRandomNumberGenerator> void 
# 2695
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2696
__urng, const param_type &
# 2697
__p) 
# 2698
{ 
# 2699
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2); 
# 2700
this->__generate_impl(__f, __t, __urng, __p2); } 
# 2702
template< class _UniformRandomNumberGenerator> void 
# 2704
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2705
__urng) 
# 2706
{ this->__generate_impl(__f, __t, __urng); } 
# 2708
template< class _UniformRandomNumberGenerator> void 
# 2710
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2711
__urng, const param_type &
# 2712
__p) 
# 2713
{ 
# 2714
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2); 
# 2715
this->__generate_impl(__f, __t, __urng, __p2); } 
# 2723
friend inline bool operator==(const chi_squared_distribution< _RealType>  &__d1, const chi_squared_distribution< _RealType>  &
# 2724
__d2) 
# 2725
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd) == (__d2._M_gd)); } 
# 2737 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::chi_squared_distribution< _RealType1>  & __x); 
# 2752 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::chi_squared_distribution< _RealType1>  & __x); 
# 2758
private: template< class _ForwardIterator, class 
# 2759
_UniformRandomNumberGenerator> void 
# 2758
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 2764
template< class _ForwardIterator, class 
# 2765
_UniformRandomNumberGenerator> void 
# 2764
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const typename gamma_distribution< result_type> ::param_type & __p); 
# 2772
param_type _M_param; 
# 2774
gamma_distribution< result_type>  _M_gd; 
# 2775
}; 
# 2780
template< class _RealType> inline bool 
# 2782
operator!=(const chi_squared_distribution< _RealType>  &__d1, const chi_squared_distribution< _RealType>  &
# 2783
__d2) 
# 2784
{ return !(__d1 == __d2); } 
# 2793 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 2794
class cauchy_distribution { 
# 2796
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2801
public: typedef _RealType result_type; 
# 2804
struct param_type { 
# 2806
typedef cauchy_distribution distribution_type; 
# 2809
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 2810
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 2812
{ } 
# 2815
_RealType a() const 
# 2816
{ return _M_a; } 
# 2819
_RealType b() const 
# 2820
{ return _M_b; } 
# 2823
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2824
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 2827
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2828
{ return !(__p1 == __p2); } 
# 2831
private: _RealType _M_a; 
# 2832
_RealType _M_b; 
# 2833
}; 
# 2836
explicit cauchy_distribution(_RealType __a = (_RealType)0, _RealType 
# 2837
__b = (_RealType)1) : _M_param(__a, __b) 
# 2839
{ } 
# 2842
explicit cauchy_distribution(const param_type &__p) : _M_param(__p) 
# 2844
{ } 
# 2850
void reset() 
# 2851
{ } 
# 2857
_RealType a() const 
# 2858
{ return (_M_param).a(); } 
# 2861
_RealType b() const 
# 2862
{ return (_M_param).b(); } 
# 2868
param_type param() const 
# 2869
{ return _M_param; } 
# 2876
void param(const param_type &__param) 
# 2877
{ (_M_param) = __param; } 
# 2883
result_type min() const 
# 2884
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 2890
result_type max() const 
# 2891
{ return std::template numeric_limits< result_type> ::max(); } 
# 2896
template< class _UniformRandomNumberGenerator> result_type 
# 2898
operator()(_UniformRandomNumberGenerator &__urng) 
# 2899
{ return this->operator()(__urng, _M_param); } 
# 2901
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2906
template< class _ForwardIterator, class 
# 2907
_UniformRandomNumberGenerator> void 
# 2909
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2910
__urng) 
# 2911
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2913
template< class _ForwardIterator, class 
# 2914
_UniformRandomNumberGenerator> void 
# 2916
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2917
__urng, const param_type &
# 2918
__p) 
# 2919
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2921
template< class _UniformRandomNumberGenerator> void 
# 2923
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2924
__urng, const param_type &
# 2925
__p) 
# 2926
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2933
friend inline bool operator==(const cauchy_distribution< _RealType>  &__d1, const cauchy_distribution< _RealType>  &
# 2934
__d2) 
# 2935
{ return (__d1._M_param) == (__d2._M_param); } 
# 2938
private: template< class _ForwardIterator, class 
# 2939
_UniformRandomNumberGenerator> void 
# 2938
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2945
param_type _M_param; 
# 2946
}; 
# 2952
template< class _RealType> inline bool 
# 2954
operator!=(const cauchy_distribution< _RealType>  &__d1, const cauchy_distribution< _RealType>  &
# 2955
__d2) 
# 2956
{ return !(__d1 == __d2); } 
# 2968 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const cauchy_distribution< _RealType>  & __x); 
# 2983 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, cauchy_distribution< _RealType>  & __x); 
# 2999 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 3000
class fisher_f_distribution { 
# 3002
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 3007
public: typedef _RealType result_type; 
# 3010
struct param_type { 
# 3012
typedef fisher_f_distribution distribution_type; 
# 3015
explicit param_type(_RealType __m = (_RealType)1, _RealType 
# 3016
__n = (_RealType)1) : _M_m(__m), _M_n(__n) 
# 3018
{ } 
# 3021
_RealType m() const 
# 3022
{ return _M_m; } 
# 3025
_RealType n() const 
# 3026
{ return _M_n; } 
# 3029
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3030
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_n) == (__p2._M_n)); } 
# 3033
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3034
{ return !(__p1 == __p2); } 
# 3037
private: _RealType _M_m; 
# 3038
_RealType _M_n; 
# 3039
}; 
# 3042
explicit fisher_f_distribution(_RealType __m = (_RealType)1, _RealType 
# 3043
__n = (_RealType)1) : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2) 
# 3045
{ } 
# 3048
explicit fisher_f_distribution(const param_type &__p) : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2) 
# 3050
{ } 
# 3056
void reset() 
# 3057
{ 
# 3058
(_M_gd_x).reset(); 
# 3059
(_M_gd_y).reset(); 
# 3060
} 
# 3066
_RealType m() const 
# 3067
{ return (_M_param).m(); } 
# 3070
_RealType n() const 
# 3071
{ return (_M_param).n(); } 
# 3077
param_type param() const 
# 3078
{ return _M_param; } 
# 3085
void param(const param_type &__param) 
# 3086
{ (_M_param) = __param; } 
# 3092
result_type min() const 
# 3093
{ return (result_type)0; } 
# 3099
result_type max() const 
# 3100
{ return std::template numeric_limits< result_type> ::max(); } 
# 3105
template< class _UniformRandomNumberGenerator> result_type 
# 3107
operator()(_UniformRandomNumberGenerator &__urng) 
# 3108
{ return ((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m()); } 
# 3110
template< class _UniformRandomNumberGenerator> result_type 
# 3112
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3113
__p) 
# 3114
{ 
# 3116
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 3117
return (((_M_gd_x)(__urng, (param_type)(__p.m() / 2)) * n()) / ((_M_gd_y)(__urng, (param_type)(__p.n() / 2)) * m())); 
# 3119
} 
# 3121
template< class _ForwardIterator, class 
# 3122
_UniformRandomNumberGenerator> void 
# 3124
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3125
__urng) 
# 3126
{ this->__generate_impl(__f, __t, __urng); } 
# 3128
template< class _ForwardIterator, class 
# 3129
_UniformRandomNumberGenerator> void 
# 3131
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3132
__urng, const param_type &
# 3133
__p) 
# 3134
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3136
template< class _UniformRandomNumberGenerator> void 
# 3138
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3139
__urng) 
# 3140
{ this->__generate_impl(__f, __t, __urng); } 
# 3142
template< class _UniformRandomNumberGenerator> void 
# 3144
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3145
__urng, const param_type &
# 3146
__p) 
# 3147
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3155
friend inline bool operator==(const fisher_f_distribution< _RealType>  &__d1, const fisher_f_distribution< _RealType>  &
# 3156
__d2) 
# 3157
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd_x) == (__d2._M_gd_x)) && ((__d1._M_gd_y) == (__d2._M_gd_y))); 
# 3159
} 
# 3171 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::fisher_f_distribution< _RealType1>  & __x); 
# 3186 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::fisher_f_distribution< _RealType1>  & __x); 
# 3192
private: template< class _ForwardIterator, class 
# 3193
_UniformRandomNumberGenerator> void 
# 3192
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3198
template< class _ForwardIterator, class 
# 3199
_UniformRandomNumberGenerator> void 
# 3198
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3205
param_type _M_param; 
# 3207
gamma_distribution< result_type>  _M_gd_x, _M_gd_y; 
# 3208
}; 
# 3213
template< class _RealType> inline bool 
# 3215
operator!=(const fisher_f_distribution< _RealType>  &__d1, const fisher_f_distribution< _RealType>  &
# 3216
__d2) 
# 3217
{ return !(__d1 == __d2); } 
# 3228 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 3229
class student_t_distribution { 
# 3231
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 3236
public: typedef _RealType result_type; 
# 3239
struct param_type { 
# 3241
typedef student_t_distribution distribution_type; 
# 3244
explicit param_type(_RealType __n = (_RealType)1) : _M_n(__n) 
# 3246
{ } 
# 3249
_RealType n() const 
# 3250
{ return _M_n; } 
# 3253
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3254
{ return (__p1._M_n) == (__p2._M_n); } 
# 3257
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3258
{ return !(__p1 == __p2); } 
# 3261
private: _RealType _M_n; 
# 3262
}; 
# 3265
explicit student_t_distribution(_RealType __n = (_RealType)1) : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2) 
# 3267
{ } 
# 3270
explicit student_t_distribution(const param_type &__p) : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2) 
# 3272
{ } 
# 3278
void reset() 
# 3279
{ 
# 3280
(_M_nd).reset(); 
# 3281
(_M_gd).reset(); 
# 3282
} 
# 3288
_RealType n() const 
# 3289
{ return (_M_param).n(); } 
# 3295
param_type param() const 
# 3296
{ return _M_param; } 
# 3303
void param(const param_type &__param) 
# 3304
{ (_M_param) = __param; } 
# 3310
result_type min() const 
# 3311
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 3317
result_type max() const 
# 3318
{ return std::template numeric_limits< result_type> ::max(); } 
# 3323
template< class _UniformRandomNumberGenerator> result_type 
# 3325
operator()(_UniformRandomNumberGenerator &__urng) 
# 3326
{ return (_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng)); } 
# 3328
template< class _UniformRandomNumberGenerator> result_type 
# 3330
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3331
__p) 
# 3332
{ 
# 3334
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 3336
const result_type __g = (_M_gd)(__urng, param_type(__p.n() / 2, 2)); 
# 3337
return (_M_nd)(__urng) * std::sqrt(__p.n() / __g); 
# 3338
} 
# 3340
template< class _ForwardIterator, class 
# 3341
_UniformRandomNumberGenerator> void 
# 3343
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3344
__urng) 
# 3345
{ this->__generate_impl(__f, __t, __urng); } 
# 3347
template< class _ForwardIterator, class 
# 3348
_UniformRandomNumberGenerator> void 
# 3350
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3351
__urng, const param_type &
# 3352
__p) 
# 3353
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3355
template< class _UniformRandomNumberGenerator> void 
# 3357
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3358
__urng) 
# 3359
{ this->__generate_impl(__f, __t, __urng); } 
# 3361
template< class _UniformRandomNumberGenerator> void 
# 3363
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3364
__urng, const param_type &
# 3365
__p) 
# 3366
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3374
friend inline bool operator==(const student_t_distribution< _RealType>  &__d1, const student_t_distribution< _RealType>  &
# 3375
__d2) 
# 3376
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)) && ((__d1._M_gd) == (__d2._M_gd))); 
# 3377
} 
# 3389 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::student_t_distribution< _RealType1>  & __x); 
# 3404 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::student_t_distribution< _RealType1>  & __x); 
# 3410
private: template< class _ForwardIterator, class 
# 3411
_UniformRandomNumberGenerator> void 
# 3410
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3415
template< class _ForwardIterator, class 
# 3416
_UniformRandomNumberGenerator> void 
# 3415
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3422
param_type _M_param; 
# 3424
normal_distribution< result_type>  _M_nd; 
# 3425
gamma_distribution< result_type>  _M_gd; 
# 3426
}; 
# 3431
template< class _RealType> inline bool 
# 3433
operator!=(const student_t_distribution< _RealType>  &__d1, const student_t_distribution< _RealType>  &
# 3434
__d2) 
# 3435
{ return !(__d1 == __d2); } 
# 3452 "/usr/include/c++/7/bits/random.h" 3
class bernoulli_distribution { 
# 3456
public: typedef bool result_type; 
# 3459
struct param_type { 
# 3461
typedef bernoulli_distribution distribution_type; 
# 3464
explicit param_type(double __p = (0.5)) : _M_p(__p) 
# 3466
{ 
# 3467
; 
# 3468
} 
# 3471
double p() const 
# 3472
{ return _M_p; } 
# 3475
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3476
{ return (__p1._M_p) == (__p2._M_p); } 
# 3479
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3480
{ return !(__p1 == __p2); } 
# 3483
private: double _M_p; 
# 3484
}; 
# 3494
explicit bernoulli_distribution(double __p = (0.5)) : _M_param(__p) 
# 3496
{ } 
# 3499
explicit bernoulli_distribution(const param_type &__p) : _M_param(__p) 
# 3501
{ } 
# 3509
void reset() { } 
# 3515
double p() const 
# 3516
{ return (_M_param).p(); } 
# 3522
param_type param() const 
# 3523
{ return _M_param; } 
# 3530
void param(const param_type &__param) 
# 3531
{ (_M_param) = __param; } 
# 3537
result_type min() const 
# 3538
{ return std::numeric_limits< bool> ::min(); } 
# 3544
result_type max() const 
# 3545
{ return std::numeric_limits< bool> ::max(); } 
# 3550
template< class _UniformRandomNumberGenerator> result_type 
# 3552
operator()(_UniformRandomNumberGenerator &__urng) 
# 3553
{ return this->operator()(__urng, _M_param); } 
# 3555
template< class _UniformRandomNumberGenerator> result_type 
# 3557
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3558
__p) 
# 3559
{ 
# 3561
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3562
if ((__aurng() - __aurng.min()) < (__p.p() * (__aurng.max() - __aurng.min()))) { 
# 3564
return true; }  
# 3565
return false; 
# 3566
} 
# 3568
template< class _ForwardIterator, class 
# 3569
_UniformRandomNumberGenerator> void 
# 3571
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3572
__urng) 
# 3573
{ this->__generate(__f, __t, __urng, _M_param); } 
# 3575
template< class _ForwardIterator, class 
# 3576
_UniformRandomNumberGenerator> void 
# 3578
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3579
__urng, const param_type &__p) 
# 3580
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3582
template< class _UniformRandomNumberGenerator> void 
# 3584
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3585
__urng, const param_type &
# 3586
__p) 
# 3587
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3594
friend inline bool operator==(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3595
__d2) 
# 3596
{ return ((__d1._M_param) == (__d2._M_param)); } 
# 3599
private: template< class _ForwardIterator, class 
# 3600
_UniformRandomNumberGenerator> void 
# 3599
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3606
param_type _M_param; 
# 3607
}; 
# 3614
inline bool operator!=(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3615
__d2) 
# 3616
{ return !(__d1 == __d2); } 
# 3628 "/usr/include/c++/7/bits/random.h" 3
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const bernoulli_distribution & __x); 
# 3642 "/usr/include/c++/7/bits/random.h" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3644
operator>>(basic_istream< _CharT, _Traits>  &__is, bernoulli_distribution &
# 3645
__x) 
# 3646
{ 
# 3647
double __p; 
# 3648
__is >> __p; 
# 3649
__x.param(((bernoulli_distribution::param_type)(__p))); 
# 3650
return __is; 
# 3651
} 
# 3661 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType = int> 
# 3662
class binomial_distribution { 
# 3664
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 3669
public: typedef _IntType result_type; 
# 3672
struct param_type { 
# 3674
typedef binomial_distribution distribution_type; 
# 3675
friend class binomial_distribution; 
# 3678
explicit param_type(_IntType __t = (_IntType)1, double __p = (0.5)) : _M_t(__t), _M_p(__p) 
# 3680
{ 
# 3683
; 
# 3684
_M_initialize(); 
# 3685
} 
# 3688
_IntType t() const 
# 3689
{ return _M_t; } 
# 3692
double p() const 
# 3693
{ return _M_p; } 
# 3696
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3697
{ return ((__p1._M_t) == (__p2._M_t)) && ((__p1._M_p) == (__p2._M_p)); } 
# 3700
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3701
{ return !(__p1 == __p2); } 
# 3705
private: void _M_initialize(); 
# 3707
_IntType _M_t; 
# 3708
double _M_p; 
# 3710
double _M_q; 
# 3712
double _M_d1, _M_d2, _M_s1, _M_s2, _M_c, 
# 3713
_M_a1, _M_a123, _M_s, _M_lf, _M_lp1p; 
# 3715
bool _M_easy; 
# 3716
}; 
# 3720
explicit binomial_distribution(_IntType __t = (_IntType)1, double 
# 3721
__p = (0.5)) : _M_param(__t, __p), _M_nd() 
# 3723
{ } 
# 3726
explicit binomial_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 3728
{ } 
# 3734
void reset() 
# 3735
{ (_M_nd).reset(); } 
# 3741
_IntType t() const 
# 3742
{ return (_M_param).t(); } 
# 3748
double p() const 
# 3749
{ return (_M_param).p(); } 
# 3755
param_type param() const 
# 3756
{ return _M_param; } 
# 3763
void param(const param_type &__param) 
# 3764
{ (_M_param) = __param; } 
# 3770
result_type min() const 
# 3771
{ return 0; } 
# 3777
result_type max() const 
# 3778
{ return (_M_param).t(); } 
# 3783
template< class _UniformRandomNumberGenerator> result_type 
# 3785
operator()(_UniformRandomNumberGenerator &__urng) 
# 3786
{ return this->operator()(__urng, _M_param); } 
# 3788
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3793
template< class _ForwardIterator, class 
# 3794
_UniformRandomNumberGenerator> void 
# 3796
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3797
__urng) 
# 3798
{ this->__generate(__f, __t, __urng, _M_param); } 
# 3800
template< class _ForwardIterator, class 
# 3801
_UniformRandomNumberGenerator> void 
# 3803
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3804
__urng, const param_type &
# 3805
__p) 
# 3806
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3808
template< class _UniformRandomNumberGenerator> void 
# 3810
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3811
__urng, const param_type &
# 3812
__p) 
# 3813
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3821
friend inline bool operator==(const binomial_distribution< _IntType>  &__d1, const binomial_distribution< _IntType>  &
# 3822
__d2) 
# 3824
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); } 
# 3839 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class 
# 3840
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 3839
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::binomial_distribution< _IntType1>  & __x); 
# 3855 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class 
# 3856
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 3855
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::binomial_distribution< _IntType1>  & __x); 
# 3862
private: template< class _ForwardIterator, class 
# 3863
_UniformRandomNumberGenerator> void 
# 3862
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3869
template< class _UniformRandomNumberGenerator> result_type _M_waiting(_UniformRandomNumberGenerator & __urng, _IntType __t, double __q); 
# 3874
param_type _M_param; 
# 3877
normal_distribution< double>  _M_nd; 
# 3878
}; 
# 3883
template< class _IntType> inline bool 
# 3885
operator!=(const binomial_distribution< _IntType>  &__d1, const binomial_distribution< _IntType>  &
# 3886
__d2) 
# 3887
{ return !(__d1 == __d2); } 
# 3897 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType = int> 
# 3898
class geometric_distribution { 
# 3900
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 3905
public: typedef _IntType result_type; 
# 3908
struct param_type { 
# 3910
typedef geometric_distribution distribution_type; 
# 3911
friend class geometric_distribution; 
# 3914
explicit param_type(double __p = (0.5)) : _M_p(__p) 
# 3916
{ 
# 3917
; 
# 3918
_M_initialize(); 
# 3919
} 
# 3922
double p() const 
# 3923
{ return _M_p; } 
# 3926
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3927
{ return (__p1._M_p) == (__p2._M_p); } 
# 3930
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3931
{ return !(__p1 == __p2); } 
# 3935
private: void _M_initialize() 
# 3936
{ (_M_log_1_p) = std::log((1.0) - (_M_p)); } 
# 3938
double _M_p; 
# 3940
double _M_log_1_p; 
# 3941
}; 
# 3945
explicit geometric_distribution(double __p = (0.5)) : _M_param(__p) 
# 3947
{ } 
# 3950
explicit geometric_distribution(const param_type &__p) : _M_param(__p) 
# 3952
{ } 
# 3960
void reset() { } 
# 3966
double p() const 
# 3967
{ return (_M_param).p(); } 
# 3973
param_type param() const 
# 3974
{ return _M_param; } 
# 3981
void param(const param_type &__param) 
# 3982
{ (_M_param) = __param; } 
# 3988
result_type min() const 
# 3989
{ return 0; } 
# 3995
result_type max() const 
# 3996
{ return std::template numeric_limits< result_type> ::max(); } 
# 4001
template< class _UniformRandomNumberGenerator> result_type 
# 4003
operator()(_UniformRandomNumberGenerator &__urng) 
# 4004
{ return this->operator()(__urng, _M_param); } 
# 4006
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4011
template< class _ForwardIterator, class 
# 4012
_UniformRandomNumberGenerator> void 
# 4014
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4015
__urng) 
# 4016
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4018
template< class _ForwardIterator, class 
# 4019
_UniformRandomNumberGenerator> void 
# 4021
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4022
__urng, const param_type &
# 4023
__p) 
# 4024
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4026
template< class _UniformRandomNumberGenerator> void 
# 4028
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4029
__urng, const param_type &
# 4030
__p) 
# 4031
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4038
friend inline bool operator==(const geometric_distribution< _IntType>  &__d1, const geometric_distribution< _IntType>  &
# 4039
__d2) 
# 4040
{ return (__d1._M_param) == (__d2._M_param); } 
# 4043
private: template< class _ForwardIterator, class 
# 4044
_UniformRandomNumberGenerator> void 
# 4043
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4050
param_type _M_param; 
# 4051
}; 
# 4057
template< class _IntType> inline bool 
# 4059
operator!=(const geometric_distribution< _IntType>  &__d1, const geometric_distribution< _IntType>  &
# 4060
__d2) 
# 4061
{ return !(__d1 == __d2); } 
# 4073 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType, class 
# 4074
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 4073
operator<<(basic_ostream< _CharT, _Traits>  & __os, const geometric_distribution< _IntType>  & __x); 
# 4088 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType, class 
# 4089
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 4088
operator>>(basic_istream< _CharT, _Traits>  & __is, geometric_distribution< _IntType>  & __x); 
# 4102 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType = int> 
# 4103
class negative_binomial_distribution { 
# 4105
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 4110
public: typedef _IntType result_type; 
# 4113
struct param_type { 
# 4115
typedef negative_binomial_distribution distribution_type; 
# 4118
explicit param_type(_IntType __k = 1, double __p = (0.5)) : _M_k(__k), _M_p(__p) 
# 4120
{ 
# 4121
; 
# 4122
} 
# 4125
_IntType k() const 
# 4126
{ return _M_k; } 
# 4129
double p() const 
# 4130
{ return _M_p; } 
# 4133
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4134
{ return ((__p1._M_k) == (__p2._M_k)) && ((__p1._M_p) == (__p2._M_p)); } 
# 4137
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4138
{ return !(__p1 == __p2); } 
# 4141
private: _IntType _M_k; 
# 4142
double _M_p; 
# 4143
}; 
# 4146
explicit negative_binomial_distribution(_IntType __k = 1, double __p = (0.5)) : _M_param(__k, __p), _M_gd(__k, ((1.0) - __p) / __p) 
# 4148
{ } 
# 4151
explicit negative_binomial_distribution(const param_type &__p) : _M_param(__p), _M_gd(__p.k(), ((1.0) - __p.p()) / __p.p()) 
# 4153
{ } 
# 4159
void reset() 
# 4160
{ (_M_gd).reset(); } 
# 4166
_IntType k() const 
# 4167
{ return (_M_param).k(); } 
# 4173
double p() const 
# 4174
{ return (_M_param).p(); } 
# 4180
param_type param() const 
# 4181
{ return _M_param; } 
# 4188
void param(const param_type &__param) 
# 4189
{ (_M_param) = __param; } 
# 4195
result_type min() const 
# 4196
{ return (result_type)0; } 
# 4202
result_type max() const 
# 4203
{ return std::template numeric_limits< result_type> ::max(); } 
# 4208
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng); 
# 4212
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4217
template< class _ForwardIterator, class 
# 4218
_UniformRandomNumberGenerator> void 
# 4220
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4221
__urng) 
# 4222
{ this->__generate_impl(__f, __t, __urng); } 
# 4224
template< class _ForwardIterator, class 
# 4225
_UniformRandomNumberGenerator> void 
# 4227
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4228
__urng, const param_type &
# 4229
__p) 
# 4230
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4232
template< class _UniformRandomNumberGenerator> void 
# 4234
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4235
__urng) 
# 4236
{ this->__generate_impl(__f, __t, __urng); } 
# 4238
template< class _UniformRandomNumberGenerator> void 
# 4240
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4241
__urng, const param_type &
# 4242
__p) 
# 4243
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4251
friend inline bool operator==(const negative_binomial_distribution< _IntType>  &__d1, const negative_binomial_distribution< _IntType>  &
# 4252
__d2) 
# 4253
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd) == (__d2._M_gd)); } 
# 4266 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::negative_binomial_distribution< _IntType1>  & __x); 
# 4281 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::negative_binomial_distribution< _IntType1>  & __x); 
# 4287
private: template< class _ForwardIterator, class 
# 4288
_UniformRandomNumberGenerator> void 
# 4287
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 4292
template< class _ForwardIterator, class 
# 4293
_UniformRandomNumberGenerator> void 
# 4292
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4299
param_type _M_param; 
# 4301
gamma_distribution< double>  _M_gd; 
# 4302
}; 
# 4307
template< class _IntType> inline bool 
# 4309
operator!=(const negative_binomial_distribution< _IntType>  &__d1, const negative_binomial_distribution< _IntType>  &
# 4310
__d2) 
# 4311
{ return !(__d1 == __d2); } 
# 4329 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType = int> 
# 4330
class poisson_distribution { 
# 4332
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 4337
public: typedef _IntType result_type; 
# 4340
struct param_type { 
# 4342
typedef poisson_distribution distribution_type; 
# 4343
friend class poisson_distribution; 
# 4346
explicit param_type(double __mean = (1.0)) : _M_mean(__mean) 
# 4348
{ 
# 4349
; 
# 4350
_M_initialize(); 
# 4351
} 
# 4354
double mean() const 
# 4355
{ return _M_mean; } 
# 4358
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4359
{ return (__p1._M_mean) == (__p2._M_mean); } 
# 4362
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4363
{ return !(__p1 == __p2); } 
# 4368
private: void _M_initialize(); 
# 4370
double _M_mean; 
# 4372
double _M_lm_thr; 
# 4374
double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb; 
# 4376
}; 
# 4380
explicit poisson_distribution(double __mean = (1.0)) : _M_param(__mean), _M_nd() 
# 4382
{ } 
# 4385
explicit poisson_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 4387
{ } 
# 4393
void reset() 
# 4394
{ (_M_nd).reset(); } 
# 4400
double mean() const 
# 4401
{ return (_M_param).mean(); } 
# 4407
param_type param() const 
# 4408
{ return _M_param; } 
# 4415
void param(const param_type &__param) 
# 4416
{ (_M_param) = __param; } 
# 4422
result_type min() const 
# 4423
{ return 0; } 
# 4429
result_type max() const 
# 4430
{ return std::template numeric_limits< result_type> ::max(); } 
# 4435
template< class _UniformRandomNumberGenerator> result_type 
# 4437
operator()(_UniformRandomNumberGenerator &__urng) 
# 4438
{ return this->operator()(__urng, _M_param); } 
# 4440
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4445
template< class _ForwardIterator, class 
# 4446
_UniformRandomNumberGenerator> void 
# 4448
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4449
__urng) 
# 4450
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4452
template< class _ForwardIterator, class 
# 4453
_UniformRandomNumberGenerator> void 
# 4455
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4456
__urng, const param_type &
# 4457
__p) 
# 4458
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4460
template< class _UniformRandomNumberGenerator> void 
# 4462
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4463
__urng, const param_type &
# 4464
__p) 
# 4465
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4473
friend inline bool operator==(const poisson_distribution< _IntType>  &__d1, const poisson_distribution< _IntType>  &
# 4474
__d2) 
# 4476
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); } 
# 4491 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::poisson_distribution< _IntType1>  & __x); 
# 4506 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::poisson_distribution< _IntType1>  & __x); 
# 4512
private: template< class _ForwardIterator, class 
# 4513
_UniformRandomNumberGenerator> void 
# 4512
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4519
param_type _M_param; 
# 4522
normal_distribution< double>  _M_nd; 
# 4523
}; 
# 4528
template< class _IntType> inline bool 
# 4530
operator!=(const poisson_distribution< _IntType>  &__d1, const poisson_distribution< _IntType>  &
# 4531
__d2) 
# 4532
{ return !(__d1 == __d2); } 
# 4550 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 4551
class exponential_distribution { 
# 4553
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 4558
public: typedef _RealType result_type; 
# 4561
struct param_type { 
# 4563
typedef exponential_distribution distribution_type; 
# 4566
explicit param_type(_RealType __lambda = (_RealType)1) : _M_lambda(__lambda) 
# 4568
{ 
# 4569
; 
# 4570
} 
# 4573
_RealType lambda() const 
# 4574
{ return _M_lambda; } 
# 4577
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4578
{ return (__p1._M_lambda) == (__p2._M_lambda); } 
# 4581
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4582
{ return !(__p1 == __p2); } 
# 4585
private: _RealType _M_lambda; 
# 4586
}; 
# 4594
explicit exponential_distribution(const result_type &__lambda = (result_type)1) : _M_param(__lambda) 
# 4596
{ } 
# 4599
explicit exponential_distribution(const param_type &__p) : _M_param(__p) 
# 4601
{ } 
# 4609
void reset() { } 
# 4615
_RealType lambda() const 
# 4616
{ return (_M_param).lambda(); } 
# 4622
param_type param() const 
# 4623
{ return _M_param; } 
# 4630
void param(const param_type &__param) 
# 4631
{ (_M_param) = __param; } 
# 4637
result_type min() const 
# 4638
{ return (result_type)0; } 
# 4644
result_type max() const 
# 4645
{ return std::template numeric_limits< result_type> ::max(); } 
# 4650
template< class _UniformRandomNumberGenerator> result_type 
# 4652
operator()(_UniformRandomNumberGenerator &__urng) 
# 4653
{ return this->operator()(__urng, _M_param); } 
# 4655
template< class _UniformRandomNumberGenerator> result_type 
# 4657
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 4658
__p) 
# 4659
{ 
# 4661
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 4662
return (-std::log(((result_type)1) - __aurng())) / __p.lambda(); 
# 4663
} 
# 4665
template< class _ForwardIterator, class 
# 4666
_UniformRandomNumberGenerator> void 
# 4668
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4669
__urng) 
# 4670
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4672
template< class _ForwardIterator, class 
# 4673
_UniformRandomNumberGenerator> void 
# 4675
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4676
__urng, const param_type &
# 4677
__p) 
# 4678
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4680
template< class _UniformRandomNumberGenerator> void 
# 4682
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4683
__urng, const param_type &
# 4684
__p) 
# 4685
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4692
friend inline bool operator==(const exponential_distribution< _RealType>  &__d1, const exponential_distribution< _RealType>  &
# 4693
__d2) 
# 4694
{ return (__d1._M_param) == (__d2._M_param); } 
# 4697
private: template< class _ForwardIterator, class 
# 4698
_UniformRandomNumberGenerator> void 
# 4697
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4704
param_type _M_param; 
# 4705
}; 
# 4711
template< class _RealType> inline bool 
# 4713
operator!=(const exponential_distribution< _RealType>  &__d1, const exponential_distribution< _RealType>  &
# 4714
__d2) 
# 4715
{ return !(__d1 == __d2); } 
# 4727 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const exponential_distribution< _RealType>  & __x); 
# 4742 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, exponential_distribution< _RealType>  & __x); 
# 4757 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 4758
class weibull_distribution { 
# 4760
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 4765
public: typedef _RealType result_type; 
# 4768
struct param_type { 
# 4770
typedef weibull_distribution distribution_type; 
# 4773
explicit param_type(_RealType __a = (_RealType)1, _RealType 
# 4774
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 4776
{ } 
# 4779
_RealType a() const 
# 4780
{ return _M_a; } 
# 4783
_RealType b() const 
# 4784
{ return _M_b; } 
# 4787
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4788
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 4791
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4792
{ return !(__p1 == __p2); } 
# 4795
private: _RealType _M_a; 
# 4796
_RealType _M_b; 
# 4797
}; 
# 4800
explicit weibull_distribution(_RealType __a = (_RealType)1, _RealType 
# 4801
__b = (_RealType)1) : _M_param(__a, __b) 
# 4803
{ } 
# 4806
explicit weibull_distribution(const param_type &__p) : _M_param(__p) 
# 4808
{ } 
# 4814
void reset() 
# 4815
{ } 
# 4821
_RealType a() const 
# 4822
{ return (_M_param).a(); } 
# 4828
_RealType b() const 
# 4829
{ return (_M_param).b(); } 
# 4835
param_type param() const 
# 4836
{ return _M_param; } 
# 4843
void param(const param_type &__param) 
# 4844
{ (_M_param) = __param; } 
# 4850
result_type min() const 
# 4851
{ return (result_type)0; } 
# 4857
result_type max() const 
# 4858
{ return std::template numeric_limits< result_type> ::max(); } 
# 4863
template< class _UniformRandomNumberGenerator> result_type 
# 4865
operator()(_UniformRandomNumberGenerator &__urng) 
# 4866
{ return this->operator()(__urng, _M_param); } 
# 4868
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4873
template< class _ForwardIterator, class 
# 4874
_UniformRandomNumberGenerator> void 
# 4876
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4877
__urng) 
# 4878
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4880
template< class _ForwardIterator, class 
# 4881
_UniformRandomNumberGenerator> void 
# 4883
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4884
__urng, const param_type &
# 4885
__p) 
# 4886
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4888
template< class _UniformRandomNumberGenerator> void 
# 4890
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4891
__urng, const param_type &
# 4892
__p) 
# 4893
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4900
friend inline bool operator==(const weibull_distribution< _RealType>  &__d1, const weibull_distribution< _RealType>  &
# 4901
__d2) 
# 4902
{ return (__d1._M_param) == (__d2._M_param); } 
# 4905
private: template< class _ForwardIterator, class 
# 4906
_UniformRandomNumberGenerator> void 
# 4905
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4912
param_type _M_param; 
# 4913
}; 
# 4919
template< class _RealType> inline bool 
# 4921
operator!=(const weibull_distribution< _RealType>  &__d1, const weibull_distribution< _RealType>  &
# 4922
__d2) 
# 4923
{ return !(__d1 == __d2); } 
# 4935 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const weibull_distribution< _RealType>  & __x); 
# 4950 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, weibull_distribution< _RealType>  & __x); 
# 4965 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 4966
class extreme_value_distribution { 
# 4968
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 4973
public: typedef _RealType result_type; 
# 4976
struct param_type { 
# 4978
typedef extreme_value_distribution distribution_type; 
# 4981
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 4982
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 4984
{ } 
# 4987
_RealType a() const 
# 4988
{ return _M_a; } 
# 4991
_RealType b() const 
# 4992
{ return _M_b; } 
# 4995
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4996
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 4999
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5000
{ return !(__p1 == __p2); } 
# 5003
private: _RealType _M_a; 
# 5004
_RealType _M_b; 
# 5005
}; 
# 5008
explicit extreme_value_distribution(_RealType __a = (_RealType)0, _RealType 
# 5009
__b = (_RealType)1) : _M_param(__a, __b) 
# 5011
{ } 
# 5014
explicit extreme_value_distribution(const param_type &__p) : _M_param(__p) 
# 5016
{ } 
# 5022
void reset() 
# 5023
{ } 
# 5029
_RealType a() const 
# 5030
{ return (_M_param).a(); } 
# 5036
_RealType b() const 
# 5037
{ return (_M_param).b(); } 
# 5043
param_type param() const 
# 5044
{ return _M_param; } 
# 5051
void param(const param_type &__param) 
# 5052
{ (_M_param) = __param; } 
# 5058
result_type min() const 
# 5059
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 5065
result_type max() const 
# 5066
{ return std::template numeric_limits< result_type> ::max(); } 
# 5071
template< class _UniformRandomNumberGenerator> result_type 
# 5073
operator()(_UniformRandomNumberGenerator &__urng) 
# 5074
{ return this->operator()(__urng, _M_param); } 
# 5076
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5081
template< class _ForwardIterator, class 
# 5082
_UniformRandomNumberGenerator> void 
# 5084
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5085
__urng) 
# 5086
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5088
template< class _ForwardIterator, class 
# 5089
_UniformRandomNumberGenerator> void 
# 5091
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5092
__urng, const param_type &
# 5093
__p) 
# 5094
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5096
template< class _UniformRandomNumberGenerator> void 
# 5098
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5099
__urng, const param_type &
# 5100
__p) 
# 5101
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5108
friend inline bool operator==(const extreme_value_distribution< _RealType>  &__d1, const extreme_value_distribution< _RealType>  &
# 5109
__d2) 
# 5110
{ return (__d1._M_param) == (__d2._M_param); } 
# 5113
private: template< class _ForwardIterator, class 
# 5114
_UniformRandomNumberGenerator> void 
# 5113
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5120
param_type _M_param; 
# 5121
}; 
# 5127
template< class _RealType> inline bool 
# 5129
operator!=(const extreme_value_distribution< _RealType>  &__d1, const extreme_value_distribution< _RealType>  &
# 5130
__d2) 
# 5131
{ return !(__d1 == __d2); } 
# 5143 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const extreme_value_distribution< _RealType>  & __x); 
# 5158 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, extreme_value_distribution< _RealType>  & __x); 
# 5170 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType = int> 
# 5171
class discrete_distribution { 
# 5173
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 5178
public: typedef _IntType result_type; 
# 5181
struct param_type { 
# 5183
typedef discrete_distribution distribution_type; 
# 5184
friend class discrete_distribution; 
# 5186
param_type() : _M_prob(), _M_cp() 
# 5188
{ } 
# 5190
template< class _InputIterator> 
# 5191
param_type(_InputIterator __wbegin, _InputIterator 
# 5192
__wend) : _M_prob(__wbegin, __wend), _M_cp() 
# 5194
{ _M_initialize(); } 
# 5196
param_type(initializer_list< double>  __wil) : _M_prob(__wil.begin(), __wil.end()), _M_cp() 
# 5198
{ _M_initialize(); } 
# 5200
template< class _Func> param_type(size_t __nw, double __xmin, double __xmax, _Func __fw); 
# 5205
param_type(const param_type &) = default;
# 5206
param_type &operator=(const param_type &) = default;
# 5209
vector< double>  probabilities() const 
# 5210
{ return ((_M_prob).empty() ? vector< double> (1, (1.0)) : (_M_prob)); } 
# 5213
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5214
{ return ((__p1._M_prob) == (__p2._M_prob)); } 
# 5217
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5218
{ return !(__p1 == __p2); } 
# 5222
private: void _M_initialize(); 
# 5224
vector< double>  _M_prob; 
# 5225
vector< double>  _M_cp; 
# 5226
}; 
# 5228
discrete_distribution() : _M_param() 
# 5230
{ } 
# 5232
template< class _InputIterator> 
# 5233
discrete_distribution(_InputIterator __wbegin, _InputIterator 
# 5234
__wend) : _M_param(__wbegin, __wend) 
# 5236
{ } 
# 5238
discrete_distribution(initializer_list< double>  __wl) : _M_param(__wl) 
# 5240
{ } 
# 5242
template< class _Func> 
# 5243
discrete_distribution(size_t __nw, double __xmin, double __xmax, _Func 
# 5244
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5246
{ } 
# 5249
explicit discrete_distribution(const param_type &__p) : _M_param(__p) 
# 5251
{ } 
# 5257
void reset() 
# 5258
{ } 
# 5264
vector< double>  probabilities() const 
# 5265
{ 
# 5266
return (((_M_param)._M_prob).empty()) ? vector< double> (1, (1.0)) : ((_M_param)._M_prob); 
# 5268
} 
# 5274
param_type param() const 
# 5275
{ return _M_param; } 
# 5282
void param(const param_type &__param) 
# 5283
{ (_M_param) = __param; } 
# 5289
result_type min() const 
# 5290
{ return (result_type)0; } 
# 5296
result_type max() const 
# 5297
{ 
# 5298
return (((_M_param)._M_prob).empty()) ? (result_type)0 : ((result_type)(((_M_param)._M_prob).size() - 1)); 
# 5300
} 
# 5305
template< class _UniformRandomNumberGenerator> result_type 
# 5307
operator()(_UniformRandomNumberGenerator &__urng) 
# 5308
{ return this->operator()(__urng, _M_param); } 
# 5310
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5315
template< class _ForwardIterator, class 
# 5316
_UniformRandomNumberGenerator> void 
# 5318
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5319
__urng) 
# 5320
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5322
template< class _ForwardIterator, class 
# 5323
_UniformRandomNumberGenerator> void 
# 5325
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5326
__urng, const param_type &
# 5327
__p) 
# 5328
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5330
template< class _UniformRandomNumberGenerator> void 
# 5332
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5333
__urng, const param_type &
# 5334
__p) 
# 5335
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5342
friend inline bool operator==(const discrete_distribution< _IntType>  &__d1, const discrete_distribution< _IntType>  &
# 5343
__d2) 
# 5344
{ return (__d1._M_param) == (__d2._M_param); } 
# 5356 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::discrete_distribution< _IntType1>  & __x); 
# 5372 "/usr/include/c++/7/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::discrete_distribution< _IntType1>  & __x); 
# 5378
private: template< class _ForwardIterator, class 
# 5379
_UniformRandomNumberGenerator> void 
# 5378
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5385
param_type _M_param; 
# 5386
}; 
# 5392
template< class _IntType> inline bool 
# 5394
operator!=(const discrete_distribution< _IntType>  &__d1, const discrete_distribution< _IntType>  &
# 5395
__d2) 
# 5396
{ return !(__d1 == __d2); } 
# 5405 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 5406
class piecewise_constant_distribution { 
# 5408
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 5413
public: typedef _RealType result_type; 
# 5416
struct param_type { 
# 5418
typedef piecewise_constant_distribution distribution_type; 
# 5419
friend class piecewise_constant_distribution; 
# 5421
param_type() : _M_int(), _M_den(), _M_cp() 
# 5423
{ } 
# 5425
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5430
template< class _Func> param_type(initializer_list< _RealType>  __bi, _Func __fw); 
# 5433
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5438
param_type(const param_type &) = default;
# 5439
param_type &operator=(const param_type &) = default;
# 5442
vector< _RealType>  intervals() const 
# 5443
{ 
# 5444
if ((_M_int).empty()) 
# 5445
{ 
# 5446
vector< _RealType>  __tmp(2); 
# 5447
(__tmp[1]) = ((_RealType)1); 
# 5448
return __tmp; 
# 5449
} else { 
# 5451
return _M_int; }  
# 5452
} 
# 5455
vector< double>  densities() const 
# 5456
{ return ((_M_den).empty() ? vector< double> (1, (1.0)) : (_M_den)); } 
# 5459
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5460
{ return ((__p1._M_int) == (__p2._M_int)) && ((__p1._M_den) == (__p2._M_den)); } 
# 5463
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5464
{ return !(__p1 == __p2); } 
# 5468
private: void _M_initialize(); 
# 5470
vector< _RealType>  _M_int; 
# 5471
vector< double>  _M_den; 
# 5472
vector< double>  _M_cp; 
# 5473
}; 
# 5476
explicit piecewise_constant_distribution() : _M_param() 
# 5478
{ } 
# 5480
template< class _InputIteratorB, class _InputIteratorW> 
# 5481
piecewise_constant_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5482
__bend, _InputIteratorW 
# 5483
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5485
{ } 
# 5487
template< class _Func> 
# 5488
piecewise_constant_distribution(initializer_list< _RealType>  __bl, _Func 
# 5489
__fw) : _M_param(__bl, __fw) 
# 5491
{ } 
# 5493
template< class _Func> 
# 5494
piecewise_constant_distribution(size_t __nw, _RealType 
# 5495
__xmin, _RealType __xmax, _Func 
# 5496
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5498
{ } 
# 5501
explicit piecewise_constant_distribution(const param_type &__p) : _M_param(__p) 
# 5503
{ } 
# 5509
void reset() 
# 5510
{ } 
# 5516
vector< _RealType>  intervals() const 
# 5517
{ 
# 5518
if (((_M_param)._M_int).empty()) 
# 5519
{ 
# 5520
vector< _RealType>  __tmp(2); 
# 5521
(__tmp[1]) = ((_RealType)1); 
# 5522
return __tmp; 
# 5523
} else { 
# 5525
return (_M_param)._M_int; }  
# 5526
} 
# 5532
vector< double>  densities() const 
# 5533
{ 
# 5534
return (((_M_param)._M_den).empty()) ? vector< double> (1, (1.0)) : ((_M_param)._M_den); 
# 5536
} 
# 5542
param_type param() const 
# 5543
{ return _M_param; } 
# 5550
void param(const param_type &__param) 
# 5551
{ (_M_param) = __param; } 
# 5557
result_type min() const 
# 5558
{ 
# 5559
return (((_M_param)._M_int).empty()) ? (result_type)0 : ((_M_param)._M_int).front(); 
# 5561
} 
# 5567
result_type max() const 
# 5568
{ 
# 5569
return (((_M_param)._M_int).empty()) ? (result_type)1 : ((_M_param)._M_int).back(); 
# 5571
} 
# 5576
template< class _UniformRandomNumberGenerator> result_type 
# 5578
operator()(_UniformRandomNumberGenerator &__urng) 
# 5579
{ return this->operator()(__urng, _M_param); } 
# 5581
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5586
template< class _ForwardIterator, class 
# 5587
_UniformRandomNumberGenerator> void 
# 5589
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5590
__urng) 
# 5591
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5593
template< class _ForwardIterator, class 
# 5594
_UniformRandomNumberGenerator> void 
# 5596
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5597
__urng, const param_type &
# 5598
__p) 
# 5599
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5601
template< class _UniformRandomNumberGenerator> void 
# 5603
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5604
__urng, const param_type &
# 5605
__p) 
# 5606
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5613
friend inline bool operator==(const piecewise_constant_distribution< _RealType>  &__d1, const piecewise_constant_distribution< _RealType>  &
# 5614
__d2) 
# 5615
{ return (__d1._M_param) == (__d2._M_param); } 
# 5628 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5644 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5650
private: template< class _ForwardIterator, class 
# 5651
_UniformRandomNumberGenerator> void 
# 5650
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5657
param_type _M_param; 
# 5658
}; 
# 5664
template< class _RealType> inline bool 
# 5666
operator!=(const piecewise_constant_distribution< _RealType>  &__d1, const piecewise_constant_distribution< _RealType>  &
# 5667
__d2) 
# 5668
{ return !(__d1 == __d2); } 
# 5677 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType = double> 
# 5678
class piecewise_linear_distribution { 
# 5680
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 5685
public: typedef _RealType result_type; 
# 5688
struct param_type { 
# 5690
typedef piecewise_linear_distribution distribution_type; 
# 5691
friend class piecewise_linear_distribution; 
# 5693
param_type() : _M_int(), _M_den(), _M_cp(), _M_m() 
# 5695
{ } 
# 5697
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5702
template< class _Func> param_type(initializer_list< _RealType>  __bl, _Func __fw); 
# 5705
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5710
param_type(const param_type &) = default;
# 5711
param_type &operator=(const param_type &) = default;
# 5714
vector< _RealType>  intervals() const 
# 5715
{ 
# 5716
if ((_M_int).empty()) 
# 5717
{ 
# 5718
vector< _RealType>  __tmp(2); 
# 5719
(__tmp[1]) = ((_RealType)1); 
# 5720
return __tmp; 
# 5721
} else { 
# 5723
return _M_int; }  
# 5724
} 
# 5727
vector< double>  densities() const 
# 5728
{ return ((_M_den).empty() ? vector< double> (2, (1.0)) : (_M_den)); } 
# 5731
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5732
{ return ((__p1._M_int) == (__p2._M_int)) && ((__p1._M_den) == (__p2._M_den)); } 
# 5735
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5736
{ return !(__p1 == __p2); } 
# 5740
private: void _M_initialize(); 
# 5742
vector< _RealType>  _M_int; 
# 5743
vector< double>  _M_den; 
# 5744
vector< double>  _M_cp; 
# 5745
vector< double>  _M_m; 
# 5746
}; 
# 5749
explicit piecewise_linear_distribution() : _M_param() 
# 5751
{ } 
# 5753
template< class _InputIteratorB, class _InputIteratorW> 
# 5754
piecewise_linear_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5755
__bend, _InputIteratorW 
# 5756
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5758
{ } 
# 5760
template< class _Func> 
# 5761
piecewise_linear_distribution(initializer_list< _RealType>  __bl, _Func 
# 5762
__fw) : _M_param(__bl, __fw) 
# 5764
{ } 
# 5766
template< class _Func> 
# 5767
piecewise_linear_distribution(size_t __nw, _RealType 
# 5768
__xmin, _RealType __xmax, _Func 
# 5769
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5771
{ } 
# 5774
explicit piecewise_linear_distribution(const param_type &__p) : _M_param(__p) 
# 5776
{ } 
# 5782
void reset() 
# 5783
{ } 
# 5789
vector< _RealType>  intervals() const 
# 5790
{ 
# 5791
if (((_M_param)._M_int).empty()) 
# 5792
{ 
# 5793
vector< _RealType>  __tmp(2); 
# 5794
(__tmp[1]) = ((_RealType)1); 
# 5795
return __tmp; 
# 5796
} else { 
# 5798
return (_M_param)._M_int; }  
# 5799
} 
# 5806
vector< double>  densities() const 
# 5807
{ 
# 5808
return (((_M_param)._M_den).empty()) ? vector< double> (2, (1.0)) : ((_M_param)._M_den); 
# 5810
} 
# 5816
param_type param() const 
# 5817
{ return _M_param; } 
# 5824
void param(const param_type &__param) 
# 5825
{ (_M_param) = __param; } 
# 5831
result_type min() const 
# 5832
{ 
# 5833
return (((_M_param)._M_int).empty()) ? (result_type)0 : ((_M_param)._M_int).front(); 
# 5835
} 
# 5841
result_type max() const 
# 5842
{ 
# 5843
return (((_M_param)._M_int).empty()) ? (result_type)1 : ((_M_param)._M_int).back(); 
# 5845
} 
# 5850
template< class _UniformRandomNumberGenerator> result_type 
# 5852
operator()(_UniformRandomNumberGenerator &__urng) 
# 5853
{ return this->operator()(__urng, _M_param); } 
# 5855
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5860
template< class _ForwardIterator, class 
# 5861
_UniformRandomNumberGenerator> void 
# 5863
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5864
__urng) 
# 5865
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5867
template< class _ForwardIterator, class 
# 5868
_UniformRandomNumberGenerator> void 
# 5870
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5871
__urng, const param_type &
# 5872
__p) 
# 5873
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5875
template< class _UniformRandomNumberGenerator> void 
# 5877
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5878
__urng, const param_type &
# 5879
__p) 
# 5880
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5887
friend inline bool operator==(const piecewise_linear_distribution< _RealType>  &__d1, const piecewise_linear_distribution< _RealType>  &
# 5888
__d2) 
# 5889
{ return (__d1._M_param) == (__d2._M_param); } 
# 5902 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_linear_distribution< _RealType1>  & __x); 
# 5918 "/usr/include/c++/7/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::piecewise_linear_distribution< _RealType1>  & __x); 
# 5924
private: template< class _ForwardIterator, class 
# 5925
_UniformRandomNumberGenerator> void 
# 5924
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5931
param_type _M_param; 
# 5932
}; 
# 5938
template< class _RealType> inline bool 
# 5940
operator!=(const piecewise_linear_distribution< _RealType>  &__d1, const piecewise_linear_distribution< _RealType>  &
# 5941
__d2) 
# 5942
{ return !(__d1 == __d2); } 
# 5959 "/usr/include/c++/7/bits/random.h" 3
class seed_seq { 
# 5963
public: typedef uint_least32_t result_type; 
# 5966
seed_seq() noexcept : _M_v() 
# 5968
{ } 
# 5970
template< class _IntType> seed_seq(initializer_list< _IntType>  il); 
# 5973
template< class _InputIterator> seed_seq(_InputIterator __begin, _InputIterator __end); 
# 5977
template< class _RandomAccessIterator> void generate(_RandomAccessIterator __begin, _RandomAccessIterator __end); 
# 5982
size_t size() const noexcept 
# 5983
{ return (_M_v).size(); } 
# 5985
template< class _OutputIterator> void 
# 5987
param(_OutputIterator __dest) const 
# 5988
{ std::copy((_M_v).begin(), (_M_v).end(), __dest); } 
# 5991
seed_seq(const seed_seq &) = delete;
# 5992
seed_seq &operator=(const seed_seq &) = delete;
# 5995
private: vector< unsigned>  _M_v; 
# 5996
}; 
# 6003
}
# 41 "/usr/include/x86_64-linux-gnu/c++/7/bits/opt_random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 218 "/usr/include/x86_64-linux-gnu/c++/7/bits/opt_random.h" 3
}
# 65 "/usr/include/c++/7/bits/stl_numeric.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _ForwardIterator, class _Tp> void 
# 82
iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value) 
# 83
{ 
# 89
; 
# 91
for (; __first != __last; ++__first) 
# 92
{ 
# 93
(*__first) = __value; 
# 94
++__value; 
# 95
}  
# 96
} 
# 99
}
# 103
namespace std __attribute((__visibility__("default"))) { 
# 118 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _Tp> inline _Tp 
# 120
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init) 
# 121
{ 
# 124
; 
# 126
for (; __first != __last; ++__first) { 
# 127
__init = (__init + (*__first)); }  
# 128
return __init; 
# 129
} 
# 144 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _Tp, class _BinaryOperation> inline _Tp 
# 146
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation 
# 147
__binary_op) 
# 148
{ 
# 151
; 
# 153
for (; __first != __last; ++__first) { 
# 154
__init = __binary_op(__init, *__first); }  
# 155
return __init; 
# 156
} 
# 172 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator1, class _InputIterator2, class _Tp> inline _Tp 
# 174
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 175
__first2, _Tp __init) 
# 176
{ 
# 180
; 
# 182
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 183
__init = (__init + ((*__first1) * (*__first2))); }  
# 184
return __init; 
# 185
} 
# 203 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator1, class _InputIterator2, class _Tp, class 
# 204
_BinaryOperation1, class _BinaryOperation2> inline _Tp 
# 206
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 207
__first2, _Tp __init, _BinaryOperation1 
# 208
__binary_op1, _BinaryOperation2 
# 209
__binary_op2) 
# 210
{ 
# 214
; 
# 216
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 217
__init = __binary_op1(__init, __binary_op2(*__first1, *__first2)); }  
# 218
return __init; 
# 219
} 
# 235 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 237
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 238
__result) 
# 239
{ 
# 240
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 246
; 
# 248
if (__first == __last) { 
# 249
return __result; }  
# 250
_ValueType __value = (*__first); 
# 251
(*__result) = __value; 
# 252
while ((++__first) != __last) 
# 253
{ 
# 254
__value = (__value + (*__first)); 
# 255
(*(++__result)) = __value; 
# 256
}  
# 257
return ++__result; 
# 258
} 
# 275 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 276
_BinaryOperation> _OutputIterator 
# 278
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 279
__result, _BinaryOperation __binary_op) 
# 280
{ 
# 281
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 287
; 
# 289
if (__first == __last) { 
# 290
return __result; }  
# 291
_ValueType __value = (*__first); 
# 292
(*__result) = __value; 
# 293
while ((++__first) != __last) 
# 294
{ 
# 295
__value = __binary_op(__value, *__first); 
# 296
(*(++__result)) = __value; 
# 297
}  
# 298
return ++__result; 
# 299
} 
# 315 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 317
adjacent_difference(_InputIterator __first, _InputIterator 
# 318
__last, _OutputIterator __result) 
# 319
{ 
# 320
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 326
; 
# 328
if (__first == __last) { 
# 329
return __result; }  
# 330
_ValueType __value = (*__first); 
# 331
(*__result) = __value; 
# 332
while ((++__first) != __last) 
# 333
{ 
# 334
_ValueType __tmp = (*__first); 
# 335
(*(++__result)) = (__tmp - __value); 
# 336
__value = std::move(__tmp); 
# 337
}  
# 338
return ++__result; 
# 339
} 
# 357 "/usr/include/c++/7/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 358
_BinaryOperation> _OutputIterator 
# 360
adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 361
__result, _BinaryOperation __binary_op) 
# 362
{ 
# 363
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 369
; 
# 371
if (__first == __last) { 
# 372
return __result; }  
# 373
_ValueType __value = (*__first); 
# 374
(*__result) = __value; 
# 375
while ((++__first) != __last) 
# 376
{ 
# 377
_ValueType __tmp = (*__first); 
# 378
(*(++__result)) = __binary_op(__tmp, __value); 
# 379
__value = std::move(__tmp); 
# 380
}  
# 381
return ++__result; 
# 382
} 
# 385
}
# 80 "/usr/include/c++/7/numeric" 3
namespace std __attribute((__visibility__("default"))) { 
# 82
namespace __detail { 
# 87
template< class _Tp> constexpr enable_if_t< __and_< is_integral< _Tp> , is_signed< _Tp> > ::value, _Tp>  
# 90
__abs_integral(_Tp __val) 
# 91
{ return (__val < 0) ? -__val : __val; } 
# 93
template< class _Tp> constexpr enable_if_t< __and_< is_integral< _Tp> , is_unsigned< _Tp> > ::value, _Tp>  
# 96
__abs_integral(_Tp __val) 
# 97
{ return __val; } 
# 99
inline void __abs_integral(bool) = delete;
# 101
template< class _Mn, class _Nn> constexpr common_type_t< _Mn, _Nn>  
# 103
__gcd(_Mn __m, _Nn __n) 
# 104
{ 
# 105
return (__m == 0) ? __detail::__abs_integral(__n) : ((__n == 0) ? __detail::__abs_integral(__m) : __detail::__gcd(__n, __m % __n)); 
# 108
} 
# 111
template< class _Mn, class _Nn> constexpr common_type_t< _Mn, _Nn>  
# 113
__lcm(_Mn __m, _Nn __n) 
# 114
{ 
# 115
return ((__m != 0) && (__n != 0)) ? (__detail::__abs_integral(__m) / __detail::__gcd(__m, __n)) * __detail::__abs_integral(__n) : 0; 
# 119
} 
# 122
}
# 160 "/usr/include/c++/7/numeric" 3
}
# 35 "/usr/include/c++/7/bits/random.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
namespace __detail { 
# 50
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> _Tp 
# 53
_Mod< _Tp, __m, __a, __c, false, true> ::__calc(_Tp __x) 
# 54
{ 
# 55
if (__a == 1) { 
# 56
__x %= __m; } else 
# 58
{ 
# 59
static const _Tp __q = (__m / __a); 
# 60
static const _Tp __r = (__m % __a); 
# 62
_Tp __t1 = __a * (__x % __q); 
# 63
_Tp __t2 = __r * (__x / __q); 
# 64
if (__t1 >= __t2) { 
# 65
__x = (__t1 - __t2); } else { 
# 67
__x = ((__m - __t2) + __t1); }  
# 68
}  
# 70
if (__c != 0) 
# 71
{ 
# 72
const _Tp __d = __m - __x; 
# 73
if (__d > __c) { 
# 74
__x += __c; } else { 
# 76
__x = (__c - __d); }  
# 77
}  
# 78
return __x; 
# 79
} 
# 81
template< class _InputIterator, class _OutputIterator, class 
# 82
_Tp> _OutputIterator 
# 84
__normalize(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 85
__result, const _Tp &__factor) 
# 86
{ 
# 87
for (; __first != __last; (++__first), (++__result)) { 
# 88
(*__result) = ((*__first) / __factor); }  
# 89
return __result; 
# 90
} 
# 93
}
# 97
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::multiplier; 
# 101
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::increment; 
# 105
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::modulus; 
# 109
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::default_seed; 
# 117
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> void 
# 120
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(result_type __s) 
# 121
{ 
# 122
if ((__detail::__mod< _UIntType, __m> (__c) == 0) && (__detail::__mod< _UIntType, __m> (__s) == 0)) { 
# 124
(_M_x) = 1; } else { 
# 126
(_M_x) = __detail::__mod< _UIntType, __m> (__s); }  
# 127
} 
# 132
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 133
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 136
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(_Sseq &__q) 
# 137
{ 
# 138
const _UIntType __k0 = (__m == 0) ? std::template numeric_limits< _UIntType> ::digits : std::__lg(__m); 
# 140
const _UIntType __k = (__k0 + 31) / 32; 
# 141
uint_least32_t __arr[__k + 3]; 
# 142
__q.generate(__arr + 0, (__arr + __k) + 3); 
# 143
_UIntType __factor = (1U); 
# 144
_UIntType __sum = (0U); 
# 145
for (size_t __j = (0); __j < __k; ++__j) 
# 146
{ 
# 147
__sum += ((__arr[__j + (3)]) * __factor); 
# 148
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 149
}  
# 150
seed(__sum); 
# 151
} 
# 153
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 154
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 156
operator<<(basic_ostream< _CharT, _Traits>  &__os, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 158
__lcr) 
# 159
{ 
# 160
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 161
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 163
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 164
const _CharT __fill = __os.fill(); 
# 165
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 166
__os.fill(__os.widen(' ')); 
# 168
__os << (__lcr._M_x); 
# 170
__os.flags(__flags); 
# 171
__os.fill(__fill); 
# 172
return __os; 
# 173
} 
# 175
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 176
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 178
operator>>(basic_istream< _CharT, _Traits>  &__is, linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 179
__lcr) 
# 180
{ 
# 181
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 182
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 184
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 185
__is.flags(__ios_base::dec); 
# 187
__is >> (__lcr._M_x); 
# 189
__is.flags(__flags); 
# 190
return __is; 
# 191
} 
# 194
template< class _UIntType, size_t 
# 195
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 196
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 197
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 198
__f> constexpr size_t 
# 194
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::word_size; 
# 203
template< class _UIntType, size_t 
# 204
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 205
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 206
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 207
__f> constexpr size_t 
# 203
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::state_size; 
# 212
template< class _UIntType, size_t 
# 213
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 214
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 215
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 216
__f> constexpr size_t 
# 212
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::shift_size; 
# 221
template< class _UIntType, size_t 
# 222
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 223
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 224
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 225
__f> constexpr size_t 
# 221
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::mask_bits; 
# 230
template< class _UIntType, size_t 
# 231
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 232
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 233
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 234
__f> constexpr _UIntType 
# 230
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::xor_mask; 
# 239
template< class _UIntType, size_t 
# 240
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 241
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 242
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 243
__f> constexpr size_t 
# 239
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_u; 
# 248
template< class _UIntType, size_t 
# 249
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 250
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 251
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 252
__f> constexpr _UIntType 
# 248
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_d; 
# 257
template< class _UIntType, size_t 
# 258
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 259
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 260
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 261
__f> constexpr size_t 
# 257
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_s; 
# 266
template< class _UIntType, size_t 
# 267
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 268
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 269
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 270
__f> constexpr _UIntType 
# 266
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_b; 
# 275
template< class _UIntType, size_t 
# 276
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 277
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 278
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 279
__f> constexpr size_t 
# 275
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_t; 
# 284
template< class _UIntType, size_t 
# 285
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 286
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 287
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 288
__f> constexpr _UIntType 
# 284
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_c; 
# 293
template< class _UIntType, size_t 
# 294
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 295
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 296
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 297
__f> constexpr size_t 
# 293
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_l; 
# 302
template< class _UIntType, size_t 
# 303
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 304
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 305
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 306
__f> constexpr _UIntType 
# 302
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::initialization_multiplier; 
# 312
template< class _UIntType, size_t 
# 313
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 314
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 315
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 316
__f> constexpr _UIntType 
# 312
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::default_seed; 
# 321
template< class _UIntType, size_t 
# 322
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 323
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 324
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 325
__f> void 
# 329
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(result_type __sd) 
# 330
{ 
# 331
((_M_x)[0]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sd); 
# 334
for (size_t __i = (1); __i < state_size; ++__i) 
# 335
{ 
# 336
_UIntType __x = (_M_x)[__i - (1)]; 
# 337
__x ^= (__x >> (__w - (2))); 
# 338
__x *= __f; 
# 339
__x += __detail::__mod< _UIntType, __n> (__i); 
# 340
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__x); 
# 342
}  
# 343
(_M_p) = state_size; 
# 344
} 
# 346
template< class _UIntType, size_t 
# 347
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 348
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 349
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 350
__f> 
# 351
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 355
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(_Sseq &__q) 
# 356
{ 
# 357
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 358
const size_t __k = ((__w + (31)) / (32)); 
# 359
uint_least32_t __arr[__n * __k]; 
# 360
__q.generate(__arr + 0, __arr + (__n * __k)); 
# 362
bool __zero = true; 
# 363
for (size_t __i = (0); __i < state_size; ++__i) 
# 364
{ 
# 365
_UIntType __factor = (1U); 
# 366
_UIntType __sum = (0U); 
# 367
for (size_t __j = (0); __j < __k; ++__j) 
# 368
{ 
# 369
__sum += ((__arr[(__k * __i) + __j]) * __factor); 
# 370
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 371
}  
# 372
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 375
if (__zero) 
# 376
{ 
# 377
if (__i == (0)) 
# 378
{ 
# 379
if ((((_M_x)[0]) & __upper_mask) != 0U) { 
# 380
__zero = false; }  
# 381
} else { 
# 382
if (((_M_x)[__i]) != 0U) { 
# 383
__zero = false; }  }  
# 384
}  
# 385
}  
# 386
if (__zero) { 
# 387
((_M_x)[0]) = __detail::template _Shift< _UIntType, __w - (1)> ::__value; }  
# 388
(_M_p) = state_size; 
# 389
} 
# 391
template< class _UIntType, size_t __w, size_t 
# 392
__n, size_t __m, size_t __r, _UIntType 
# 393
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 394
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 395
__f> void 
# 399
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::_M_gen_rand() 
# 400
{ 
# 401
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 402
const _UIntType __lower_mask = (~__upper_mask); 
# 404
for (size_t __k = (0); __k < (__n - __m); ++__k) 
# 405
{ 
# 406
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 408
((_M_x)[__k]) = ((((_M_x)[__k + __m]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 410
}  
# 412
for (size_t __k = (__n - __m); __k < (__n - (1)); ++__k) 
# 413
{ 
# 414
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 416
((_M_x)[__k]) = ((((_M_x)[__k + (__m - __n)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 418
}  
# 420
_UIntType __y = ((((_M_x)[__n - (1)]) & __upper_mask) | (((_M_x)[0]) & __lower_mask)); 
# 422
((_M_x)[__n - (1)]) = ((((_M_x)[__m - (1)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 424
(_M_p) = (0); 
# 425
} 
# 427
template< class _UIntType, size_t __w, size_t 
# 428
__n, size_t __m, size_t __r, _UIntType 
# 429
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 430
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 431
__f> void 
# 435
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::discard(unsigned long long __z) 
# 436
{ 
# 437
while (__z > (state_size - (_M_p))) 
# 438
{ 
# 439
__z -= (state_size - (_M_p)); 
# 440
_M_gen_rand(); 
# 441
}  
# 442
(_M_p) += __z; 
# 443
} 
# 445
template< class _UIntType, size_t __w, size_t 
# 446
__n, size_t __m, size_t __r, _UIntType 
# 447
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 448
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 449
__f> typename mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::result_type 
# 455
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::operator()() 
# 456
{ 
# 458
if ((_M_p) >= state_size) { 
# 459
_M_gen_rand(); }  
# 462
result_type __z = (_M_x)[(_M_p)++]; 
# 463
__z ^= ((__z >> __u) & __d); 
# 464
__z ^= ((__z << __s) & __b); 
# 465
__z ^= ((__z << __t) & __c); 
# 466
__z ^= (__z >> __l); 
# 468
return __z; 
# 469
} 
# 471
template< class _UIntType, size_t __w, size_t 
# 472
__n, size_t __m, size_t __r, _UIntType 
# 473
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 474
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 475
__f, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 477
operator<<(basic_ostream< _CharT, _Traits>  &__os, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 479
__x) 
# 480
{ 
# 481
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 482
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 484
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 485
const _CharT __fill = __os.fill(); 
# 486
const _CharT __space = __os.widen(' '); 
# 487
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 488
__os.fill(__space); 
# 490
for (size_t __i = (0); __i < __n; ++__i) { 
# 491
(__os << ((__x._M_x)[__i])) << __space; }  
# 492
__os << (__x._M_p); 
# 494
__os.flags(__flags); 
# 495
__os.fill(__fill); 
# 496
return __os; 
# 497
} 
# 499
template< class _UIntType, size_t __w, size_t 
# 500
__n, size_t __m, size_t __r, _UIntType 
# 501
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 502
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 503
__f, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 505
operator>>(basic_istream< _CharT, _Traits>  &__is, mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 507
__x) 
# 508
{ 
# 509
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 510
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 512
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 513
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 515
for (size_t __i = (0); __i < __n; ++__i) { 
# 516
__is >> ((__x._M_x)[__i]); }  
# 517
__is >> (__x._M_p); 
# 519
__is.flags(__flags); 
# 520
return __is; 
# 521
} 
# 524
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::word_size; 
# 528
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::short_lag; 
# 532
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::long_lag; 
# 536
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr _UIntType subtract_with_carry_engine< _UIntType, __w, __s, __r> ::default_seed; 
# 540
template< class _UIntType, size_t __w, size_t __s, size_t __r> void 
# 543
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(result_type __value) 
# 544
{ 
# 546
linear_congruential_engine< result_type, 40014U, 0U, 2147483563U>  __lcg((__value == 0U) ? default_seed : __value); 
# 548
const size_t __n = ((__w + (31)) / (32)); 
# 550
for (size_t __i = (0); __i < long_lag; ++__i) 
# 551
{ 
# 552
_UIntType __sum = (0U); 
# 553
_UIntType __factor = (1U); 
# 554
for (size_t __j = (0); __j < __n; ++__j) 
# 555
{ 
# 556
__sum += (__detail::__mod< uint_least32_t, __detail::_Shift< unsigned, 32> ::__value> (__lcg()) * __factor); 
# 559
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 560
}  
# 561
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 563
}  
# 564
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 565
(_M_p) = (0); 
# 566
} 
# 568
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 569
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 572
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(_Sseq &__q) 
# 573
{ 
# 574
const size_t __k = ((__w + (31)) / (32)); 
# 575
uint_least32_t __arr[__r * __k]; 
# 576
__q.generate(__arr + 0, __arr + (__r * __k)); 
# 578
for (size_t __i = (0); __i < long_lag; ++__i) 
# 579
{ 
# 580
_UIntType __sum = (0U); 
# 581
_UIntType __factor = (1U); 
# 582
for (size_t __j = (0); __j < __k; ++__j) 
# 583
{ 
# 584
__sum += ((__arr[(__k * __i) + __j]) * __factor); 
# 585
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 586
}  
# 587
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 589
}  
# 590
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 591
(_M_p) = (0); 
# 592
} 
# 594
template< class _UIntType, size_t __w, size_t __s, size_t __r> typename subtract_with_carry_engine< _UIntType, __w, __s, __r> ::result_type 
# 598
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::operator()() 
# 599
{ 
# 601
long __ps = ((_M_p) - short_lag); 
# 602
if (__ps < (0)) { 
# 603
__ps += long_lag; }  
# 608
_UIntType __xi; 
# 609
if (((_M_x)[__ps]) >= (((_M_x)[_M_p]) + (_M_carry))) 
# 610
{ 
# 611
__xi = ((((_M_x)[__ps]) - ((_M_x)[_M_p])) - (_M_carry)); 
# 612
(_M_carry) = 0; 
# 613
} else 
# 615
{ 
# 616
__xi = (((__detail::template _Shift< _UIntType, __w> ::__value - ((_M_x)[_M_p])) - (_M_carry)) + ((_M_x)[__ps])); 
# 618
(_M_carry) = 1; 
# 619
}  
# 620
((_M_x)[_M_p]) = __xi; 
# 623
if ((++(_M_p)) >= long_lag) { 
# 624
(_M_p) = (0); }  
# 626
return __xi; 
# 627
} 
# 629
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 630
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 632
operator<<(basic_ostream< _CharT, _Traits>  &__os, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 634
__x) 
# 635
{ 
# 636
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 637
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 639
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 640
const _CharT __fill = __os.fill(); 
# 641
const _CharT __space = __os.widen(' '); 
# 642
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 643
__os.fill(__space); 
# 645
for (size_t __i = (0); __i < __r; ++__i) { 
# 646
(__os << ((__x._M_x)[__i])) << __space; }  
# 647
((__os << (__x._M_carry)) << __space) << (__x._M_p); 
# 649
__os.flags(__flags); 
# 650
__os.fill(__fill); 
# 651
return __os; 
# 652
} 
# 654
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 655
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 657
operator>>(basic_istream< _CharT, _Traits>  &__is, subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 658
__x) 
# 659
{ 
# 660
typedef basic_ostream< _CharT, _Traits>  __istream_type; 
# 661
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 663
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 664
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 666
for (size_t __i = (0); __i < __r; ++__i) { 
# 667
__is >> ((__x._M_x)[__i]); }  
# 668
__is >> (__x._M_carry); 
# 669
__is >> (__x._M_p); 
# 671
__is.flags(__flags); 
# 672
return __is; 
# 673
} 
# 676
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr size_t discard_block_engine< _RandomNumberEngine, __p, __r> ::block_size; 
# 680
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr size_t discard_block_engine< _RandomNumberEngine, __p, __r> ::used_block; 
# 684
template< class _RandomNumberEngine, size_t __p, size_t __r> typename discard_block_engine< _RandomNumberEngine, __p, __r> ::result_type 
# 688
discard_block_engine< _RandomNumberEngine, __p, __r> ::operator()() 
# 689
{ 
# 690
if ((_M_n) >= used_block) 
# 691
{ 
# 692
(_M_b).discard(block_size - (_M_n)); 
# 693
(_M_n) = (0); 
# 694
}  
# 695
++(_M_n); 
# 696
return (_M_b)(); 
# 697
} 
# 699
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 700
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 702
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 704
__x) 
# 705
{ 
# 706
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 707
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 709
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 710
const _CharT __fill = __os.fill(); 
# 711
const _CharT __space = __os.widen(' '); 
# 712
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 713
__os.fill(__space); 
# 715
((__os << __x.base()) << __space) << (__x._M_n); 
# 717
__os.flags(__flags); 
# 718
__os.fill(__fill); 
# 719
return __os; 
# 720
} 
# 722
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 723
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 725
operator>>(basic_istream< _CharT, _Traits>  &__is, discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 726
__x) 
# 727
{ 
# 728
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 729
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 731
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 732
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 734
(__is >> (__x._M_b)) >> (__x._M_n); 
# 736
__is.flags(__flags); 
# 737
return __is; 
# 738
} 
# 741
template< class _RandomNumberEngine, size_t __w, class _UIntType> typename independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::result_type 
# 745
independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::operator()() 
# 746
{ 
# 747
typedef typename _RandomNumberEngine::result_type _Eresult_type; 
# 748
const _Eresult_type __r = (((_M_b).max() - (_M_b).min()) < std::template numeric_limits< typename _RandomNumberEngine::result_type> ::max()) ? ((_M_b).max() - (_M_b).min()) + 1 : 0; 
# 751
const unsigned __edig = (std::template numeric_limits< typename _RandomNumberEngine::result_type> ::digits); 
# 752
const unsigned __m = (__r) ? std::__lg(__r) : __edig; 
# 755
typedef typename common_type< typename _RandomNumberEngine::result_type, result_type> ::type __ctype; 
# 756
const unsigned __cdig = (std::template numeric_limits< typename common_type< typename _RandomNumberEngine::result_type, result_type> ::type> ::digits); 
# 758
unsigned __n, __n0; 
# 759
__ctype __s0, __s1, __y0, __y1; 
# 761
for (size_t __i = (0); __i < (2); ++__i) 
# 762
{ 
# 763
__n = ((((__w + __m) - (1)) / __m) + __i); 
# 764
__n0 = (__n - (__w % __n)); 
# 765
const unsigned __w0 = __w / __n; 
# 767
__s0 = 0; 
# 768
__s1 = 0; 
# 769
if (__w0 < __cdig) 
# 770
{ 
# 771
__s0 = (((__ctype)1) << __w0); 
# 772
__s1 = (__s0 << 1); 
# 773
}  
# 775
__y0 = 0; 
# 776
__y1 = 0; 
# 777
if (__r) 
# 778
{ 
# 779
__y0 = (__s0 * (__r / __s0)); 
# 780
if (__s1) { 
# 781
__y1 = (__s1 * (__r / __s1)); }  
# 783
if ((__r - __y0) <= (__y0 / __n)) { 
# 784
break; }  
# 785
} else { 
# 787
break; }  
# 788
}  
# 790
result_type __sum = (0); 
# 791
for (size_t __k = (0); __k < __n0; ++__k) 
# 792
{ 
# 793
__ctype __u; 
# 794
do { 
# 795
__u = ((_M_b)() - (_M_b).min()); } 
# 796
while (__y0 && (__u >= __y0)); 
# 797
__sum = ((__s0 * __sum) + ((__s0) ? __u % __s0 : __u)); 
# 798
}  
# 799
for (size_t __k = __n0; __k < __n; ++__k) 
# 800
{ 
# 801
__ctype __u; 
# 802
do { 
# 803
__u = ((_M_b)() - (_M_b).min()); } 
# 804
while (__y1 && (__u >= __y1)); 
# 805
__sum = ((__s1 * __sum) + ((__s1) ? __u % __s1 : __u)); 
# 806
}  
# 807
return __sum; 
# 808
} 
# 811
template< class _RandomNumberEngine, size_t __k> constexpr size_t shuffle_order_engine< _RandomNumberEngine, __k> ::table_size; 
# 815
template< class _RandomNumberEngine, size_t __k> typename shuffle_order_engine< _RandomNumberEngine, __k> ::result_type 
# 818
shuffle_order_engine< _RandomNumberEngine, __k> ::operator()() 
# 819
{ 
# 820
size_t __j = __k * (((_M_y) - (_M_b).min()) / (((_M_b).max() - (_M_b).min()) + (1.0L))); 
# 822
(_M_y) = ((_M_v)[__j]); 
# 823
((_M_v)[__j]) = (_M_b)(); 
# 825
return _M_y; 
# 826
} 
# 828
template< class _RandomNumberEngine, size_t __k, class 
# 829
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 831
operator<<(basic_ostream< _CharT, _Traits>  &__os, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 832
__x) 
# 833
{ 
# 834
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 835
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 837
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 838
const _CharT __fill = __os.fill(); 
# 839
const _CharT __space = __os.widen(' '); 
# 840
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 841
__os.fill(__space); 
# 843
__os << __x.base(); 
# 844
for (size_t __i = (0); __i < __k; ++__i) { 
# 845
(__os << __space) << ((__x._M_v)[__i]); }  
# 846
(__os << __space) << (__x._M_y); 
# 848
__os.flags(__flags); 
# 849
__os.fill(__fill); 
# 850
return __os; 
# 851
} 
# 853
template< class _RandomNumberEngine, size_t __k, class 
# 854
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 856
operator>>(basic_istream< _CharT, _Traits>  &__is, shuffle_order_engine< _RandomNumberEngine, __k>  &
# 857
__x) 
# 858
{ 
# 859
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 860
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 862
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 863
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 865
__is >> (__x._M_b); 
# 866
for (size_t __i = (0); __i < __k; ++__i) { 
# 867
__is >> ((__x._M_v)[__i]); }  
# 868
__is >> (__x._M_y); 
# 870
__is.flags(__flags); 
# 871
return __is; 
# 872
} 
# 875
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 877
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_int_distribution< _IntType>  &
# 878
__x) 
# 879
{ 
# 880
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 881
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 883
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 884
const _CharT __fill = __os.fill(); 
# 885
const _CharT __space = __os.widen(' '); 
# 886
__os.flags(__ios_base::scientific | __ios_base::left); 
# 887
__os.fill(__space); 
# 889
((__os << __x.a()) << __space) << __x.b(); 
# 891
__os.flags(__flags); 
# 892
__os.fill(__fill); 
# 893
return __os; 
# 894
} 
# 896
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 898
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_int_distribution< _IntType>  &
# 899
__x) 
# 900
{ 
# 901
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 902
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 904
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 905
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 907
_IntType __a, __b; 
# 908
(__is >> __a) >> __b; 
# 909
__x.param(typename uniform_int_distribution< _IntType> ::param_type(__a, __b)); 
# 912
__is.flags(__flags); 
# 913
return __is; 
# 914
} 
# 917
template< class _RealType> 
# 918
template< class _ForwardIterator, class 
# 919
_UniformRandomNumberGenerator> void 
# 922
uniform_real_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 923
__urng, const param_type &
# 924
__p) 
# 925
{ 
# 928
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 929
auto __range = __p.b() - __p.a(); 
# 930
while (__f != __t) { 
# 931
(*(__f++)) = ((__aurng() * __range) + __p.a()); }  
# 932
} 
# 934
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 936
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_real_distribution< _RealType>  &
# 937
__x) 
# 938
{ 
# 939
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 940
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 942
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 943
const _CharT __fill = __os.fill(); 
# 944
const streamsize __precision = __os.precision(); 
# 945
const _CharT __space = __os.widen(' '); 
# 946
__os.flags(__ios_base::scientific | __ios_base::left); 
# 947
__os.fill(__space); 
# 948
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 950
((__os << __x.a()) << __space) << __x.b(); 
# 952
__os.flags(__flags); 
# 953
__os.fill(__fill); 
# 954
__os.precision(__precision); 
# 955
return __os; 
# 956
} 
# 958
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 960
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_real_distribution< _RealType>  &
# 961
__x) 
# 962
{ 
# 963
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 964
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 966
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 967
__is.flags(__ios_base::skipws); 
# 969
_RealType __a, __b; 
# 970
(__is >> __a) >> __b; 
# 971
__x.param(typename uniform_real_distribution< _RealType> ::param_type(__a, __b)); 
# 974
__is.flags(__flags); 
# 975
return __is; 
# 976
} 
# 979
template< class _ForwardIterator, class 
# 980
_UniformRandomNumberGenerator> void 
# 983
bernoulli_distribution::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 984
__urng, const param_type &
# 985
__p) 
# 986
{ 
# 989
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 990
auto __limit = __p.p() * (__aurng.max() - __aurng.min()); 
# 992
while (__f != __t) { 
# 993
(*(__f++)) = ((__aurng() - __aurng.min()) < __limit); }  
# 994
} 
# 996
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 998
operator<<(basic_ostream< _CharT, _Traits>  &__os, const bernoulli_distribution &
# 999
__x) 
# 1000
{ 
# 1001
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1002
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1004
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1005
const _CharT __fill = __os.fill(); 
# 1006
const streamsize __precision = __os.precision(); 
# 1007
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1008
__os.fill(__os.widen(' ')); 
# 1009
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1011
__os << __x.p(); 
# 1013
__os.flags(__flags); 
# 1014
__os.fill(__fill); 
# 1015
__os.precision(__precision); 
# 1016
return __os; 
# 1017
} 
# 1020
template< class _IntType> 
# 1021
template< class _UniformRandomNumberGenerator> typename geometric_distribution< _IntType> ::result_type 
# 1024
geometric_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1025
__param) 
# 1026
{ 
# 1029
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1032
const double __thr = std::template numeric_limits< result_type> ::max() + __naf; 
# 1035
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1037
double __cand; 
# 1038
do { 
# 1039
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1040
while (__cand >= __thr); 
# 1042
return (result_type)(__cand + __naf); 
# 1043
} 
# 1045
template< class _IntType> 
# 1046
template< class _ForwardIterator, class 
# 1047
_UniformRandomNumberGenerator> void 
# 1050
geometric_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1051
__urng, const param_type &
# 1052
__param) 
# 1053
{ 
# 1057
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1060
const double __thr = std::template numeric_limits< result_type> ::max() + __naf; 
# 1063
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1065
while (__f != __t) 
# 1066
{ 
# 1067
double __cand; 
# 1068
do { 
# 1069
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1071
while (__cand >= __thr); 
# 1073
(*(__f++)) = (__cand + __naf); 
# 1074
}  
# 1075
} 
# 1077
template< class _IntType, class 
# 1078
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1080
operator<<(basic_ostream< _CharT, _Traits>  &__os, const geometric_distribution< _IntType>  &
# 1081
__x) 
# 1082
{ 
# 1083
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1084
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1086
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1087
const _CharT __fill = __os.fill(); 
# 1088
const streamsize __precision = __os.precision(); 
# 1089
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1090
__os.fill(__os.widen(' ')); 
# 1091
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1093
__os << __x.p(); 
# 1095
__os.flags(__flags); 
# 1096
__os.fill(__fill); 
# 1097
__os.precision(__precision); 
# 1098
return __os; 
# 1099
} 
# 1101
template< class _IntType, class 
# 1102
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1104
operator>>(basic_istream< _CharT, _Traits>  &__is, geometric_distribution< _IntType>  &
# 1105
__x) 
# 1106
{ 
# 1107
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1108
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1110
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1111
__is.flags(__ios_base::skipws); 
# 1113
double __p; 
# 1114
__is >> __p; 
# 1115
__x.param((typename geometric_distribution< _IntType> ::param_type)__p); 
# 1117
__is.flags(__flags); 
# 1118
return __is; 
# 1119
} 
# 1122
template< class _IntType> 
# 1123
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1126
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng) 
# 1127
{ 
# 1128
const double __y = (_M_gd)(__urng); 
# 1131
poisson_distribution< result_type>  __poisson(__y); 
# 1132
return __poisson(__urng); 
# 1133
} 
# 1135
template< class _IntType> 
# 1136
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1139
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1140
__p) 
# 1141
{ 
# 1143
typedef gamma_distribution< double> ::param_type param_type; 
# 1145
const double __y = (_M_gd)(__urng, param_type(__p.k(), ((1.0) - __p.p()) / __p.p())); 
# 1148
poisson_distribution< result_type>  __poisson(__y); 
# 1149
return __poisson(__urng); 
# 1150
} 
# 1152
template< class _IntType> 
# 1153
template< class _ForwardIterator, class 
# 1154
_UniformRandomNumberGenerator> void 
# 1157
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1158
__urng) 
# 1159
{ 
# 1161
while (__f != __t) 
# 1162
{ 
# 1163
const double __y = (_M_gd)(__urng); 
# 1166
poisson_distribution< _IntType>  __poisson(__y); 
# 1167
(*(__f++)) = __poisson(__urng); 
# 1168
}  
# 1169
} 
# 1171
template< class _IntType> 
# 1172
template< class _ForwardIterator, class 
# 1173
_UniformRandomNumberGenerator> void 
# 1176
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1177
__urng, const param_type &
# 1178
__p) 
# 1179
{ 
# 1182
typename gamma_distribution< result_type> ::param_type __p2(__p.k(), ((1.0) - __p.p()) / __p.p()); 
# 1184
while (__f != __t) 
# 1185
{ 
# 1186
const double __y = (_M_gd)(__urng, __p2); 
# 1188
poisson_distribution< _IntType>  __poisson(__y); 
# 1189
(*(__f++)) = __poisson(__urng); 
# 1190
}  
# 1191
} 
# 1193
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1195
operator<<(basic_ostream< _CharT, _Traits>  &__os, const negative_binomial_distribution< _IntType>  &
# 1196
__x) 
# 1197
{ 
# 1198
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1199
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1201
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1202
const _CharT __fill = __os.fill(); 
# 1203
const streamsize __precision = __os.precision(); 
# 1204
const _CharT __space = __os.widen(' '); 
# 1205
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1206
__os.fill(__os.widen(' ')); 
# 1207
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1209
((((__os << __x.k()) << __space) << __x.p()) << __space) << (__x._M_gd); 
# 1212
__os.flags(__flags); 
# 1213
__os.fill(__fill); 
# 1214
__os.precision(__precision); 
# 1215
return __os; 
# 1216
} 
# 1218
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1220
operator>>(basic_istream< _CharT, _Traits>  &__is, negative_binomial_distribution< _IntType>  &
# 1221
__x) 
# 1222
{ 
# 1223
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1224
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1226
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1227
__is.flags(__ios_base::skipws); 
# 1229
_IntType __k; 
# 1230
double __p; 
# 1231
((__is >> __k) >> __p) >> (__x._M_gd); 
# 1232
__x.param(typename negative_binomial_distribution< _IntType> ::param_type(__k, __p)); 
# 1235
__is.flags(__flags); 
# 1236
return __is; 
# 1237
} 
# 1240
template< class _IntType> void 
# 1243
poisson_distribution< _IntType> ::param_type::_M_initialize() 
# 1244
{ 
# 1246
if ((_M_mean) >= (12)) 
# 1247
{ 
# 1248
const double __m = std::floor(_M_mean); 
# 1249
(_M_lm_thr) = std::log(_M_mean); 
# 1250
(_M_lfm) = std::lgamma(__m + (1)); 
# 1251
(_M_sm) = std::sqrt(__m); 
# 1253
const double __pi_4 = ((0.78539816339744830963L)); 
# 1254
const double __dx = std::sqrt(((2) * __m) * std::log(((32) * __m) / __pi_4)); 
# 1256
(_M_d) = std::round(std::max< double> ((6.0), std::min(__m, __dx))); 
# 1257
const double __cx = (((2) * __m) + (_M_d)); 
# 1258
(_M_scx) = std::sqrt(__cx / (2)); 
# 1259
(_M_1cx) = ((1) / __cx); 
# 1261
(_M_c2b) = (std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx)); 
# 1262
(_M_cb) = ((((2) * __cx) * std::exp(((-(_M_d)) * (_M_1cx)) * ((1) + ((_M_d) / (2))))) / (_M_d)); 
# 1264
} else { 
# 1267
(_M_lm_thr) = std::exp(-(_M_mean)); }  
# 1268
} 
# 1280 "/usr/include/c++/7/bits/random.tcc" 3
template< class _IntType> 
# 1281
template< class _UniformRandomNumberGenerator> typename poisson_distribution< _IntType> ::result_type 
# 1284
poisson_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1285
__param) 
# 1286
{ 
# 1288
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1290
if (__param.mean() >= 12) 
# 1291
{ 
# 1292
double __x; 
# 1295
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1297
const double __thr = std::template numeric_limits< _IntType> ::max() + __naf; 
# 1300
const double __m = std::floor(__param.mean()); 
# 1302
const double __spi_2 = ((1.2533141373155002512L)); 
# 1303
const double __c1 = (__param._M_sm) * __spi_2; 
# 1304
const double __c2 = (__param._M_c2b) + __c1; 
# 1305
const double __c3 = (__c2 + (1)); 
# 1306
const double __c4 = (__c3 + (1)); 
# 1308
const double __e178 = ((1.0129030479320018583L)); 
# 1309
const double __c5 = (__c4 + __e178); 
# 1310
const double __c = (__param._M_cb) + __c5; 
# 1311
const double __2cx = (2 * (((2) * __m) + (__param._M_d))); 
# 1313
bool __reject = true; 
# 1314
do 
# 1315
{ 
# 1316
const double __u = __c * __aurng(); 
# 1317
const double __e = (-std::log((1.0) - __aurng())); 
# 1319
double __w = (0.0); 
# 1321
if (__u <= __c1) 
# 1322
{ 
# 1323
const double __n = (_M_nd)(__urng); 
# 1324
const double __y = ((-std::abs(__n)) * (__param._M_sm)) - 1; 
# 1325
__x = std::floor(__y); 
# 1326
__w = (((-__n) * __n) / (2)); 
# 1327
if (__x < (-__m)) { 
# 1328
continue; }  
# 1329
} else { 
# 1330
if (__u <= __c2) 
# 1331
{ 
# 1332
const double __n = (_M_nd)(__urng); 
# 1333
const double __y = 1 + (std::abs(__n) * (__param._M_scx)); 
# 1334
__x = std::ceil(__y); 
# 1335
__w = ((__y * ((2) - __y)) * (__param._M_1cx)); 
# 1336
if (__x > (__param._M_d)) { 
# 1337
continue; }  
# 1338
} else { 
# 1339
if (__u <= __c3) { 
# 1342
__x = (-1); } else { 
# 1343
if (__u <= __c4) { 
# 1344
__x = (0); } else { 
# 1345
if (__u <= __c5) { 
# 1346
__x = (1); } else 
# 1348
{ 
# 1349
const double __v = (-std::log((1.0) - __aurng())); 
# 1350
const double __y = ((__param._M_d) + ((__v * __2cx) / (__param._M_d))); 
# 1352
__x = std::ceil(__y); 
# 1353
__w = (((-(__param._M_d)) * (__param._M_1cx)) * ((1) + (__y / (2)))); 
# 1354
}  }  }  }  }  
# 1356
__reject = (((__w - __e) - (__x * (__param._M_lm_thr))) > ((__param._M_lfm) - std::lgamma((__x + __m) + (1)))); 
# 1359
__reject |= ((__x + __m) >= __thr); 
# 1361
}  while (__reject); 
# 1363
return (result_type)((__x + __m) + __naf); 
# 1364
} else 
# 1367
{ 
# 1368
_IntType __x = (0); 
# 1369
double __prod = (1.0); 
# 1371
do 
# 1372
{ 
# 1373
__prod *= __aurng(); 
# 1374
__x += 1; 
# 1375
} 
# 1376
while (__prod > (__param._M_lm_thr)); 
# 1378
return __x - 1; 
# 1379
}  
# 1380
} 
# 1382
template< class _IntType> 
# 1383
template< class _ForwardIterator, class 
# 1384
_UniformRandomNumberGenerator> void 
# 1387
poisson_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1388
__urng, const param_type &
# 1389
__param) 
# 1390
{ 
# 1393
while (__f != __t) { 
# 1394
(*(__f++)) = this->operator()(__urng, __param); }  
# 1395
} 
# 1397
template< class _IntType, class 
# 1398
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1400
operator<<(basic_ostream< _CharT, _Traits>  &__os, const poisson_distribution< _IntType>  &
# 1401
__x) 
# 1402
{ 
# 1403
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1404
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1406
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1407
const _CharT __fill = __os.fill(); 
# 1408
const streamsize __precision = __os.precision(); 
# 1409
const _CharT __space = __os.widen(' '); 
# 1410
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1411
__os.fill(__space); 
# 1412
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1414
((__os << __x.mean()) << __space) << (__x._M_nd); 
# 1416
__os.flags(__flags); 
# 1417
__os.fill(__fill); 
# 1418
__os.precision(__precision); 
# 1419
return __os; 
# 1420
} 
# 1422
template< class _IntType, class 
# 1423
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1425
operator>>(basic_istream< _CharT, _Traits>  &__is, poisson_distribution< _IntType>  &
# 1426
__x) 
# 1427
{ 
# 1428
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1429
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1431
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1432
__is.flags(__ios_base::skipws); 
# 1434
double __mean; 
# 1435
(__is >> __mean) >> (__x._M_nd); 
# 1436
__x.param((typename poisson_distribution< _IntType> ::param_type)__mean); 
# 1438
__is.flags(__flags); 
# 1439
return __is; 
# 1440
} 
# 1443
template< class _IntType> void 
# 1446
binomial_distribution< _IntType> ::param_type::_M_initialize() 
# 1447
{ 
# 1448
const double __p12 = ((_M_p) <= (0.5)) ? _M_p : ((1.0) - (_M_p)); 
# 1450
(_M_easy) = true; 
# 1453
if (((_M_t) * __p12) >= 8) 
# 1454
{ 
# 1455
(_M_easy) = false; 
# 1456
const double __np = std::floor((_M_t) * __p12); 
# 1457
const double __pa = __np / (_M_t); 
# 1458
const double __1p = ((1) - __pa); 
# 1460
const double __pi_4 = ((0.78539816339744830963L)); 
# 1461
const double __d1x = std::sqrt((__np * __1p) * std::log(((32) * __np) / (((81) * __pi_4) * __1p))); 
# 1464
(_M_d1) = std::round(std::max< double> ((1.0), __d1x)); 
# 1465
const double __d2x = std::sqrt((__np * __1p) * std::log(((32 * (_M_t)) * __1p) / (__pi_4 * __pa))); 
# 1468
(_M_d2) = std::round(std::max< double> ((1.0), __d2x)); 
# 1471
const double __spi_2 = ((1.2533141373155002512L)); 
# 1472
(_M_s1) = (std::sqrt(__np * __1p) * ((1) + ((_M_d1) / ((4) * __np)))); 
# 1473
(_M_s2) = (std::sqrt(__np * __1p) * (1 + ((_M_d2) / ((4 * (_M_t)) * __1p)))); 
# 1474
(_M_c) = (((2) * (_M_d1)) / __np); 
# 1475
(_M_a1) = ((std::exp(_M_c) * (_M_s1)) * __spi_2); 
# 1476
const double __a12 = (_M_a1) + ((_M_s2) * __spi_2); 
# 1477
const double __s1s = (_M_s1) * (_M_s1); 
# 1478
(_M_a123) = (__a12 + ((((std::exp((_M_d1) / ((_M_t) * __1p)) * 2) * __s1s) / (_M_d1)) * std::exp(((-(_M_d1)) * (_M_d1)) / ((2) * __s1s)))); 
# 1481
const double __s2s = (_M_s2) * (_M_s2); 
# 1482
(_M_s) = ((_M_a123) + ((((2) * __s2s) / (_M_d2)) * std::exp(((-(_M_d2)) * (_M_d2)) / ((2) * __s2s)))); 
# 1484
(_M_lf) = (std::lgamma(__np + (1)) + std::lgamma(((_M_t) - __np) + 1)); 
# 1486
(_M_lp1p) = std::log(__pa / __1p); 
# 1488
(_M_q) = (-std::log((1) - ((__p12 - __pa) / __1p))); 
# 1489
} else { 
# 1492
(_M_q) = (-std::log((1) - __p12)); }  
# 1493
} 
# 1495
template< class _IntType> 
# 1496
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1499
binomial_distribution< _IntType> ::_M_waiting(_UniformRandomNumberGenerator &__urng, _IntType 
# 1500
__t, double __q) 
# 1501
{ 
# 1502
_IntType __x = (0); 
# 1503
double __sum = (0.0); 
# 1505
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1507
do 
# 1508
{ 
# 1509
if (__t == __x) { 
# 1510
return __x; }  
# 1511
const double __e = (-std::log((1.0) - __aurng())); 
# 1512
__sum += (__e / (__t - __x)); 
# 1513
__x += 1; 
# 1514
} 
# 1515
while (__sum <= __q); 
# 1517
return __x - 1; 
# 1518
} 
# 1530 "/usr/include/c++/7/bits/random.tcc" 3
template< class _IntType> 
# 1531
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1534
binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1535
__param) 
# 1536
{ 
# 1537
result_type __ret; 
# 1538
const _IntType __t = __param.t(); 
# 1539
const double __p = __param.p(); 
# 1540
const double __p12 = ((__p <= (0.5)) ? __p : ((1.0) - __p)); 
# 1542
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1545
if (!(__param._M_easy)) 
# 1546
{ 
# 1547
double __x; 
# 1550
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1552
const double __thr = std::template numeric_limits< _IntType> ::max() + __naf; 
# 1555
const double __np = std::floor(__t * __p12); 
# 1558
const double __spi_2 = ((1.2533141373155002512L)); 
# 1559
const double __a1 = ((__param._M_a1)); 
# 1560
const double __a12 = __a1 + ((__param._M_s2) * __spi_2); 
# 1561
const double __a123 = ((__param._M_a123)); 
# 1562
const double __s1s = (__param._M_s1) * (__param._M_s1); 
# 1563
const double __s2s = (__param._M_s2) * (__param._M_s2); 
# 1565
bool __reject; 
# 1566
do 
# 1567
{ 
# 1568
const double __u = (__param._M_s) * __aurng(); 
# 1570
double __v; 
# 1572
if (__u <= __a1) 
# 1573
{ 
# 1574
const double __n = (_M_nd)(__urng); 
# 1575
const double __y = (__param._M_s1) * std::abs(__n); 
# 1576
__reject = (__y >= (__param._M_d1)); 
# 1577
if (!__reject) 
# 1578
{ 
# 1579
const double __e = (-std::log((1.0) - __aurng())); 
# 1580
__x = std::floor(__y); 
# 1581
__v = (((-__e) - ((__n * __n) / (2))) + (__param._M_c)); 
# 1582
}  
# 1583
} else { 
# 1584
if (__u <= __a12) 
# 1585
{ 
# 1586
const double __n = (_M_nd)(__urng); 
# 1587
const double __y = (__param._M_s2) * std::abs(__n); 
# 1588
__reject = (__y >= (__param._M_d2)); 
# 1589
if (!__reject) 
# 1590
{ 
# 1591
const double __e = (-std::log((1.0) - __aurng())); 
# 1592
__x = std::floor(-__y); 
# 1593
__v = ((-__e) - ((__n * __n) / (2))); 
# 1594
}  
# 1595
} else { 
# 1596
if (__u <= __a123) 
# 1597
{ 
# 1598
const double __e1 = (-std::log((1.0) - __aurng())); 
# 1599
const double __e2 = (-std::log((1.0) - __aurng())); 
# 1601
const double __y = ((__param._M_d1) + ((((2) * __s1s) * __e1) / (__param._M_d1))); 
# 1603
__x = std::floor(__y); 
# 1604
__v = ((-__e2) + ((__param._M_d1) * ((1 / (__t - __np)) - (__y / ((2) * __s1s))))); 
# 1606
__reject = false; 
# 1607
} else 
# 1609
{ 
# 1610
const double __e1 = (-std::log((1.0) - __aurng())); 
# 1611
const double __e2 = (-std::log((1.0) - __aurng())); 
# 1613
const double __y = ((__param._M_d2) + ((((2) * __s2s) * __e1) / (__param._M_d2))); 
# 1615
__x = std::floor(-__y); 
# 1616
__v = ((-__e2) - (((__param._M_d2) * __y) / ((2) * __s2s))); 
# 1617
__reject = false; 
# 1618
}  }  }  
# 1620
__reject = ((__reject || (__x < (-__np))) || (__x > (__t - __np))); 
# 1621
if (!__reject) 
# 1622
{ 
# 1623
const double __lfx = std::lgamma((__np + __x) + (1)) + std::lgamma((__t - (__np + __x)) + 1); 
# 1626
__reject = (__v > (((__param._M_lf) - __lfx) + (__x * (__param._M_lp1p)))); 
# 1628
}  
# 1630
__reject |= ((__x + __np) >= __thr); 
# 1631
} 
# 1632
while (__reject); 
# 1634
__x += (__np + __naf); 
# 1636
const _IntType __z = _M_waiting(__urng, __t - ((_IntType)__x), (__param._M_q)); 
# 1638
__ret = (((_IntType)__x) + __z); 
# 1639
} else { 
# 1642
__ret = _M_waiting(__urng, __t, (__param._M_q)); }  
# 1644
if (__p12 != __p) { 
# 1645
__ret = (__t - __ret); }  
# 1646
return __ret; 
# 1647
} 
# 1649
template< class _IntType> 
# 1650
template< class _ForwardIterator, class 
# 1651
_UniformRandomNumberGenerator> void 
# 1654
binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1655
__urng, const param_type &
# 1656
__param) 
# 1657
{ 
# 1660
while (__f != __t) { 
# 1661
(*(__f++)) = this->operator()(__urng, __param); }  
# 1662
} 
# 1664
template< class _IntType, class 
# 1665
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1667
operator<<(basic_ostream< _CharT, _Traits>  &__os, const binomial_distribution< _IntType>  &
# 1668
__x) 
# 1669
{ 
# 1670
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1671
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1673
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1674
const _CharT __fill = __os.fill(); 
# 1675
const streamsize __precision = __os.precision(); 
# 1676
const _CharT __space = __os.widen(' '); 
# 1677
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1678
__os.fill(__space); 
# 1679
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1681
((((__os << __x.t()) << __space) << __x.p()) << __space) << (__x._M_nd); 
# 1684
__os.flags(__flags); 
# 1685
__os.fill(__fill); 
# 1686
__os.precision(__precision); 
# 1687
return __os; 
# 1688
} 
# 1690
template< class _IntType, class 
# 1691
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1693
operator>>(basic_istream< _CharT, _Traits>  &__is, binomial_distribution< _IntType>  &
# 1694
__x) 
# 1695
{ 
# 1696
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1697
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1699
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1700
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1702
_IntType __t; 
# 1703
double __p; 
# 1704
((__is >> __t) >> __p) >> (__x._M_nd); 
# 1705
__x.param(typename binomial_distribution< _IntType> ::param_type(__t, __p)); 
# 1708
__is.flags(__flags); 
# 1709
return __is; 
# 1710
} 
# 1713
template< class _RealType> 
# 1714
template< class _ForwardIterator, class 
# 1715
_UniformRandomNumberGenerator> void 
# 1718
exponential_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1719
__urng, const param_type &
# 1720
__p) 
# 1721
{ 
# 1724
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1725
while (__f != __t) { 
# 1726
(*(__f++)) = ((-std::log(((result_type)1) - __aurng())) / __p.lambda()); }  
# 1727
} 
# 1729
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1731
operator<<(basic_ostream< _CharT, _Traits>  &__os, const exponential_distribution< _RealType>  &
# 1732
__x) 
# 1733
{ 
# 1734
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1735
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1737
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1738
const _CharT __fill = __os.fill(); 
# 1739
const streamsize __precision = __os.precision(); 
# 1740
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1741
__os.fill(__os.widen(' ')); 
# 1742
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1744
__os << __x.lambda(); 
# 1746
__os.flags(__flags); 
# 1747
__os.fill(__fill); 
# 1748
__os.precision(__precision); 
# 1749
return __os; 
# 1750
} 
# 1752
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1754
operator>>(basic_istream< _CharT, _Traits>  &__is, exponential_distribution< _RealType>  &
# 1755
__x) 
# 1756
{ 
# 1757
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1758
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1760
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1761
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1763
_RealType __lambda; 
# 1764
__is >> __lambda; 
# 1765
__x.param((typename exponential_distribution< _RealType> ::param_type)__lambda); 
# 1768
__is.flags(__flags); 
# 1769
return __is; 
# 1770
} 
# 1779 "/usr/include/c++/7/bits/random.tcc" 3
template< class _RealType> 
# 1780
template< class _UniformRandomNumberGenerator> typename normal_distribution< _RealType> ::result_type 
# 1783
normal_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1784
__param) 
# 1785
{ 
# 1786
result_type __ret; 
# 1788
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1790
if (_M_saved_available) 
# 1791
{ 
# 1792
(_M_saved_available) = false; 
# 1793
__ret = (_M_saved); 
# 1794
} else 
# 1796
{ 
# 1797
result_type __x, __y, __r2; 
# 1798
do 
# 1799
{ 
# 1800
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1801
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1802
__r2 = ((__x * __x) + (__y * __y)); 
# 1803
} 
# 1804
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1806
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1807
(_M_saved) = (__x * __mult); 
# 1808
(_M_saved_available) = true; 
# 1809
__ret = (__y * __mult); 
# 1810
}  
# 1812
__ret = ((__ret * __param.stddev()) + __param.mean()); 
# 1813
return __ret; 
# 1814
} 
# 1816
template< class _RealType> 
# 1817
template< class _ForwardIterator, class 
# 1818
_UniformRandomNumberGenerator> void 
# 1821
normal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1822
__urng, const param_type &
# 1823
__param) 
# 1824
{ 
# 1827
if (__f == __t) { 
# 1828
return; }  
# 1830
if (_M_saved_available) 
# 1831
{ 
# 1832
(_M_saved_available) = false; 
# 1833
(*(__f++)) = (((_M_saved) * __param.stddev()) + __param.mean()); 
# 1835
if (__f == __t) { 
# 1836
return; }  
# 1837
}  
# 1840
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1842
while ((__f + 1) < __t) 
# 1843
{ 
# 1844
result_type __x, __y, __r2; 
# 1845
do 
# 1846
{ 
# 1847
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1848
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1849
__r2 = ((__x * __x) + (__y * __y)); 
# 1850
} 
# 1851
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1853
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1854
(*(__f++)) = (((__y * __mult) * __param.stddev()) + __param.mean()); 
# 1855
(*(__f++)) = (((__x * __mult) * __param.stddev()) + __param.mean()); 
# 1856
}  
# 1858
if (__f != __t) 
# 1859
{ 
# 1860
result_type __x, __y, __r2; 
# 1861
do 
# 1862
{ 
# 1863
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1864
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1865
__r2 = ((__x * __x) + (__y * __y)); 
# 1866
} 
# 1867
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1869
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1870
(_M_saved) = (__x * __mult); 
# 1871
(_M_saved_available) = true; 
# 1872
(*__f) = (((__y * __mult) * __param.stddev()) + __param.mean()); 
# 1873
}  
# 1874
} 
# 1876
template< class _RealType> bool 
# 1878
operator==(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 1879
__d2) 
# 1880
{ 
# 1881
if (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_saved_available) == (__d2._M_saved_available))) 
# 1883
{ 
# 1884
if ((__d1._M_saved_available) && ((__d1._M_saved) == (__d2._M_saved))) { 
# 1886
return true; } else { 
# 1887
if (!(__d1._M_saved_available)) { 
# 1888
return true; } else { 
# 1890
return false; }  }  
# 1891
} else { 
# 1893
return false; }  
# 1894
} 
# 1896
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1898
operator<<(basic_ostream< _CharT, _Traits>  &__os, const normal_distribution< _RealType>  &
# 1899
__x) 
# 1900
{ 
# 1901
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1902
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1904
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1905
const _CharT __fill = __os.fill(); 
# 1906
const streamsize __precision = __os.precision(); 
# 1907
const _CharT __space = __os.widen(' '); 
# 1908
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1909
__os.fill(__space); 
# 1910
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1912
((((__os << __x.mean()) << __space) << __x.stddev()) << __space) << (__x._M_saved_available); 
# 1914
if (__x._M_saved_available) { 
# 1915
(__os << __space) << (__x._M_saved); }  
# 1917
__os.flags(__flags); 
# 1918
__os.fill(__fill); 
# 1919
__os.precision(__precision); 
# 1920
return __os; 
# 1921
} 
# 1923
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1925
operator>>(basic_istream< _CharT, _Traits>  &__is, normal_distribution< _RealType>  &
# 1926
__x) 
# 1927
{ 
# 1928
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1929
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1931
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1932
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1934
double __mean, __stddev; 
# 1935
((__is >> __mean) >> __stddev) >> (__x._M_saved_available); 
# 1937
if (__x._M_saved_available) { 
# 1938
__is >> (__x._M_saved); }  
# 1939
__x.param(typename normal_distribution< _RealType> ::param_type(__mean, __stddev)); 
# 1942
__is.flags(__flags); 
# 1943
return __is; 
# 1944
} 
# 1947
template< class _RealType> 
# 1948
template< class _ForwardIterator, class 
# 1949
_UniformRandomNumberGenerator> void 
# 1952
lognormal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1953
__urng, const param_type &
# 1954
__p) 
# 1955
{ 
# 1957
while (__f != __t) { 
# 1958
(*(__f++)) = std::exp((__p.s() * (_M_nd)(__urng)) + __p.m()); }  
# 1959
} 
# 1961
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1963
operator<<(basic_ostream< _CharT, _Traits>  &__os, const lognormal_distribution< _RealType>  &
# 1964
__x) 
# 1965
{ 
# 1966
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1967
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1969
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1970
const _CharT __fill = __os.fill(); 
# 1971
const streamsize __precision = __os.precision(); 
# 1972
const _CharT __space = __os.widen(' '); 
# 1973
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1974
__os.fill(__space); 
# 1975
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1977
((((__os << __x.m()) << __space) << __x.s()) << __space) << (__x._M_nd); 
# 1980
__os.flags(__flags); 
# 1981
__os.fill(__fill); 
# 1982
__os.precision(__precision); 
# 1983
return __os; 
# 1984
} 
# 1986
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1988
operator>>(basic_istream< _CharT, _Traits>  &__is, lognormal_distribution< _RealType>  &
# 1989
__x) 
# 1990
{ 
# 1991
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1992
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1994
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1995
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1997
_RealType __m, __s; 
# 1998
((__is >> __m) >> __s) >> (__x._M_nd); 
# 1999
__x.param(typename lognormal_distribution< _RealType> ::param_type(__m, __s)); 
# 2002
__is.flags(__flags); 
# 2003
return __is; 
# 2004
} 
# 2006
template< class _RealType> 
# 2007
template< class _ForwardIterator, class 
# 2008
_UniformRandomNumberGenerator> void 
# 2011
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2012
__urng) 
# 2013
{ 
# 2015
while (__f != __t) { 
# 2016
(*(__f++)) = (2 * (_M_gd)(__urng)); }  
# 2017
} 
# 2019
template< class _RealType> 
# 2020
template< class _ForwardIterator, class 
# 2021
_UniformRandomNumberGenerator> void 
# 2024
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2025
__urng, const typename gamma_distribution< result_type> ::param_type &
# 2027
__p) 
# 2028
{ 
# 2030
while (__f != __t) { 
# 2031
(*(__f++)) = (2 * (_M_gd)(__urng, __p)); }  
# 2032
} 
# 2034
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2036
operator<<(basic_ostream< _CharT, _Traits>  &__os, const chi_squared_distribution< _RealType>  &
# 2037
__x) 
# 2038
{ 
# 2039
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2040
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2042
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2043
const _CharT __fill = __os.fill(); 
# 2044
const streamsize __precision = __os.precision(); 
# 2045
const _CharT __space = __os.widen(' '); 
# 2046
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2047
__os.fill(__space); 
# 2048
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2050
((__os << __x.n()) << __space) << (__x._M_gd); 
# 2052
__os.flags(__flags); 
# 2053
__os.fill(__fill); 
# 2054
__os.precision(__precision); 
# 2055
return __os; 
# 2056
} 
# 2058
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2060
operator>>(basic_istream< _CharT, _Traits>  &__is, chi_squared_distribution< _RealType>  &
# 2061
__x) 
# 2062
{ 
# 2063
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2064
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2066
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2067
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2069
_RealType __n; 
# 2070
(__is >> __n) >> (__x._M_gd); 
# 2071
__x.param((typename chi_squared_distribution< _RealType> ::param_type)__n); 
# 2074
__is.flags(__flags); 
# 2075
return __is; 
# 2076
} 
# 2079
template< class _RealType> 
# 2080
template< class _UniformRandomNumberGenerator> typename cauchy_distribution< _RealType> ::result_type 
# 2083
cauchy_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2084
__p) 
# 2085
{ 
# 2087
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2088
_RealType __u; 
# 2089
do { 
# 2090
__u = __aurng(); } 
# 2091
while (__u == (0.5)); 
# 2093
const _RealType __pi = ((3.1415926535897932385L)); 
# 2094
return __p.a() + (__p.b() * std::tan(__pi * __u)); 
# 2095
} 
# 2097
template< class _RealType> 
# 2098
template< class _ForwardIterator, class 
# 2099
_UniformRandomNumberGenerator> void 
# 2102
cauchy_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2103
__urng, const param_type &
# 2104
__p) 
# 2105
{ 
# 2107
const _RealType __pi = ((3.1415926535897932385L)); 
# 2109
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2110
while (__f != __t) 
# 2111
{ 
# 2112
_RealType __u; 
# 2113
do { 
# 2114
__u = __aurng(); } 
# 2115
while (__u == (0.5)); 
# 2117
(*(__f++)) = (__p.a() + (__p.b() * std::tan(__pi * __u))); 
# 2118
}  
# 2119
} 
# 2121
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2123
operator<<(basic_ostream< _CharT, _Traits>  &__os, const cauchy_distribution< _RealType>  &
# 2124
__x) 
# 2125
{ 
# 2126
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2127
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2129
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2130
const _CharT __fill = __os.fill(); 
# 2131
const streamsize __precision = __os.precision(); 
# 2132
const _CharT __space = __os.widen(' '); 
# 2133
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2134
__os.fill(__space); 
# 2135
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2137
((__os << __x.a()) << __space) << __x.b(); 
# 2139
__os.flags(__flags); 
# 2140
__os.fill(__fill); 
# 2141
__os.precision(__precision); 
# 2142
return __os; 
# 2143
} 
# 2145
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2147
operator>>(basic_istream< _CharT, _Traits>  &__is, cauchy_distribution< _RealType>  &
# 2148
__x) 
# 2149
{ 
# 2150
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2151
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2153
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2154
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2156
_RealType __a, __b; 
# 2157
(__is >> __a) >> __b; 
# 2158
__x.param(typename cauchy_distribution< _RealType> ::param_type(__a, __b)); 
# 2161
__is.flags(__flags); 
# 2162
return __is; 
# 2163
} 
# 2166
template< class _RealType> 
# 2167
template< class _ForwardIterator, class 
# 2168
_UniformRandomNumberGenerator> void 
# 2171
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2172
__urng) 
# 2173
{ 
# 2175
while (__f != __t) { 
# 2176
(*(__f++)) = (((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m())); }  
# 2177
} 
# 2179
template< class _RealType> 
# 2180
template< class _ForwardIterator, class 
# 2181
_UniformRandomNumberGenerator> void 
# 2184
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2185
__urng, const param_type &
# 2186
__p) 
# 2187
{ 
# 2190
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2191
param_type __p1(__p.m() / 2); 
# 2192
param_type __p2(__p.n() / 2); 
# 2193
while (__f != __t) { 
# 2194
(*(__f++)) = (((_M_gd_x)(__urng, __p1) * n()) / ((_M_gd_y)(__urng, __p2) * m())); }  
# 2196
} 
# 2198
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2200
operator<<(basic_ostream< _CharT, _Traits>  &__os, const fisher_f_distribution< _RealType>  &
# 2201
__x) 
# 2202
{ 
# 2203
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2204
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2206
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2207
const _CharT __fill = __os.fill(); 
# 2208
const streamsize __precision = __os.precision(); 
# 2209
const _CharT __space = __os.widen(' '); 
# 2210
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2211
__os.fill(__space); 
# 2212
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2214
((((((__os << __x.m()) << __space) << __x.n()) << __space) << (__x._M_gd_x)) << __space) << (__x._M_gd_y); 
# 2217
__os.flags(__flags); 
# 2218
__os.fill(__fill); 
# 2219
__os.precision(__precision); 
# 2220
return __os; 
# 2221
} 
# 2223
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2225
operator>>(basic_istream< _CharT, _Traits>  &__is, fisher_f_distribution< _RealType>  &
# 2226
__x) 
# 2227
{ 
# 2228
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2229
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2231
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2232
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2234
_RealType __m, __n; 
# 2235
(((__is >> __m) >> __n) >> (__x._M_gd_x)) >> (__x._M_gd_y); 
# 2236
__x.param(typename fisher_f_distribution< _RealType> ::param_type(__m, __n)); 
# 2239
__is.flags(__flags); 
# 2240
return __is; 
# 2241
} 
# 2244
template< class _RealType> 
# 2245
template< class _ForwardIterator, class 
# 2246
_UniformRandomNumberGenerator> void 
# 2249
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2250
__urng) 
# 2251
{ 
# 2253
while (__f != __t) { 
# 2254
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng))); }  
# 2255
} 
# 2257
template< class _RealType> 
# 2258
template< class _ForwardIterator, class 
# 2259
_UniformRandomNumberGenerator> void 
# 2262
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2263
__urng, const param_type &
# 2264
__p) 
# 2265
{ 
# 2268
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2, 2); 
# 2269
while (__f != __t) { 
# 2270
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt(__p.n() / (_M_gd)(__urng, __p2))); }  
# 2271
} 
# 2273
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2275
operator<<(basic_ostream< _CharT, _Traits>  &__os, const student_t_distribution< _RealType>  &
# 2276
__x) 
# 2277
{ 
# 2278
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2279
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2281
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2282
const _CharT __fill = __os.fill(); 
# 2283
const streamsize __precision = __os.precision(); 
# 2284
const _CharT __space = __os.widen(' '); 
# 2285
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2286
__os.fill(__space); 
# 2287
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2289
((((__os << __x.n()) << __space) << (__x._M_nd)) << __space) << (__x._M_gd); 
# 2291
__os.flags(__flags); 
# 2292
__os.fill(__fill); 
# 2293
__os.precision(__precision); 
# 2294
return __os; 
# 2295
} 
# 2297
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2299
operator>>(basic_istream< _CharT, _Traits>  &__is, student_t_distribution< _RealType>  &
# 2300
__x) 
# 2301
{ 
# 2302
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2303
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2305
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2306
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2308
_RealType __n; 
# 2309
((__is >> __n) >> (__x._M_nd)) >> (__x._M_gd); 
# 2310
__x.param((typename student_t_distribution< _RealType> ::param_type)__n); 
# 2312
__is.flags(__flags); 
# 2313
return __is; 
# 2314
} 
# 2317
template< class _RealType> void 
# 2320
gamma_distribution< _RealType> ::param_type::_M_initialize() 
# 2321
{ 
# 2322
(_M_malpha) = (((_M_alpha) < (1.0)) ? (_M_alpha) + ((_RealType)(1.0)) : (_M_alpha)); 
# 2324
const _RealType __a1 = ((_M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2325
(_M_a2) = (((_RealType)(1.0)) / std::sqrt(((_RealType)(9.0)) * __a1)); 
# 2326
} 
# 2333
template< class _RealType> 
# 2334
template< class _UniformRandomNumberGenerator> typename gamma_distribution< _RealType> ::result_type 
# 2337
gamma_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2338
__param) 
# 2339
{ 
# 2341
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2343
result_type __u, __v, __n; 
# 2344
const result_type __a1 = ((__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2347
do 
# 2348
{ 
# 2349
do 
# 2350
{ 
# 2351
__n = (_M_nd)(__urng); 
# 2352
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2353
} 
# 2354
while (__v <= (0.0)); 
# 2356
__v = ((__v * __v) * __v); 
# 2357
__u = __aurng(); 
# 2358
} 
# 2359
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2363
if (__param.alpha() == (__param._M_malpha)) { 
# 2364
return (__a1 * __v) * __param.beta(); } else 
# 2366
{ 
# 2367
do { 
# 2368
__u = __aurng(); } 
# 2369
while (__u == (0.0)); 
# 2371
return (((std::pow(__u, ((result_type)(1.0)) / __param.alpha()) * __a1) * __v) * __param.beta()); 
# 2373
}  
# 2374
} 
# 2376
template< class _RealType> 
# 2377
template< class _ForwardIterator, class 
# 2378
_UniformRandomNumberGenerator> void 
# 2381
gamma_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2382
__urng, const param_type &
# 2383
__param) 
# 2384
{ 
# 2387
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2389
result_type __u, __v, __n; 
# 2390
const result_type __a1 = ((__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2393
if (__param.alpha() == (__param._M_malpha)) { 
# 2394
while (__f != __t) 
# 2395
{ 
# 2396
do 
# 2397
{ 
# 2398
do 
# 2399
{ 
# 2400
__n = (_M_nd)(__urng); 
# 2401
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2402
} 
# 2403
while (__v <= (0.0)); 
# 2405
__v = ((__v * __v) * __v); 
# 2406
__u = __aurng(); 
# 2407
} 
# 2408
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2412
(*(__f++)) = ((__a1 * __v) * __param.beta()); 
# 2413
}  } else { 
# 2415
while (__f != __t) 
# 2416
{ 
# 2417
do 
# 2418
{ 
# 2419
do 
# 2420
{ 
# 2421
__n = (_M_nd)(__urng); 
# 2422
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2423
} 
# 2424
while (__v <= (0.0)); 
# 2426
__v = ((__v * __v) * __v); 
# 2427
__u = __aurng(); 
# 2428
} 
# 2429
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2433
do { 
# 2434
__u = __aurng(); } 
# 2435
while (__u == (0.0)); 
# 2437
(*(__f++)) = (((std::pow(__u, ((result_type)(1.0)) / __param.alpha()) * __a1) * __v) * __param.beta()); 
# 2439
}  }  
# 2440
} 
# 2442
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2444
operator<<(basic_ostream< _CharT, _Traits>  &__os, const gamma_distribution< _RealType>  &
# 2445
__x) 
# 2446
{ 
# 2447
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2448
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2450
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2451
const _CharT __fill = __os.fill(); 
# 2452
const streamsize __precision = __os.precision(); 
# 2453
const _CharT __space = __os.widen(' '); 
# 2454
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2455
__os.fill(__space); 
# 2456
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2458
((((__os << __x.alpha()) << __space) << __x.beta()) << __space) << (__x._M_nd); 
# 2461
__os.flags(__flags); 
# 2462
__os.fill(__fill); 
# 2463
__os.precision(__precision); 
# 2464
return __os; 
# 2465
} 
# 2467
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2469
operator>>(basic_istream< _CharT, _Traits>  &__is, gamma_distribution< _RealType>  &
# 2470
__x) 
# 2471
{ 
# 2472
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2473
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2475
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2476
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2478
_RealType __alpha_val, __beta_val; 
# 2479
((__is >> __alpha_val) >> __beta_val) >> (__x._M_nd); 
# 2480
__x.param(typename gamma_distribution< _RealType> ::param_type(__alpha_val, __beta_val)); 
# 2483
__is.flags(__flags); 
# 2484
return __is; 
# 2485
} 
# 2488
template< class _RealType> 
# 2489
template< class _UniformRandomNumberGenerator> typename weibull_distribution< _RealType> ::result_type 
# 2492
weibull_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2493
__p) 
# 2494
{ 
# 2496
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2497
return __p.b() * std::pow(-std::log(((result_type)1) - __aurng()), ((result_type)1) / __p.a()); 
# 2499
} 
# 2501
template< class _RealType> 
# 2502
template< class _ForwardIterator, class 
# 2503
_UniformRandomNumberGenerator> void 
# 2506
weibull_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2507
__urng, const param_type &
# 2508
__p) 
# 2509
{ 
# 2512
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2513
auto __inv_a = ((result_type)1) / __p.a(); 
# 2515
while (__f != __t) { 
# 2516
(*(__f++)) = (__p.b() * std::pow(-std::log(((result_type)1) - __aurng()), __inv_a)); }  
# 2518
} 
# 2520
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2522
operator<<(basic_ostream< _CharT, _Traits>  &__os, const weibull_distribution< _RealType>  &
# 2523
__x) 
# 2524
{ 
# 2525
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2526
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2528
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2529
const _CharT __fill = __os.fill(); 
# 2530
const streamsize __precision = __os.precision(); 
# 2531
const _CharT __space = __os.widen(' '); 
# 2532
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2533
__os.fill(__space); 
# 2534
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2536
((__os << __x.a()) << __space) << __x.b(); 
# 2538
__os.flags(__flags); 
# 2539
__os.fill(__fill); 
# 2540
__os.precision(__precision); 
# 2541
return __os; 
# 2542
} 
# 2544
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2546
operator>>(basic_istream< _CharT, _Traits>  &__is, weibull_distribution< _RealType>  &
# 2547
__x) 
# 2548
{ 
# 2549
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2550
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2552
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2553
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2555
_RealType __a, __b; 
# 2556
(__is >> __a) >> __b; 
# 2557
__x.param(typename weibull_distribution< _RealType> ::param_type(__a, __b)); 
# 2560
__is.flags(__flags); 
# 2561
return __is; 
# 2562
} 
# 2565
template< class _RealType> 
# 2566
template< class _UniformRandomNumberGenerator> typename extreme_value_distribution< _RealType> ::result_type 
# 2569
extreme_value_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2570
__p) 
# 2571
{ 
# 2573
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2574
return __p.a() - (__p.b() * std::log(-std::log(((result_type)1) - __aurng()))); 
# 2576
} 
# 2578
template< class _RealType> 
# 2579
template< class _ForwardIterator, class 
# 2580
_UniformRandomNumberGenerator> void 
# 2583
extreme_value_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2584
__urng, const param_type &
# 2585
__p) 
# 2586
{ 
# 2589
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2591
while (__f != __t) { 
# 2592
(*(__f++)) = (__p.a() - (__p.b() * std::log(-std::log(((result_type)1) - __aurng())))); }  
# 2594
} 
# 2596
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2598
operator<<(basic_ostream< _CharT, _Traits>  &__os, const extreme_value_distribution< _RealType>  &
# 2599
__x) 
# 2600
{ 
# 2601
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2602
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2604
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2605
const _CharT __fill = __os.fill(); 
# 2606
const streamsize __precision = __os.precision(); 
# 2607
const _CharT __space = __os.widen(' '); 
# 2608
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2609
__os.fill(__space); 
# 2610
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2612
((__os << __x.a()) << __space) << __x.b(); 
# 2614
__os.flags(__flags); 
# 2615
__os.fill(__fill); 
# 2616
__os.precision(__precision); 
# 2617
return __os; 
# 2618
} 
# 2620
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2622
operator>>(basic_istream< _CharT, _Traits>  &__is, extreme_value_distribution< _RealType>  &
# 2623
__x) 
# 2624
{ 
# 2625
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2626
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2628
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2629
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2631
_RealType __a, __b; 
# 2632
(__is >> __a) >> __b; 
# 2633
__x.param(typename extreme_value_distribution< _RealType> ::param_type(__a, __b)); 
# 2636
__is.flags(__flags); 
# 2637
return __is; 
# 2638
} 
# 2641
template< class _IntType> void 
# 2644
discrete_distribution< _IntType> ::param_type::_M_initialize() 
# 2645
{ 
# 2646
if ((_M_prob).size() < (2)) 
# 2647
{ 
# 2648
(_M_prob).clear(); 
# 2649
return; 
# 2650
}  
# 2652
const double __sum = std::accumulate((_M_prob).begin(), (_M_prob).end(), (0.0)); 
# 2655
__detail::__normalize((_M_prob).begin(), (_M_prob).end(), (_M_prob).begin(), __sum); 
# 2658
(_M_cp).reserve((_M_prob).size()); 
# 2659
std::partial_sum((_M_prob).begin(), (_M_prob).end(), std::back_inserter(_M_cp)); 
# 2662
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2663
} 
# 2665
template< class _IntType> 
# 2666
template< class _Func> 
# 2668
discrete_distribution< _IntType> ::param_type::param_type(size_t __nw, double __xmin, double __xmax, _Func __fw) : _M_prob(), _M_cp() 
# 2670
{ 
# 2671
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2672
const double __delta = (__xmax - __xmin) / __n; 
# 2674
(_M_prob).reserve(__n); 
# 2675
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2676
(_M_prob).push_back(__fw((__xmin + (__k * __delta)) + ((0.5) * __delta))); }  
# 2678
_M_initialize(); 
# 2679
} 
# 2681
template< class _IntType> 
# 2682
template< class _UniformRandomNumberGenerator> typename discrete_distribution< _IntType> ::result_type 
# 2685
discrete_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2686
__param) 
# 2687
{ 
# 2688
if ((__param._M_cp).empty()) { 
# 2689
return (result_type)0; }  
# 2692
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2694
const double __p = __aurng(); 
# 2695
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2698
return __pos - (__param._M_cp).begin(); 
# 2699
} 
# 2701
template< class _IntType> 
# 2702
template< class _ForwardIterator, class 
# 2703
_UniformRandomNumberGenerator> void 
# 2706
discrete_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2707
__urng, const param_type &
# 2708
__param) 
# 2709
{ 
# 2712
if ((__param._M_cp).empty()) 
# 2713
{ 
# 2714
while (__f != __t) { 
# 2715
(*(__f++)) = ((result_type)0); }  
# 2716
return; 
# 2717
}  
# 2720
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2722
while (__f != __t) 
# 2723
{ 
# 2724
const double __p = __aurng(); 
# 2725
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2728
(*(__f++)) = (__pos - (__param._M_cp).begin()); 
# 2729
}  
# 2730
} 
# 2732
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2734
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discrete_distribution< _IntType>  &
# 2735
__x) 
# 2736
{ 
# 2737
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2738
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2740
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2741
const _CharT __fill = __os.fill(); 
# 2742
const streamsize __precision = __os.precision(); 
# 2743
const _CharT __space = __os.widen(' '); 
# 2744
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2745
__os.fill(__space); 
# 2746
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 2748
vector< double>  __prob = __x.probabilities(); 
# 2749
__os << __prob.size(); 
# 2750
for (auto __dit = __prob.begin(); (__dit != (__prob.end())); (++__dit)) { 
# 2751
(__os << __space) << (*__dit); }  
# 2753
__os.flags(__flags); 
# 2754
__os.fill(__fill); 
# 2755
__os.precision(__precision); 
# 2756
return __os; 
# 2757
} 
# 2759
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2761
operator>>(basic_istream< _CharT, _Traits>  &__is, discrete_distribution< _IntType>  &
# 2762
__x) 
# 2763
{ 
# 2764
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2765
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2767
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2768
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2770
size_t __n; 
# 2771
__is >> __n; 
# 2773
vector< double>  __prob_vec; 
# 2774
__prob_vec.reserve(__n); 
# 2775
for (; __n != (0); --__n) 
# 2776
{ 
# 2777
double __prob; 
# 2778
__is >> __prob; 
# 2779
__prob_vec.push_back(__prob); 
# 2780
}  
# 2782
__x.param(typename discrete_distribution< _IntType> ::param_type(__prob_vec.begin(), __prob_vec.end())); 
# 2785
__is.flags(__flags); 
# 2786
return __is; 
# 2787
} 
# 2790
template< class _RealType> void 
# 2793
piecewise_constant_distribution< _RealType> ::param_type::_M_initialize() 
# 2794
{ 
# 2795
if (((_M_int).size() < 2) || (((_M_int).size() == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)))) 
# 2799
{ 
# 2800
(_M_int).clear(); 
# 2801
(_M_den).clear(); 
# 2802
return; 
# 2803
}  
# 2805
const double __sum = std::accumulate((_M_den).begin(), (_M_den).end(), (0.0)); 
# 2808
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 2811
(_M_cp).reserve((_M_den).size()); 
# 2812
std::partial_sum((_M_den).begin(), (_M_den).end(), std::back_inserter(_M_cp)); 
# 2816
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2818
for (size_t __k = (0); __k < (_M_den).size(); ++__k) { 
# 2819
(_M_den)[__k] /= (((_M_int)[__k + (1)]) - ((_M_int)[__k])); }  
# 2820
} 
# 2822
template< class _RealType> 
# 2823
template< class _InputIteratorB, class _InputIteratorW> 
# 2825
piecewise_constant_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 2826
__bend, _InputIteratorW 
# 2827
__wbegin) : _M_int(), _M_den(), _M_cp() 
# 2829
{ 
# 2830
if (__bbegin != __bend) 
# 2831
{ 
# 2832
for (; ;) 
# 2833
{ 
# 2834
(_M_int).push_back(*__bbegin); 
# 2835
++__bbegin; 
# 2836
if (__bbegin == __bend) { 
# 2837
break; }  
# 2839
(_M_den).push_back(*__wbegin); 
# 2840
++__wbegin; 
# 2841
}  
# 2842
}  
# 2844
_M_initialize(); 
# 2845
} 
# 2847
template< class _RealType> 
# 2848
template< class _Func> 
# 2850
piecewise_constant_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2852
{ 
# 2853
(_M_int).reserve(__bl.size()); 
# 2854
for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter) { 
# 2855
(_M_int).push_back(*__biter); }  
# 2857
(_M_den).reserve((_M_int).size() - 1); 
# 2858
for (size_t __k = (0); __k < ((_M_int).size() - 1); ++__k) { 
# 2859
(_M_den).push_back(__fw((0.5) * (((_M_int)[__k + (1)]) + ((_M_int)[__k])))); }  
# 2861
_M_initialize(); 
# 2862
} 
# 2864
template< class _RealType> 
# 2865
template< class _Func> 
# 2867
piecewise_constant_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2869
{ 
# 2870
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2871
const _RealType __delta = (__xmax - __xmin) / __n; 
# 2873
(_M_int).reserve(__n + (1)); 
# 2874
for (size_t __k = (0); __k <= __nw; ++__k) { 
# 2875
(_M_int).push_back(__xmin + (__k * __delta)); }  
# 2877
(_M_den).reserve(__n); 
# 2878
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2879
(_M_den).push_back(__fw(((_M_int)[__k]) + ((0.5) * __delta))); }  
# 2881
_M_initialize(); 
# 2882
} 
# 2884
template< class _RealType> 
# 2885
template< class _UniformRandomNumberGenerator> typename piecewise_constant_distribution< _RealType> ::result_type 
# 2888
piecewise_constant_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2889
__param) 
# 2890
{ 
# 2892
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2894
const double __p = __aurng(); 
# 2895
if ((__param._M_cp).empty()) { 
# 2896
return __p; }  
# 2898
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2900
const size_t __i = __pos - (__param._M_cp).begin(); 
# 2902
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 2904
return ((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i])); 
# 2905
} 
# 2907
template< class _RealType> 
# 2908
template< class _ForwardIterator, class 
# 2909
_UniformRandomNumberGenerator> void 
# 2912
piecewise_constant_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2913
__urng, const param_type &
# 2914
__param) 
# 2915
{ 
# 2918
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2920
if ((__param._M_cp).empty()) 
# 2921
{ 
# 2922
while (__f != __t) { 
# 2923
(*(__f++)) = __aurng(); }  
# 2924
return; 
# 2925
}  
# 2927
while (__f != __t) 
# 2928
{ 
# 2929
const double __p = __aurng(); 
# 2931
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2933
const size_t __i = __pos - (__param._M_cp).begin(); 
# 2935
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 2937
(*(__f++)) = (((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i]))); 
# 2939
}  
# 2940
} 
# 2942
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2944
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_constant_distribution< _RealType>  &
# 2945
__x) 
# 2946
{ 
# 2947
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2948
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2950
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2951
const _CharT __fill = __os.fill(); 
# 2952
const streamsize __precision = __os.precision(); 
# 2953
const _CharT __space = __os.widen(' '); 
# 2954
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2955
__os.fill(__space); 
# 2956
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2958
vector< _RealType>  __int = __x.intervals(); 
# 2959
__os << (__int.size() - 1); 
# 2961
for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit) { 
# 2962
(__os << __space) << (*__xit); }  
# 2964
vector< double>  __den = __x.densities(); 
# 2965
for (auto __dit = __den.begin(); (__dit != (__den.end())); (++__dit)) { 
# 2966
(__os << __space) << (*__dit); }  
# 2968
__os.flags(__flags); 
# 2969
__os.fill(__fill); 
# 2970
__os.precision(__precision); 
# 2971
return __os; 
# 2972
} 
# 2974
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2976
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_constant_distribution< _RealType>  &
# 2977
__x) 
# 2978
{ 
# 2979
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2980
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2982
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2983
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2985
size_t __n; 
# 2986
__is >> __n; 
# 2988
vector< _RealType>  __int_vec; 
# 2989
__int_vec.reserve(__n + (1)); 
# 2990
for (size_t __i = (0); __i <= __n; ++__i) 
# 2991
{ 
# 2992
_RealType __int; 
# 2993
__is >> __int; 
# 2994
__int_vec.push_back(__int); 
# 2995
}  
# 2997
vector< double>  __den_vec; 
# 2998
__den_vec.reserve(__n); 
# 2999
for (size_t __i = (0); __i < __n; ++__i) 
# 3000
{ 
# 3001
double __den; 
# 3002
__is >> __den; 
# 3003
__den_vec.push_back(__den); 
# 3004
}  
# 3006
__x.param(typename piecewise_constant_distribution< _RealType> ::param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin())); 
# 3009
__is.flags(__flags); 
# 3010
return __is; 
# 3011
} 
# 3014
template< class _RealType> void 
# 3017
piecewise_linear_distribution< _RealType> ::param_type::_M_initialize() 
# 3018
{ 
# 3019
if (((_M_int).size() < 2) || (((_M_int).size() == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)) && ((_M_den)[0] == (_M_den)[1]))) 
# 3024
{ 
# 3025
(_M_int).clear(); 
# 3026
(_M_den).clear(); 
# 3027
return; 
# 3028
}  
# 3030
double __sum = (0.0); 
# 3031
(_M_cp).reserve((_M_int).size() - 1); 
# 3032
(_M_m).reserve((_M_int).size() - 1); 
# 3033
for (size_t __k = (0); __k < ((_M_int).size() - 1); ++__k) 
# 3034
{ 
# 3035
const _RealType __delta = ((_M_int)[__k + (1)]) - ((_M_int)[__k]); 
# 3036
__sum += (((0.5) * ((_M_den)[__k + (1)] + (_M_den)[__k])) * __delta); 
# 3037
(_M_cp).push_back(__sum); 
# 3038
(_M_m).push_back(((_M_den)[__k + (1)] - (_M_den)[__k]) / __delta); 
# 3039
}  
# 3042
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 3045
__detail::__normalize((_M_cp).begin(), (_M_cp).end(), (_M_cp).begin(), __sum); 
# 3047
__detail::__normalize((_M_m).begin(), (_M_m).end(), (_M_m).begin(), __sum); 
# 3050
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 3051
} 
# 3053
template< class _RealType> 
# 3054
template< class _InputIteratorB, class _InputIteratorW> 
# 3056
piecewise_linear_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 3057
__bend, _InputIteratorW 
# 3058
__wbegin) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3060
{ 
# 3061
for (; __bbegin != __bend; (++__bbegin), (++__wbegin)) 
# 3062
{ 
# 3063
(_M_int).push_back(*__bbegin); 
# 3064
(_M_den).push_back(*__wbegin); 
# 3065
}  
# 3067
_M_initialize(); 
# 3068
} 
# 3070
template< class _RealType> 
# 3071
template< class _Func> 
# 3073
piecewise_linear_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3075
{ 
# 3076
(_M_int).reserve(__bl.size()); 
# 3077
(_M_den).reserve(__bl.size()); 
# 3078
for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter) 
# 3079
{ 
# 3080
(_M_int).push_back(*__biter); 
# 3081
(_M_den).push_back(__fw(*__biter)); 
# 3082
}  
# 3084
_M_initialize(); 
# 3085
} 
# 3087
template< class _RealType> 
# 3088
template< class _Func> 
# 3090
piecewise_linear_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3092
{ 
# 3093
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 3094
const _RealType __delta = (__xmax - __xmin) / __n; 
# 3096
(_M_int).reserve(__n + (1)); 
# 3097
(_M_den).reserve(__n + (1)); 
# 3098
for (size_t __k = (0); __k <= __nw; ++__k) 
# 3099
{ 
# 3100
(_M_int).push_back(__xmin + (__k * __delta)); 
# 3101
(_M_den).push_back(__fw(((_M_int)[__k]) + __delta)); 
# 3102
}  
# 3104
_M_initialize(); 
# 3105
} 
# 3107
template< class _RealType> 
# 3108
template< class _UniformRandomNumberGenerator> typename piecewise_linear_distribution< _RealType> ::result_type 
# 3111
piecewise_linear_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3112
__param) 
# 3113
{ 
# 3115
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3117
const double __p = __aurng(); 
# 3118
if ((__param._M_cp).empty()) { 
# 3119
return __p; }  
# 3121
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 3123
const size_t __i = __pos - (__param._M_cp).begin(); 
# 3125
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 3127
const double __a = (0.5) * ((__param._M_m)[__i]); 
# 3128
const double __b = (__param._M_den)[__i]; 
# 3129
const double __cm = (__p - __pref); 
# 3131
_RealType __x = (__param._M_int)[__i]; 
# 3132
if (__a == (0)) { 
# 3133
__x += (__cm / __b); } else 
# 3135
{ 
# 3136
const double __d = ((__b * __b) + (((4.0) * __a) * __cm)); 
# 3137
__x += (((0.5) * (std::sqrt(__d) - __b)) / __a); 
# 3138
}  
# 3140
return __x; 
# 3141
} 
# 3143
template< class _RealType> 
# 3144
template< class _ForwardIterator, class 
# 3145
_UniformRandomNumberGenerator> void 
# 3148
piecewise_linear_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3149
__urng, const param_type &
# 3150
__param) 
# 3151
{ 
# 3154
while (__f != __t) { 
# 3155
(*(__f++)) = this->operator()(__urng, __param); }  
# 3156
} 
# 3158
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 3160
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_linear_distribution< _RealType>  &
# 3161
__x) 
# 3162
{ 
# 3163
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 3164
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 3166
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 3167
const _CharT __fill = __os.fill(); 
# 3168
const streamsize __precision = __os.precision(); 
# 3169
const _CharT __space = __os.widen(' '); 
# 3170
__os.flags(__ios_base::scientific | __ios_base::left); 
# 3171
__os.fill(__space); 
# 3172
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 3174
vector< _RealType>  __int = __x.intervals(); 
# 3175
__os << (__int.size() - 1); 
# 3177
for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit) { 
# 3178
(__os << __space) << (*__xit); }  
# 3180
vector< double>  __den = __x.densities(); 
# 3181
for (auto __dit = __den.begin(); (__dit != (__den.end())); (++__dit)) { 
# 3182
(__os << __space) << (*__dit); }  
# 3184
__os.flags(__flags); 
# 3185
__os.fill(__fill); 
# 3186
__os.precision(__precision); 
# 3187
return __os; 
# 3188
} 
# 3190
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3192
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_linear_distribution< _RealType>  &
# 3193
__x) 
# 3194
{ 
# 3195
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 3196
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 3198
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 3199
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 3201
size_t __n; 
# 3202
__is >> __n; 
# 3204
vector< _RealType>  __int_vec; 
# 3205
__int_vec.reserve(__n + (1)); 
# 3206
for (size_t __i = (0); __i <= __n; ++__i) 
# 3207
{ 
# 3208
_RealType __int; 
# 3209
__is >> __int; 
# 3210
__int_vec.push_back(__int); 
# 3211
}  
# 3213
vector< double>  __den_vec; 
# 3214
__den_vec.reserve(__n + (1)); 
# 3215
for (size_t __i = (0); __i <= __n; ++__i) 
# 3216
{ 
# 3217
double __den; 
# 3218
__is >> __den; 
# 3219
__den_vec.push_back(__den); 
# 3220
}  
# 3222
__x.param(typename piecewise_linear_distribution< _RealType> ::param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin())); 
# 3225
__is.flags(__flags); 
# 3226
return __is; 
# 3227
} 
# 3230
template< class _IntType> 
# 3231
seed_seq::seed_seq(initializer_list< _IntType>  __il) 
# 3232
{ 
# 3233
for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter) { 
# 3234
(_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32> ::__value> (*__iter)); }  
# 3236
} 
# 3238
template< class _InputIterator> 
# 3239
seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end) 
# 3240
{ 
# 3241
for (_InputIterator __iter = __begin; __iter != __end; ++__iter) { 
# 3242
(_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32> ::__value> (*__iter)); }  
# 3244
} 
# 3246
template< class _RandomAccessIterator> void 
# 3248
seed_seq::generate(_RandomAccessIterator __begin, _RandomAccessIterator 
# 3249
__end) 
# 3250
{ 
# 3252
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _Type; 
# 3254
if (__begin == __end) { 
# 3255
return; }  
# 3257
std::fill(__begin, __end, (_Type)2341178251U); 
# 3259
const size_t __n = __end - __begin; 
# 3260
const size_t __s = (_M_v).size(); 
# 3261
const size_t __t = ((__n >= (623)) ? 11 : ((__n >= (68)) ? 7 : ((__n >= (39)) ? 5 : ((__n >= (7)) ? 3 : ((__n - (1)) / (2)))))); 
# 3266
const size_t __p = ((__n - __t) / (2)); 
# 3267
const size_t __q = (__p + __t); 
# 3268
const size_t __m = std::max((size_t)(__s + (1)), __n); 
# 3270
for (size_t __k = (0); __k < __m; ++__k) 
# 3271
{ 
# 3272
_Type __arg = ((__begin[__k % __n]) ^ (__begin[(__k + __p) % __n])) ^ (__begin[(__k - (1)) % __n]); 
# 3275
_Type __r1 = __arg ^ (__arg >> 27); 
# 3276
__r1 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32> ::__value> (1664525U * __r1); 
# 3278
_Type __r2 = __r1; 
# 3279
if (__k == (0)) { 
# 3280
__r2 += __s; } else { 
# 3281
if (__k <= __s) { 
# 3282
__r2 += ((__k % __n) + ((_M_v)[__k - (1)])); } else { 
# 3284
__r2 += (__k % __n); }  }  
# 3285
__r2 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32> ::__value> (__r2); 
# 3287
(__begin[(__k + __p) % __n]) += __r1; 
# 3288
(__begin[(__k + __q) % __n]) += __r2; 
# 3289
(__begin[__k % __n]) = __r2; 
# 3290
}  
# 3292
for (size_t __k = __m; __k < (__m + __n); ++__k) 
# 3293
{ 
# 3294
_Type __arg = ((__begin[__k % __n]) + (__begin[(__k + __p) % __n])) + (__begin[(__k - (1)) % __n]); 
# 3297
_Type __r3 = __arg ^ (__arg >> 27); 
# 3298
__r3 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32> ::__value> (1566083941U * __r3); 
# 3300
_Type __r4 = __r3 - (__k % __n); 
# 3301
__r4 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32> ::__value> (__r4); 
# 3303
(__begin[(__k + __p) % __n]) ^= __r3; 
# 3304
(__begin[(__k + __q) % __n]) ^= __r4; 
# 3305
(__begin[__k % __n]) = __r4; 
# 3306
}  
# 3307
} 
# 3309
template< class _RealType, size_t __bits, class 
# 3310
_UniformRandomNumberGenerator> _RealType 
# 3312
generate_canonical(_UniformRandomNumberGenerator &__urng) 
# 3313
{ 
# 3314
static_assert((std::template is_floating_point< _RealType> ::value), "template argument must be a floating point type");
# 3317
const size_t __b = std::min(static_cast< size_t>(std::template numeric_limits< _RealType> ::digits), __bits); 
# 3320
const long double __r = ((static_cast< long double>(__urng.max())) - (static_cast< long double>(__urng.min()))) + (1.0L); 
# 3322
const size_t __log2r = std::log(__r) / std::log((2.0L)); 
# 3323
const size_t __m = std::max< size_t> (1UL, ((__b + __log2r) - 1UL) / __log2r); 
# 3325
_RealType __ret; 
# 3326
_RealType __sum = ((_RealType)0); 
# 3327
_RealType __tmp = ((_RealType)1); 
# 3328
for (size_t __k = __m; __k != (0); --__k) 
# 3329
{ 
# 3330
__sum += (((_RealType)(__urng() - __urng.min())) * __tmp); 
# 3331
__tmp *= __r; 
# 3332
}  
# 3333
__ret = (__sum / __tmp); 
# 3334
if (__builtin_expect(__ret >= ((_RealType)1), 0)) 
# 3335
{ 
# 3337
__ret = std::nextafter((_RealType)1, (_RealType)0); 
# 3342
}  
# 3343
return __ret; 
# 3344
} 
# 3347
}
# 42 "/usr/include/c++/7/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 195 "/usr/include/c++/7/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline bool all_of(_IIter, _IIter, _Predicate); 
# 199
template< class _IIter, class _Predicate> inline bool any_of(_IIter, _IIter, _Predicate); 
# 204
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &); 
# 208
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare); 
# 224 "/usr/include/c++/7/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter); 
# 228
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2); 
# 233
template< class _IIter, class _OIter, class _Predicate> _OIter copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 237
template< class _IIter, class _Size, class _OIter> inline _OIter copy_n(_IIter, _Size, _OIter); 
# 245
template< class _FIter, class _Tp> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &); 
# 249
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &, _Compare); 
# 253
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &); 
# 257
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &); 
# 263
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2); 
# 267
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 275
template< class _IIter, class _Predicate> inline _IIter find_if_not(_IIter, _IIter, _Predicate); 
# 284
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2); 
# 288
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 292
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter); 
# 296
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare); 
# 301
template< class _RAIter> inline bool is_heap(_RAIter, _RAIter); 
# 305
template< class _RAIter, class _Compare> inline bool is_heap(_RAIter, _RAIter, _Compare); 
# 309
template< class _RAIter> inline _RAIter is_heap_until(_RAIter, _RAIter); 
# 313
template< class _RAIter, class _Compare> inline _RAIter is_heap_until(_RAIter, _RAIter, _Compare); 
# 317
template< class _IIter, class _Predicate> inline bool is_partitioned(_IIter, _IIter, _Predicate); 
# 321
template< class _FIter1, class _FIter2> inline bool is_permutation(_FIter1, _FIter1, _FIter2); 
# 325
template< class _FIter1, class _FIter2, class 
# 326
_BinaryPredicate> inline bool 
# 325
is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate); 
# 330
template< class _FIter> inline bool is_sorted(_FIter, _FIter); 
# 334
template< class _FIter, class _Compare> inline bool is_sorted(_FIter, _FIter, _Compare); 
# 338
template< class _FIter> inline _FIter is_sorted_until(_FIter, _FIter); 
# 342
template< class _FIter, class _Compare> inline _FIter is_sorted_until(_FIter, _FIter, _Compare); 
# 347
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2); 
# 351
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &); 
# 355
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 359
template< class _RAIter> inline void make_heap(_RAIter, _RAIter); 
# 363
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare); 
# 367
template< class _Tp> constexpr const _Tp &max(const _Tp &, const _Tp &); 
# 372
template< class _Tp, class _Compare> constexpr const _Tp &max(const _Tp &, const _Tp &, _Compare); 
# 380
template< class _Tp> constexpr const _Tp &min(const _Tp &, const _Tp &); 
# 385
template< class _Tp, class _Compare> constexpr const _Tp &min(const _Tp &, const _Tp &, _Compare); 
# 393
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &); 
# 398
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &, _Compare); 
# 403
template< class _FIter> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter); 
# 408
template< class _FIter, class _Compare> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter, _Compare); 
# 413
template< class _Tp> constexpr _Tp min(initializer_list< _Tp> ); 
# 418
template< class _Tp, class _Compare> constexpr _Tp min(initializer_list< _Tp> , _Compare); 
# 423
template< class _Tp> constexpr _Tp max(initializer_list< _Tp> ); 
# 428
template< class _Tp, class _Compare> constexpr _Tp max(initializer_list< _Tp> , _Compare); 
# 433
template< class _Tp> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> ); 
# 438
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> , _Compare); 
# 446
template< class _BIter> inline bool next_permutation(_BIter, _BIter); 
# 450
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare); 
# 455
template< class _IIter, class _Predicate> inline bool none_of(_IIter, _IIter, _Predicate); 
# 463
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter); 
# 467
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare); 
# 474
template< class _IIter, class _OIter1, class 
# 475
_OIter2, class _Predicate> pair< _OIter1, _OIter2>  
# 474
partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate); 
# 479
template< class _FIter, class _Predicate> _FIter partition_point(_FIter, _FIter, _Predicate); 
# 484
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter); 
# 488
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare); 
# 492
template< class _BIter> inline bool prev_permutation(_BIter, _BIter); 
# 496
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare); 
# 500
template< class _RAIter> inline void push_heap(_RAIter, _RAIter); 
# 504
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare); 
# 510
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &); 
# 514
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate); 
# 518
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &); 
# 522
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 528
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &); 
# 532
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &); 
# 538
template< class _BIter> inline void reverse(_BIter, _BIter); 
# 542
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter); 
# 546
inline namespace _V2 { 
# 548
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter); 
# 551
}
# 553
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter); 
# 565 "/usr/include/c++/7/bits/algorithmfwd.h" 3
template< class _RAIter, class _UGenerator> void shuffle(_RAIter, _RAIter, _UGenerator &&); 
# 570
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter); 
# 574
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare); 
# 578
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate); 
# 594 "/usr/include/c++/7/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2); 
# 600
template< class _FIter> inline _FIter unique(_FIter, _FIter); 
# 604
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate); 
# 610
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &); 
# 614
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 622
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter); 
# 626
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate); 
# 630
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &); 
# 634
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate); 
# 638
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2); 
# 642
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 646
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &); 
# 650
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2); 
# 654
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 658
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate); 
# 662
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct); 
# 666
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator); 
# 670
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator); 
# 674
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2); 
# 678
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 682
template< class _FIter> constexpr _FIter max_element(_FIter, _FIter); 
# 687
template< class _FIter, class _Compare> constexpr _FIter max_element(_FIter, _FIter, _Compare); 
# 692
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 696
template< class _IIter1, class _IIter2, class _OIter, class 
# 697
_Compare> inline _OIter 
# 696
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 701
template< class _FIter> constexpr _FIter min_element(_FIter, _FIter); 
# 706
template< class _FIter, class _Compare> constexpr _FIter min_element(_FIter, _FIter, _Compare); 
# 711
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2); 
# 715
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 719
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter); 
# 723
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare); 
# 727
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter); 
# 731
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare); 
# 735
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate); 
# 739
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter); 
# 743
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &&); 
# 752
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &); 
# 756
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &); 
# 760
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2); 
# 764
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 768
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &); 
# 772
template< class _FIter, class _Size, class _Tp, class 
# 773
_BinaryPredicate> inline _FIter 
# 772
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate); 
# 777
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 781
template< class _IIter1, class _IIter2, class _OIter, class 
# 782
_Compare> inline _OIter 
# 781
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 786
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 790
template< class _IIter1, class _IIter2, class _OIter, class 
# 791
_Compare> inline _OIter 
# 790
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 795
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 799
template< class _IIter1, class _IIter2, class _OIter, class 
# 800
_Compare> inline _OIter 
# 799
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 805
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 809
template< class _IIter1, class _IIter2, class _OIter, class 
# 810
_Compare> inline _OIter 
# 809
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 814
template< class _RAIter> inline void sort(_RAIter, _RAIter); 
# 818
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare); 
# 822
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter); 
# 826
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare); 
# 830
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation); 
# 834
template< class _IIter1, class _IIter2, class _OIter, class 
# 835
_BinaryOperation> _OIter 
# 834
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation); 
# 839
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter); 
# 843
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate); 
# 848
}
# 62 "/usr/include/c++/7/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _RandomAccessIterator, class _Distance, class 
# 72
_Compare> _Distance 
# 74
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare &
# 75
__comp) 
# 76
{ 
# 77
_Distance __parent = (0); 
# 78
for (_Distance __child = (1); __child < __n; ++__child) 
# 79
{ 
# 80
if (__comp(__first + __parent, __first + __child)) { 
# 81
return __child; }  
# 82
if ((__child & 1) == 0) { 
# 83
++__parent; }  
# 84
}  
# 85
return __n; 
# 86
} 
# 90
template< class _RandomAccessIterator, class _Distance> inline bool 
# 92
__is_heap(_RandomAccessIterator __first, _Distance __n) 
# 93
{ 
# 94
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 95
return std::__is_heap_until(__first, __n, __comp) == __n; 
# 96
} 
# 98
template< class _RandomAccessIterator, class _Compare, class 
# 99
_Distance> inline bool 
# 101
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n) 
# 102
{ 
# 103
typedef __decltype(__comp) _Cmp; 
# 104
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 105
return std::__is_heap_until(__first, __n, __cmp) == __n; 
# 106
} 
# 108
template< class _RandomAccessIterator> inline bool 
# 110
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 111
{ return std::__is_heap(__first, std::distance(__first, __last)); } 
# 113
template< class _RandomAccessIterator, class _Compare> inline bool 
# 115
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 116
__comp) 
# 117
{ 
# 118
return std::__is_heap(__first, std::move(__comp), std::distance(__first, __last)); 
# 120
} 
# 125
template< class _RandomAccessIterator, class _Distance, class _Tp, class 
# 126
_Compare> void 
# 128
__push_heap(_RandomAccessIterator __first, _Distance 
# 129
__holeIndex, _Distance __topIndex, _Tp __value, _Compare &
# 130
__comp) 
# 131
{ 
# 132
_Distance __parent = (__holeIndex - 1) / 2; 
# 133
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value)) 
# 134
{ 
# 135
(*(__first + __holeIndex)) = std::move(*(__first + __parent)); 
# 136
__holeIndex = __parent; 
# 137
__parent = ((__holeIndex - 1) / 2); 
# 138
}  
# 139
(*(__first + __holeIndex)) = std::move(__value); 
# 140
} 
# 152 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 154
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 155
{ 
# 157
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 159
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 165
; 
# 166
; 
# 167
; 
# 169
__gnu_cxx::__ops::_Iter_less_val __comp; 
# 170
_ValueType __value = std::move(*(__last - 1)); 
# 171
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __comp); 
# 173
} 
# 187 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 189
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 190
__comp) 
# 191
{ 
# 193
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 195
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 200
; 
# 201
; 
# 202
; 
# 205
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 206
_ValueType __value = std::move(*(__last - 1)); 
# 207
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __cmp); 
# 209
} 
# 211
template< class _RandomAccessIterator, class _Distance, class 
# 212
_Tp, class _Compare> void 
# 214
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance 
# 215
__len, _Tp __value, _Compare __comp) 
# 216
{ 
# 217
const _Distance __topIndex = __holeIndex; 
# 218
_Distance __secondChild = __holeIndex; 
# 219
while (__secondChild < ((__len - 1) / 2)) 
# 220
{ 
# 221
__secondChild = (2 * (__secondChild + 1)); 
# 222
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) { 
# 224
__secondChild--; }  
# 225
(*(__first + __holeIndex)) = std::move(*(__first + __secondChild)); 
# 226
__holeIndex = __secondChild; 
# 227
}  
# 228
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2))) 
# 229
{ 
# 230
__secondChild = (2 * (__secondChild + 1)); 
# 231
(*(__first + __holeIndex)) = std::move(*(__first + (__secondChild - 1))); 
# 233
__holeIndex = (__secondChild - 1); 
# 234
}  
# 236
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 237
std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __cmp); 
# 239
} 
# 241
template< class _RandomAccessIterator, class _Compare> inline void 
# 243
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator 
# 244
__result, _Compare &__comp) 
# 245
{ 
# 247
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 249
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 251
_ValueType __value = std::move(*__result); 
# 252
(*__result) = std::move(*__first); 
# 253
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), std::move(__value), __comp); 
# 256
} 
# 269 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 271
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 272
{ 
# 278
; 
# 279
; 
# 280
; 
# 281
; 
# 283
if ((__last - __first) > 1) 
# 284
{ 
# 285
--__last; 
# 286
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 287
std::__pop_heap(__first, __last, __last, __comp); 
# 288
}  
# 289
} 
# 302 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 304
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator 
# 305
__last, _Compare __comp) 
# 306
{ 
# 310
; 
# 311
; 
# 312
; 
# 313
; 
# 315
if ((__last - __first) > 1) 
# 316
{ 
# 317
typedef __decltype(__comp) _Cmp; 
# 318
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 319
--__last; 
# 320
std::__pop_heap(__first, __last, __last, __cmp); 
# 321
}  
# 322
} 
# 324
template< class _RandomAccessIterator, class _Compare> void 
# 326
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 327
__comp) 
# 328
{ 
# 330
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 332
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 334
if ((__last - __first) < 2) { 
# 335
return; }  
# 337
const _DistanceType __len = __last - __first; 
# 338
_DistanceType __parent = (__len - 2) / 2; 
# 339
while (true) 
# 340
{ 
# 341
_ValueType __value = std::move(*(__first + __parent)); 
# 342
std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp); 
# 344
if (__parent == 0) { 
# 345
return; }  
# 346
__parent--; 
# 347
}  
# 348
} 
# 358 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 360
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 361
{ 
# 367
; 
# 368
; 
# 370
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 371
std::__make_heap(__first, __last, __comp); 
# 372
} 
# 384 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 386
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 387
__comp) 
# 388
{ 
# 392
; 
# 393
; 
# 395
typedef __decltype(__comp) _Cmp; 
# 396
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 397
std::__make_heap(__first, __last, __cmp); 
# 398
} 
# 400
template< class _RandomAccessIterator, class _Compare> void 
# 402
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 403
__comp) 
# 404
{ 
# 405
while ((__last - __first) > 1) 
# 406
{ 
# 407
--__last; 
# 408
std::__pop_heap(__first, __last, __last, __comp); 
# 409
}  
# 410
} 
# 420 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 422
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 423
{ 
# 429
; 
# 430
; 
# 431
; 
# 433
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 434
std::__sort_heap(__first, __last, __comp); 
# 435
} 
# 447 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 449
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 450
__comp) 
# 451
{ 
# 455
; 
# 456
; 
# 457
; 
# 459
typedef __decltype(__comp) _Cmp; 
# 460
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 461
std::__sort_heap(__first, __last, __cmp); 
# 462
} 
# 475 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline _RandomAccessIterator 
# 477
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 478
{ 
# 484
; 
# 485
; 
# 487
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 488
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __comp); 
# 490
} 
# 503 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 505
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 506
__comp) 
# 507
{ 
# 511
; 
# 512
; 
# 514
typedef __decltype(__comp) _Cmp; 
# 515
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 516
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __cmp); 
# 518
} 
# 527 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline bool 
# 529
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 530
{ return std::is_heap_until(__first, __last) == __last; } 
# 540 "/usr/include/c++/7/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline bool 
# 542
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 543
__comp) 
# 544
{ 
# 548
; 
# 549
; 
# 551
const auto __dist = std::distance(__first, __last); 
# 552
typedef __decltype(__comp) _Cmp; 
# 553
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 554
return std::__is_heap_until(__first, __dist, __cmp) == __dist; 
# 555
} 
# 559
}
# 62 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
template< class _Tp> pair< _Tp *, long>  
# 85
get_temporary_buffer(ptrdiff_t __len) noexcept 
# 86
{ 
# 87
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits_integer< streamsize> ::__max / sizeof(_Tp)); 
# 89
if (__len > __max) { 
# 90
__len = __max; }  
# 92
while (__len > (0)) 
# 93
{ 
# 94
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow)); 
# 96
if (__tmp != 0) { 
# 97
return pair< _Tp *, long> (__tmp, __len); }  
# 98
__len /= (2); 
# 99
}  
# 100
return pair< _Tp *, ptrdiff_t> (static_cast< _Tp *>(0), 0); 
# 101
} 
# 110 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
template< class _Tp> inline void 
# 112
return_temporary_buffer(_Tp *__p) 
# 113
{ ::operator delete(__p, std::nothrow); } 
# 121
template< class _ForwardIterator, class _Tp> 
# 122
class _Temporary_buffer { 
# 128
public: typedef _Tp value_type; 
# 129
typedef value_type *pointer; 
# 130
typedef pointer iterator; 
# 131
typedef ptrdiff_t size_type; 
# 134
protected: size_type _M_original_len; 
# 135
size_type _M_len; 
# 136
pointer _M_buffer; 
# 141
public: size_type size() const 
# 142
{ return _M_len; } 
# 146
size_type requested_size() const 
# 147
{ return _M_original_len; } 
# 151
iterator begin() 
# 152
{ return _M_buffer; } 
# 156
iterator end() 
# 157
{ return (_M_buffer) + (_M_len); } 
# 163
_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last); 
# 165
~_Temporary_buffer() 
# 166
{ 
# 167
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len)); 
# 168
std::return_temporary_buffer(_M_buffer); 
# 169
} 
# 173
private: _Temporary_buffer(const _Temporary_buffer &); 
# 176
void operator=(const _Temporary_buffer &); 
# 177
}; 
# 180
template< bool > 
# 181
struct __uninitialized_construct_buf_dispatch { 
# 183
template< class _Pointer, class _ForwardIterator> static void 
# 185
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator 
# 186
__seed) 
# 187
{ 
# 188
if (__first == __last) { 
# 189
return; }  
# 191
_Pointer __cur = __first; 
# 192
try 
# 193
{ 
# 194
std::_Construct(std::__addressof(*__first), std::move(*__seed)); 
# 196
_Pointer __prev = __cur; 
# 197
++__cur; 
# 198
for (; __cur != __last; (++__cur), (++__prev)) { 
# 199
std::_Construct(std::__addressof(*__cur), std::move(*__prev)); }  
# 201
(*__seed) = std::move(*__prev); 
# 202
} 
# 203
catch (...) 
# 204
{ 
# 205
std::_Destroy(__first, __cur); 
# 206
throw; 
# 207
}  
# 208
} 
# 209
}; 
# 212
template<> struct __uninitialized_construct_buf_dispatch< true>  { 
# 214
template< class _Pointer, class _ForwardIterator> static void 
# 216
__ucr(_Pointer, _Pointer, _ForwardIterator) { } 
# 217
}; 
# 229 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> inline void 
# 231
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator 
# 232
__seed) 
# 233
{ 
# 235
typedef typename iterator_traits< _Pointer> ::value_type _ValueType; 
# 237
std::template __uninitialized_construct_buf_dispatch< __has_trivial_constructor(_ValueType)> ::__ucr(__first, __last, __seed); 
# 240
} 
# 242
template< class _ForwardIterator, class _Tp> 
# 244
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) : _M_original_len(std::distance(__first, __last)), _M_len((0)), _M_buffer((0)) 
# 247
{ 
# 248
try 
# 249
{ 
# 250
pair< _Tp *, long>  __p(std::get_temporary_buffer< value_type> (_M_original_len)); 
# 252
(_M_buffer) = (__p.first); 
# 253
(_M_len) = (__p.second); 
# 254
if (_M_buffer) { 
# 255
std::__uninitialized_construct_buf(_M_buffer, (_M_buffer) + (_M_len), __first); }  
# 257
} 
# 258
catch (...) 
# 259
{ 
# 260
std::return_temporary_buffer(_M_buffer); 
# 261
(_M_buffer) = 0; 
# 262
(_M_len) = (0); 
# 263
throw; 
# 264
}  
# 265
} 
# 268
}
# 71 "/usr/include/c++/7/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
template< class _Iterator, class _Compare> void 
# 78
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator 
# 79
__c, _Compare __comp) 
# 80
{ 
# 81
if (__comp(__a, __b)) 
# 82
{ 
# 83
if (__comp(__b, __c)) { 
# 84
std::iter_swap(__result, __b); } else { 
# 85
if (__comp(__a, __c)) { 
# 86
std::iter_swap(__result, __c); } else { 
# 88
std::iter_swap(__result, __a); }  }  
# 89
} else { 
# 90
if (__comp(__a, __c)) { 
# 91
std::iter_swap(__result, __a); } else { 
# 92
if (__comp(__b, __c)) { 
# 93
std::iter_swap(__result, __c); } else { 
# 95
std::iter_swap(__result, __b); }  }  }  
# 96
} 
# 99
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 101
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 102
__pred, input_iterator_tag) 
# 103
{ 
# 104
while ((__first != __last) && (!__pred(__first))) { 
# 105
++__first; }  
# 106
return __first; 
# 107
} 
# 110
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 112
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 113
__pred, random_access_iterator_tag) 
# 114
{ 
# 116
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 118
for (; __trip_count > 0; --__trip_count) 
# 119
{ 
# 120
if (__pred(__first)) { 
# 121
return __first; }  
# 122
++__first; 
# 124
if (__pred(__first)) { 
# 125
return __first; }  
# 126
++__first; 
# 128
if (__pred(__first)) { 
# 129
return __first; }  
# 130
++__first; 
# 132
if (__pred(__first)) { 
# 133
return __first; }  
# 134
++__first; 
# 135
}  
# 137
switch (__last - __first) 
# 138
{ 
# 139
case 3:  
# 140
if (__pred(__first)) { 
# 141
return __first; }  
# 142
++__first; 
# 143
case 2:  
# 144
if (__pred(__first)) { 
# 145
return __first; }  
# 146
++__first; 
# 147
case 1:  
# 148
if (__pred(__first)) { 
# 149
return __first; }  
# 150
++__first; 
# 151
case 0:  
# 152
default:  
# 153
return __last; 
# 154
}  
# 155
} 
# 157
template< class _Iterator, class _Predicate> inline _Iterator 
# 159
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 160
{ 
# 161
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 163
} 
# 166
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 168
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 169
__pred) 
# 170
{ 
# 171
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first)); 
# 174
} 
# 179
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator 
# 181
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred) 
# 182
{ 
# 183
for (; __len; (--__len), (++__first)) { 
# 184
if (!__pred(__first)) { 
# 185
break; }  }  
# 186
return __first; 
# 187
} 
# 202 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 203
_BinaryPredicate> _ForwardIterator1 
# 205
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 206
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 207
__predicate) 
# 208
{ 
# 210
if ((__first1 == __last1) || (__first2 == __last2)) { 
# 211
return __first1; }  
# 214
_ForwardIterator2 __p1(__first2); 
# 215
if ((++__p1) == __last2) { 
# 216
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }  
# 220
_ForwardIterator2 __p; 
# 221
_ForwardIterator1 __current = __first1; 
# 223
for (; ;) 
# 224
{ 
# 225
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); 
# 229
if (__first1 == __last1) { 
# 230
return __last1; }  
# 232
__p = __p1; 
# 233
__current = __first1; 
# 234
if ((++__current) == __last1) { 
# 235
return __last1; }  
# 237
while (__predicate(__current, __p)) 
# 238
{ 
# 239
if ((++__p) == __last2) { 
# 240
return __first1; }  
# 241
if ((++__current) == __last1) { 
# 242
return __last1; }  
# 243
}  
# 244
++__first1; 
# 245
}  
# 246
return __first1; 
# 247
} 
# 254
template< class _ForwardIterator, class _Integer, class 
# 255
_UnaryPredicate> _ForwardIterator 
# 257
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 258
__count, _UnaryPredicate __unary_pred, forward_iterator_tag) 
# 260
{ 
# 261
__first = std::__find_if(__first, __last, __unary_pred); 
# 262
while (__first != __last) 
# 263
{ 
# 265
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count; 
# 266
_ForwardIterator __i = __first; 
# 267
++__i; 
# 268
while ((__i != __last) && (__n != 1) && __unary_pred(__i)) 
# 269
{ 
# 270
++__i; 
# 271
--__n; 
# 272
}  
# 273
if (__n == 1) { 
# 274
return __first; }  
# 275
if (__i == __last) { 
# 276
return __last; }  
# 277
__first = std::__find_if(++__i, __last, __unary_pred); 
# 278
}  
# 279
return __last; 
# 280
} 
# 286
template< class _RandomAccessIter, class _Integer, class 
# 287
_UnaryPredicate> _RandomAccessIter 
# 289
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer 
# 290
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag) 
# 292
{ 
# 294
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType; 
# 296
_DistanceType __tailSize = __last - __first; 
# 297
_DistanceType __remainder = __count; 
# 299
while (__remainder <= __tailSize) 
# 300
{ 
# 301
__first += __remainder; 
# 302
__tailSize -= __remainder; 
# 305
_RandomAccessIter __backTrack = __first; 
# 306
while (__unary_pred(--__backTrack)) 
# 307
{ 
# 308
if ((--__remainder) == 0) { 
# 309
return (__first - __count); }  
# 310
}  
# 311
__remainder = ((__count + 1) - (__first - __backTrack)); 
# 312
}  
# 313
return __last; 
# 314
} 
# 316
template< class _ForwardIterator, class _Integer, class 
# 317
_UnaryPredicate> _ForwardIterator 
# 319
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 320
__count, _UnaryPredicate 
# 321
__unary_pred) 
# 322
{ 
# 323
if (__count <= 0) { 
# 324
return __first; }  
# 326
if (__count == 1) { 
# 327
return std::__find_if(__first, __last, __unary_pred); }  
# 329
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first)); 
# 331
} 
# 334
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 335
_BinaryPredicate> _ForwardIterator1 
# 337
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 338
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate 
# 340
__comp) 
# 341
{ 
# 342
if (__first2 == __last2) { 
# 343
return __last1; }  
# 345
_ForwardIterator1 __result = __last1; 
# 346
while (1) 
# 347
{ 
# 348
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp); 
# 350
if (__new_result == __last1) { 
# 351
return __result; } else 
# 353
{ 
# 354
__result = __new_result; 
# 355
__first1 = __new_result; 
# 356
++__first1; 
# 357
}  
# 358
}  
# 359
} 
# 362
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 363
_BinaryPredicate> _BidirectionalIterator1 
# 365
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 366
__last1, _BidirectionalIterator2 
# 367
__first2, _BidirectionalIterator2 
# 368
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate 
# 370
__comp) 
# 371
{ 
# 378
typedef reverse_iterator< _BidirectionalIterator1>  _RevIterator1; 
# 379
typedef reverse_iterator< _BidirectionalIterator2>  _RevIterator2; 
# 381
_RevIterator1 __rlast1(__first1); 
# 382
_RevIterator2 __rlast2(__first2); 
# 383
_RevIterator1 __rresult = std::__search(((reverse_iterator< _BidirectionalIterator1> )(__last1)), __rlast1, ((reverse_iterator< _BidirectionalIterator2> )(__last2)), __rlast2, __comp); 
# 387
if (__rresult == __rlast1) { 
# 388
return __last1; } else 
# 390
{ 
# 391
_BidirectionalIterator1 __result = __rresult.base(); 
# 392
std::advance(__result, -std::distance(__first2, __last2)); 
# 393
return __result; 
# 394
}  
# 395
} 
# 423 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 425
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 426
__first2, _ForwardIterator2 __last2) 
# 427
{ 
# 434
; 
# 435
; 
# 437
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 441
} 
# 471 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 472
_BinaryPredicate> inline _ForwardIterator1 
# 474
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 475
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 476
__comp) 
# 477
{ 
# 484
; 
# 485
; 
# 487
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 491
} 
# 506 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 508
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 509
{ return __last == std::find_if_not(__first, __last, __pred); } 
# 523 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 525
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 526
{ return __last == std::find_if(__first, __last, __pred); } 
# 541 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 543
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 544
{ return !std::none_of(__first, __last, __pred); } 
# 556 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 558
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 559
__pred) 
# 560
{ 
# 565
; 
# 566
return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 568
} 
# 580 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 582
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate 
# 583
__pred) 
# 584
{ 
# 585
__first = std::find_if_not(__first, __last, __pred); 
# 586
if (__first == __last) { 
# 587
return true; }  
# 588
++__first; 
# 589
return std::none_of(__first, __last, __pred); 
# 590
} 
# 601 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 603
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 604
__pred) 
# 605
{ 
# 612
; 
# 615
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 617
_DistanceType __len = std::distance(__first, __last); 
# 618
_DistanceType __half; 
# 619
_ForwardIterator __middle; 
# 621
while (__len > 0) 
# 622
{ 
# 623
__half = (__len >> 1); 
# 624
__middle = __first; 
# 625
std::advance(__middle, __half); 
# 626
if (__pred(*__middle)) 
# 627
{ 
# 628
__first = __middle; 
# 629
++__first; 
# 630
__len = ((__len - __half) - 1); 
# 631
} else { 
# 633
__len = __half; }  
# 634
}  
# 635
return __first; 
# 636
} 
# 639
template< class _InputIterator, class _OutputIterator, class 
# 640
_Predicate> _OutputIterator 
# 642
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 643
__result, _Predicate __pred) 
# 644
{ 
# 645
for (; __first != __last; ++__first) { 
# 646
if (!__pred(__first)) 
# 647
{ 
# 648
(*__result) = (*__first); 
# 649
++__result; 
# 650
}  }  
# 651
return __result; 
# 652
} 
# 668 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 670
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 671
__result, const _Tp &__value) 
# 672
{ 
# 679
; 
# 681
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 683
} 
# 700 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 701
_Predicate> inline _OutputIterator 
# 703
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 704
__result, _Predicate __pred) 
# 705
{ 
# 712
; 
# 714
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 716
} 
# 734 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 735
_Predicate> _OutputIterator 
# 737
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 738
__result, _Predicate __pred) 
# 739
{ 
# 746
; 
# 748
for (; __first != __last; ++__first) { 
# 749
if (__pred(*__first)) 
# 750
{ 
# 751
(*__result) = (*__first); 
# 752
++__result; 
# 753
}  }  
# 754
return __result; 
# 755
} 
# 757
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 759
__copy_n(_InputIterator __first, _Size __n, _OutputIterator 
# 760
__result, input_iterator_tag) 
# 761
{ 
# 762
if (__n > 0) 
# 763
{ 
# 764
while (true) 
# 765
{ 
# 766
(*__result) = (*__first); 
# 767
++__result; 
# 768
if ((--__n) > 0) { 
# 769
++__first; } else { 
# 771
break; }  
# 772
}  
# 773
}  
# 774
return __result; 
# 775
} 
# 777
template< class _RandomAccessIterator, class _Size, class 
# 778
_OutputIterator> inline _OutputIterator 
# 780
__copy_n(_RandomAccessIterator __first, _Size __n, _OutputIterator 
# 781
__result, random_access_iterator_tag) 
# 782
{ return std::copy(__first, __first + __n, __result); } 
# 797 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Size, class _OutputIterator> inline _OutputIterator 
# 799
copy_n(_InputIterator __first, _Size __n, _OutputIterator __result) 
# 800
{ 
# 806
return std::__copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 808
} 
# 825 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator1, class 
# 826
_OutputIterator2, class _Predicate> pair< _OutputIterator1, _OutputIterator2>  
# 828
partition_copy(_InputIterator __first, _InputIterator __last, _OutputIterator1 
# 829
__out_true, _OutputIterator2 __out_false, _Predicate 
# 830
__pred) 
# 831
{ 
# 840
; 
# 842
for (; __first != __last; ++__first) { 
# 843
if (__pred(*__first)) 
# 844
{ 
# 845
(*__out_true) = (*__first); 
# 846
++__out_true; 
# 847
} else 
# 849
{ 
# 850
(*__out_false) = (*__first); 
# 851
++__out_false; 
# 852
}  }  
# 854
return pair< _OutputIterator1, _OutputIterator2> (__out_true, __out_false); 
# 855
} 
# 858
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 860
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 861
__pred) 
# 862
{ 
# 863
__first = std::__find_if(__first, __last, __pred); 
# 864
if (__first == __last) { 
# 865
return __first; }  
# 866
_ForwardIterator __result = __first; 
# 867
++__first; 
# 868
for (; __first != __last; ++__first) { 
# 869
if (!__pred(__first)) 
# 870
{ 
# 871
(*__result) = std::move(*__first); 
# 872
++__result; 
# 873
}  }  
# 874
return __result; 
# 875
} 
# 894 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 896
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 897
__value) 
# 898
{ 
# 904
; 
# 906
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 908
} 
# 927 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 929
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 930
__pred) 
# 931
{ 
# 937
; 
# 939
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 941
} 
# 943
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 945
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 946
__binary_pred) 
# 947
{ 
# 948
if (__first == __last) { 
# 949
return __last; }  
# 950
_ForwardIterator __next = __first; 
# 951
while ((++__next) != __last) 
# 952
{ 
# 953
if (__binary_pred(__first, __next)) { 
# 954
return __first; }  
# 955
__first = __next; 
# 956
}  
# 957
return __last; 
# 958
} 
# 960
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 962
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 963
__binary_pred) 
# 964
{ 
# 966
__first = std::__adjacent_find(__first, __last, __binary_pred); 
# 967
if (__first == __last) { 
# 968
return __last; }  
# 971
_ForwardIterator __dest = __first; 
# 972
++__first; 
# 973
while ((++__first) != __last) { 
# 974
if (!__binary_pred(__dest, __first)) { 
# 975
(*(++__dest)) = std::move(*__first); }  }  
# 976
return ++__dest; 
# 977
} 
# 993 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 995
unique(_ForwardIterator __first, _ForwardIterator __last) 
# 996
{ 
# 1002
; 
# 1004
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1006
} 
# 1023 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 1025
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 1026
__binary_pred) 
# 1027
{ 
# 1034
; 
# 1036
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1038
} 
# 1046
template< class _ForwardIterator, class _OutputIterator, class 
# 1047
_BinaryPredicate> _OutputIterator 
# 1049
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator 
# 1050
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag) 
# 1052
{ 
# 1058
_ForwardIterator __next = __first; 
# 1059
(*__result) = (*__first); 
# 1060
while ((++__next) != __last) { 
# 1061
if (!__binary_pred(__first, __next)) 
# 1062
{ 
# 1063
__first = __next; 
# 1064
(*(++__result)) = (*__first); 
# 1065
}  }  
# 1066
return ++__result; 
# 1067
} 
# 1075
template< class _InputIterator, class _OutputIterator, class 
# 1076
_BinaryPredicate> _OutputIterator 
# 1078
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 1079
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag) 
# 1081
{ 
# 1087
typename iterator_traits< _InputIterator> ::value_type __value = (*__first); 
# 1089
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred); 
# 1091
(*__result) = __value; 
# 1092
while ((++__first) != __last) { 
# 1093
if (!__rebound_pred(__first, __value)) 
# 1094
{ 
# 1095
__value = (*__first); 
# 1096
(*(++__result)) = __value; 
# 1097
}  }  
# 1098
return ++__result; 
# 1099
} 
# 1107
template< class _InputIterator, class _ForwardIterator, class 
# 1108
_BinaryPredicate> _ForwardIterator 
# 1110
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1111
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag) 
# 1113
{ 
# 1118
(*__result) = (*__first); 
# 1119
while ((++__first) != __last) { 
# 1120
if (!__binary_pred(__result, __first)) { 
# 1121
(*(++__result)) = (*__first); }  }  
# 1122
return ++__result; 
# 1123
} 
# 1130
template< class _BidirectionalIterator> void 
# 1132
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) 
# 1134
{ 
# 1135
while (true) { 
# 1136
if ((__first == __last) || (__first == (--__last))) { 
# 1137
return; } else 
# 1139
{ 
# 1140
std::iter_swap(__first, __last); 
# 1141
++__first; 
# 1142
}  }  
# 1143
} 
# 1150
template< class _RandomAccessIterator> void 
# 1152
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 1154
{ 
# 1155
if (__first == __last) { 
# 1156
return; }  
# 1157
--__last; 
# 1158
while (__first < __last) 
# 1159
{ 
# 1160
std::iter_swap(__first, __last); 
# 1161
++__first; 
# 1162
--__last; 
# 1163
}  
# 1164
} 
# 1178 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 1180
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) 
# 1181
{ 
# 1185
; 
# 1186
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 1187
} 
# 1205 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator 
# 1207
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator 
# 1208
__result) 
# 1209
{ 
# 1215
; 
# 1217
while (__first != __last) 
# 1218
{ 
# 1219
--__last; 
# 1220
(*__result) = (*__last); 
# 1221
++__result; 
# 1222
}  
# 1223
return __result; 
# 1224
} 
# 1230
template< class _EuclideanRingElement> _EuclideanRingElement 
# 1232
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n) 
# 1233
{ 
# 1234
while (__n != 0) 
# 1235
{ 
# 1236
_EuclideanRingElement __t = __m % __n; 
# 1237
__m = __n; 
# 1238
__n = __t; 
# 1239
}  
# 1240
return __m; 
# 1241
} 
# 1243
inline namespace _V2 { 
# 1247
template< class _ForwardIterator> _ForwardIterator 
# 1249
__rotate(_ForwardIterator __first, _ForwardIterator 
# 1250
__middle, _ForwardIterator 
# 1251
__last, forward_iterator_tag) 
# 1253
{ 
# 1254
if (__first == __middle) { 
# 1255
return __last; } else { 
# 1256
if (__last == __middle) { 
# 1257
return __first; }  }  
# 1259
_ForwardIterator __first2 = __middle; 
# 1260
do 
# 1261
{ 
# 1262
std::iter_swap(__first, __first2); 
# 1263
++__first; 
# 1264
++__first2; 
# 1265
if (__first == __middle) { 
# 1266
__middle = __first2; }  
# 1267
} 
# 1268
while (__first2 != __last); 
# 1270
_ForwardIterator __ret = __first; 
# 1272
__first2 = __middle; 
# 1274
while (__first2 != __last) 
# 1275
{ 
# 1276
std::iter_swap(__first, __first2); 
# 1277
++__first; 
# 1278
++__first2; 
# 1279
if (__first == __middle) { 
# 1280
__middle = __first2; } else { 
# 1281
if (__first2 == __last) { 
# 1282
__first2 = __middle; }  }  
# 1283
}  
# 1284
return __ret; 
# 1285
} 
# 1288
template< class _BidirectionalIterator> _BidirectionalIterator 
# 1290
__rotate(_BidirectionalIterator __first, _BidirectionalIterator 
# 1291
__middle, _BidirectionalIterator 
# 1292
__last, bidirectional_iterator_tag) 
# 1294
{ 
# 1299
if (__first == __middle) { 
# 1300
return __last; } else { 
# 1301
if (__last == __middle) { 
# 1302
return __first; }  }  
# 1304
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1305
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1307
while ((__first != __middle) && (__middle != __last)) 
# 1308
{ 
# 1309
std::iter_swap(__first, --__last); 
# 1310
++__first; 
# 1311
}  
# 1313
if (__first == __middle) 
# 1314
{ 
# 1315
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1316
return __last; 
# 1317
} else 
# 1319
{ 
# 1320
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1321
return __first; 
# 1322
}  
# 1323
} 
# 1326
template< class _RandomAccessIterator> _RandomAccessIterator 
# 1328
__rotate(_RandomAccessIterator __first, _RandomAccessIterator 
# 1329
__middle, _RandomAccessIterator 
# 1330
__last, random_access_iterator_tag) 
# 1332
{ 
# 1337
if (__first == __middle) { 
# 1338
return __last; } else { 
# 1339
if (__last == __middle) { 
# 1340
return __first; }  }  
# 1343
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 1345
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 1347
_Distance __n = __last - __first; 
# 1348
_Distance __k = __middle - __first; 
# 1350
if (__k == (__n - __k)) 
# 1351
{ 
# 1352
std::swap_ranges(__first, __middle, __middle); 
# 1353
return __middle; 
# 1354
}  
# 1356
_RandomAccessIterator __p = __first; 
# 1357
_RandomAccessIterator __ret = __first + (__last - __middle); 
# 1359
for (; ;) 
# 1360
{ 
# 1361
if (__k < (__n - __k)) 
# 1362
{ 
# 1363
if (__is_pod(_ValueType) && (__k == 1)) 
# 1364
{ 
# 1365
_ValueType __t = std::move(*__p); 
# 1366
std::move(__p + 1, __p + __n, __p); 
# 1367
(*((__p + __n) - 1)) = std::move(__t); 
# 1368
return __ret; 
# 1369
}  
# 1370
_RandomAccessIterator __q = __p + __k; 
# 1371
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1372
{ 
# 1373
std::iter_swap(__p, __q); 
# 1374
++__p; 
# 1375
++__q; 
# 1376
}  
# 1377
__n %= __k; 
# 1378
if (__n == 0) { 
# 1379
return __ret; }  
# 1380
std::swap(__n, __k); 
# 1381
__k = (__n - __k); 
# 1382
} else 
# 1384
{ 
# 1385
__k = (__n - __k); 
# 1386
if (__is_pod(_ValueType) && (__k == 1)) 
# 1387
{ 
# 1388
_ValueType __t = std::move(*((__p + __n) - 1)); 
# 1389
std::move_backward(__p, (__p + __n) - 1, __p + __n); 
# 1390
(*__p) = std::move(__t); 
# 1391
return __ret; 
# 1392
}  
# 1393
_RandomAccessIterator __q = __p + __n; 
# 1394
__p = (__q - __k); 
# 1395
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1396
{ 
# 1397
--__p; 
# 1398
--__q; 
# 1399
std::iter_swap(__p, __q); 
# 1400
}  
# 1401
__n %= __k; 
# 1402
if (__n == 0) { 
# 1403
return __ret; }  
# 1404
std::swap(__n, __k); 
# 1405
}  
# 1406
}  
# 1407
} 
# 1432 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 1434
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1435
__last) 
# 1436
{ 
# 1440
; 
# 1441
; 
# 1443
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first)); 
# 1445
} 
# 1447
}
# 1469 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator 
# 1471
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1472
__last, _OutputIterator __result) 
# 1473
{ 
# 1478
; 
# 1479
; 
# 1481
return std::copy(__first, __middle, std::copy(__middle, __last, __result)); 
# 1483
} 
# 1486
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1488
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1489
__pred, forward_iterator_tag) 
# 1490
{ 
# 1491
if (__first == __last) { 
# 1492
return __first; }  
# 1494
while (__pred(*__first)) { 
# 1495
if ((++__first) == __last) { 
# 1496
return __first; }  }  
# 1498
_ForwardIterator __next = __first; 
# 1500
while ((++__next) != __last) { 
# 1501
if (__pred(*__next)) 
# 1502
{ 
# 1503
std::iter_swap(__first, __next); 
# 1504
++__first; 
# 1505
}  }  
# 1507
return __first; 
# 1508
} 
# 1511
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator 
# 1513
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate 
# 1514
__pred, bidirectional_iterator_tag) 
# 1515
{ 
# 1516
while (true) 
# 1517
{ 
# 1518
while (true) { 
# 1519
if (__first == __last) { 
# 1520
return __first; } else { 
# 1521
if (__pred(*__first)) { 
# 1522
++__first; } else { 
# 1524
break; }  }  }  
# 1525
--__last; 
# 1526
while (true) { 
# 1527
if (__first == __last) { 
# 1528
return __first; } else { 
# 1529
if (!((bool)__pred(*__last))) { 
# 1530
--__last; } else { 
# 1532
break; }  }  }  
# 1533
std::iter_swap(__first, __last); 
# 1534
++__first; 
# 1535
}  
# 1536
} 
# 1546 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Pointer, class _Predicate, class 
# 1547
_Distance> _ForwardIterator 
# 1549
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator 
# 1550
__last, _Predicate 
# 1551
__pred, _Distance __len, _Pointer 
# 1552
__buffer, _Distance 
# 1553
__buffer_size) 
# 1554
{ 
# 1555
if (__len == 1) { 
# 1556
return __first; }  
# 1558
if (__len <= __buffer_size) 
# 1559
{ 
# 1560
_ForwardIterator __result1 = __first; 
# 1561
_Pointer __result2 = __buffer; 
# 1566
(*__result2) = std::move(*__first); 
# 1567
++__result2; 
# 1568
++__first; 
# 1569
for (; __first != __last; ++__first) { 
# 1570
if (__pred(__first)) 
# 1571
{ 
# 1572
(*__result1) = std::move(*__first); 
# 1573
++__result1; 
# 1574
} else 
# 1576
{ 
# 1577
(*__result2) = std::move(*__first); 
# 1578
++__result2; 
# 1579
}  }  
# 1581
std::move(__buffer, __result2, __result1); 
# 1582
return __result1; 
# 1583
}  
# 1585
_ForwardIterator __middle = __first; 
# 1586
std::advance(__middle, __len / 2); 
# 1587
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size); 
# 1594
_Distance __right_len = __len - (__len / 2); 
# 1595
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred); 
# 1598
if (__right_len) { 
# 1599
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }  
# 1604
std::rotate(__left_split, __middle, __right_split); 
# 1605
std::advance(__left_split, std::distance(__middle, __right_split)); 
# 1606
return __left_split; 
# 1607
} 
# 1609
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1611
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1612
__pred) 
# 1613
{ 
# 1614
__first = std::__find_if_not(__first, __last, __pred); 
# 1616
if (__first == __last) { 
# 1617
return __first; }  
# 1620
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 1622
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1624
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type>  __buf(__first, __last); 
# 1625
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)__buf.requested_size(), __buf.begin(), (_DistanceType)__buf.size()); 
# 1630
} 
# 1649 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 1651
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1652
__pred) 
# 1653
{ 
# 1659
; 
# 1661
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 1663
} 
# 1666
template< class _RandomAccessIterator, class _Compare> void 
# 1668
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator 
# 1669
__middle, _RandomAccessIterator 
# 1670
__last, _Compare __comp) 
# 1671
{ 
# 1672
std::__make_heap(__first, __middle, __comp); 
# 1673
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) { 
# 1674
if (__comp(__i, __first)) { 
# 1675
std::__pop_heap(__first, __middle, __i, __comp); }  }  
# 1676
} 
# 1680
template< class _InputIterator, class _RandomAccessIterator, class 
# 1681
_Compare> _RandomAccessIterator 
# 1683
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1684
__result_first, _RandomAccessIterator 
# 1685
__result_last, _Compare 
# 1686
__comp) 
# 1687
{ 
# 1689
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1690
typedef iterator_traits< _RandomAccessIterator>  _RItTraits; 
# 1691
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1693
if (__result_first == __result_last) { 
# 1694
return __result_last; }  
# 1695
_RandomAccessIterator __result_real_last = __result_first; 
# 1696
while ((__first != __last) && (__result_real_last != __result_last)) 
# 1697
{ 
# 1698
(*__result_real_last) = (*__first); 
# 1699
++__result_real_last; 
# 1700
++__first; 
# 1701
}  
# 1703
std::__make_heap(__result_first, __result_real_last, __comp); 
# 1704
while (__first != __last) 
# 1705
{ 
# 1706
if (__comp(__first, __result_first)) { 
# 1707
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }  
# 1711
++__first; 
# 1712
}  
# 1713
std::__sort_heap(__result_first, __result_real_last, __comp); 
# 1714
return __result_real_last; 
# 1715
} 
# 1735 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator 
# 1737
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1738
__result_first, _RandomAccessIterator 
# 1739
__result_last) 
# 1740
{ 
# 1755 "/usr/include/c++/7/bits/stl_algo.h" 3
; 
# 1756
; 
# 1757
; 
# 1759
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter()); 
# 1762
} 
# 1784 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class 
# 1785
_Compare> inline _RandomAccessIterator 
# 1787
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1788
__result_first, _RandomAccessIterator 
# 1789
__result_last, _Compare 
# 1790
__comp) 
# 1791
{ 
# 1809 "/usr/include/c++/7/bits/stl_algo.h" 3
; 
# 1810
; 
# 1811
; 
# 1813
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1816
} 
# 1819
template< class _RandomAccessIterator, class _Compare> void 
# 1821
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare 
# 1822
__comp) 
# 1823
{ 
# 1825
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__last); 
# 1826
_RandomAccessIterator __next = __last; 
# 1827
--__next; 
# 1828
while (__comp(__val, __next)) 
# 1829
{ 
# 1830
(*__last) = std::move(*__next); 
# 1831
__last = __next; 
# 1832
--__next; 
# 1833
}  
# 1834
(*__last) = std::move(__val); 
# 1835
} 
# 1838
template< class _RandomAccessIterator, class _Compare> void 
# 1840
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1841
__last, _Compare __comp) 
# 1842
{ 
# 1843
if (__first == __last) { return; }  
# 1845
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 1846
{ 
# 1847
if (__comp(__i, __first)) 
# 1848
{ 
# 1850
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__i); 
# 1851
std::move_backward(__first, __i, __i + 1); 
# 1852
(*__first) = std::move(__val); 
# 1853
} else { 
# 1855
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1857
}  
# 1858
} 
# 1861
template< class _RandomAccessIterator, class _Compare> inline void 
# 1863
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1864
__last, _Compare __comp) 
# 1865
{ 
# 1866
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) { 
# 1867
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1869
} 
# 1875
enum { _S_threshold = 16}; 
# 1878
template< class _RandomAccessIterator, class _Compare> void 
# 1880
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1881
__last, _Compare __comp) 
# 1882
{ 
# 1883
if ((__last - __first) > ((int)_S_threshold)) 
# 1884
{ 
# 1885
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp); 
# 1886
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp); 
# 1888
} else { 
# 1890
std::__insertion_sort(__first, __last, __comp); }  
# 1891
} 
# 1894
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator 
# 1896
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator 
# 1897
__last, _RandomAccessIterator 
# 1898
__pivot, _Compare __comp) 
# 1899
{ 
# 1900
while (true) 
# 1901
{ 
# 1902
while (__comp(__first, __pivot)) { 
# 1903
++__first; }  
# 1904
--__last; 
# 1905
while (__comp(__pivot, __last)) { 
# 1906
--__last; }  
# 1907
if (!(__first < __last)) { 
# 1908
return __first; }  
# 1909
std::iter_swap(__first, __last); 
# 1910
++__first; 
# 1911
}  
# 1912
} 
# 1915
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 1917
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator 
# 1918
__last, _Compare __comp) 
# 1919
{ 
# 1920
_RandomAccessIterator __mid = __first + ((__last - __first) / 2); 
# 1921
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp); 
# 1923
return std::__unguarded_partition(__first + 1, __last, __first, __comp); 
# 1924
} 
# 1926
template< class _RandomAccessIterator, class _Compare> inline void 
# 1928
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1929
__middle, _RandomAccessIterator 
# 1930
__last, _Compare 
# 1931
__comp) 
# 1932
{ 
# 1933
std::__heap_select(__first, __middle, __last, __comp); 
# 1934
std::__sort_heap(__first, __middle, __comp); 
# 1935
} 
# 1938
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1940
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator 
# 1941
__last, _Size 
# 1942
__depth_limit, _Compare __comp) 
# 1943
{ 
# 1944
while ((__last - __first) > ((int)_S_threshold)) 
# 1945
{ 
# 1946
if (__depth_limit == 0) 
# 1947
{ 
# 1948
std::__partial_sort(__first, __last, __last, __comp); 
# 1949
return; 
# 1950
}  
# 1951
--__depth_limit; 
# 1952
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1954
std::__introsort_loop(__cut, __last, __depth_limit, __comp); 
# 1955
__last = __cut; 
# 1956
}  
# 1957
} 
# 1961
template< class _RandomAccessIterator, class _Compare> inline void 
# 1963
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 1964
__comp) 
# 1965
{ 
# 1966
if (__first != __last) 
# 1967
{ 
# 1968
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp); 
# 1971
std::__final_insertion_sort(__first, __last, __comp); 
# 1972
}  
# 1973
} 
# 1975
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1977
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 1978
__last, _Size __depth_limit, _Compare 
# 1979
__comp) 
# 1980
{ 
# 1981
while ((__last - __first) > 3) 
# 1982
{ 
# 1983
if (__depth_limit == 0) 
# 1984
{ 
# 1985
std::__heap_select(__first, __nth + 1, __last, __comp); 
# 1987
std::iter_swap(__first, __nth); 
# 1988
return; 
# 1989
}  
# 1990
--__depth_limit; 
# 1991
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1993
if (__cut <= __nth) { 
# 1994
__first = __cut; } else { 
# 1996
__last = __cut; }  
# 1997
}  
# 1998
std::__insertion_sort(__first, __last, __comp); 
# 1999
} 
# 2021 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2023
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2024
__val, _Compare __comp) 
# 2025
{ 
# 2031
; 
# 2033
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2035
} 
# 2037
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 2039
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2040
__val, _Compare __comp) 
# 2041
{ 
# 2043
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2045
_DistanceType __len = std::distance(__first, __last); 
# 2047
while (__len > 0) 
# 2048
{ 
# 2049
_DistanceType __half = __len >> 1; 
# 2050
_ForwardIterator __middle = __first; 
# 2051
std::advance(__middle, __half); 
# 2052
if (__comp(__val, __middle)) { 
# 2053
__len = __half; } else 
# 2055
{ 
# 2056
__first = __middle; 
# 2057
++__first; 
# 2058
__len = ((__len - __half) - 1); 
# 2059
}  
# 2060
}  
# 2061
return __first; 
# 2062
} 
# 2075 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 2077
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2078
__val) 
# 2079
{ 
# 2084
; 
# 2086
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter()); 
# 2088
} 
# 2105 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2107
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2108
__val, _Compare __comp) 
# 2109
{ 
# 2115
; 
# 2117
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2119
} 
# 2121
template< class _ForwardIterator, class _Tp, class 
# 2122
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>  
# 2124
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2125
__val, _CompareItTp 
# 2126
__comp_it_val, _CompareTpIt __comp_val_it) 
# 2127
{ 
# 2129
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2131
_DistanceType __len = std::distance(__first, __last); 
# 2133
while (__len > 0) 
# 2134
{ 
# 2135
_DistanceType __half = __len >> 1; 
# 2136
_ForwardIterator __middle = __first; 
# 2137
std::advance(__middle, __half); 
# 2138
if (__comp_it_val(__middle, __val)) 
# 2139
{ 
# 2140
__first = __middle; 
# 2141
++__first; 
# 2142
__len = ((__len - __half) - 1); 
# 2143
} else { 
# 2144
if (__comp_val_it(__val, __middle)) { 
# 2145
__len = __half; } else 
# 2147
{ 
# 2148
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val); 
# 2150
std::advance(__first, __len); 
# 2151
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it); 
# 2153
return pair< _ForwardIterator, _ForwardIterator> (__left, __right); 
# 2154
}  }  
# 2155
}  
# 2156
return pair< _ForwardIterator, _ForwardIterator> (__first, __first); 
# 2157
} 
# 2176 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>  
# 2178
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2179
__val) 
# 2180
{ 
# 2187
; 
# 2188
; 
# 2190
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter()); 
# 2193
} 
# 2212 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 2214
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2215
__val, _Compare __comp) 
# 2216
{ 
# 2224
; 
# 2226
; 
# 2228
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2231
} 
# 2245 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> bool 
# 2247
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2248
__val) 
# 2249
{ 
# 2254
; 
# 2255
; 
# 2257
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 2260
return (__i != __last) && (!(__val < (*__i))); 
# 2261
} 
# 2278 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> bool 
# 2280
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2281
__val, _Compare __comp) 
# 2282
{ 
# 2288
; 
# 2290
; 
# 2292
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2295
return (__i != __last) && (!((bool)__comp(__val, *__i))); 
# 2296
} 
# 2301
template< class _InputIterator1, class _InputIterator2, class 
# 2302
_OutputIterator, class _Compare> void 
# 2304
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2305
__first2, _InputIterator2 __last2, _OutputIterator 
# 2306
__result, _Compare __comp) 
# 2307
{ 
# 2308
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2309
{ 
# 2310
if (__comp(__first2, __first1)) 
# 2311
{ 
# 2312
(*__result) = std::move(*__first2); 
# 2313
++__first2; 
# 2314
} else 
# 2316
{ 
# 2317
(*__result) = std::move(*__first1); 
# 2318
++__first1; 
# 2319
}  
# 2320
++__result; 
# 2321
}  
# 2322
if (__first1 != __last1) { 
# 2323
std::move(__first1, __last1, __result); }  
# 2324
} 
# 2327
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2328
_BidirectionalIterator3, class _Compare> void 
# 2330
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 2331
__last1, _BidirectionalIterator2 
# 2332
__first2, _BidirectionalIterator2 
# 2333
__last2, _BidirectionalIterator3 
# 2334
__result, _Compare 
# 2335
__comp) 
# 2336
{ 
# 2337
if (__first1 == __last1) 
# 2338
{ 
# 2339
std::move_backward(__first2, __last2, __result); 
# 2340
return; 
# 2341
} else { 
# 2342
if (__first2 == __last2) { 
# 2343
return; }  }  
# 2345
--__last1; 
# 2346
--__last2; 
# 2347
while (true) 
# 2348
{ 
# 2349
if (__comp(__last2, __last1)) 
# 2350
{ 
# 2351
(*(--__result)) = std::move(*__last1); 
# 2352
if (__first1 == __last1) 
# 2353
{ 
# 2354
std::move_backward(__first2, ++__last2, __result); 
# 2355
return; 
# 2356
}  
# 2357
--__last1; 
# 2358
} else 
# 2360
{ 
# 2361
(*(--__result)) = std::move(*__last2); 
# 2362
if (__first2 == __last2) { 
# 2363
return; }  
# 2364
--__last2; 
# 2365
}  
# 2366
}  
# 2367
} 
# 2370
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2371
_Distance> _BidirectionalIterator1 
# 2373
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 
# 2374
__middle, _BidirectionalIterator1 
# 2375
__last, _Distance 
# 2376
__len1, _Distance __len2, _BidirectionalIterator2 
# 2377
__buffer, _Distance 
# 2378
__buffer_size) 
# 2379
{ 
# 2380
_BidirectionalIterator2 __buffer_end; 
# 2381
if ((__len1 > __len2) && (__len2 <= __buffer_size)) 
# 2382
{ 
# 2383
if (__len2) 
# 2384
{ 
# 2385
__buffer_end = std::move(__middle, __last, __buffer); 
# 2386
std::move_backward(__first, __middle, __last); 
# 2387
return std::move(__buffer, __buffer_end, __first); 
# 2388
} else { 
# 2390
return __first; }  
# 2391
} else { 
# 2392
if (__len1 <= __buffer_size) 
# 2393
{ 
# 2394
if (__len1) 
# 2395
{ 
# 2396
__buffer_end = std::move(__first, __middle, __buffer); 
# 2397
std::move(__middle, __last, __first); 
# 2398
return std::move_backward(__buffer, __buffer_end, __last); 
# 2399
} else { 
# 2401
return __last; }  
# 2402
} else 
# 2404
{ 
# 2405
std::rotate(__first, __middle, __last); 
# 2406
std::advance(__first, std::distance(__middle, __last)); 
# 2407
return __first; 
# 2408
}  }  
# 2409
} 
# 2412
template< class _BidirectionalIterator, class _Distance, class 
# 2413
_Pointer, class _Compare> void 
# 2415
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator 
# 2416
__middle, _BidirectionalIterator 
# 2417
__last, _Distance 
# 2418
__len1, _Distance __len2, _Pointer 
# 2419
__buffer, _Distance __buffer_size, _Compare 
# 2420
__comp) 
# 2421
{ 
# 2422
if ((__len1 <= __len2) && (__len1 <= __buffer_size)) 
# 2423
{ 
# 2424
_Pointer __buffer_end = std::move(__first, __middle, __buffer); 
# 2425
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp); 
# 2427
} else { 
# 2428
if (__len2 <= __buffer_size) 
# 2429
{ 
# 2430
_Pointer __buffer_end = std::move(__middle, __last, __buffer); 
# 2431
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp); 
# 2433
} else 
# 2435
{ 
# 2436
_BidirectionalIterator __first_cut = __first; 
# 2437
_BidirectionalIterator __second_cut = __middle; 
# 2438
_Distance __len11 = (0); 
# 2439
_Distance __len22 = (0); 
# 2440
if (__len1 > __len2) 
# 2441
{ 
# 2442
__len11 = (__len1 / 2); 
# 2443
std::advance(__first_cut, __len11); 
# 2444
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2447
__len22 = std::distance(__middle, __second_cut); 
# 2448
} else 
# 2450
{ 
# 2451
__len22 = (__len2 / 2); 
# 2452
std::advance(__second_cut, __len22); 
# 2453
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2456
__len11 = std::distance(__first, __first_cut); 
# 2457
}  
# 2459
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size); 
# 2463
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp); 
# 2465
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp); 
# 2469
}  }  
# 2470
} 
# 2473
template< class _BidirectionalIterator, class _Distance, class 
# 2474
_Compare> void 
# 2476
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator 
# 2477
__middle, _BidirectionalIterator 
# 2478
__last, _Distance 
# 2479
__len1, _Distance __len2, _Compare 
# 2480
__comp) 
# 2481
{ 
# 2482
if ((__len1 == 0) || (__len2 == 0)) { 
# 2483
return; }  
# 2485
if ((__len1 + __len2) == 2) 
# 2486
{ 
# 2487
if (__comp(__middle, __first)) { 
# 2488
std::iter_swap(__first, __middle); }  
# 2489
return; 
# 2490
}  
# 2492
_BidirectionalIterator __first_cut = __first; 
# 2493
_BidirectionalIterator __second_cut = __middle; 
# 2494
_Distance __len11 = (0); 
# 2495
_Distance __len22 = (0); 
# 2496
if (__len1 > __len2) 
# 2497
{ 
# 2498
__len11 = (__len1 / 2); 
# 2499
std::advance(__first_cut, __len11); 
# 2500
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2503
__len22 = std::distance(__middle, __second_cut); 
# 2504
} else 
# 2506
{ 
# 2507
__len22 = (__len2 / 2); 
# 2508
std::advance(__second_cut, __len22); 
# 2509
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2512
__len11 = std::distance(__first, __first_cut); 
# 2513
}  
# 2515
std::rotate(__first_cut, __middle, __second_cut); 
# 2516
_BidirectionalIterator __new_middle = __first_cut; 
# 2517
std::advance(__new_middle, std::distance(__middle, __second_cut)); 
# 2518
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp); 
# 2520
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp); 
# 2522
} 
# 2524
template< class _BidirectionalIterator, class _Compare> void 
# 2526
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2527
__middle, _BidirectionalIterator 
# 2528
__last, _Compare 
# 2529
__comp) 
# 2530
{ 
# 2532
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType; 
# 2534
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType; 
# 2536
if ((__first == __middle) || (__middle == __last)) { 
# 2537
return; }  
# 2539
const _DistanceType __len1 = std::distance(__first, __middle); 
# 2540
const _DistanceType __len2 = std::distance(__middle, __last); 
# 2542
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type>  _TmpBuf; 
# 2543
_TmpBuf __buf(__first, __last); 
# 2545
if (__buf.begin() == 0) { 
# 2546
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else { 
# 2549
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 2552
} 
# 2572 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 2574
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2575
__middle, _BidirectionalIterator 
# 2576
__last) 
# 2577
{ 
# 2583
; 
# 2584
; 
# 2585
; 
# 2587
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2589
} 
# 2613 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline void 
# 2615
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2616
__middle, _BidirectionalIterator 
# 2617
__last, _Compare 
# 2618
__comp) 
# 2619
{ 
# 2626
; 
# 2627
; 
# 2628
; 
# 2630
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2632
} 
# 2636
template< class _InputIterator, class _OutputIterator, class 
# 2637
_Compare> _OutputIterator 
# 2639
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator 
# 2640
__first2, _InputIterator __last2, _OutputIterator 
# 2641
__result, _Compare __comp) 
# 2642
{ 
# 2643
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2644
{ 
# 2645
if (__comp(__first2, __first1)) 
# 2646
{ 
# 2647
(*__result) = std::move(*__first2); 
# 2648
++__first2; 
# 2649
} else 
# 2651
{ 
# 2652
(*__result) = std::move(*__first1); 
# 2653
++__first1; 
# 2654
}  
# 2655
++__result; 
# 2656
}  
# 2657
return std::move(__first2, __last2, std::move(__first1, __last1, __result)); 
# 2660
} 
# 2662
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class 
# 2663
_Distance, class _Compare> void 
# 2665
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 
# 2666
__last, _RandomAccessIterator2 
# 2667
__result, _Distance __step_size, _Compare 
# 2668
__comp) 
# 2669
{ 
# 2670
const _Distance __two_step = 2 * __step_size; 
# 2672
while ((__last - __first) >= __two_step) 
# 2673
{ 
# 2674
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp); 
# 2678
__first += __two_step; 
# 2679
}  
# 2680
__step_size = std::min((_Distance)(__last - __first), __step_size); 
# 2682
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp); 
# 2684
} 
# 2686
template< class _RandomAccessIterator, class _Distance, class 
# 2687
_Compare> void 
# 2689
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2690
__last, _Distance 
# 2691
__chunk_size, _Compare __comp) 
# 2692
{ 
# 2693
while ((__last - __first) >= __chunk_size) 
# 2694
{ 
# 2695
std::__insertion_sort(__first, __first + __chunk_size, __comp); 
# 2696
__first += __chunk_size; 
# 2697
}  
# 2698
std::__insertion_sort(__first, __last, __comp); 
# 2699
} 
# 2701
enum { _S_chunk_size = 7}; 
# 2703
template< class _RandomAccessIterator, class _Pointer, class _Compare> void 
# 2705
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator 
# 2706
__last, _Pointer 
# 2707
__buffer, _Compare __comp) 
# 2708
{ 
# 2710
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 2712
const _Distance __len = __last - __first; 
# 2713
const _Pointer __buffer_last = __buffer + __len; 
# 2715
_Distance __step_size = (_S_chunk_size); 
# 2716
std::__chunk_insertion_sort(__first, __last, __step_size, __comp); 
# 2718
while (__step_size < __len) 
# 2719
{ 
# 2720
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp); 
# 2722
__step_size *= 2; 
# 2723
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp); 
# 2725
__step_size *= 2; 
# 2726
}  
# 2727
} 
# 2729
template< class _RandomAccessIterator, class _Pointer, class 
# 2730
_Distance, class _Compare> void 
# 2732
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator 
# 2733
__last, _Pointer 
# 2734
__buffer, _Distance __buffer_size, _Compare 
# 2735
__comp) 
# 2736
{ 
# 2737
const _Distance __len = ((__last - __first) + 1) / 2; 
# 2738
const _RandomAccessIterator __middle = __first + __len; 
# 2739
if (__len > __buffer_size) 
# 2740
{ 
# 2741
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp); 
# 2743
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp); 
# 2745
} else 
# 2747
{ 
# 2748
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp); 
# 2749
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp); 
# 2750
}  
# 2751
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp); 
# 2756
} 
# 2759
template< class _RandomAccessIterator, class _Compare> void 
# 2761
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2762
__last, _Compare __comp) 
# 2763
{ 
# 2764
if ((__last - __first) < 15) 
# 2765
{ 
# 2766
std::__insertion_sort(__first, __last, __comp); 
# 2767
return; 
# 2768
}  
# 2769
_RandomAccessIterator __middle = __first + ((__last - __first) / 2); 
# 2770
std::__inplace_stable_sort(__first, __middle, __comp); 
# 2771
std::__inplace_stable_sort(__middle, __last, __comp); 
# 2772
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp); 
# 2776
} 
# 2785 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2786
_Compare> bool 
# 2788
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2789
__first2, _InputIterator2 __last2, _Compare 
# 2790
__comp) 
# 2791
{ 
# 2792
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 2793
if (__comp(__first2, __first1)) { 
# 2794
return false; } else { 
# 2795
if (__comp(__first1, __first2)) { 
# 2796
++__first1; } else 
# 2798
{ 
# 2799
++__first1; 
# 2800
++__first2; 
# 2801
}  }  }  
# 2803
return __first2 == __last2; 
# 2804
} 
# 2824 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2> inline bool 
# 2826
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2827
__first2, _InputIterator2 __last2) 
# 2828
{ 
# 2838
; 
# 2839
; 
# 2840
; 
# 2841
; 
# 2843
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 2845
} 
# 2868 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2869
_Compare> inline bool 
# 2871
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2872
__first2, _InputIterator2 __last2, _Compare 
# 2873
__comp) 
# 2874
{ 
# 2884
; 
# 2885
; 
# 2886
; 
# 2887
; 
# 2889
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2891
} 
# 2903 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool 
# 2905
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2906
__last, _Compare __comp) 
# 2907
{ 
# 2908
if (__first == __last) { 
# 2909
return false; }  
# 2910
_BidirectionalIterator __i = __first; 
# 2911
++__i; 
# 2912
if (__i == __last) { 
# 2913
return false; }  
# 2914
__i = __last; 
# 2915
--__i; 
# 2917
for (; ;) 
# 2918
{ 
# 2919
_BidirectionalIterator __ii = __i; 
# 2920
--__i; 
# 2921
if (__comp(__i, __ii)) 
# 2922
{ 
# 2923
_BidirectionalIterator __j = __last; 
# 2924
while (!__comp(__i, --__j)) 
# 2925
{ }  
# 2926
std::iter_swap(__i, __j); 
# 2927
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 2929
return true; 
# 2930
}  
# 2931
if (__i == __first) 
# 2932
{ 
# 2933
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 2935
return false; 
# 2936
}  
# 2937
}  
# 2938
} 
# 2952 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 2954
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2955
__last) 
# 2956
{ 
# 2962
; 
# 2963
; 
# 2965
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2967
} 
# 2984 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 2986
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2987
__last, _Compare __comp) 
# 2988
{ 
# 2995
; 
# 2996
; 
# 2998
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3000
} 
# 3002
template< class _BidirectionalIterator, class _Compare> bool 
# 3004
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3005
__last, _Compare __comp) 
# 3006
{ 
# 3007
if (__first == __last) { 
# 3008
return false; }  
# 3009
_BidirectionalIterator __i = __first; 
# 3010
++__i; 
# 3011
if (__i == __last) { 
# 3012
return false; }  
# 3013
__i = __last; 
# 3014
--__i; 
# 3016
for (; ;) 
# 3017
{ 
# 3018
_BidirectionalIterator __ii = __i; 
# 3019
--__i; 
# 3020
if (__comp(__ii, __i)) 
# 3021
{ 
# 3022
_BidirectionalIterator __j = __last; 
# 3023
while (!__comp(--__j, __i)) 
# 3024
{ }  
# 3025
std::iter_swap(__i, __j); 
# 3026
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 3028
return true; 
# 3029
}  
# 3030
if (__i == __first) 
# 3031
{ 
# 3032
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 3034
return false; 
# 3035
}  
# 3036
}  
# 3037
} 
# 3052 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 3054
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3055
__last) 
# 3056
{ 
# 3062
; 
# 3063
; 
# 3065
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3067
} 
# 3084 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 3086
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3087
__last, _Compare __comp) 
# 3088
{ 
# 3095
; 
# 3096
; 
# 3098
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3100
} 
# 3105
template< class _InputIterator, class _OutputIterator, class 
# 3106
_Predicate, class _Tp> _OutputIterator 
# 3108
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3109
__result, _Predicate 
# 3110
__pred, const _Tp &__new_value) 
# 3111
{ 
# 3112
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 3113
if (__pred(__first)) { 
# 3114
(*__result) = __new_value; } else { 
# 3116
(*__result) = (*__first); }  }  
# 3117
return __result; 
# 3118
} 
# 3134 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 3136
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3137
__result, const _Tp &
# 3138
__old_value, const _Tp &__new_value) 
# 3139
{ 
# 3146
; 
# 3148
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value); 
# 3151
} 
# 3168 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 3169
_Predicate, class _Tp> inline _OutputIterator 
# 3171
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3172
__result, _Predicate 
# 3173
__pred, const _Tp &__new_value) 
# 3174
{ 
# 3181
; 
# 3183
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value); 
# 3186
} 
# 3188
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 3190
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 3191
{ 
# 3192
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 3193
for (; __first != __last; ++__first) { 
# 3194
if (__pred(__first)) { 
# 3195
++__n; }  }  
# 3196
return __n; 
# 3197
} 
# 3207 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> inline bool 
# 3209
is_sorted(_ForwardIterator __first, _ForwardIterator __last) 
# 3210
{ return std::is_sorted_until(__first, __last) == __last; } 
# 3221 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline bool 
# 3223
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3224
__comp) 
# 3225
{ return std::is_sorted_until(__first, __last, __comp) == __last; } 
# 3227
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 3229
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3230
__comp) 
# 3231
{ 
# 3232
if (__first == __last) { 
# 3233
return __last; }  
# 3235
_ForwardIterator __next = __first; 
# 3236
for (++__next; __next != __last; (__first = __next), ((void)(++__next))) { 
# 3237
if (__comp(__next, __first)) { 
# 3238
return __next; }  }  
# 3239
return __next; 
# 3240
} 
# 3250 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 3252
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) 
# 3253
{ 
# 3258
; 
# 3259
; 
# 3261
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3263
} 
# 3274 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 3276
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3277
__comp) 
# 3278
{ 
# 3284
; 
# 3285
; 
# 3287
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3289
} 
# 3299 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  
# 3302
minmax(const _Tp &__a, const _Tp &__b) 
# 3303
{ 
# 3307
return (__b < __a) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3309
} 
# 3320 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  
# 3323
minmax(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 3324
{ 
# 3325
return (__comp(__b, __a)) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3327
} 
# 3329
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3332
__minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3333
__comp) 
# 3334
{ 
# 3335
_ForwardIterator __next = __first; 
# 3336
if ((__first == __last) || ((++__next) == __last)) { 
# 3338
return std::make_pair(__first, __first); }  
# 3340
_ForwardIterator __min{}, __max{}; 
# 3341
if (__comp(__next, __first)) 
# 3342
{ 
# 3343
__min = __next; 
# 3344
__max = __first; 
# 3345
} else 
# 3347
{ 
# 3348
__min = __first; 
# 3349
__max = __next; 
# 3350
}  
# 3352
__first = __next; 
# 3353
++__first; 
# 3355
while (__first != __last) 
# 3356
{ 
# 3357
__next = __first; 
# 3358
if ((++__next) == __last) 
# 3359
{ 
# 3360
if (__comp(__first, __min)) { 
# 3361
__min = __first; } else { 
# 3362
if (!__comp(__first, __max)) { 
# 3363
__max = __first; }  }  
# 3364
break; 
# 3365
}  
# 3367
if (__comp(__next, __first)) 
# 3368
{ 
# 3369
if (__comp(__next, __min)) { 
# 3370
__min = __next; }  
# 3371
if (!__comp(__first, __max)) { 
# 3372
__max = __first; }  
# 3373
} else 
# 3375
{ 
# 3376
if (__comp(__first, __min)) { 
# 3377
__min = __first; }  
# 3378
if (!__comp(__next, __max)) { 
# 3379
__max = __next; }  
# 3380
}  
# 3382
__first = __next; 
# 3383
++__first; 
# 3384
}  
# 3386
return std::make_pair(__min, __max); 
# 3387
} 
# 3400 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3403
minmax_element(_ForwardIterator __first, _ForwardIterator __last) 
# 3404
{ 
# 3409
; 
# 3410
; 
# 3412
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3414
} 
# 3428 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3431
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3432
__comp) 
# 3433
{ 
# 3439
; 
# 3440
; 
# 3442
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3444
} 
# 3447
template< class _Tp> constexpr _Tp 
# 3450
min(initializer_list< _Tp>  __l) 
# 3451
{ return *std::min_element(__l.begin(), __l.end()); } 
# 3453
template< class _Tp, class _Compare> constexpr _Tp 
# 3456
min(initializer_list< _Tp>  __l, _Compare __comp) 
# 3457
{ return *std::min_element(__l.begin(), __l.end(), __comp); } 
# 3459
template< class _Tp> constexpr _Tp 
# 3462
max(initializer_list< _Tp>  __l) 
# 3463
{ return *std::max_element(__l.begin(), __l.end()); } 
# 3465
template< class _Tp, class _Compare> constexpr _Tp 
# 3468
max(initializer_list< _Tp>  __l, _Compare __comp) 
# 3469
{ return *std::max_element(__l.begin(), __l.end(), __comp); } 
# 3471
template< class _Tp> constexpr pair< _Tp, _Tp>  
# 3474
minmax(initializer_list< _Tp>  __l) 
# 3475
{ 
# 3476
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end()); 
# 3478
return std::make_pair(*(__p.first), *(__p.second)); 
# 3479
} 
# 3481
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  
# 3484
minmax(initializer_list< _Tp>  __l, _Compare __comp) 
# 3485
{ 
# 3486
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end(), __comp); 
# 3488
return std::make_pair(*(__p.first), *(__p.second)); 
# 3489
} 
# 3491
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3492
_BinaryPredicate> bool 
# 3494
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3495
__first2, _BinaryPredicate __pred) 
# 3496
{ 
# 3499
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 3500
if (!__pred(__first1, __first2)) { 
# 3501
break; }  }  
# 3503
if (__first1 == __last1) { 
# 3504
return true; }  
# 3508
_ForwardIterator2 __last2 = __first2; 
# 3509
std::advance(__last2, std::distance(__first1, __last1)); 
# 3510
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 3511
{ 
# 3512
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3514
continue; }  
# 3516
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3519
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3523
return false; }  
# 3524
}   
# 3525
return true; 
# 3526
} 
# 3540 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3542
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3543
__first2) 
# 3544
{ 
# 3551
; 
# 3553
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3555
} 
# 3571 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3572
_BinaryPredicate> inline bool 
# 3574
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3575
__first2, _BinaryPredicate __pred) 
# 3576
{ 
# 3583
; 
# 3585
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3587
} 
# 3590
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3591
_BinaryPredicate> bool 
# 3593
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3594
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3595
__pred) 
# 3596
{ 
# 3597
using _Cat1 = typename iterator_traits< _ForwardIterator1> ::iterator_category; 
# 3599
using _Cat2 = typename iterator_traits< _ForwardIterator2> ::iterator_category; 
# 3601
using _It1_is_RA = is_same< typename iterator_traits< _ForwardIterator1> ::iterator_category, random_access_iterator_tag> ; 
# 3602
using _It2_is_RA = is_same< typename iterator_traits< _ForwardIterator2> ::iterator_category, random_access_iterator_tag> ; 
# 3603
constexpr bool __ra_iters = (_It1_is_RA() && _It2_is_RA()); 
# 3604
if (__ra_iters) 
# 3605
{ 
# 3606
auto __d1 = std::distance(__first1, __last1); 
# 3607
auto __d2 = std::distance(__first2, __last2); 
# 3608
if (__d1 != __d2) { 
# 3609
return false; }  
# 3610
}  
# 3614
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 3616
if (!__pred(__first1, __first2)) { 
# 3617
break; }  }  
# 3619
if (__ra_iters) 
# 3620
{ 
# 3621
if (__first1 == __last1) { 
# 3622
return true; }  
# 3623
} else 
# 3625
{ 
# 3626
auto __d1 = std::distance(__first1, __last1); 
# 3627
auto __d2 = std::distance(__first2, __last2); 
# 3628
if ((__d1 == 0) && (__d2 == 0)) { 
# 3629
return true; }  
# 3630
if (__d1 != __d2) { 
# 3631
return false; }  
# 3632
}  
# 3634
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 3635
{ 
# 3636
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3638
continue; }  
# 3640
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3642
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3646
return false; }  
# 3647
}   
# 3648
return true; 
# 3649
} 
# 3664 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3666
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3667
__first2, _ForwardIterator2 __last2) 
# 3668
{ 
# 3669
; 
# 3670
; 
# 3672
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3675
} 
# 3691 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3692
_BinaryPredicate> inline bool 
# 3694
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3695
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3696
__pred) 
# 3697
{ 
# 3698
; 
# 3699
; 
# 3701
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3703
} 
# 3767 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _IntType, class _UniformRandomBitGenerator> pair< _IntType, _IntType>  
# 3769
__gen_two_uniform_ints(_IntType __b0, _IntType __b1, _UniformRandomBitGenerator &&
# 3770
__g) 
# 3771
{ 
# 3772
_IntType __x = uniform_int_distribution< _IntType> {0, (__b0 * __b1) - 1}(__g); 
# 3774
return std::make_pair(__x / __b1, __x % __b1); 
# 3775
} 
# 3789 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class 
# 3790
_UniformRandomNumberGenerator> void 
# 3792
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&
# 3793
__g) 
# 3794
{ 
# 3798
; 
# 3800
if (__first == __last) { 
# 3801
return; }  
# 3804
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 3806
typedef typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type __ud_type; 
# 3807
typedef uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type>  __distr_type; 
# 3808
typedef typename uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::param_type __p_type; 
# 3811
typedef typename remove_reference< _UniformRandomNumberGenerator> ::type _Gen; 
# 3813
typedef typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type __uc_type; 
# 3815
const __uc_type __urngrange = __g.max() - __g.min(); 
# 3816
const __uc_type __urange = (__uc_type)(__last - __first); 
# 3818
if ((__urngrange / __urange) >= __urange) 
# 3820
{ 
# 3821
_RandomAccessIterator __i = __first + 1; 
# 3827
if ((__urange % 2) == 0) 
# 3828
{ 
# 3829
__distr_type __d{0, 1}; 
# 3830
std::iter_swap(__i++, __first + __d(__g)); 
# 3831
}  
# 3837
while (__i != __last) 
# 3838
{ 
# 3839
const __uc_type __swap_range = ((__uc_type)(__i - __first)) + 1; 
# 3841
const pair< typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type, typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type>  __pospos = __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g); 
# 3844
std::iter_swap(__i++, __first + (__pospos.first)); 
# 3845
std::iter_swap(__i++, __first + (__pospos.second)); 
# 3846
}  
# 3848
return; 
# 3849
}  
# 3851
__distr_type __d; 
# 3853
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) { 
# 3854
std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first))); }  
# 3855
} 
# 3876 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Function> _Function 
# 3878
for_each(_InputIterator __first, _InputIterator __last, _Function __f) 
# 3879
{ 
# 3882
; 
# 3883
for (; __first != __last; ++__first) { 
# 3884
__f(*__first); }  
# 3885
return __f; 
# 3886
} 
# 3897 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline _InputIterator 
# 3899
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3900
__val) 
# 3901
{ 
# 3906
; 
# 3907
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 3909
} 
# 3921 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 3923
find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 3924
__pred) 
# 3925
{ 
# 3930
; 
# 3932
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3934
} 
# 3952 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator> _InputIterator 
# 3954
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3955
__first2, _ForwardIterator __last2) 
# 3956
{ 
# 3963
; 
# 3964
; 
# 3966
for (; __first1 != __last1; ++__first1) { 
# 3967
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3968
if ((*__first1) == (*__iter)) { 
# 3969
return __first1; }  }  }  
# 3970
return __last1; 
# 3971
} 
# 3992 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 3993
_BinaryPredicate> _InputIterator 
# 3995
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3996
__first2, _ForwardIterator __last2, _BinaryPredicate 
# 3997
__comp) 
# 3998
{ 
# 4005
; 
# 4006
; 
# 4008
for (; __first1 != __last1; ++__first1) { 
# 4009
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 4010
if (__comp(*__first1, *__iter)) { 
# 4011
return __first1; }  }  }  
# 4012
return __last1; 
# 4013
} 
# 4024 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 4026
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) 
# 4027
{ 
# 4032
; 
# 4034
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4036
} 
# 4049 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 4051
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 4052
__binary_pred) 
# 4053
{ 
# 4059
; 
# 4061
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 4063
} 
# 4074 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4076
count(_InputIterator __first, _InputIterator __last, const _Tp &__value) 
# 4077
{ 
# 4082
; 
# 4084
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 4086
} 
# 4097 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4099
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 4100
{ 
# 4105
; 
# 4107
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 4109
} 
# 4137 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 4139
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4140
__first2, _ForwardIterator2 __last2) 
# 4141
{ 
# 4148
; 
# 4149
; 
# 4151
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4153
} 
# 4176 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 4177
_BinaryPredicate> inline _ForwardIterator1 
# 4179
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4180
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 4181
__predicate) 
# 4182
{ 
# 4189
; 
# 4190
; 
# 4192
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate)); 
# 4194
} 
# 4211 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator 
# 4213
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4214
__count, const _Tp &__val) 
# 4215
{ 
# 4220
; 
# 4222
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 4224
} 
# 4244 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp, class 
# 4245
_BinaryPredicate> inline _ForwardIterator 
# 4247
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4248
__count, const _Tp &__val, _BinaryPredicate 
# 4249
__binary_pred) 
# 4250
{ 
# 4255
; 
# 4257
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val)); 
# 4259
} 
# 4292 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4293
_UnaryOperation> _OutputIterator 
# 4295
transform(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4296
__result, _UnaryOperation __unary_op) 
# 4297
{ 
# 4303
; 
# 4305
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 4306
(*__result) = __unary_op(*__first); }  
# 4307
return __result; 
# 4308
} 
# 4329 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4330
_OutputIterator, class _BinaryOperation> _OutputIterator 
# 4332
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4333
__first2, _OutputIterator __result, _BinaryOperation 
# 4334
__binary_op) 
# 4335
{ 
# 4342
; 
# 4344
for (; __first1 != __last1; ((++__first1), ((void)(++__first2))), (++__result)) { 
# 4345
(*__result) = __binary_op(*__first1, *__first2); }  
# 4346
return __result; 
# 4347
} 
# 4362 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> void 
# 4364
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4365
__old_value, const _Tp &__new_value) 
# 4366
{ 
# 4374
; 
# 4376
for (; __first != __last; ++__first) { 
# 4377
if ((*__first) == __old_value) { 
# 4378
(*__first) = __new_value; }  }  
# 4379
} 
# 4394 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate, class _Tp> void 
# 4396
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4397
__pred, const _Tp &__new_value) 
# 4398
{ 
# 4406
; 
# 4408
for (; __first != __last; ++__first) { 
# 4409
if (__pred(*__first)) { 
# 4410
(*__first) = __new_value; }  }  
# 4411
} 
# 4426 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Generator> void 
# 4428
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator 
# 4429
__gen) 
# 4430
{ 
# 4435
; 
# 4437
for (; __first != __last; ++__first) { 
# 4438
(*__first) = __gen(); }  
# 4439
} 
# 4457 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator 
# 4459
generate_n(_OutputIterator __first, _Size __n, _Generator __gen) 
# 4460
{ 
# 4466
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 4468
(*__first) = __gen(); }  
# 4469
return __first; 
# 4470
} 
# 4493 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 4495
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4496
__result) 
# 4497
{ 
# 4504
; 
# 4506
if (__first == __last) { 
# 4507
return __result; }  
# 4508
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4512
} 
# 4533 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4534
_BinaryPredicate> inline _OutputIterator 
# 4536
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4537
__result, _BinaryPredicate 
# 4538
__binary_pred) 
# 4539
{ 
# 4544
; 
# 4546
if (__first == __last) { 
# 4547
return __result; }  
# 4548
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4552
} 
# 4566 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4568
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4569
{ 
# 4573
; 
# 4575
if (__first != __last) { 
# 4576
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4577
{ 
# 4579
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1)); 
# 4581
if (__i != __j) { 
# 4582
std::iter_swap(__i, __j); }  
# 4583
}  }  
# 4584
} 
# 4601 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _RandomNumberGenerator> void 
# 4603
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&
# 4605
__rand) 
# 4609
{ 
# 4613
; 
# 4615
if (__first == __last) { 
# 4616
return; }  
# 4617
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4618
{ 
# 4619
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1); 
# 4620
if (__i != __j) { 
# 4621
std::iter_swap(__i, __j); }  
# 4622
}  
# 4623
} 
# 4641 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 4643
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4644
__pred) 
# 4645
{ 
# 4651
; 
# 4653
return std::__partition(__first, __last, __pred, std::__iterator_category(__first)); 
# 4655
} 
# 4674 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4676
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4677
__middle, _RandomAccessIterator 
# 4678
__last) 
# 4679
{ 
# 4685
; 
# 4686
; 
# 4687
; 
# 4689
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4691
} 
# 4712 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4714
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4715
__middle, _RandomAccessIterator 
# 4716
__last, _Compare 
# 4717
__comp) 
# 4718
{ 
# 4725
; 
# 4726
; 
# 4727
; 
# 4729
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4731
} 
# 4748 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4750
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4751
__last) 
# 4752
{ 
# 4758
; 
# 4759
; 
# 4760
; 
# 4762
if ((__first == __last) || (__nth == __last)) { 
# 4763
return; }  
# 4765
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter()); 
# 4768
} 
# 4787 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4789
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4790
__last, _Compare __comp) 
# 4791
{ 
# 4798
; 
# 4799
; 
# 4800
; 
# 4802
if ((__first == __last) || (__nth == __last)) { 
# 4803
return; }  
# 4805
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4808
} 
# 4824 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4826
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4827
{ 
# 4833
; 
# 4834
; 
# 4836
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4837
} 
# 4854 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4856
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4857
__comp) 
# 4858
{ 
# 4865
; 
# 4866
; 
# 4868
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4869
} 
# 4871
template< class _InputIterator1, class _InputIterator2, class 
# 4872
_OutputIterator, class _Compare> _OutputIterator 
# 4874
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4875
__first2, _InputIterator2 __last2, _OutputIterator 
# 4876
__result, _Compare __comp) 
# 4877
{ 
# 4878
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4879
{ 
# 4880
if (__comp(__first2, __first1)) 
# 4881
{ 
# 4882
(*__result) = (*__first2); 
# 4883
++__first2; 
# 4884
} else 
# 4886
{ 
# 4887
(*__result) = (*__first1); 
# 4888
++__first1; 
# 4889
}  
# 4890
++__result; 
# 4891
}  
# 4892
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4894
} 
# 4915 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4916
_OutputIterator> inline _OutputIterator 
# 4918
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4919
__first2, _InputIterator2 __last2, _OutputIterator 
# 4920
__result) 
# 4921
{ 
# 4932
; 
# 4933
; 
# 4934
; 
# 4935
; 
# 4937
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 4940
} 
# 4965 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4966
_OutputIterator, class _Compare> inline _OutputIterator 
# 4968
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4969
__first2, _InputIterator2 __last2, _OutputIterator 
# 4970
__result, _Compare __comp) 
# 4971
{ 
# 4982
; 
# 4983
; 
# 4984
; 
# 4985
; 
# 4987
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4990
} 
# 4992
template< class _RandomAccessIterator, class _Compare> inline void 
# 4994
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4995
__comp) 
# 4996
{ 
# 4998
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 5000
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 5002
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type>  _TmpBuf; 
# 5003
_TmpBuf __buf(__first, __last); 
# 5005
if (__buf.begin() == 0) { 
# 5006
std::__inplace_stable_sort(__first, __last, __comp); } else { 
# 5008
std::__stable_sort_adaptive(__first, __last, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 5010
} 
# 5029 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 5031
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 5032
{ 
# 5038
; 
# 5039
; 
# 5041
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5043
} 
# 5063 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 5065
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5066
__comp) 
# 5067
{ 
# 5074
; 
# 5075
; 
# 5077
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5079
} 
# 5081
template< class _InputIterator1, class _InputIterator2, class 
# 5082
_OutputIterator, class 
# 5083
_Compare> _OutputIterator 
# 5085
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5086
__first2, _InputIterator2 __last2, _OutputIterator 
# 5087
__result, _Compare __comp) 
# 5088
{ 
# 5089
while ((__first1 != __last1) && (__first2 != __last2)) 
# 5090
{ 
# 5091
if (__comp(__first1, __first2)) 
# 5092
{ 
# 5093
(*__result) = (*__first1); 
# 5094
++__first1; 
# 5095
} else { 
# 5096
if (__comp(__first2, __first1)) 
# 5097
{ 
# 5098
(*__result) = (*__first2); 
# 5099
++__first2; 
# 5100
} else 
# 5102
{ 
# 5103
(*__result) = (*__first1); 
# 5104
++__first1; 
# 5105
++__first2; 
# 5106
}  }  
# 5107
++__result; 
# 5108
}  
# 5109
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5111
} 
# 5131 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5132
_OutputIterator> inline _OutputIterator 
# 5134
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5135
__first2, _InputIterator2 __last2, _OutputIterator 
# 5136
__result) 
# 5137
{ 
# 5151
; 
# 5152
; 
# 5153
; 
# 5154
; 
# 5156
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5159
} 
# 5180 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5181
_OutputIterator, class _Compare> inline _OutputIterator 
# 5183
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5184
__first2, _InputIterator2 __last2, _OutputIterator 
# 5185
__result, _Compare __comp) 
# 5186
{ 
# 5200
; 
# 5201
; 
# 5202
; 
# 5203
; 
# 5205
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5208
} 
# 5210
template< class _InputIterator1, class _InputIterator2, class 
# 5211
_OutputIterator, class 
# 5212
_Compare> _OutputIterator 
# 5214
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5215
__first2, _InputIterator2 __last2, _OutputIterator 
# 5216
__result, _Compare __comp) 
# 5217
{ 
# 5218
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5219
if (__comp(__first1, __first2)) { 
# 5220
++__first1; } else { 
# 5221
if (__comp(__first2, __first1)) { 
# 5222
++__first2; } else 
# 5224
{ 
# 5225
(*__result) = (*__first1); 
# 5226
++__first1; 
# 5227
++__first2; 
# 5228
++__result; 
# 5229
}  }  }  
# 5230
return __result; 
# 5231
} 
# 5250 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5251
_OutputIterator> inline _OutputIterator 
# 5253
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5254
__first2, _InputIterator2 __last2, _OutputIterator 
# 5255
__result) 
# 5256
{ 
# 5268
; 
# 5269
; 
# 5270
; 
# 5271
; 
# 5273
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5276
} 
# 5298 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5299
_OutputIterator, class _Compare> inline _OutputIterator 
# 5301
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5302
__first2, _InputIterator2 __last2, _OutputIterator 
# 5303
__result, _Compare __comp) 
# 5304
{ 
# 5316
; 
# 5317
; 
# 5318
; 
# 5319
; 
# 5321
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5324
} 
# 5326
template< class _InputIterator1, class _InputIterator2, class 
# 5327
_OutputIterator, class 
# 5328
_Compare> _OutputIterator 
# 5330
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5331
__first2, _InputIterator2 __last2, _OutputIterator 
# 5332
__result, _Compare __comp) 
# 5333
{ 
# 5334
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5335
if (__comp(__first1, __first2)) 
# 5336
{ 
# 5337
(*__result) = (*__first1); 
# 5338
++__first1; 
# 5339
++__result; 
# 5340
} else { 
# 5341
if (__comp(__first2, __first1)) { 
# 5342
++__first2; } else 
# 5344
{ 
# 5345
++__first1; 
# 5346
++__first2; 
# 5347
}  }  }  
# 5348
return std::copy(__first1, __last1, __result); 
# 5349
} 
# 5370 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5371
_OutputIterator> inline _OutputIterator 
# 5373
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5374
__first2, _InputIterator2 __last2, _OutputIterator 
# 5375
__result) 
# 5376
{ 
# 5388
; 
# 5389
; 
# 5390
; 
# 5391
; 
# 5393
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5396
} 
# 5420 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5421
_OutputIterator, class _Compare> inline _OutputIterator 
# 5423
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5424
__first2, _InputIterator2 __last2, _OutputIterator 
# 5425
__result, _Compare __comp) 
# 5426
{ 
# 5438
; 
# 5439
; 
# 5440
; 
# 5441
; 
# 5443
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5446
} 
# 5448
template< class _InputIterator1, class _InputIterator2, class 
# 5449
_OutputIterator, class 
# 5450
_Compare> _OutputIterator 
# 5452
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 
# 5453
__last1, _InputIterator2 
# 5454
__first2, _InputIterator2 
# 5455
__last2, _OutputIterator 
# 5456
__result, _Compare 
# 5457
__comp) 
# 5458
{ 
# 5459
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5460
if (__comp(__first1, __first2)) 
# 5461
{ 
# 5462
(*__result) = (*__first1); 
# 5463
++__first1; 
# 5464
++__result; 
# 5465
} else { 
# 5466
if (__comp(__first2, __first1)) 
# 5467
{ 
# 5468
(*__result) = (*__first2); 
# 5469
++__first2; 
# 5470
++__result; 
# 5471
} else 
# 5473
{ 
# 5474
++__first1; 
# 5475
++__first2; 
# 5476
}  }  }  
# 5477
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5479
} 
# 5498 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5499
_OutputIterator> inline _OutputIterator 
# 5501
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5502
__first2, _InputIterator2 __last2, _OutputIterator 
# 5503
__result) 
# 5504
{ 
# 5518
; 
# 5519
; 
# 5520
; 
# 5521
; 
# 5523
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5526
} 
# 5548 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5549
_OutputIterator, class _Compare> inline _OutputIterator 
# 5551
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5552
__first2, _InputIterator2 __last2, _OutputIterator 
# 5553
__result, _Compare 
# 5554
__comp) 
# 5555
{ 
# 5569
; 
# 5570
; 
# 5571
; 
# 5572
; 
# 5574
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5577
} 
# 5579
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5582
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5583
__comp) 
# 5584
{ 
# 5585
if (__first == __last) { 
# 5586
return __first; }  
# 5587
_ForwardIterator __result = __first; 
# 5588
while ((++__first) != __last) { 
# 5589
if (__comp(__first, __result)) { 
# 5590
__result = __first; }  }  
# 5591
return __result; 
# 5592
} 
# 5601 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5604
min_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5605
{ 
# 5610
; 
# 5611
; 
# 5613
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5615
} 
# 5626 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5629
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5630
__comp) 
# 5631
{ 
# 5637
; 
# 5638
; 
# 5640
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5642
} 
# 5644
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5647
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5648
__comp) 
# 5649
{ 
# 5650
if (__first == __last) { return __first; }  
# 5651
_ForwardIterator __result = __first; 
# 5652
while ((++__first) != __last) { 
# 5653
if (__comp(__result, __first)) { 
# 5654
__result = __first; }  }  
# 5655
return __result; 
# 5656
} 
# 5665 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5668
max_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5669
{ 
# 5674
; 
# 5675
; 
# 5677
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5679
} 
# 5690 "/usr/include/c++/7/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5693
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5694
__comp) 
# 5695
{ 
# 5701
; 
# 5702
; 
# 5704
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5706
} 
# 5710
template< class _InputIterator, class _RandomAccessIterator, class 
# 5711
_Size, class _UniformRandomBitGenerator> _RandomAccessIterator 
# 5713
__sample(_InputIterator __first, _InputIterator __last, input_iterator_tag, _RandomAccessIterator 
# 5714
__out, random_access_iterator_tag, _Size 
# 5715
__n, _UniformRandomBitGenerator &&__g) 
# 5716
{ 
# 5717
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5718
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5719
__distrib_type __d{}; 
# 5720
_Size __sample_sz = (0); 
# 5721
while ((__first != __last) && (__sample_sz != __n)) 
# 5722
{ 
# 5723
(__out[__sample_sz++]) = (*__first); 
# 5724
++__first; 
# 5725
}  
# 5726
for (auto __pop_sz = __sample_sz; __first != __last; (++__first), ((void)(++__pop_sz))) 
# 5728
{ 
# 5729
const auto __k = __d(__g, __param_type{0, __pop_sz}); 
# 5730
if (__k < __n) { 
# 5731
(__out[__k]) = (*__first); }  
# 5732
}  
# 5733
return __out + __sample_sz; 
# 5734
} 
# 5737
template< class _ForwardIterator, class _OutputIterator, class _Cat, class 
# 5738
_Size, class _UniformRandomBitGenerator> _OutputIterator 
# 5740
__sample(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag, _OutputIterator 
# 5742
__out, _Cat, _Size 
# 5743
__n, _UniformRandomBitGenerator &&__g) 
# 5744
{ 
# 5745
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5746
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5747
using _USize = make_unsigned_t< _Size> ; 
# 5748
using _Gen = remove_reference_t< _UniformRandomBitGenerator> ; 
# 5749
using __uc_type = common_type_t< typename remove_reference< _UniformRandomBitGenerator> ::type::result_type, make_unsigned_t< _Size> > ; 
# 5751
__distrib_type __d{}; 
# 5752
_Size __unsampled_sz = std::distance(__first, __last); 
# 5753
__n = std::min(__n, __unsampled_sz); 
# 5758
const __uc_type __urngrange = __g.max() - __g.min(); 
# 5759
if ((__urngrange / ((__uc_type)__unsampled_sz)) >= ((__uc_type)__unsampled_sz)) 
# 5762
{ 
# 5763
while ((__n != 0) && (__unsampled_sz >= 2)) 
# 5764
{ 
# 5765
const pair< _Size, _Size>  __p = __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g); 
# 5768
--__unsampled_sz; 
# 5769
if ((__p.first) < __n) 
# 5770
{ 
# 5771
(*(__out++)) = (*__first); 
# 5772
--__n; 
# 5773
}  
# 5775
++__first; 
# 5777
if (__n == 0) { break; }  
# 5779
--__unsampled_sz; 
# 5780
if ((__p.second) < __n) 
# 5781
{ 
# 5782
(*(__out++)) = (*__first); 
# 5783
--__n; 
# 5784
}  
# 5786
++__first; 
# 5787
}  
# 5788
}  
# 5792
for (; __n != 0; ++__first) { 
# 5793
if (__d(__g, __param_type{0, --__unsampled_sz}) < __n) 
# 5794
{ 
# 5795
(*(__out++)) = (*__first); 
# 5796
--__n; 
# 5797
}  }  
# 5798
return __out; 
# 5799
} 
# 5834 "/usr/include/c++/7/bits/stl_algo.h" 3
}
# 61 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef uint32_t cuuint32_t; 
# 62
typedef uint64_t cuuint64_t; 
# 235 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
extern "C" {
# 243
typedef unsigned long long CUdeviceptr_v2; 
# 247
typedef CUdeviceptr_v2 CUdeviceptr; 
# 249
typedef int CUdevice_v1; 
# 250
typedef CUdevice_v1 CUdevice; 
# 251
typedef struct CUctx_st *CUcontext; 
# 252
typedef struct CUmod_st *CUmodule; 
# 253
typedef CUfunc_st *CUfunction; 
# 254
typedef struct CUarray_st *CUarray; 
# 255
typedef struct CUmipmappedArray_st *CUmipmappedArray; 
# 256
typedef struct CUtexref_st *CUtexref; 
# 257
typedef struct CUsurfref_st *CUsurfref; 
# 258
typedef CUevent_st *CUevent; 
# 259
typedef CUstream_st *CUstream; 
# 260
typedef struct CUgraphicsResource_st *CUgraphicsResource; 
# 261
typedef unsigned long long CUtexObject_v1; 
# 262
typedef CUtexObject_v1 CUtexObject; 
# 263
typedef unsigned long long CUsurfObject_v1; 
# 264
typedef CUsurfObject_v1 CUsurfObject; 
# 265
typedef struct CUextMemory_st *CUexternalMemory; 
# 266
typedef struct CUextSemaphore_st *CUexternalSemaphore; 
# 267
typedef CUgraph_st *CUgraph; 
# 268
typedef CUgraphNode_st *CUgraphNode; 
# 269
typedef CUgraphExec_st *CUgraphExec; 
# 270
typedef CUmemPoolHandle_st *CUmemoryPool; 
# 271
typedef CUuserObject_st *CUuserObject; 
# 290 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 288
struct CUipcEventHandle_st { 
# 289
char reserved[64]; 
# 290
} CUipcEventHandle_v1; 
# 291
typedef CUipcEventHandle_v1 CUipcEventHandle; 
# 298
typedef 
# 296
struct CUipcMemHandle_st { 
# 297
char reserved[64]; 
# 298
} CUipcMemHandle_v1; 
# 299
typedef CUipcMemHandle_v1 CUipcMemHandle; 
# 306
typedef 
# 304
enum CUipcMem_flags_enum { 
# 305
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
# 306
} CUipcMem_flags; 
# 316
typedef 
# 312
enum CUmemAttach_flags_enum { 
# 313
CU_MEM_ATTACH_GLOBAL = 1, 
# 314
CU_MEM_ATTACH_HOST, 
# 315
CU_MEM_ATTACH_SINGLE = 4
# 316
} CUmemAttach_flags; 
# 335
typedef 
# 321
enum CUctx_flags_enum { 
# 322
CU_CTX_SCHED_AUTO, 
# 323
CU_CTX_SCHED_SPIN, 
# 324
CU_CTX_SCHED_YIELD, 
# 325
CU_CTX_SCHED_BLOCKING_SYNC = 4, 
# 326
CU_CTX_BLOCKING_SYNC = 4, 
# 329
CU_CTX_SCHED_MASK = 7, 
# 330
CU_CTX_MAP_HOST, 
# 333
CU_CTX_LMEM_RESIZE_TO_MAX = 16, 
# 334
CU_CTX_FLAGS_MASK = 31
# 335
} CUctx_flags; 
# 343
typedef 
# 340
enum CUstream_flags_enum { 
# 341
CU_STREAM_DEFAULT, 
# 342
CU_STREAM_NON_BLOCKING
# 343
} CUstream_flags; 
# 373 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 368
enum CUevent_flags_enum { 
# 369
CU_EVENT_DEFAULT, 
# 370
CU_EVENT_BLOCKING_SYNC, 
# 371
CU_EVENT_DISABLE_TIMING, 
# 372
CU_EVENT_INTERPROCESS = 4
# 373
} CUevent_flags; 
# 383
typedef 
# 378
enum CUevent_record_flags_enum { 
# 379
CU_EVENT_RECORD_DEFAULT, 
# 380
CU_EVENT_RECORD_EXTERNAL
# 383
} CUevent_record_flags; 
# 393
typedef 
# 388
enum CUevent_wait_flags_enum { 
# 389
CU_EVENT_WAIT_DEFAULT, 
# 390
CU_EVENT_WAIT_EXTERNAL
# 393
} CUevent_wait_flags; 
# 416 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 398 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
enum CUstreamWaitValue_flags_enum { 
# 399
CU_STREAM_WAIT_VALUE_GEQ, 
# 402
CU_STREAM_WAIT_VALUE_EQ, 
# 403
CU_STREAM_WAIT_VALUE_AND, 
# 404
CU_STREAM_WAIT_VALUE_NOR, 
# 407
CU_STREAM_WAIT_VALUE_FLUSH = (1 << 30)
# 416 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
} CUstreamWaitValue_flags; 
# 429
typedef 
# 421
enum CUstreamWriteValue_flags_enum { 
# 422
CU_STREAM_WRITE_VALUE_DEFAULT, 
# 423
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER
# 429
} CUstreamWriteValue_flags; 
# 441
typedef 
# 434
enum CUstreamBatchMemOpType_enum { 
# 435
CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1, 
# 436
CU_STREAM_MEM_OP_WRITE_VALUE_32, 
# 437
CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4, 
# 438
CU_STREAM_MEM_OP_WRITE_VALUE_64, 
# 439
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3
# 441
} CUstreamBatchMemOpType; 
# 473
typedef 
# 446
union CUstreamBatchMemOpParams_union { 
# 447
CUstreamBatchMemOpType operation; 
# 448
struct CUstreamMemOpWaitValueParams_st { 
# 449
CUstreamBatchMemOpType operation; 
# 450
CUdeviceptr address; 
# 451
union { 
# 452
cuuint32_t value; 
# 453
cuuint64_t value64; 
# 454
}; 
# 455
unsigned flags; 
# 456
CUdeviceptr alias; 
# 457
} waitValue; 
# 458
struct CUstreamMemOpWriteValueParams_st { 
# 459
CUstreamBatchMemOpType operation; 
# 460
CUdeviceptr address; 
# 461
union { 
# 462
cuuint32_t value; 
# 463
cuuint64_t value64; 
# 464
}; 
# 465
unsigned flags; 
# 466
CUdeviceptr alias; 
# 467
} writeValue; 
# 468
struct CUstreamMemOpFlushRemoteWritesParams_st { 
# 469
CUstreamBatchMemOpType operation; 
# 470
unsigned flags; 
# 471
} flushRemoteWrites; 
# 472
cuuint64_t pad[6]; 
# 473
} CUstreamBatchMemOpParams_v1; 
# 474
typedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams; 
# 482
typedef 
# 479
enum CUoccupancy_flags_enum { 
# 480
CU_OCCUPANCY_DEFAULT, 
# 481
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE
# 482
} CUoccupancy_flags; 
# 490
typedef 
# 487
enum CUstreamUpdateCaptureDependencies_flags_enum { 
# 488
CU_STREAM_ADD_CAPTURE_DEPENDENCIES, 
# 489
CU_STREAM_SET_CAPTURE_DEPENDENCIES
# 490
} CUstreamUpdateCaptureDependencies_flags; 
# 531
typedef 
# 495
enum CUarray_format_enum { 
# 496
CU_AD_FORMAT_UNSIGNED_INT8 = 1, 
# 497
CU_AD_FORMAT_UNSIGNED_INT16, 
# 498
CU_AD_FORMAT_UNSIGNED_INT32, 
# 499
CU_AD_FORMAT_SIGNED_INT8 = 8, 
# 500
CU_AD_FORMAT_SIGNED_INT16, 
# 501
CU_AD_FORMAT_SIGNED_INT32, 
# 502
CU_AD_FORMAT_HALF = 16, 
# 503
CU_AD_FORMAT_FLOAT = 32, 
# 504
CU_AD_FORMAT_NV12 = 176, 
# 505
CU_AD_FORMAT_UNORM_INT8X1 = 192, 
# 506
CU_AD_FORMAT_UNORM_INT8X2, 
# 507
CU_AD_FORMAT_UNORM_INT8X4, 
# 508
CU_AD_FORMAT_UNORM_INT16X1, 
# 509
CU_AD_FORMAT_UNORM_INT16X2, 
# 510
CU_AD_FORMAT_UNORM_INT16X4, 
# 511
CU_AD_FORMAT_SNORM_INT8X1, 
# 512
CU_AD_FORMAT_SNORM_INT8X2, 
# 513
CU_AD_FORMAT_SNORM_INT8X4, 
# 514
CU_AD_FORMAT_SNORM_INT16X1, 
# 515
CU_AD_FORMAT_SNORM_INT16X2, 
# 516
CU_AD_FORMAT_SNORM_INT16X4, 
# 517
CU_AD_FORMAT_BC1_UNORM = 145, 
# 518
CU_AD_FORMAT_BC1_UNORM_SRGB, 
# 519
CU_AD_FORMAT_BC2_UNORM, 
# 520
CU_AD_FORMAT_BC2_UNORM_SRGB, 
# 521
CU_AD_FORMAT_BC3_UNORM, 
# 522
CU_AD_FORMAT_BC3_UNORM_SRGB, 
# 523
CU_AD_FORMAT_BC4_UNORM, 
# 524
CU_AD_FORMAT_BC4_SNORM, 
# 525
CU_AD_FORMAT_BC5_UNORM, 
# 526
CU_AD_FORMAT_BC5_SNORM, 
# 527
CU_AD_FORMAT_BC6H_UF16, 
# 528
CU_AD_FORMAT_BC6H_SF16, 
# 529
CU_AD_FORMAT_BC7_UNORM, 
# 530
CU_AD_FORMAT_BC7_UNORM_SRGB
# 531
} CUarray_format; 
# 541
typedef 
# 536
enum CUaddress_mode_enum { 
# 537
CU_TR_ADDRESS_MODE_WRAP, 
# 538
CU_TR_ADDRESS_MODE_CLAMP, 
# 539
CU_TR_ADDRESS_MODE_MIRROR, 
# 540
CU_TR_ADDRESS_MODE_BORDER
# 541
} CUaddress_mode; 
# 549
typedef 
# 546
enum CUfilter_mode_enum { 
# 547
CU_TR_FILTER_MODE_POINT, 
# 548
CU_TR_FILTER_MODE_LINEAR
# 549
} CUfilter_mode; 
# 687
typedef 
# 554
enum CUdevice_attribute_enum { 
# 555
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1, 
# 556
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, 
# 557
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, 
# 558
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, 
# 559
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, 
# 560
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, 
# 561
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, 
# 562
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, 
# 563
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8, 
# 564
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, 
# 565
CU_DEVICE_ATTRIBUTE_WARP_SIZE, 
# 566
CU_DEVICE_ATTRIBUTE_MAX_PITCH, 
# 567
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, 
# 568
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12, 
# 569
CU_DEVICE_ATTRIBUTE_CLOCK_RATE, 
# 570
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, 
# 571
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, 
# 572
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, 
# 573
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, 
# 574
CU_DEVICE_ATTRIBUTE_INTEGRATED, 
# 575
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, 
# 576
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, 
# 577
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH, 
# 578
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH, 
# 579
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT, 
# 580
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH, 
# 581
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT, 
# 582
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH, 
# 583
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH, 
# 584
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT, 
# 585
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS, 
# 586
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27, 
# 587
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT, 
# 588
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES, 
# 589
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT, 
# 590
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, 
# 591
CU_DEVICE_ATTRIBUTE_ECC_ENABLED, 
# 592
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, 
# 593
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, 
# 594
CU_DEVICE_ATTRIBUTE_TCC_DRIVER, 
# 595
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, 
# 596
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, 
# 597
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, 
# 598
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, 
# 599
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, 
# 600
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, 
# 601
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH, 
# 602
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS, 
# 603
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER, 
# 604
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH, 
# 605
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT, 
# 606
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE, 
# 607
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE, 
# 608
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE, 
# 609
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, 
# 610
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT, 
# 611
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH, 
# 612
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH, 
# 613
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS, 
# 614
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH, 
# 615
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH, 
# 616
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT, 
# 617
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH, 
# 618
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT, 
# 619
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH, 
# 620
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH, 
# 621
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS, 
# 622
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH, 
# 623
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT, 
# 624
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS, 
# 625
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH, 
# 626
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH, 
# 627
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS, 
# 628
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH, 
# 629
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH, 
# 630
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT, 
# 631
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH, 
# 632
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH, 
# 633
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT, 
# 634
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, 
# 635
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, 
# 636
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH, 
# 637
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED, 
# 638
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED, 
# 639
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED, 
# 640
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR, 
# 641
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR, 
# 642
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY, 
# 643
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD, 
# 644
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID, 
# 645
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED, 
# 646
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, 
# 647
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS, 
# 648
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS, 
# 649
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED, 
# 650
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM, 
# 651
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS, 
# 652
CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS, 
# 653
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR, 
# 654
CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH, 
# 655
CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH, 
# 656
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN, 
# 657
CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES, 
# 658
CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED, 
# 659
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES, 
# 660
CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST, 
# 661
CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED, 
# 662
CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED = 102, 
# 663
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED, 
# 664
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED, 
# 665
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED, 
# 666
CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR, 
# 667
CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED, 
# 668
CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE, 
# 669
CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE, 
# 670
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED, 
# 671
CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK, 
# 672
CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED, 
# 673
CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED, 
# 674
CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED, 
# 675
CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED, 
# 676
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED, 
# 677
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS, 
# 678
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING, 
# 679
CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES, 
# 684
CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED = 121, 
# 686
CU_DEVICE_ATTRIBUTE_MAX
# 687
} CUdevice_attribute; 
# 703
typedef 
# 692
struct CUdevprop_st { 
# 693
int maxThreadsPerBlock; 
# 694
int maxThreadsDim[3]; 
# 695
int maxGridSize[3]; 
# 696
int sharedMemPerBlock; 
# 697
int totalConstantMemory; 
# 698
int SIMDWidth; 
# 699
int memPitch; 
# 700
int regsPerBlock; 
# 701
int clockRate; 
# 702
int textureAlign; 
# 703
} CUdevprop_v1; 
# 704
typedef CUdevprop_v1 CUdevprop; 
# 727
typedef 
# 709
enum CUpointer_attribute_enum { 
# 710
CU_POINTER_ATTRIBUTE_CONTEXT = 1, 
# 711
CU_POINTER_ATTRIBUTE_MEMORY_TYPE, 
# 712
CU_POINTER_ATTRIBUTE_DEVICE_POINTER, 
# 713
CU_POINTER_ATTRIBUTE_HOST_POINTER, 
# 714
CU_POINTER_ATTRIBUTE_P2P_TOKENS, 
# 715
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS, 
# 716
CU_POINTER_ATTRIBUTE_BUFFER_ID, 
# 717
CU_POINTER_ATTRIBUTE_IS_MANAGED, 
# 718
CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL, 
# 719
CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE, 
# 720
CU_POINTER_ATTRIBUTE_RANGE_START_ADDR, 
# 721
CU_POINTER_ATTRIBUTE_RANGE_SIZE, 
# 722
CU_POINTER_ATTRIBUTE_MAPPED, 
# 723
CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES, 
# 724
CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE, 
# 725
CU_POINTER_ATTRIBUTE_ACCESS_FLAGS, 
# 726
CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE
# 727
} CUpointer_attribute; 
# 876 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 732 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
enum CUfunction_attribute_enum { 
# 738
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, 
# 745
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, 
# 751
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, 
# 756
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, 
# 761
CU_FUNC_ATTRIBUTE_NUM_REGS, 
# 770 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION, 
# 779 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION, 
# 785
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, 
# 793
CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, 
# 802 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, 
# 875 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX
# 876
} CUfunction_attribute; 
# 886
typedef 
# 881
enum CUfunc_cache_enum { 
# 882
CU_FUNC_CACHE_PREFER_NONE, 
# 883
CU_FUNC_CACHE_PREFER_SHARED, 
# 884
CU_FUNC_CACHE_PREFER_L1, 
# 885
CU_FUNC_CACHE_PREFER_EQUAL
# 886
} CUfunc_cache; 
# 895
typedef 
# 891
enum CUsharedconfig_enum { 
# 892
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE, 
# 893
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE, 
# 894
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
# 895
} CUsharedconfig; 
# 904
typedef 
# 900
enum CUshared_carveout_enum { 
# 901
CU_SHAREDMEM_CARVEOUT_DEFAULT = (-1), 
# 902
CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 100, 
# 903
CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
# 904
} CUshared_carveout; 
# 914
typedef 
# 909
enum CUmemorytype_enum { 
# 910
CU_MEMORYTYPE_HOST = 1, 
# 911
CU_MEMORYTYPE_DEVICE, 
# 912
CU_MEMORYTYPE_ARRAY, 
# 913
CU_MEMORYTYPE_UNIFIED
# 914
} CUmemorytype; 
# 923
typedef 
# 919
enum CUcomputemode_enum { 
# 920
CU_COMPUTEMODE_DEFAULT, 
# 921
CU_COMPUTEMODE_PROHIBITED = 2, 
# 922
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
# 923
} CUcomputemode; 
# 935
typedef 
# 928
enum CUmem_advise_enum { 
# 929
CU_MEM_ADVISE_SET_READ_MOSTLY = 1, 
# 930
CU_MEM_ADVISE_UNSET_READ_MOSTLY, 
# 931
CU_MEM_ADVISE_SET_PREFERRED_LOCATION, 
# 932
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION, 
# 933
CU_MEM_ADVISE_SET_ACCESSED_BY, 
# 934
CU_MEM_ADVISE_UNSET_ACCESSED_BY
# 935
} CUmem_advise; 
# 942
typedef 
# 937
enum CUmem_range_attribute_enum { 
# 938
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1, 
# 939
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION, 
# 940
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY, 
# 941
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION
# 942
} CUmem_range_attribute; 
# 1163 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 947 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
enum CUjit_option_enum { 
# 954
CU_JIT_MAX_REGISTERS, 
# 969 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_THREADS_PER_BLOCK, 
# 977
CU_JIT_WALL_TIME, 
# 986 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER, 
# 995 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES, 
# 1004 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER, 
# 1013 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES, 
# 1021
CU_JIT_OPTIMIZATION_LEVEL, 
# 1029
CU_JIT_TARGET_FROM_CUCONTEXT, 
# 1037
CU_JIT_TARGET, 
# 1046 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_FALLBACK_STRATEGY, 
# 1054
CU_JIT_GENERATE_DEBUG_INFO, 
# 1061
CU_JIT_LOG_VERBOSE, 
# 1068
CU_JIT_GENERATE_LINE_INFO, 
# 1076
CU_JIT_CACHE_MODE, 
# 1081
CU_JIT_NEW_SM3X_OPT, 
# 1082
CU_JIT_FAST_COMPILE, 
# 1096 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_GLOBAL_SYMBOL_NAMES, 
# 1105 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_GLOBAL_SYMBOL_ADDRESSES, 
# 1113
CU_JIT_GLOBAL_SYMBOL_COUNT, 
# 1121
CU_JIT_LTO, 
# 1130 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_FTZ, 
# 1140 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_PREC_DIV, 
# 1150 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_PREC_SQRT, 
# 1159 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_JIT_FMA, 
# 1161
CU_JIT_NUM_OPTIONS
# 1163
} CUjit_option; 
# 1199
typedef 
# 1168
enum CUjit_target_enum { 
# 1171
CU_TARGET_COMPUTE_20 = 20, 
# 1172
CU_TARGET_COMPUTE_21, 
# 1175
CU_TARGET_COMPUTE_30 = 30, 
# 1176
CU_TARGET_COMPUTE_32 = 32, 
# 1177
CU_TARGET_COMPUTE_35 = 35, 
# 1178
CU_TARGET_COMPUTE_37 = 37, 
# 1181
CU_TARGET_COMPUTE_50 = 50, 
# 1182
CU_TARGET_COMPUTE_52 = 52, 
# 1183
CU_TARGET_COMPUTE_53, 
# 1186
CU_TARGET_COMPUTE_60 = 60, 
# 1187
CU_TARGET_COMPUTE_61, 
# 1188
CU_TARGET_COMPUTE_62, 
# 1191
CU_TARGET_COMPUTE_70 = 70, 
# 1192
CU_TARGET_COMPUTE_72 = 72, 
# 1194
CU_TARGET_COMPUTE_75 = 75, 
# 1196
CU_TARGET_COMPUTE_80 = 80, 
# 1197
CU_TARGET_COMPUTE_86 = 86
# 1199
} CUjit_target; 
# 1210
typedef 
# 1204
enum CUjit_fallback_enum { 
# 1206
CU_PREFER_PTX, 
# 1208
CU_PREFER_BINARY
# 1210
} CUjit_fallback; 
# 1220
typedef 
# 1215
enum CUjit_cacheMode_enum { 
# 1217
CU_JIT_CACHE_OPTION_NONE, 
# 1218
CU_JIT_CACHE_OPTION_CG, 
# 1219
CU_JIT_CACHE_OPTION_CA
# 1220
} CUjit_cacheMode; 
# 1264
typedef 
# 1225
enum CUjitInputType_enum { 
# 1231
CU_JIT_INPUT_CUBIN, 
# 1237
CU_JIT_INPUT_PTX, 
# 1243
CU_JIT_INPUT_FATBINARY, 
# 1249
CU_JIT_INPUT_OBJECT, 
# 1255
CU_JIT_INPUT_LIBRARY, 
# 1261
CU_JIT_INPUT_NVVM, 
# 1263
CU_JIT_NUM_INPUT_TYPES
# 1264
} CUjitInputType; 
# 1266
typedef struct CUlinkState_st *CUlinkState; 
# 1277
typedef 
# 1271
enum CUgraphicsRegisterFlags_enum { 
# 1272
CU_GRAPHICS_REGISTER_FLAGS_NONE, 
# 1273
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY, 
# 1274
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD, 
# 1275
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4, 
# 1276
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
# 1277
} CUgraphicsRegisterFlags; 
# 1286
typedef 
# 1282
enum CUgraphicsMapResourceFlags_enum { 
# 1283
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE, 
# 1284
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY, 
# 1285
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 1286
} CUgraphicsMapResourceFlags; 
# 1298
typedef 
# 1291
enum CUarray_cubemap_face_enum { 
# 1292
CU_CUBEMAP_FACE_POSITIVE_X, 
# 1293
CU_CUBEMAP_FACE_NEGATIVE_X, 
# 1294
CU_CUBEMAP_FACE_POSITIVE_Y, 
# 1295
CU_CUBEMAP_FACE_NEGATIVE_Y, 
# 1296
CU_CUBEMAP_FACE_POSITIVE_Z, 
# 1297
CU_CUBEMAP_FACE_NEGATIVE_Z
# 1298
} CUarray_cubemap_face; 
# 1312
typedef 
# 1303
enum CUlimit_enum { 
# 1304
CU_LIMIT_STACK_SIZE, 
# 1305
CU_LIMIT_PRINTF_FIFO_SIZE, 
# 1306
CU_LIMIT_MALLOC_HEAP_SIZE, 
# 1307
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH, 
# 1308
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT, 
# 1309
CU_LIMIT_MAX_L2_FETCH_GRANULARITY, 
# 1310
CU_LIMIT_PERSISTING_L2_CACHE_SIZE, 
# 1311
CU_LIMIT_MAX
# 1312
} CUlimit; 
# 1322
typedef 
# 1317
enum CUresourcetype_enum { 
# 1318
CU_RESOURCE_TYPE_ARRAY, 
# 1319
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY, 
# 1320
CU_RESOURCE_TYPE_LINEAR, 
# 1321
CU_RESOURCE_TYPE_PITCH2D
# 1322
} CUresourcetype; 
# 1334 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef void (*CUhostFn)(void * userData); 
# 1343
typedef 
# 1339
enum CUaccessProperty_enum { 
# 1340
CU_ACCESS_PROPERTY_NORMAL, 
# 1341
CU_ACCESS_PROPERTY_STREAMING, 
# 1342
CU_ACCESS_PROPERTY_PERSISTING
# 1343
} CUaccessProperty; 
# 1363 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 1357
struct CUaccessPolicyWindow_st { 
# 1358
void *base_ptr; 
# 1359
::size_t num_bytes; 
# 1360
float hitRatio; 
# 1361
CUaccessProperty hitProp; 
# 1362
CUaccessProperty missProp; 
# 1363
} CUaccessPolicyWindow_v1; 
# 1364
typedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow; 
# 1380
typedef 
# 1369
struct CUDA_KERNEL_NODE_PARAMS_st { 
# 1370
CUfunction func; 
# 1371
unsigned gridDimX; 
# 1372
unsigned gridDimY; 
# 1373
unsigned gridDimZ; 
# 1374
unsigned blockDimX; 
# 1375
unsigned blockDimY; 
# 1376
unsigned blockDimZ; 
# 1377
unsigned sharedMemBytes; 
# 1378
void **kernelParams; 
# 1379
void **extra; 
# 1380
} CUDA_KERNEL_NODE_PARAMS_v1; 
# 1381
typedef CUDA_KERNEL_NODE_PARAMS_v1 CUDA_KERNEL_NODE_PARAMS; 
# 1393
typedef 
# 1386
struct CUDA_MEMSET_NODE_PARAMS_st { 
# 1387
CUdeviceptr dst; 
# 1388
::size_t pitch; 
# 1389
unsigned value; 
# 1390
unsigned elementSize; 
# 1391
::size_t width; 
# 1392
::size_t height; 
# 1393
} CUDA_MEMSET_NODE_PARAMS_v1; 
# 1394
typedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS; 
# 1402
typedef 
# 1399
struct CUDA_HOST_NODE_PARAMS_st { 
# 1400
CUhostFn fn; 
# 1401
void *userData; 
# 1402
} CUDA_HOST_NODE_PARAMS_v1; 
# 1403
typedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS; 
# 1421
typedef 
# 1408
enum CUgraphNodeType_enum { 
# 1409
CU_GRAPH_NODE_TYPE_KERNEL, 
# 1410
CU_GRAPH_NODE_TYPE_MEMCPY, 
# 1411
CU_GRAPH_NODE_TYPE_MEMSET, 
# 1412
CU_GRAPH_NODE_TYPE_HOST, 
# 1413
CU_GRAPH_NODE_TYPE_GRAPH, 
# 1414
CU_GRAPH_NODE_TYPE_EMPTY, 
# 1415
CU_GRAPH_NODE_TYPE_WAIT_EVENT, 
# 1416
CU_GRAPH_NODE_TYPE_EVENT_RECORD, 
# 1417
CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL, 
# 1418
CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT, 
# 1419
CU_GRAPH_NODE_TYPE_MEM_ALLOC, 
# 1420
CU_GRAPH_NODE_TYPE_MEM_FREE
# 1421
} CUgraphNodeType; 
# 1428
typedef 
# 1423
enum CUsynchronizationPolicy_enum { 
# 1424
CU_SYNC_POLICY_AUTO = 1, 
# 1425
CU_SYNC_POLICY_SPIN, 
# 1426
CU_SYNC_POLICY_YIELD, 
# 1427
CU_SYNC_POLICY_BLOCKING_SYNC
# 1428
} CUsynchronizationPolicy; 
# 1436
typedef 
# 1433
enum CUkernelNodeAttrID_enum { 
# 1434
CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1, 
# 1435
CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE
# 1436
} CUkernelNodeAttrID; 
# 1444
typedef 
# 1441
union CUkernelNodeAttrValue_union { 
# 1442
CUaccessPolicyWindow accessPolicyWindow; 
# 1443
int cooperative; 
# 1444
} CUkernelNodeAttrValue_v1; 
# 1445
typedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue; 
# 1455
typedef 
# 1450
enum CUstreamCaptureStatus_enum { 
# 1451
CU_STREAM_CAPTURE_STATUS_NONE, 
# 1452
CU_STREAM_CAPTURE_STATUS_ACTIVE, 
# 1453
CU_STREAM_CAPTURE_STATUS_INVALIDATED
# 1455
} CUstreamCaptureStatus; 
# 1465
typedef 
# 1461
enum CUstreamCaptureMode_enum { 
# 1462
CU_STREAM_CAPTURE_MODE_GLOBAL, 
# 1463
CU_STREAM_CAPTURE_MODE_THREAD_LOCAL, 
# 1464
CU_STREAM_CAPTURE_MODE_RELAXED
# 1465
} CUstreamCaptureMode; 
# 1473
typedef 
# 1470
enum CUstreamAttrID_enum { 
# 1471
CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1, 
# 1472
CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
# 1473
} CUstreamAttrID; 
# 1481
typedef 
# 1478
union CUstreamAttrValue_union { 
# 1479
CUaccessPolicyWindow accessPolicyWindow; 
# 1480
CUsynchronizationPolicy syncPolicy; 
# 1481
} CUstreamAttrValue_v1; 
# 1482
typedef CUstreamAttrValue_v1 CUstreamAttrValue; 
# 1491
typedef 
# 1487
enum CUdriverProcAddress_flags_enum { 
# 1488
CU_GET_PROC_ADDRESS_DEFAULT, 
# 1489
CU_GET_PROC_ADDRESS_LEGACY_STREAM, 
# 1490
CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM
# 1491
} CUdriverProcAddress_flags; 
# 1499
typedef 
# 1496
enum CUexecAffinityType_enum { 
# 1497
CU_EXEC_AFFINITY_TYPE_SM_COUNT, 
# 1498
CU_EXEC_AFFINITY_TYPE_MAX
# 1499
} CUexecAffinityType; 
# 1506
typedef 
# 1504
struct CUexecAffinitySmCount_st { 
# 1505
unsigned val; 
# 1506
} CUexecAffinitySmCount_v1; 
# 1507
typedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount; 
# 1517
typedef 
# 1512
struct CUexecAffinityParam_st { 
# 1513
CUexecAffinityType type; 
# 1514
union { 
# 1515
CUexecAffinitySmCount smCount; 
# 1516
} param; 
# 1517
} CUexecAffinityParam_v1; 
# 1518
typedef CUexecAffinityParam_v1 CUexecAffinityParam; 
# 2104 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 1523 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
enum cudaError_enum { 
# 1529
CUDA_SUCCESS, 
# 1535
CUDA_ERROR_INVALID_VALUE, 
# 1541
CUDA_ERROR_OUT_OF_MEMORY, 
# 1547
CUDA_ERROR_NOT_INITIALIZED, 
# 1552
CUDA_ERROR_DEINITIALIZED, 
# 1559
CUDA_ERROR_PROFILER_DISABLED, 
# 1567
CUDA_ERROR_PROFILER_NOT_INITIALIZED, 
# 1574
CUDA_ERROR_PROFILER_ALREADY_STARTED, 
# 1581
CUDA_ERROR_PROFILER_ALREADY_STOPPED, 
# 1588
CUDA_ERROR_STUB_LIBRARY = 34, 
# 1594
CUDA_ERROR_NO_DEVICE = 100, 
# 1601
CUDA_ERROR_INVALID_DEVICE, 
# 1606
CUDA_ERROR_DEVICE_NOT_LICENSED, 
# 1612
CUDA_ERROR_INVALID_IMAGE = 200, 
# 1622 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT, 
# 1631 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT, 
# 1636
CUDA_ERROR_MAP_FAILED = 205, 
# 1641
CUDA_ERROR_UNMAP_FAILED, 
# 1647
CUDA_ERROR_ARRAY_IS_MAPPED, 
# 1652
CUDA_ERROR_ALREADY_MAPPED, 
# 1660
CUDA_ERROR_NO_BINARY_FOR_GPU, 
# 1665
CUDA_ERROR_ALREADY_ACQUIRED, 
# 1670
CUDA_ERROR_NOT_MAPPED, 
# 1676
CUDA_ERROR_NOT_MAPPED_AS_ARRAY, 
# 1682
CUDA_ERROR_NOT_MAPPED_AS_POINTER, 
# 1688
CUDA_ERROR_ECC_UNCORRECTABLE, 
# 1694
CUDA_ERROR_UNSUPPORTED_LIMIT, 
# 1701
CUDA_ERROR_CONTEXT_ALREADY_IN_USE, 
# 1707
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, 
# 1712
CUDA_ERROR_INVALID_PTX, 
# 1717
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT, 
# 1723
CUDA_ERROR_NVLINK_UNCORRECTABLE, 
# 1728
CUDA_ERROR_JIT_COMPILER_NOT_FOUND, 
# 1734
CUDA_ERROR_UNSUPPORTED_PTX_VERSION, 
# 1739
CUDA_ERROR_JIT_COMPILATION_DISABLED, 
# 1745
CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY, 
# 1751
CUDA_ERROR_INVALID_SOURCE = 300, 
# 1756
CUDA_ERROR_FILE_NOT_FOUND, 
# 1761
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, 
# 1766
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, 
# 1771
CUDA_ERROR_OPERATING_SYSTEM, 
# 1777
CUDA_ERROR_INVALID_HANDLE = 400, 
# 1783
CUDA_ERROR_ILLEGAL_STATE, 
# 1790
CUDA_ERROR_NOT_FOUND = 500, 
# 1798
CUDA_ERROR_NOT_READY = 600, 
# 1807 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_ILLEGAL_ADDRESS = 700, 
# 1818 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, 
# 1828 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT, 
# 1834
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, 
# 1841
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, 
# 1848
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, 
# 1854
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708, 
# 1861
CUDA_ERROR_CONTEXT_IS_DESTROYED, 
# 1869
CUDA_ERROR_ASSERT, 
# 1876
CUDA_ERROR_TOO_MANY_PEERS, 
# 1882
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, 
# 1888
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED, 
# 1897 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_HARDWARE_STACK_ERROR, 
# 1905
CUDA_ERROR_ILLEGAL_INSTRUCTION, 
# 1914 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_MISALIGNED_ADDRESS, 
# 1925 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_INVALID_ADDRESS_SPACE, 
# 1933
CUDA_ERROR_INVALID_PC, 
# 1944 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED, 
# 1953 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, 
# 1958
CUDA_ERROR_NOT_PERMITTED = 800, 
# 1964
CUDA_ERROR_NOT_SUPPORTED, 
# 1973 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_SYSTEM_NOT_READY, 
# 1980
CUDA_ERROR_SYSTEM_DRIVER_MISMATCH, 
# 1989 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE, 
# 1994
CUDA_ERROR_MPS_CONNECTION_FAILED, 
# 1999
CUDA_ERROR_MPS_RPC_FAILURE, 
# 2005
CUDA_ERROR_MPS_SERVER_NOT_READY, 
# 2010
CUDA_ERROR_MPS_MAX_CLIENTS_REACHED, 
# 2015
CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED, 
# 2021
CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 900, 
# 2027
CUDA_ERROR_STREAM_CAPTURE_INVALIDATED, 
# 2033
CUDA_ERROR_STREAM_CAPTURE_MERGE, 
# 2038
CUDA_ERROR_STREAM_CAPTURE_UNMATCHED, 
# 2044
CUDA_ERROR_STREAM_CAPTURE_UNJOINED, 
# 2051
CUDA_ERROR_STREAM_CAPTURE_ISOLATION, 
# 2057
CUDA_ERROR_STREAM_CAPTURE_IMPLICIT, 
# 2063
CUDA_ERROR_CAPTURED_EVENT, 
# 2070
CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD, 
# 2075
CUDA_ERROR_TIMEOUT, 
# 2081
CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE, 
# 2091 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_EXTERNAL_DEVICE, 
# 2103 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUDA_ERROR_UNKNOWN = 999
# 2104
} CUresult; 
# 2115
typedef 
# 2109
enum CUdevice_P2PAttribute_enum { 
# 2110
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1, 
# 2111
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED, 
# 2112
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED, 
# 2113
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED, 
# 2114
CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 4
# 2115
} CUdevice_P2PAttribute; 
# 2134 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void * userData); 
# 2142
typedef ::size_t (*CUoccupancyB2DSize)(int blockSize); 
# 2228 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2207
struct CUDA_MEMCPY2D_st { 
# 2208
::size_t srcXInBytes; 
# 2209
::size_t srcY; 
# 2211
CUmemorytype srcMemoryType; 
# 2212
const void *srcHost; 
# 2213
CUdeviceptr srcDevice; 
# 2214
CUarray srcArray; 
# 2215
::size_t srcPitch; 
# 2217
::size_t dstXInBytes; 
# 2218
::size_t dstY; 
# 2220
CUmemorytype dstMemoryType; 
# 2221
void *dstHost; 
# 2222
CUdeviceptr dstDevice; 
# 2223
CUarray dstArray; 
# 2224
::size_t dstPitch; 
# 2226
::size_t WidthInBytes; 
# 2227
::size_t Height; 
# 2228
} CUDA_MEMCPY2D_v2; 
# 2229
typedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D; 
# 2262
typedef 
# 2234
struct CUDA_MEMCPY3D_st { 
# 2235
::size_t srcXInBytes; 
# 2236
::size_t srcY; 
# 2237
::size_t srcZ; 
# 2238
::size_t srcLOD; 
# 2239
CUmemorytype srcMemoryType; 
# 2240
const void *srcHost; 
# 2241
CUdeviceptr srcDevice; 
# 2242
CUarray srcArray; 
# 2243
void *reserved0; 
# 2244
::size_t srcPitch; 
# 2245
::size_t srcHeight; 
# 2247
::size_t dstXInBytes; 
# 2248
::size_t dstY; 
# 2249
::size_t dstZ; 
# 2250
::size_t dstLOD; 
# 2251
CUmemorytype dstMemoryType; 
# 2252
void *dstHost; 
# 2253
CUdeviceptr dstDevice; 
# 2254
CUarray dstArray; 
# 2255
void *reserved1; 
# 2256
::size_t dstPitch; 
# 2257
::size_t dstHeight; 
# 2259
::size_t WidthInBytes; 
# 2260
::size_t Height; 
# 2261
::size_t Depth; 
# 2262
} CUDA_MEMCPY3D_v2; 
# 2263
typedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D; 
# 2296
typedef 
# 2268
struct CUDA_MEMCPY3D_PEER_st { 
# 2269
::size_t srcXInBytes; 
# 2270
::size_t srcY; 
# 2271
::size_t srcZ; 
# 2272
::size_t srcLOD; 
# 2273
CUmemorytype srcMemoryType; 
# 2274
const void *srcHost; 
# 2275
CUdeviceptr srcDevice; 
# 2276
CUarray srcArray; 
# 2277
CUcontext srcContext; 
# 2278
::size_t srcPitch; 
# 2279
::size_t srcHeight; 
# 2281
::size_t dstXInBytes; 
# 2282
::size_t dstY; 
# 2283
::size_t dstZ; 
# 2284
::size_t dstLOD; 
# 2285
CUmemorytype dstMemoryType; 
# 2286
void *dstHost; 
# 2287
CUdeviceptr dstDevice; 
# 2288
CUarray dstArray; 
# 2289
CUcontext dstContext; 
# 2290
::size_t dstPitch; 
# 2291
::size_t dstHeight; 
# 2293
::size_t WidthInBytes; 
# 2294
::size_t Height; 
# 2295
::size_t Depth; 
# 2296
} CUDA_MEMCPY3D_PEER_v1; 
# 2297
typedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER; 
# 2309
typedef 
# 2302
struct CUDA_ARRAY_DESCRIPTOR_st { 
# 2304
::size_t Width; 
# 2305
::size_t Height; 
# 2307
CUarray_format Format; 
# 2308
unsigned NumChannels; 
# 2309
} CUDA_ARRAY_DESCRIPTOR_v2; 
# 2310
typedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR; 
# 2324
typedef 
# 2315
struct CUDA_ARRAY3D_DESCRIPTOR_st { 
# 2317
::size_t Width; 
# 2318
::size_t Height; 
# 2319
::size_t Depth; 
# 2321
CUarray_format Format; 
# 2322
unsigned NumChannels; 
# 2323
unsigned Flags; 
# 2324
} CUDA_ARRAY3D_DESCRIPTOR_v2; 
# 2325
typedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR; 
# 2355 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2335
struct CUDA_ARRAY_SPARSE_PROPERTIES_st { 
# 2336
struct { 
# 2337
unsigned width; 
# 2338
unsigned height; 
# 2339
unsigned depth; 
# 2340
} tileExtent; 
# 2345
unsigned miptailFirstLevel; 
# 2349
unsigned long long miptailSize; 
# 2353
unsigned flags; 
# 2354
unsigned reserved[4]; 
# 2355
} CUDA_ARRAY_SPARSE_PROPERTIES_v1; 
# 2356
typedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES; 
# 2366
typedef 
# 2362
struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st { 
# 2363
::size_t size; 
# 2364
::size_t alignment; 
# 2365
unsigned reserved[4]; 
# 2366
} CUDA_ARRAY_MEMORY_REQUIREMENTS_v1; 
# 2367
typedef CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 CUDA_ARRAY_MEMORY_REQUIREMENTS; 
# 2404
typedef 
# 2373
struct CUDA_RESOURCE_DESC_st { 
# 2375
CUresourcetype resType; 
# 2377
union { 
# 2378
struct { 
# 2379
CUarray hArray; 
# 2380
} array; 
# 2381
struct { 
# 2382
CUmipmappedArray hMipmappedArray; 
# 2383
} mipmap; 
# 2384
struct { 
# 2385
CUdeviceptr devPtr; 
# 2386
CUarray_format format; 
# 2387
unsigned numChannels; 
# 2388
::size_t sizeInBytes; 
# 2389
} linear; 
# 2390
struct { 
# 2391
CUdeviceptr devPtr; 
# 2392
CUarray_format format; 
# 2393
unsigned numChannels; 
# 2394
::size_t width; 
# 2395
::size_t height; 
# 2396
::size_t pitchInBytes; 
# 2397
} pitch2D; 
# 2398
struct { 
# 2399
int reserved[32]; 
# 2400
} reserved; 
# 2401
} res; 
# 2403
unsigned flags; 
# 2404
} CUDA_RESOURCE_DESC_v1; 
# 2405
typedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC; 
# 2421
typedef 
# 2410
struct CUDA_TEXTURE_DESC_st { 
# 2411
CUaddress_mode addressMode[3]; 
# 2412
CUfilter_mode filterMode; 
# 2413
unsigned flags; 
# 2414
unsigned maxAnisotropy; 
# 2415
CUfilter_mode mipmapFilterMode; 
# 2416
float mipmapLevelBias; 
# 2417
float minMipmapLevelClamp; 
# 2418
float maxMipmapLevelClamp; 
# 2419
float borderColor[4]; 
# 2420
int reserved[12]; 
# 2421
} CUDA_TEXTURE_DESC_v1; 
# 2422
typedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC; 
# 2464
typedef 
# 2427
enum CUresourceViewFormat_enum { 
# 2429
CU_RES_VIEW_FORMAT_NONE, 
# 2430
CU_RES_VIEW_FORMAT_UINT_1X8, 
# 2431
CU_RES_VIEW_FORMAT_UINT_2X8, 
# 2432
CU_RES_VIEW_FORMAT_UINT_4X8, 
# 2433
CU_RES_VIEW_FORMAT_SINT_1X8, 
# 2434
CU_RES_VIEW_FORMAT_SINT_2X8, 
# 2435
CU_RES_VIEW_FORMAT_SINT_4X8, 
# 2436
CU_RES_VIEW_FORMAT_UINT_1X16, 
# 2437
CU_RES_VIEW_FORMAT_UINT_2X16, 
# 2438
CU_RES_VIEW_FORMAT_UINT_4X16, 
# 2439
CU_RES_VIEW_FORMAT_SINT_1X16, 
# 2440
CU_RES_VIEW_FORMAT_SINT_2X16, 
# 2441
CU_RES_VIEW_FORMAT_SINT_4X16, 
# 2442
CU_RES_VIEW_FORMAT_UINT_1X32, 
# 2443
CU_RES_VIEW_FORMAT_UINT_2X32, 
# 2444
CU_RES_VIEW_FORMAT_UINT_4X32, 
# 2445
CU_RES_VIEW_FORMAT_SINT_1X32, 
# 2446
CU_RES_VIEW_FORMAT_SINT_2X32, 
# 2447
CU_RES_VIEW_FORMAT_SINT_4X32, 
# 2448
CU_RES_VIEW_FORMAT_FLOAT_1X16, 
# 2449
CU_RES_VIEW_FORMAT_FLOAT_2X16, 
# 2450
CU_RES_VIEW_FORMAT_FLOAT_4X16, 
# 2451
CU_RES_VIEW_FORMAT_FLOAT_1X32, 
# 2452
CU_RES_VIEW_FORMAT_FLOAT_2X32, 
# 2453
CU_RES_VIEW_FORMAT_FLOAT_4X32, 
# 2454
CU_RES_VIEW_FORMAT_UNSIGNED_BC1, 
# 2455
CU_RES_VIEW_FORMAT_UNSIGNED_BC2, 
# 2456
CU_RES_VIEW_FORMAT_UNSIGNED_BC3, 
# 2457
CU_RES_VIEW_FORMAT_UNSIGNED_BC4, 
# 2458
CU_RES_VIEW_FORMAT_SIGNED_BC4, 
# 2459
CU_RES_VIEW_FORMAT_UNSIGNED_BC5, 
# 2460
CU_RES_VIEW_FORMAT_SIGNED_BC5, 
# 2461
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H, 
# 2462
CU_RES_VIEW_FORMAT_SIGNED_BC6H, 
# 2463
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
# 2464
} CUresourceViewFormat; 
# 2480
typedef 
# 2469
struct CUDA_RESOURCE_VIEW_DESC_st { 
# 2471
CUresourceViewFormat format; 
# 2472
::size_t width; 
# 2473
::size_t height; 
# 2474
::size_t depth; 
# 2475
unsigned firstMipmapLevel; 
# 2476
unsigned lastMipmapLevel; 
# 2477
unsigned firstLayer; 
# 2478
unsigned lastLayer; 
# 2479
unsigned reserved[16]; 
# 2480
} CUDA_RESOURCE_VIEW_DESC_v1; 
# 2481
typedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC; 
# 2489
typedef 
# 2486
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { 
# 2487
unsigned long long p2pToken; 
# 2488
unsigned vaSpaceToken; 
# 2489
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1; 
# 2490
typedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS; 
# 2500
typedef 
# 2496
enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum { 
# 2497
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE, 
# 2498
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ, 
# 2499
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 3
# 2500
} CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS; 
# 2516
typedef 
# 2505
struct CUDA_LAUNCH_PARAMS_st { 
# 2506
CUfunction function; 
# 2507
unsigned gridDimX; 
# 2508
unsigned gridDimY; 
# 2509
unsigned gridDimZ; 
# 2510
unsigned blockDimX; 
# 2511
unsigned blockDimY; 
# 2512
unsigned blockDimZ; 
# 2513
unsigned sharedMemBytes; 
# 2514
CUstream hStream; 
# 2515
void **kernelParams; 
# 2516
} CUDA_LAUNCH_PARAMS_v1; 
# 2517
typedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS; 
# 2555
typedef 
# 2522
enum CUexternalMemoryHandleType_enum { 
# 2526
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1, 
# 2530
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32, 
# 2534
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
# 2538
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP, 
# 2542
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE, 
# 2546
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE, 
# 2550
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT, 
# 2554
CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
# 2555
} CUexternalMemoryHandleType; 
# 2649 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2596 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st { 
# 2600
CUexternalMemoryHandleType type; 
# 2601
union { 
# 2607
int fd; 
# 2623 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct { 
# 2627
void *handle; 
# 2632
const void *name; 
# 2633
} win32; 
# 2638
const void *nvSciBufObject; 
# 2639
} handle; 
# 2643
unsigned long long size; 
# 2647
unsigned flags; 
# 2648
unsigned reserved[16]; 
# 2649
} CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1; 
# 2650
typedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC; 
# 2669
typedef 
# 2655
struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st { 
# 2659
unsigned long long offset; 
# 2663
unsigned long long size; 
# 2667
unsigned flags; 
# 2668
unsigned reserved[16]; 
# 2669
} CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1; 
# 2670
typedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC; 
# 2690
typedef 
# 2675
struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st { 
# 2680
unsigned long long offset; 
# 2684
CUDA_ARRAY3D_DESCRIPTOR arrayDesc; 
# 2688
unsigned numLevels; 
# 2689
unsigned reserved[16]; 
# 2690
} CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1; 
# 2691
typedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC; 
# 2737
typedef 
# 2696
enum CUexternalSemaphoreHandleType_enum { 
# 2700
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1, 
# 2704
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32, 
# 2708
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
# 2712
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE, 
# 2716
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE, 
# 2720
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC, 
# 2724
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX, 
# 2728
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT, 
# 2732
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD, 
# 2736
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
# 2737
} CUexternalSemaphoreHandleType; 
# 2791 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2742 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st { 
# 2746
CUexternalSemaphoreHandleType type; 
# 2747
union { 
# 2754
int fd; 
# 2770 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct { 
# 2774
void *handle; 
# 2779
const void *name; 
# 2780
} win32; 
# 2784
const void *nvSciSyncObj; 
# 2785
} handle; 
# 2789
unsigned flags; 
# 2790
unsigned reserved[16]; 
# 2791
} CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1; 
# 2792
typedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC; 
# 2839 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2797 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st { 
# 2798
struct { 
# 2802
struct { 
# 2806
unsigned long long value; 
# 2807
} fence; 
# 2808
union { 
# 2813
void *fence; 
# 2814
unsigned long long reserved; 
# 2815
} nvSciSync; 
# 2819
struct { 
# 2823
unsigned long long key; 
# 2824
} keyedMutex; 
# 2825
unsigned reserved[12]; 
# 2826
} params; 
# 2837 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
unsigned flags; 
# 2838
unsigned reserved[16]; 
# 2839
} CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1; 
# 2840
typedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS; 
# 2890 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 2845 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st { 
# 2846
struct { 
# 2850
struct { 
# 2854
unsigned long long value; 
# 2855
} fence; 
# 2860
union { 
# 2861
void *fence; 
# 2862
unsigned long long reserved; 
# 2863
} nvSciSync; 
# 2867
struct { 
# 2871
unsigned long long key; 
# 2875
unsigned timeoutMs; 
# 2876
} keyedMutex; 
# 2877
unsigned reserved[10]; 
# 2878
} params; 
# 2888 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
unsigned flags; 
# 2889
unsigned reserved[16]; 
# 2890
} CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1; 
# 2891
typedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS; 
# 2900
typedef 
# 2896
struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st { 
# 2897
CUexternalSemaphore *extSemArray; 
# 2898
const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *paramsArray; 
# 2899
unsigned numExtSems; 
# 2900
} CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1; 
# 2901
typedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS; 
# 2910
typedef 
# 2906
struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st { 
# 2907
CUexternalSemaphore *extSemArray; 
# 2908
const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *paramsArray; 
# 2909
unsigned numExtSems; 
# 2910
} CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1; 
# 2911
typedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS; 
# 2913
typedef unsigned long long CUmemGenericAllocationHandle_v1; 
# 2914
typedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle; 
# 2925
typedef 
# 2919
enum CUmemAllocationHandleType_enum { 
# 2920
CU_MEM_HANDLE_TYPE_NONE, 
# 2921
CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR, 
# 2922
CU_MEM_HANDLE_TYPE_WIN32, 
# 2923
CU_MEM_HANDLE_TYPE_WIN32_KMT = 4, 
# 2924
CU_MEM_HANDLE_TYPE_MAX = 2147483647
# 2925
} CUmemAllocationHandleType; 
# 2935
typedef 
# 2930
enum CUmemAccess_flags_enum { 
# 2931
CU_MEM_ACCESS_FLAGS_PROT_NONE, 
# 2932
CU_MEM_ACCESS_FLAGS_PROT_READ, 
# 2933
CU_MEM_ACCESS_FLAGS_PROT_READWRITE = 3, 
# 2934
CU_MEM_ACCESS_FLAGS_PROT_MAX = 2147483647
# 2935
} CUmemAccess_flags; 
# 2944
typedef 
# 2940
enum CUmemLocationType_enum { 
# 2941
CU_MEM_LOCATION_TYPE_INVALID, 
# 2942
CU_MEM_LOCATION_TYPE_DEVICE, 
# 2943
CU_MEM_LOCATION_TYPE_MAX = 2147483647
# 2944
} CUmemLocationType; 
# 2957
typedef 
# 2949
enum CUmemAllocationType_enum { 
# 2950
CU_MEM_ALLOCATION_TYPE_INVALID, 
# 2955
CU_MEM_ALLOCATION_TYPE_PINNED, 
# 2956
CU_MEM_ALLOCATION_TYPE_MAX = 2147483647
# 2957
} CUmemAllocationType; 
# 2965
typedef 
# 2962
enum CUmemAllocationGranularity_flags_enum { 
# 2963
CU_MEM_ALLOC_GRANULARITY_MINIMUM, 
# 2964
CU_MEM_ALLOC_GRANULARITY_RECOMMENDED
# 2965
} CUmemAllocationGranularity_flags; 
# 2973
typedef 
# 2970
enum CUarraySparseSubresourceType_enum { 
# 2971
CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL, 
# 2972
CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL
# 2973
} CUarraySparseSubresourceType; 
# 2981
typedef 
# 2978
enum CUmemOperationType_enum { 
# 2979
CU_MEM_OPERATION_TYPE_MAP = 1, 
# 2980
CU_MEM_OPERATION_TYPE_UNMAP
# 2981
} CUmemOperationType; 
# 2988
typedef 
# 2986
enum CUmemHandleType_enum { 
# 2987
CU_MEM_HANDLE_TYPE_GENERIC
# 2988
} CUmemHandleType; 
# 3032
typedef 
# 2993
struct CUarrayMapInfo_st { 
# 2994
CUresourcetype resourceType; 
# 2996
union { 
# 2997
CUmipmappedArray mipmap; 
# 2998
CUarray array; 
# 2999
} resource; 
# 3001
CUarraySparseSubresourceType subresourceType; 
# 3003
union { 
# 3004
struct { 
# 3005
unsigned level; 
# 3006
unsigned layer; 
# 3007
unsigned offsetX; 
# 3008
unsigned offsetY; 
# 3009
unsigned offsetZ; 
# 3010
unsigned extentWidth; 
# 3011
unsigned extentHeight; 
# 3012
unsigned extentDepth; 
# 3013
} sparseLevel; 
# 3014
struct { 
# 3015
unsigned layer; 
# 3016
unsigned long long offset; 
# 3017
unsigned long long size; 
# 3018
} miptail; 
# 3019
} subresource; 
# 3021
CUmemOperationType memOperationType; 
# 3022
CUmemHandleType memHandleType; 
# 3024
union { 
# 3025
CUmemGenericAllocationHandle memHandle; 
# 3026
} memHandle; 
# 3028
unsigned long long offset; 
# 3029
unsigned deviceBitMask; 
# 3030
unsigned flags; 
# 3031
unsigned reserved[2]; 
# 3032
} CUarrayMapInfo_v1; 
# 3033
typedef CUarrayMapInfo_v1 CUarrayMapInfo; 
# 3041
typedef 
# 3038
struct CUmemLocation_st { 
# 3039
CUmemLocationType type; 
# 3040
int id; 
# 3041
} CUmemLocation_v1; 
# 3042
typedef CUmemLocation_v1 CUmemLocation; 
# 3050
typedef 
# 3047
enum CUmemAllocationCompType_enum { 
# 3048
CU_MEM_ALLOCATION_COMP_NONE, 
# 3049
CU_MEM_ALLOCATION_COMP_GENERIC
# 3050
} CUmemAllocationCompType; 
# 3092 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 3060 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
struct CUmemAllocationProp_st { 
# 3062
CUmemAllocationType type; 
# 3064
CUmemAllocationHandleType requestedHandleTypes; 
# 3066
CUmemLocation location; 
# 3074
void *win32HandleMetaData; 
# 3075
struct { 
# 3086 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
unsigned char compressionType; 
# 3087
unsigned char gpuDirectRDMACapable; 
# 3089
unsigned short usage; 
# 3090
unsigned char reserved[4]; 
# 3091
} allocFlags; 
# 3092
} CUmemAllocationProp_v1; 
# 3093
typedef CUmemAllocationProp_v1 CUmemAllocationProp; 
# 3101
typedef 
# 3098
struct CUmemAccessDesc_st { 
# 3099
CUmemLocation location; 
# 3100
CUmemAccess_flags flags; 
# 3101
} CUmemAccessDesc_v1; 
# 3102
typedef CUmemAccessDesc_v1 CUmemAccessDesc; 
# 3114
typedef 
# 3104
enum CUgraphExecUpdateResult_enum { 
# 3105
CU_GRAPH_EXEC_UPDATE_SUCCESS, 
# 3106
CU_GRAPH_EXEC_UPDATE_ERROR, 
# 3107
CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED, 
# 3108
CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED, 
# 3109
CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED, 
# 3110
CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED, 
# 3111
CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED, 
# 3112
CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE, 
# 3113
CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED
# 3114
} CUgraphExecUpdateResult; 
# 3180 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 3119 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
enum CUmemPool_attribute_enum { 
# 3128 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1, 
# 3135
CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC, 
# 3143
CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES, 
# 3153 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CU_MEMPOOL_ATTR_RELEASE_THRESHOLD, 
# 3159
CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT, 
# 3166
CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH, 
# 3172
CU_MEMPOOL_ATTR_USED_MEM_CURRENT, 
# 3179
CU_MEMPOOL_ATTR_USED_MEM_HIGH
# 3180
} CUmemPool_attribute; 
# 3197
typedef 
# 3185
struct CUmemPoolProps_st { 
# 3186
CUmemAllocationType allocType; 
# 3187
CUmemAllocationHandleType handleTypes; 
# 3188
CUmemLocation location; 
# 3195
void *win32SecurityAttributes; 
# 3196
unsigned char reserved[64]; 
# 3197
} CUmemPoolProps_v1; 
# 3198
typedef CUmemPoolProps_v1 CUmemPoolProps; 
# 3205
typedef 
# 3203
struct CUmemPoolPtrExportData_st { 
# 3204
unsigned char reserved[64]; 
# 3205
} CUmemPoolPtrExportData_v1; 
# 3206
typedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData; 
# 3221
typedef 
# 3211
struct CUDA_MEM_ALLOC_NODE_PARAMS_st { 
# 3216
CUmemPoolProps poolProps; 
# 3217
const CUmemAccessDesc *accessDescs; 
# 3218
::size_t accessDescCount; 
# 3219
::size_t bytesize; 
# 3220
CUdeviceptr dptr; 
# 3221
} CUDA_MEM_ALLOC_NODE_PARAMS; 
# 3250
typedef 
# 3223
enum CUgraphMem_attribute_enum { 
# 3228
CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT, 
# 3235
CU_GRAPH_MEM_ATTR_USED_MEM_HIGH, 
# 3242
CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT, 
# 3249
CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH
# 3250
} CUgraphMem_attribute; 
# 3410 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
typedef 
# 3407
enum CUflushGPUDirectRDMAWritesOptions_enum { 
# 3408
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST = (1 << 0), 
# 3409
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS
# 3410
} CUflushGPUDirectRDMAWritesOptions; 
# 3419
typedef 
# 3415
enum CUGPUDirectRDMAWritesOrdering_enum { 
# 3416
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE, 
# 3417
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER = 100, 
# 3418
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES = 200
# 3419
} CUGPUDirectRDMAWritesOrdering; 
# 3427
typedef 
# 3424
enum CUflushGPUDirectRDMAWritesScope_enum { 
# 3425
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER = 100, 
# 3426
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 200
# 3427
} CUflushGPUDirectRDMAWritesScope; 
# 3434
typedef 
# 3432
enum CUflushGPUDirectRDMAWritesTarget_enum { 
# 3433
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX
# 3434
} CUflushGPUDirectRDMAWritesTarget; 
# 3453
typedef 
# 3439
enum CUgraphDebugDot_flags_enum { 
# 3440
CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE = (1 << 0), 
# 3441
CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES, 
# 3442
CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS = (1 << 2), 
# 3443
CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS = (1 << 3), 
# 3444
CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS = (1 << 4), 
# 3445
CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS = (1 << 5), 
# 3446
CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS = (1 << 6), 
# 3447
CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS = (1 << 7), 
# 3448
CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS = (1 << 8), 
# 3449
CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES = (1 << 9), 
# 3450
CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES = (1 << 10), 
# 3451
CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS = (1 << 11), 
# 3452
CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS = (1 << 12)
# 3453
} CUgraphDebugDot_flags; 
# 3460
typedef 
# 3458
enum CUuserObject_flags_enum { 
# 3459
CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1
# 3460
} CUuserObject_flags; 
# 3467
typedef 
# 3465
enum CUuserObjectRetain_flags_enum { 
# 3466
CU_GRAPH_USER_OBJECT_MOVE = 1
# 3467
} CUuserObjectRetain_flags; 
# 3474
typedef 
# 3472
enum CUgraphInstantiate_flags_enum { 
# 3473
CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH = 1
# 3474
} CUgraphInstantiate_flags; 
# 3567 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char ** pStr); 
# 3588 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char ** pStr); 
# 3622 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuInit(unsigned Flags); 
# 3660 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDriverGetVersion(int * driverVersion); 
# 3703 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGet(CUdevice * device, int ordinal); 
# 3732 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetCount(int * count); 
# 3764 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetName(char * name, int len, CUdevice dev); 
# 3797 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetUuid(CUuuid * uuid, CUdevice dev); 
# 3826 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetUuid_v2(CUuuid * uuid, CUdevice dev); 
# 3855 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetLuid(char * luid, unsigned * deviceNodeMask, CUdevice dev); 
# 3884 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceTotalMem_v2(::size_t * bytes, CUdevice dev); 
# 3915 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetTexture1DLinearMaxWidth(::size_t * maxWidthInElements, CUarray_format format, unsigned numChannels, CUdevice dev); 
# 4140 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetAttribute(int * pi, CUdevice_attribute attrib, CUdevice dev); 
# 4189 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, CUdevice dev, int flags); 
# 4207 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceSetMemPool(CUdevice dev, CUmemoryPool pool); 
# 4223 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetMemPool(CUmemoryPool * pool, CUdevice dev); 
# 4241 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetDefaultMemPool(CUmemoryPool * pool_out, CUdevice dev); 
# 4272 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFlushGPUDirectRDMAWrites(CUflushGPUDirectRDMAWritesTarget target, CUflushGPUDirectRDMAWritesScope scope); 
# 4350 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuDeviceGetProperties(CUdevprop * prop, CUdevice dev); 
# 4384 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuDeviceComputeCapability(int * major, int * minor, CUdevice dev); 
# 4451 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext * pctx, CUdevice dev); 
# 4492 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease_v2(CUdevice dev); 
# 4557 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags_v2(CUdevice dev, unsigned flags); 
# 4583 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned * flags, int * active); 
# 4623 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDevicePrimaryCtxReset_v2(CUdevice dev); 
# 4656 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetExecAffinitySupport(int * pi, CUexecAffinityType type, CUdevice dev); 
# 4765 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext * pctx, unsigned flags, CUdevice dev); 
# 4872 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxCreate_v3(CUcontext * pctx, CUexecAffinityParam * paramsArray, int numParams, unsigned flags, CUdevice dev); 
# 4917 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx); 
# 4951 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx); 
# 4985 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext * pctx); 
# 5015 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx); 
# 5038 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext * pctx); 
# 5068 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice * device); 
# 5096 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetFlags(unsigned * flags); 
# 5126 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxSynchronize(); 
# 5225 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, ::size_t value); 
# 5267 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetLimit(::size_t * pvalue, CUlimit limit); 
# 5311 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache * pconfig); 
# 5362 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config); 
# 5404 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig * pConfig); 
# 5457 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config); 
# 5495 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned * version); 
# 5535 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 5551 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxResetPersistingL2Cache(); 
# 5575 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxGetExecAffinity(CUexecAffinityParam * pExecAffinity, CUexecAffinityType type); 
# 5631 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuCtxAttach(CUcontext * pctx, unsigned flags); 
# 5667 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuCtxDetach(CUcontext ctx); 
# 5723 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleLoad(CUmodule * module, const char * fname); 
# 5761 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleLoadData(CUmodule * module, const void * image); 
# 5805 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule * module, const void * image, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 5848 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule * module, const void * fatCubin); 
# 5874 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod); 
# 5904 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction * hfunc, CUmodule hmod, const char * name); 
# 5939 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr * dptr, ::size_t * bytes, CUmodule hmod, const char * name); 
# 5973 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleGetTexRef(CUtexref * pTexRef, CUmodule hmod, const char * name); 
# 6005 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuModuleGetSurfRef(CUsurfref * pSurfRef, CUmodule hmod, const char * name); 
# 6046 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLinkCreate_v2(unsigned numOptions, CUjit_option * options, void ** optionValues, CUlinkState * stateOut); 
# 6084 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void * data, ::size_t size, const char * name, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 6124 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char * path, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 6151 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLinkComplete(CUlinkState state, void ** cubinOut, ::size_t * sizeOut); 
# 6165 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLinkDestroy(CUlinkState state); 
# 6223 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemGetInfo_v2(::size_t * free, ::size_t * total); 
# 6257 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr * dptr, ::size_t bytesize); 
# 6319 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr * dptr, ::size_t * pPitch, ::size_t WidthInBytes, ::size_t Height, unsigned ElementSizeBytes); 
# 6349 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr); 
# 6383 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr * pbase, ::size_t * psize, CUdeviceptr dptr); 
# 6430 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAllocHost_v2(void ** pp, ::size_t bytesize); 
# 6460 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemFreeHost(void * p); 
# 6539 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemHostAlloc(void ** pp, ::size_t bytesize, unsigned Flags); 
# 6592 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * pdptr, void * p, unsigned Flags); 
# 6619 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned * pFlags, void * p); 
# 6729 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr * dptr, ::size_t bytesize, unsigned flags); 
# 6758 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice * dev, const char * pciBusId); 
# 6790 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char * pciBusId, int len, CUdevice dev); 
# 6835 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle * pHandle, CUevent event); 
# 6875 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent * phEvent, CUipcEventHandle handle); 
# 6916 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle * pHandle, CUdeviceptr dptr); 
# 6974 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuIpcOpenMemHandle_v2(CUdeviceptr * pdptr, CUipcMemHandle handle, unsigned Flags); 
# 7008 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr); 
# 7097 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemHostRegister_v2(void * p, ::size_t bytesize, unsigned Flags); 
# 7123 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemHostUnregister(void * p); 
# 7163 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, ::size_t ByteCount); 
# 7193 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, ::size_t ByteCount); 
# 7229 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void * srcHost, ::size_t ByteCount); 
# 7265 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyDtoH_v2(void * dstHost, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 7301 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 7337 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyDtoA_v2(CUarray dstArray, ::size_t dstOffset, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 7375 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 7412 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyHtoA_v2(CUarray dstArray, ::size_t dstOffset, const void * srcHost, ::size_t ByteCount); 
# 7449 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyAtoH_v2(void * dstHost, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 7489 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyAtoA_v2(CUarray dstArray, ::size_t dstOffset, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 7653 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * pCopy); 
# 7815 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * pCopy); 
# 7984 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * pCopy); 
# 8008 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * pCopy); 
# 8053 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, ::size_t ByteCount, CUstream hStream); 
# 8086 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, ::size_t ByteCount, CUstream hStream); 
# 8127 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void * srcHost, ::size_t ByteCount, CUstream hStream); 
# 8168 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2(void * dstHost, CUdeviceptr srcDevice, ::size_t ByteCount, CUstream hStream); 
# 8209 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, ::size_t ByteCount, CUstream hStream); 
# 8251 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, ::size_t dstOffset, const void * srcHost, ::size_t ByteCount, CUstream hStream); 
# 8293 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2(void * dstHost, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount, CUstream hStream); 
# 8462 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * pCopy, CUstream hStream); 
# 8636 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * pCopy, CUstream hStream); 
# 8662 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * pCopy, CUstream hStream); 
# 8697 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, ::size_t N); 
# 8732 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, ::size_t N); 
# 8767 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned ui, ::size_t N); 
# 8807 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned char uc, ::size_t Width, ::size_t Height); 
# 8848 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned short us, ::size_t Width, ::size_t Height); 
# 8889 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned ui, ::size_t Width, ::size_t Height); 
# 8926 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, ::size_t N, CUstream hStream); 
# 8963 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, ::size_t N, CUstream hStream); 
# 8999 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned ui, ::size_t N, CUstream hStream); 
# 9041 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned char uc, ::size_t Width, ::size_t Height, CUstream hStream); 
# 9084 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned short us, ::size_t Width, ::size_t Height, CUstream hStream); 
# 9127 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned ui, ::size_t Width, ::size_t Height, CUstream hStream); 
# 9231 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray * pHandle, const CUDA_ARRAY_DESCRIPTOR * pAllocateArray); 
# 9265 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 9289 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES * sparseProperties, CUarray array); 
# 9314 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMipmappedArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES * sparseProperties, CUmipmappedArray mipmap); 
# 9338 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayGetMemoryRequirements(CUDA_ARRAY_MEMORY_REQUIREMENTS * memoryRequirements, CUarray array, CUdevice device); 
# 9362 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMipmappedArrayGetMemoryRequirements(CUDA_ARRAY_MEMORY_REQUIREMENTS * memoryRequirements, CUmipmappedArray mipmap, CUdevice device); 
# 9396 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayGetPlane(CUarray * pPlaneArray, CUarray hArray, unsigned planeIdx); 
# 9427 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray); 
# 9607 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pAllocateArray); 
# 9645 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 9787 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc, unsigned numMipmapLevels); 
# 9817 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray * pLevelArray, CUmipmappedArray hMipmappedArray, unsigned level); 
# 9842 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray); 
# 9883 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAddressReserve(CUdeviceptr * ptr, ::size_t size, ::size_t alignment, CUdeviceptr addr, unsigned long long flags); 
# 9904 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAddressFree(CUdeviceptr ptr, ::size_t size); 
# 9943 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemCreate(CUmemGenericAllocationHandle * handle, ::size_t size, const CUmemAllocationProp * prop, unsigned long long flags); 
# 9970 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemRelease(CUmemGenericAllocationHandle handle); 
# 10014 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemMap(CUdeviceptr ptr, ::size_t size, ::size_t offset, CUmemGenericAllocationHandle handle, unsigned long long flags); 
# 10155 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemMapArrayAsync(CUarrayMapInfo * mapInfoList, unsigned count, CUstream hStream); 
# 10184 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemUnmap(CUdeviceptr ptr, ::size_t size); 
# 10209 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemSetAccess(CUdeviceptr ptr, ::size_t size, const CUmemAccessDesc * desc, ::size_t count); 
# 10228 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemGetAccess(unsigned long long * flags, const CUmemLocation * location, CUdeviceptr ptr); 
# 10261 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemExportToShareableHandle(void * shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 10288 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemImportFromShareableHandle(CUmemGenericAllocationHandle * handle, void * osHandle, CUmemAllocationHandleType shHandleType); 
# 10310 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemGetAllocationGranularity(::size_t * granularity, const CUmemAllocationProp * prop, CUmemAllocationGranularity_flags option); 
# 10327 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemGetAllocationPropertiesFromHandle(CUmemAllocationProp * prop, CUmemGenericAllocationHandle handle); 
# 10351 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemRetainAllocationHandle(CUmemGenericAllocationHandle * handle, void * addr); 
# 10408 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemFreeAsync(CUdeviceptr dptr, CUstream hStream); 
# 10441 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAllocAsync(CUdeviceptr * dptr, ::size_t bytesize, CUstream hStream); 
# 10467 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolTrimTo(CUmemoryPool pool, ::size_t minBytesToKeep); 
# 10510 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolSetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void * value); 
# 10557 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolGetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void * value); 
# 10574 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolSetAccess(CUmemoryPool pool, const CUmemAccessDesc * map, ::size_t count); 
# 10588 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolGetAccess(CUmemAccess_flags * flags, CUmemoryPool memPool, CUmemLocation * location); 
# 10610 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolCreate(CUmemoryPool * pool, const CUmemPoolProps * poolProps); 
# 10633 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolDestroy(CUmemoryPool pool); 
# 10671 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAllocFromPoolAsync(CUdeviceptr * dptr, ::size_t bytesize, CUmemoryPool pool, CUstream hStream); 
# 10700 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolExportToShareableHandle(void * handle_out, CUmemoryPool pool, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 10724 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolImportFromShareableHandle(CUmemoryPool * pool_out, void * handle, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 10748 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolExportPointer(CUmemPoolPtrExportData * shareData_out, CUdeviceptr ptr); 
# 10777 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPoolImportPointer(CUdeviceptr * ptr_out, CUmemoryPool pool, CUmemPoolPtrExportData * shareData); 
# 11062 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuPointerGetAttribute(void * data, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 11130 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, ::size_t count, CUdevice dstDevice, CUstream hStream); 
# 11244 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemAdvise(CUdeviceptr devPtr, ::size_t count, CUmem_advise advice, CUdevice device); 
# 11302 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemRangeGetAttribute(void * data, ::size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, ::size_t count); 
# 11342 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuMemRangeGetAttributes(void ** data, ::size_t * dataSizes, CUmem_range_attribute * attributes, ::size_t numAttributes, CUdeviceptr devPtr, ::size_t count); 
# 11384 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuPointerSetAttribute(const void * value, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 11433 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned numAttributes, CUpointer_attribute * attributes, void ** data, CUdeviceptr ptr); 
# 11484 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamCreate(CUstream * phStream, unsigned Flags); 
# 11533 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream * phStream, unsigned flags, int priority); 
# 11564 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetPriority(CUstream hStream, int * priority); 
# 11592 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetFlags(CUstream hStream, unsigned * flags); 
# 11636 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetCtx(CUstream hStream, CUcontext * pctx); 
# 11673 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned Flags); 
# 11748 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void * userData, unsigned flags); 
# 11786 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamBeginCapture_v2(CUstream hStream, CUstreamCaptureMode mode); 
# 11839 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuThreadExchangeStreamCaptureMode(CUstreamCaptureMode * mode); 
# 11869 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamEndCapture(CUstream hStream, CUgraph * phGraph); 
# 11909 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamIsCapturing(CUstream hStream, CUstreamCaptureStatus * captureStatus); 
# 11937 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetCaptureInfo(CUstream hStream, CUstreamCaptureStatus * captureStatus_out, cuuint64_t * id_out); 
# 11991 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetCaptureInfo_v2(CUstream hStream, CUstreamCaptureStatus * captureStatus_out, cuuint64_t * id_out, CUgraph * graph_out, const CUgraphNode ** dependencies_out, ::size_t * numDependencies_out); 
# 12024 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamUpdateCaptureDependencies(CUstream hStream, CUgraphNode * dependencies, ::size_t numDependencies, unsigned flags); 
# 12112 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, ::size_t length, unsigned flags); 
# 12142 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamQuery(CUstream hStream); 
# 12171 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamSynchronize(CUstream hStream); 
# 12201 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream); 
# 12221 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamCopyAttributes(CUstream dst, CUstream src); 
# 12242 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamGetAttribute(CUstream hStream, CUstreamAttrID attr, CUstreamAttrValue * value_out); 
# 12265 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamSetAttribute(CUstream hStream, CUstreamAttrID attr, const CUstreamAttrValue * value); 
# 12322 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventCreate(CUevent * phEvent, unsigned Flags); 
# 12364 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventRecord(CUevent hEvent, CUstream hStream); 
# 12413 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventRecordWithFlags(CUevent hEvent, CUstream hStream, unsigned flags); 
# 12445 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent); 
# 12476 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent); 
# 12505 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent); 
# 12549 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuEventElapsedTime(float * pMilliseconds, CUevent hStart, CUevent hEnd); 
# 12727 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuImportExternalMemory(CUexternalMemory * extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC * memHandleDesc); 
# 12781 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuExternalMemoryGetMappedBuffer(CUdeviceptr * devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC * bufferDesc); 
# 12834 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuExternalMemoryGetMappedMipmappedArray(CUmipmappedArray * mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC * mipmapDesc); 
# 12856 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDestroyExternalMemory(CUexternalMemory extMem); 
# 13013 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuImportExternalSemaphore(CUexternalSemaphore * extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC * semHandleDesc); 
# 13080 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuSignalExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
# 13156 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuWaitExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
# 13177 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDestroyExternalSemaphore(CUexternalSemaphore extSem); 
# 13261 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 13296 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamWaitValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
# 13331 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 13365 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamWriteValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
# 13400 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuStreamBatchMemOp(CUstream stream, unsigned count, CUstreamBatchMemOpParams * paramArray, unsigned flags); 
# 13473 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFuncGetAttribute(int * pi, CUfunction_attribute attrib, CUfunction hfunc); 
# 13519 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value); 
# 13563 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config); 
# 13615 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config); 
# 13641 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuFuncGetModule(CUmodule * hmod, CUfunction hfunc); 
# 13750 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLaunchKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams, void ** extra); 
# 13845 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLaunchCooperativeKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams); 
# 13991 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS * launchParamsList, unsigned numDevices, unsigned flags); 
# 14056 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuLaunchHostFunc(CUstream hStream, CUhostFn fn, void * userData); 
# 14106 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z); 
# 14140 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned bytes); 
# 14172 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetSize(CUfunction hfunc, unsigned numbytes); 
# 14205 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned value); 
# 14238 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetf(CUfunction hfunc, int offset, float value); 
# 14273 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetv(CUfunction hfunc, int offset, void * ptr, unsigned numbytes); 
# 14325 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunch(CUfunction f); 
# 14379 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height); 
# 14441 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream); 
# 14466 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef); 
# 14512 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphCreate(CUgraph * phGraph, unsigned flags); 
# 14612 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddKernelNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 14644 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphKernelNodeGetParams(CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 14667 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphKernelNodeSetParams(CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 14715 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddMemcpyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
# 14738 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemcpyNodeGetParams(CUgraphNode hNode, CUDA_MEMCPY3D * nodeParams); 
# 14761 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemcpyNodeSetParams(CUgraphNode hNode, const CUDA_MEMCPY3D * nodeParams); 
# 14803 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddMemsetNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
# 14826 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemsetNodeGetParams(CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS * nodeParams); 
# 14849 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemsetNodeSetParams(CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * nodeParams); 
# 14890 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddHostNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 14913 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphHostNodeGetParams(CUgraphNode hNode, CUDA_HOST_NODE_PARAMS * nodeParams); 
# 14936 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphHostNodeSetParams(CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 14976 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddChildGraphNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, CUgraph childGraph); 
# 15003 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphChildGraphNodeGetGraph(CUgraphNode hNode, CUgraph * phGraph); 
# 15041 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddEmptyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies); 
# 15082 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddEventRecordNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, CUevent event); 
# 15107 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphEventRecordNodeGetEvent(CUgraphNode hNode, CUevent * event_out); 
# 15132 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphEventRecordNodeSetEvent(CUgraphNode hNode, CUevent event); 
# 15174 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddEventWaitNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, CUevent event); 
# 15199 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphEventWaitNodeGetEvent(CUgraphNode hNode, CUevent * event_out); 
# 15224 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphEventWaitNodeSetEvent(CUgraphNode hNode, CUevent event); 
# 15272 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddExternalSemaphoresSignalNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 15303 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExternalSemaphoresSignalNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * params_out); 
# 15328 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExternalSemaphoresSignalNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 15376 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddExternalSemaphoresWaitNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 15407 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExternalSemaphoresWaitNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS * params_out); 
# 15432 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExternalSemaphoresWaitNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 15506 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddMemAllocNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, CUDA_MEM_ALLOC_NODE_PARAMS * nodeParams); 
# 15531 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemAllocNodeGetParams(CUgraphNode hNode, CUDA_MEM_ALLOC_NODE_PARAMS * params_out); 
# 15588 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddMemFreeNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, ::size_t numDependencies, CUdeviceptr dptr); 
# 15610 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphMemFreeNodeGetParams(CUgraphNode hNode, CUdeviceptr * dptr_out); 
# 15630 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGraphMemTrim(CUdevice device); 
# 15658 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void * value); 
# 15683 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceSetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void * value); 
# 15708 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphClone(CUgraph * phGraphClone, CUgraph originalGraph); 
# 15734 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeFindInClone(CUgraphNode * phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph); 
# 15765 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeGetType(CUgraphNode hNode, CUgraphNodeType * type); 
# 15796 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphGetNodes(CUgraph hGraph, CUgraphNode * nodes, ::size_t * numNodes); 
# 15827 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphGetRootNodes(CUgraph hGraph, CUgraphNode * rootNodes, ::size_t * numRootNodes); 
# 15861 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphGetEdges(CUgraph hGraph, CUgraphNode * from, CUgraphNode * to, ::size_t * numEdges); 
# 15892 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeGetDependencies(CUgraphNode hNode, CUgraphNode * dependencies, ::size_t * numDependencies); 
# 15924 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeGetDependentNodes(CUgraphNode hNode, CUgraphNode * dependentNodes, ::size_t * numDependentNodes); 
# 15953 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphAddDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, ::size_t numDependencies); 
# 15985 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphRemoveDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, ::size_t numDependencies); 
# 16012 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphDestroyNode(CUgraphNode hNode); 
# 16050 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphInstantiate_v2(CUgraphExec * phGraphExec, CUgraph hGraph, CUgraphNode * phErrorNode, char * logBuffer, ::size_t bufferSize); 
# 16092 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphInstantiateWithFlags(CUgraphExec * phGraphExec, CUgraph hGraph, unsigned long long flags); 
# 16136 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecKernelNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 16182 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecMemcpyNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
# 16228 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecMemsetNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
# 16265 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecHostNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 16308 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecChildGraphNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, CUgraph childGraph); 
# 16348 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecEventRecordNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event); 
# 16388 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecEventWaitNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event); 
# 16431 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecExternalSemaphoresSignalNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 16474 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecExternalSemaphoresWaitNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 16510 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeSetEnabled(CUgraphExec hGraphExec, CUgraphNode hNode, unsigned isEnabled); 
# 16540 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphNodeGetEnabled(CUgraphExec hGraphExec, CUgraphNode hNode, unsigned * isEnabled); 
# 16566 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphUpload(CUgraphExec hGraphExec, CUstream hStream); 
# 16596 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphLaunch(CUgraphExec hGraphExec, CUstream hStream); 
# 16621 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecDestroy(CUgraphExec hGraphExec); 
# 16641 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphDestroy(CUgraph hGraph); 
# 16717 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphExecUpdate(CUgraphExec hGraphExec, CUgraph hGraph, CUgraphNode * hErrorNode_out, CUgraphExecUpdateResult * updateResult_out); 
# 16737 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphKernelNodeCopyAttributes(CUgraphNode dst, CUgraphNode src); 
# 16758 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphKernelNodeGetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, CUkernelNodeAttrValue * value_out); 
# 16780 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphKernelNodeSetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, const CUkernelNodeAttrValue * value); 
# 16800 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphDebugDotPrint(CUgraph hGraph, const char * path, unsigned flags); 
# 16836 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuUserObjectCreate(CUuserObject * object_out, void * ptr, CUhostFn destroy, unsigned initialRefcount, unsigned flags); 
# 16861 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuUserObjectRetain(CUuserObject object, unsigned count); 
# 16889 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuUserObjectRelease(CUuserObject object, unsigned count); 
# 16917 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphRetainUserObject(CUgraph graph, CUuserObject object, unsigned count, unsigned flags); 
# 16942 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphReleaseUserObject(CUgraph graph, CUuserObject object, unsigned count); 
# 16981 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, CUfunction func, int blockSize, ::size_t dynamicSMemSize); 
# 17023 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, CUfunction func, int blockSize, ::size_t dynamicSMemSize, unsigned flags); 
# 17075 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, ::size_t dynamicSMemSize, int blockSizeLimit); 
# 17121 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, ::size_t dynamicSMemSize, int blockSizeLimit, unsigned flags); 
# 17144 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuOccupancyAvailableDynamicSMemPerBlock(::size_t * dynamicSmemSize, CUfunction func, int numBlocks, int blockSize); 
# 17189 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned Flags); 
# 17219 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned Flags); 
# 17265 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddress_v2(::size_t * ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, ::size_t bytes); 
# 17320 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR * desc, CUdeviceptr dptr, ::size_t Pitch); 
# 17355 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents); 
# 17401 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am); 
# 17437 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 17473 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 17502 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias); 
# 17533 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp); 
# 17563 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned maxAniso); 
# 17599 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float * pBorderColor); 
# 17644 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned Flags); 
# 17671 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetAddress_v2(CUdeviceptr * pdptr, CUtexref hTexRef); 
# 17698 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetArray(CUarray * phArray, CUtexref hTexRef); 
# 17725 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmappedArray(CUmipmappedArray * phMipmappedArray, CUtexref hTexRef); 
# 17753 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetAddressMode(CUaddress_mode * pam, CUtexref hTexRef, int dim); 
# 17779 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 17807 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFormat(CUarray_format * pFormat, int * pNumChannels, CUtexref hTexRef); 
# 17833 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 17859 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapLevelBias(float * pbias, CUtexref hTexRef); 
# 17886 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapLevelClamp(float * pminMipmapLevelClamp, float * pmaxMipmapLevelClamp, CUtexref hTexRef); 
# 17912 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMaxAnisotropy(int * pmaxAniso, CUtexref hTexRef); 
# 17941 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetBorderColor(float * pBorderColor, CUtexref hTexRef); 
# 17966 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFlags(unsigned * pFlags, CUtexref hTexRef); 
# 17991 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefCreate(CUtexref * pTexRef); 
# 18011 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefDestroy(CUtexref hTexRef); 
# 18055 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned Flags); 
# 18078 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
__attribute((deprecated)) CUresult cuSurfRefGetArray(CUarray * phArray, CUsurfref hSurfRef); 
# 18318 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject * pTexObject, const CUDA_RESOURCE_DESC * pResDesc, const CUDA_TEXTURE_DESC * pTexDesc, const CUDA_RESOURCE_VIEW_DESC * pResViewDesc); 
# 18338 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject); 
# 18359 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUtexObject texObject); 
# 18380 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * pTexDesc, CUtexObject texObject); 
# 18402 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * pResViewDesc, CUtexObject texObject); 
# 18445 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject * pSurfObject, const CUDA_RESOURCE_DESC * pResDesc); 
# 18465 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject); 
# 18486 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUsurfObject surfObject); 
# 18528 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int * canAccessPeer, CUdevice dev, CUdevice peerDev); 
# 18581 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned Flags); 
# 18608 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext); 
# 18648 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuDeviceGetP2PAttribute(int * value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice); 
# 18692 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource); 
# 18732 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray * pArray, CUgraphicsResource resource, unsigned arrayIndex, unsigned mipLevel); 
# 18763 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * pMipmappedArray, CUgraphicsResource resource); 
# 18797 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * pDevPtr, ::size_t * pSize, CUgraphicsResource resource); 
# 18838 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned flags); 
# 18878 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsMapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 18915 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGraphicsUnmapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 18981 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
CUresult cuGetProcAddress(const char * symbol, void ** pfn, int cudaVersion, cuuint64_t flags); 
# 18985
CUresult cuGetExportTable(const void ** ppExportTable, const CUuuid * pExportTableId); 
# 19337 "/home/poweruser/junda.feng/anaconda3/include/cuda.h"
}
# 5 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/cpu_gemm.h"
template< class computeType, class scaleType, class inputType, class 
# 6
resultType> void 
# 7
cpuGEMM(inputType *inputA, inputType *inputB, resultType *resultC, int M, int 
# 8
N, int K, int strideA, int strideB, int strideC, int 
# 9
batchCount, scaleType alpha, scaleType beta, bool transA = true, bool 
# 10
transB = false, bool transC = true) { 
# 11
for (int batch = 0; batch < batchCount; batch++) { 
# 12
inputType *A = inputA + (batch * strideA); 
# 13
inputType *B = inputB + (batch * strideB); 
# 14
resultType *C = resultC + (batch * strideC); 
# 15
for (int m = 0; m < M; m++) { 
# 16
for (int n = 0; n < N; n++) { 
# 17
computeType sum = (0); 
# 18
for (int k = 0; k < K; k++) { 
# 19
inputType a = transA ? A[(m * K) + k] : (A[(k * M) + m]); 
# 20
inputType b = transB ? B[(k * N) + n] : (B[(n * K) + k]); 
# 21
sum += ((static_cast< computeType>(a)) * (static_cast< computeType>(b))); 
# 22
}  
# 23
unsigned ci = transC ? (m * N) + n : ((n * M) + m); 
# 24
(C[ci]) = (static_cast< resultType>((alpha * (static_cast< computeType>(sum))) + (beta * (static_cast< computeType>(C[ci]))))); 
# 25
}  
# 26
}  
# 27
}  
# 28
} 
# 10 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/util.h"
void print_vec(const int8_t *outv, std::__cxx11::string outn, int start, int end, int row_size) { 
# 11
(((std::cout << outn)) << (": ")); 
# 12
for (int i = start; i < end; i++) { 
# 13
(((std::cout << (static_cast< float>(outv[i])))) << (" ")); 
# 14
if ((((i - start) + 1) % row_size) == 0) { (std::cout << (std::endl)); }  
# 15
}  
# 16
(std::cout << (std::endl)); 
# 17
} 
# 19
void print_vec(const int *outv, std::__cxx11::string outn, int start, int end, int row_size) { 
# 20
(((std::cout << outn)) << (": ")); 
# 21
for (int i = start; i < end; i++) { 
# 22
(((std::cout << (static_cast< float>(outv[i])))) << (" ")); 
# 23
if ((((i - start) + 1) % row_size) == 0) { (std::cout << (std::endl)); }  
# 24
}  
# 25
(std::cout << (std::endl)); 
# 26
} 
# 43 "/usr/include/c++/7/bits/atomic_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/bits/atomic_base.h" 3
typedef 
# 55
enum memory_order { 
# 57
memory_order_relaxed, 
# 58
memory_order_consume, 
# 59
memory_order_acquire, 
# 60
memory_order_release, 
# 61
memory_order_acq_rel, 
# 62
memory_order_seq_cst
# 63
} memory_order; 
# 65
enum __memory_order_modifier { 
# 67
__memory_order_mask = 65535U, 
# 68
__memory_order_modifier_mask = 4294901760U, 
# 69
__memory_order_hle_acquire = 65536U, 
# 70
__memory_order_hle_release = 131072U
# 71
}; 
# 74
constexpr memory_order operator|(memory_order __m, __memory_order_modifier __mod) 
# 75
{ 
# 76
return (memory_order)(__m | ((int)__mod)); 
# 77
} 
# 80
constexpr memory_order operator&(memory_order __m, __memory_order_modifier __mod) 
# 81
{ 
# 82
return (memory_order)(__m & ((int)__mod)); 
# 83
} 
# 87
constexpr memory_order __cmpexch_failure_order2(memory_order __m) noexcept 
# 88
{ 
# 89
return (__m == (memory_order_acq_rel)) ? memory_order_acquire : ((__m == (memory_order_release)) ? memory_order_relaxed : __m); 
# 91
} 
# 94
constexpr memory_order __cmpexch_failure_order(memory_order __m) noexcept 
# 95
{ 
# 96
return (memory_order)((__cmpexch_failure_order2((__m & (__memory_order_mask)))) | ((__m & (__memory_order_modifier_mask)))); 
# 98
} 
# 100
__attribute((__always_inline__)) inline void 
# 101
atomic_thread_fence(memory_order __m) noexcept 
# 102
{ __atomic_thread_fence(__m); } 
# 104
__attribute((__always_inline__)) inline void 
# 105
atomic_signal_fence(memory_order __m) noexcept 
# 106
{ __atomic_signal_fence(__m); } 
# 109
template< class _Tp> inline _Tp 
# 111
kill_dependency(_Tp __y) noexcept 
# 112
{ 
# 113
_Tp __ret(__y); 
# 114
return __ret; 
# 115
} 
# 119
template< class _IntTp> struct __atomic_base; 
# 125
template< class _Tp> struct atomic; 
# 128
template< class _Tp> struct atomic< _Tp *> ; 
# 133
typedef bool __atomic_flag_data_type; 
# 148 "/usr/include/c++/7/bits/atomic_base.h" 3
extern "C" {
# 150
struct __atomic_flag_base { 
# 152
__atomic_flag_data_type _M_i; 
# 153
}; 
# 155
}
# 160
struct atomic_flag : public __atomic_flag_base { 
# 162
atomic_flag() noexcept = default;
# 163
~atomic_flag() noexcept = default;
# 164
atomic_flag(const atomic_flag &) = delete;
# 165
atomic_flag &operator=(const atomic_flag &) = delete;
# 166
atomic_flag &operator=(const atomic_flag &) volatile = delete;
# 169
constexpr atomic_flag(bool __i) noexcept : __atomic_flag_base{_S_init(__i)} 
# 171
{ } 
# 173
__attribute((__always_inline__)) bool 
# 174
test_and_set(memory_order __m = memory_order_seq_cst) noexcept 
# 175
{ 
# 176
return __atomic_test_and_set(&(_M_i), __m); 
# 177
} 
# 179
__attribute((__always_inline__)) bool 
# 180
test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 181
{ 
# 182
return __atomic_test_and_set(&(_M_i), __m); 
# 183
} 
# 185
__attribute((__always_inline__)) void 
# 186
clear(memory_order __m = memory_order_seq_cst) noexcept 
# 187
{ 
# 188
memory_order __b = (__m & (__memory_order_mask)); 
# 189
; 
# 190
; 
# 191
; 
# 193
__atomic_clear(&(_M_i), __m); 
# 194
} 
# 196
__attribute((__always_inline__)) void 
# 197
clear(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 198
{ 
# 199
memory_order __b = (__m & (__memory_order_mask)); 
# 200
; 
# 201
; 
# 202
; 
# 204
__atomic_clear(&(_M_i), __m); 
# 205
} 
# 209
private: static constexpr __atomic_flag_data_type _S_init(bool __i) 
# 210
{ return __i ? 1 : 0; } 
# 211
}; 
# 237 "/usr/include/c++/7/bits/atomic_base.h" 3
template< class _ITp> 
# 238
struct __atomic_base { 
# 241
private: typedef _ITp __int_type; 
# 243
static constexpr int _S_alignment = ((sizeof(_ITp) > __alignof__(_ITp)) ? sizeof(_ITp) : __alignof__(_ITp)); 
# 246
alignas(_S_alignment) __int_type _M_i; 
# 249
public: __atomic_base() noexcept = default;
# 250
~__atomic_base() noexcept = default;
# 251
__atomic_base(const __atomic_base &) = delete;
# 252
__atomic_base &operator=(const __atomic_base &) = delete;
# 253
__atomic_base &operator=(const __atomic_base &) volatile = delete;
# 256
constexpr __atomic_base(__int_type __i) noexcept : _M_i(__i) { } 
# 258
operator __int_type() const noexcept 
# 259
{ return load(); } 
# 261
operator __int_type() const volatile noexcept 
# 262
{ return load(); } 
# 265
__int_type operator=(__int_type __i) noexcept 
# 266
{ 
# 267
store(__i); 
# 268
return __i; 
# 269
} 
# 272
__int_type operator=(__int_type __i) volatile noexcept 
# 273
{ 
# 274
store(__i); 
# 275
return __i; 
# 276
} 
# 279
__int_type operator++(int) noexcept 
# 280
{ return fetch_add(1); } 
# 283
__int_type operator++(int) volatile noexcept 
# 284
{ return fetch_add(1); } 
# 287
__int_type operator--(int) noexcept 
# 288
{ return fetch_sub(1); } 
# 291
__int_type operator--(int) volatile noexcept 
# 292
{ return fetch_sub(1); } 
# 295
__int_type operator++() noexcept 
# 296
{ return __atomic_add_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 299
__int_type operator++() volatile noexcept 
# 300
{ return __atomic_add_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 303
__int_type operator--() noexcept 
# 304
{ return __atomic_sub_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 307
__int_type operator--() volatile noexcept 
# 308
{ return __atomic_sub_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 311
__int_type operator+=(__int_type __i) noexcept 
# 312
{ return __atomic_add_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 315
__int_type operator+=(__int_type __i) volatile noexcept 
# 316
{ return __atomic_add_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 319
__int_type operator-=(__int_type __i) noexcept 
# 320
{ return __atomic_sub_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 323
__int_type operator-=(__int_type __i) volatile noexcept 
# 324
{ return __atomic_sub_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 327
__int_type operator&=(__int_type __i) noexcept 
# 328
{ return __atomic_and_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 331
__int_type operator&=(__int_type __i) volatile noexcept 
# 332
{ return __atomic_and_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 335
__int_type operator|=(__int_type __i) noexcept 
# 336
{ return __atomic_or_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 339
__int_type operator|=(__int_type __i) volatile noexcept 
# 340
{ return __atomic_or_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 343
__int_type operator^=(__int_type __i) noexcept 
# 344
{ return __atomic_xor_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 347
__int_type operator^=(__int_type __i) volatile noexcept 
# 348
{ return __atomic_xor_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 351
bool is_lock_free() const noexcept 
# 352
{ 
# 354
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 356
} 
# 359
bool is_lock_free() const volatile noexcept 
# 360
{ 
# 362
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 364
} 
# 366
__attribute((__always_inline__)) void 
# 367
store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept 
# 368
{ 
# 369
memory_order __b = (__m & (__memory_order_mask)); 
# 370
; 
# 371
; 
# 372
; 
# 374
__atomic_store_n(&(_M_i), __i, __m); 
# 375
} 
# 377
__attribute((__always_inline__)) void 
# 378
store(__int_type __i, memory_order 
# 379
__m = memory_order_seq_cst) volatile noexcept 
# 380
{ 
# 381
memory_order __b = (__m & (__memory_order_mask)); 
# 382
; 
# 383
; 
# 384
; 
# 386
__atomic_store_n(&(_M_i), __i, __m); 
# 387
} 
# 389
__attribute((__always_inline__)) __int_type 
# 390
load(memory_order __m = memory_order_seq_cst) const noexcept 
# 391
{ 
# 392
memory_order __b = (__m & (__memory_order_mask)); 
# 393
; 
# 394
; 
# 396
return __atomic_load_n(&(_M_i), __m); 
# 397
} 
# 399
__attribute((__always_inline__)) __int_type 
# 400
load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 401
{ 
# 402
memory_order __b = (__m & (__memory_order_mask)); 
# 403
; 
# 404
; 
# 406
return __atomic_load_n(&(_M_i), __m); 
# 407
} 
# 409
__attribute((__always_inline__)) __int_type 
# 410
exchange(__int_type __i, memory_order 
# 411
__m = memory_order_seq_cst) noexcept 
# 412
{ 
# 413
return __atomic_exchange_n(&(_M_i), __i, __m); 
# 414
} 
# 417
__attribute((__always_inline__)) __int_type 
# 418
exchange(__int_type __i, memory_order 
# 419
__m = memory_order_seq_cst) volatile noexcept 
# 420
{ 
# 421
return __atomic_exchange_n(&(_M_i), __i, __m); 
# 422
} 
# 424
__attribute((__always_inline__)) bool 
# 425
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 426
__m1, memory_order __m2) noexcept 
# 427
{ 
# 428
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 429
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 430
; 
# 431
; 
# 432
; 
# 434
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 1, __m1, __m2); 
# 435
} 
# 437
__attribute((__always_inline__)) bool 
# 438
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 439
__m1, memory_order 
# 440
__m2) volatile noexcept 
# 441
{ 
# 442
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 443
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 444
; 
# 445
; 
# 446
; 
# 448
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 1, __m1, __m2); 
# 449
} 
# 451
__attribute((__always_inline__)) bool 
# 452
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 453
__m = memory_order_seq_cst) noexcept 
# 454
{ 
# 455
return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 457
} 
# 459
__attribute((__always_inline__)) bool 
# 460
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 461
__m = memory_order_seq_cst) volatile noexcept 
# 462
{ 
# 463
return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 465
} 
# 467
__attribute((__always_inline__)) bool 
# 468
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 469
__m1, memory_order __m2) noexcept 
# 470
{ 
# 471
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 472
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 473
; 
# 474
; 
# 475
; 
# 477
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 0, __m1, __m2); 
# 478
} 
# 480
__attribute((__always_inline__)) bool 
# 481
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 482
__m1, memory_order 
# 483
__m2) volatile noexcept 
# 484
{ 
# 485
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 486
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 488
; 
# 489
; 
# 490
; 
# 492
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 0, __m1, __m2); 
# 493
} 
# 495
__attribute((__always_inline__)) bool 
# 496
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 497
__m = memory_order_seq_cst) noexcept 
# 498
{ 
# 499
return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 501
} 
# 503
__attribute((__always_inline__)) bool 
# 504
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 505
__m = memory_order_seq_cst) volatile noexcept 
# 506
{ 
# 507
return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 509
} 
# 511
__attribute((__always_inline__)) __int_type 
# 512
fetch_add(__int_type __i, memory_order 
# 513
__m = memory_order_seq_cst) noexcept 
# 514
{ return __atomic_fetch_add(&(_M_i), __i, __m); } 
# 516
__attribute((__always_inline__)) __int_type 
# 517
fetch_add(__int_type __i, memory_order 
# 518
__m = memory_order_seq_cst) volatile noexcept 
# 519
{ return __atomic_fetch_add(&(_M_i), __i, __m); } 
# 521
__attribute((__always_inline__)) __int_type 
# 522
fetch_sub(__int_type __i, memory_order 
# 523
__m = memory_order_seq_cst) noexcept 
# 524
{ return __atomic_fetch_sub(&(_M_i), __i, __m); } 
# 526
__attribute((__always_inline__)) __int_type 
# 527
fetch_sub(__int_type __i, memory_order 
# 528
__m = memory_order_seq_cst) volatile noexcept 
# 529
{ return __atomic_fetch_sub(&(_M_i), __i, __m); } 
# 531
__attribute((__always_inline__)) __int_type 
# 532
fetch_and(__int_type __i, memory_order 
# 533
__m = memory_order_seq_cst) noexcept 
# 534
{ return __atomic_fetch_and(&(_M_i), __i, __m); } 
# 536
__attribute((__always_inline__)) __int_type 
# 537
fetch_and(__int_type __i, memory_order 
# 538
__m = memory_order_seq_cst) volatile noexcept 
# 539
{ return __atomic_fetch_and(&(_M_i), __i, __m); } 
# 541
__attribute((__always_inline__)) __int_type 
# 542
fetch_or(__int_type __i, memory_order 
# 543
__m = memory_order_seq_cst) noexcept 
# 544
{ return __atomic_fetch_or(&(_M_i), __i, __m); } 
# 546
__attribute((__always_inline__)) __int_type 
# 547
fetch_or(__int_type __i, memory_order 
# 548
__m = memory_order_seq_cst) volatile noexcept 
# 549
{ return __atomic_fetch_or(&(_M_i), __i, __m); } 
# 551
__attribute((__always_inline__)) __int_type 
# 552
fetch_xor(__int_type __i, memory_order 
# 553
__m = memory_order_seq_cst) noexcept 
# 554
{ return __atomic_fetch_xor(&(_M_i), __i, __m); } 
# 556
__attribute((__always_inline__)) __int_type 
# 557
fetch_xor(__int_type __i, memory_order 
# 558
__m = memory_order_seq_cst) volatile noexcept 
# 559
{ return __atomic_fetch_xor(&(_M_i), __i, __m); } 
# 560
}; 
# 564
template< class _PTp> 
# 565
struct __atomic_base< _PTp *>  { 
# 568
private: typedef _PTp *__pointer_type; 
# 570
__pointer_type _M_p; 
# 574
constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); } 
# 577
constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); } 
# 580
public: __atomic_base() noexcept = default;
# 581
~__atomic_base() noexcept = default;
# 582
__atomic_base(const std::__atomic_base< _PTp *>  &) = delete;
# 583
std::__atomic_base< _PTp *>  &operator=(const std::__atomic_base< _PTp *>  &) = delete;
# 584
std::__atomic_base< _PTp *>  &operator=(const std::__atomic_base< _PTp *>  &) volatile = delete;
# 587
constexpr __atomic_base(__pointer_type __p) noexcept : _M_p(__p) { } 
# 589
operator __pointer_type() const noexcept 
# 590
{ return load(); } 
# 592
operator __pointer_type() const volatile noexcept 
# 593
{ return load(); } 
# 596
__pointer_type operator=(__pointer_type __p) noexcept 
# 597
{ 
# 598
store(__p); 
# 599
return __p; 
# 600
} 
# 603
__pointer_type operator=(__pointer_type __p) volatile noexcept 
# 604
{ 
# 605
store(__p); 
# 606
return __p; 
# 607
} 
# 610
__pointer_type operator++(int) noexcept 
# 611
{ return fetch_add(1); } 
# 614
__pointer_type operator++(int) volatile noexcept 
# 615
{ return fetch_add(1); } 
# 618
__pointer_type operator--(int) noexcept 
# 619
{ return fetch_sub(1); } 
# 622
__pointer_type operator--(int) volatile noexcept 
# 623
{ return fetch_sub(1); } 
# 626
__pointer_type operator++() noexcept 
# 627
{ return __atomic_add_fetch(&(_M_p), _M_type_size(1), memory_order_seq_cst); 
# 628
} 
# 631
__pointer_type operator++() volatile noexcept 
# 632
{ return __atomic_add_fetch(&(_M_p), _M_type_size(1), memory_order_seq_cst); 
# 633
} 
# 636
__pointer_type operator--() noexcept 
# 637
{ return __atomic_sub_fetch(&(_M_p), _M_type_size(1), memory_order_seq_cst); 
# 638
} 
# 641
__pointer_type operator--() volatile noexcept 
# 642
{ return __atomic_sub_fetch(&(_M_p), _M_type_size(1), memory_order_seq_cst); 
# 643
} 
# 646
__pointer_type operator+=(ptrdiff_t __d) noexcept 
# 647
{ return __atomic_add_fetch(&(_M_p), _M_type_size(__d), memory_order_seq_cst); 
# 648
} 
# 651
__pointer_type operator+=(ptrdiff_t __d) volatile noexcept 
# 652
{ return __atomic_add_fetch(&(_M_p), _M_type_size(__d), memory_order_seq_cst); 
# 653
} 
# 656
__pointer_type operator-=(ptrdiff_t __d) noexcept 
# 657
{ return __atomic_sub_fetch(&(_M_p), _M_type_size(__d), memory_order_seq_cst); 
# 658
} 
# 661
__pointer_type operator-=(ptrdiff_t __d) volatile noexcept 
# 662
{ return __atomic_sub_fetch(&(_M_p), _M_type_size(__d), memory_order_seq_cst); 
# 663
} 
# 666
bool is_lock_free() const noexcept 
# 667
{ 
# 669
return __atomic_is_lock_free(sizeof((_M_p)), reinterpret_cast< void *>(-__alignof__((_M_p)))); 
# 671
} 
# 674
bool is_lock_free() const volatile noexcept 
# 675
{ 
# 677
return __atomic_is_lock_free(sizeof((_M_p)), reinterpret_cast< void *>(-__alignof__((_M_p)))); 
# 679
} 
# 681
__attribute((__always_inline__)) void 
# 682
store(__pointer_type __p, memory_order 
# 683
__m = memory_order_seq_cst) noexcept 
# 684
{ 
# 685
memory_order __b = (__m & (__memory_order_mask)); 
# 687
; 
# 688
; 
# 689
; 
# 691
__atomic_store_n(&(_M_p), __p, __m); 
# 692
} 
# 694
__attribute((__always_inline__)) void 
# 695
store(__pointer_type __p, memory_order 
# 696
__m = memory_order_seq_cst) volatile noexcept 
# 697
{ 
# 698
memory_order __b = (__m & (__memory_order_mask)); 
# 699
; 
# 700
; 
# 701
; 
# 703
__atomic_store_n(&(_M_p), __p, __m); 
# 704
} 
# 706
__attribute((__always_inline__)) __pointer_type 
# 707
load(memory_order __m = memory_order_seq_cst) const noexcept 
# 708
{ 
# 709
memory_order __b = (__m & (__memory_order_mask)); 
# 710
; 
# 711
; 
# 713
return __atomic_load_n(&(_M_p), __m); 
# 714
} 
# 716
__attribute((__always_inline__)) __pointer_type 
# 717
load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 718
{ 
# 719
memory_order __b = (__m & (__memory_order_mask)); 
# 720
; 
# 721
; 
# 723
return __atomic_load_n(&(_M_p), __m); 
# 724
} 
# 726
__attribute((__always_inline__)) __pointer_type 
# 727
exchange(__pointer_type __p, memory_order 
# 728
__m = memory_order_seq_cst) noexcept 
# 729
{ 
# 730
return __atomic_exchange_n(&(_M_p), __p, __m); 
# 731
} 
# 734
__attribute((__always_inline__)) __pointer_type 
# 735
exchange(__pointer_type __p, memory_order 
# 736
__m = memory_order_seq_cst) volatile noexcept 
# 737
{ 
# 738
return __atomic_exchange_n(&(_M_p), __p, __m); 
# 739
} 
# 741
__attribute((__always_inline__)) bool 
# 742
compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 743
__m1, memory_order 
# 744
__m2) noexcept 
# 745
{ 
# 746
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 747
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 748
; 
# 749
; 
# 750
; 
# 752
return __atomic_compare_exchange_n(&(_M_p), &__p1, __p2, 0, __m1, __m2); 
# 753
} 
# 755
__attribute((__always_inline__)) bool 
# 756
compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 757
__m1, memory_order 
# 758
__m2) volatile noexcept 
# 759
{ 
# 760
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 761
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 763
; 
# 764
; 
# 765
; 
# 767
return __atomic_compare_exchange_n(&(_M_p), &__p1, __p2, 0, __m1, __m2); 
# 768
} 
# 770
__attribute((__always_inline__)) __pointer_type 
# 771
fetch_add(ptrdiff_t __d, memory_order 
# 772
__m = memory_order_seq_cst) noexcept 
# 773
{ return __atomic_fetch_add(&(_M_p), _M_type_size(__d), __m); } 
# 775
__attribute((__always_inline__)) __pointer_type 
# 776
fetch_add(ptrdiff_t __d, memory_order 
# 777
__m = memory_order_seq_cst) volatile noexcept 
# 778
{ return __atomic_fetch_add(&(_M_p), _M_type_size(__d), __m); } 
# 780
__attribute((__always_inline__)) __pointer_type 
# 781
fetch_sub(ptrdiff_t __d, memory_order 
# 782
__m = memory_order_seq_cst) noexcept 
# 783
{ return __atomic_fetch_sub(&(_M_p), _M_type_size(__d), __m); } 
# 785
__attribute((__always_inline__)) __pointer_type 
# 786
fetch_sub(ptrdiff_t __d, memory_order 
# 787
__m = memory_order_seq_cst) volatile noexcept 
# 788
{ return __atomic_fetch_sub(&(_M_p), _M_type_size(__d), __m); } 
# 789
}; 
# 794
}
# 44 "/usr/include/c++/7/atomic" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/7/atomic" 3
template< class _Tp> struct atomic; 
# 63
template<> struct atomic< bool>  { 
# 66
private: __atomic_base< bool>  _M_base; 
# 69
public: atomic() noexcept = default;
# 70
~atomic() noexcept = default;
# 71
atomic(const std::atomic< bool>  &) = delete;
# 72
std::atomic< bool>  &operator=(const std::atomic< bool>  &) = delete;
# 73
std::atomic< bool>  &operator=(const std::atomic< bool>  &) volatile = delete;
# 75
constexpr atomic(bool __i) noexcept : _M_base(__i) { } 
# 78
bool operator=(bool __i) noexcept 
# 79
{ return (_M_base).operator=(__i); } 
# 82
bool operator=(bool __i) volatile noexcept 
# 83
{ return (_M_base).operator=(__i); } 
# 85
operator bool() const noexcept 
# 86
{ return (_M_base).load(); } 
# 88
operator bool() const volatile noexcept 
# 89
{ return (_M_base).load(); } 
# 92
bool is_lock_free() const noexcept { return (_M_base).is_lock_free(); } 
# 95
bool is_lock_free() const volatile noexcept { return (_M_base).is_lock_free(); } 
# 102
void store(bool __i, memory_order __m = memory_order_seq_cst) noexcept 
# 103
{ (_M_base).store(__i, __m); } 
# 106
void store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept 
# 107
{ (_M_base).store(__i, __m); } 
# 110
bool load(memory_order __m = memory_order_seq_cst) const noexcept 
# 111
{ return (_M_base).load(__m); } 
# 114
bool load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 115
{ return (_M_base).load(__m); } 
# 118
bool exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept 
# 119
{ return (_M_base).exchange(__i, __m); } 
# 122
bool exchange(bool __i, memory_order 
# 123
__m = memory_order_seq_cst) volatile noexcept 
# 124
{ return (_M_base).exchange(__i, __m); } 
# 127
bool compare_exchange_weak(bool &__i1, bool __i2, memory_order __m1, memory_order 
# 128
__m2) noexcept 
# 129
{ return (_M_base).compare_exchange_weak(__i1, __i2, __m1, __m2); } 
# 132
bool compare_exchange_weak(bool &__i1, bool __i2, memory_order __m1, memory_order 
# 133
__m2) volatile noexcept 
# 134
{ return (_M_base).compare_exchange_weak(__i1, __i2, __m1, __m2); } 
# 137
bool compare_exchange_weak(bool &__i1, bool __i2, memory_order 
# 138
__m = memory_order_seq_cst) noexcept 
# 139
{ return (_M_base).compare_exchange_weak(__i1, __i2, __m); } 
# 142
bool compare_exchange_weak(bool &__i1, bool __i2, memory_order 
# 143
__m = memory_order_seq_cst) volatile noexcept 
# 144
{ return (_M_base).compare_exchange_weak(__i1, __i2, __m); } 
# 147
bool compare_exchange_strong(bool &__i1, bool __i2, memory_order __m1, memory_order 
# 148
__m2) noexcept 
# 149
{ return (_M_base).compare_exchange_strong(__i1, __i2, __m1, __m2); } 
# 152
bool compare_exchange_strong(bool &__i1, bool __i2, memory_order __m1, memory_order 
# 153
__m2) volatile noexcept 
# 154
{ return (_M_base).compare_exchange_strong(__i1, __i2, __m1, __m2); } 
# 157
bool compare_exchange_strong(bool &__i1, bool __i2, memory_order 
# 158
__m = memory_order_seq_cst) noexcept 
# 159
{ return (_M_base).compare_exchange_strong(__i1, __i2, __m); } 
# 162
bool compare_exchange_strong(bool &__i1, bool __i2, memory_order 
# 163
__m = memory_order_seq_cst) volatile noexcept 
# 164
{ return (_M_base).compare_exchange_strong(__i1, __i2, __m); } 
# 165
}; 
# 173
template< class _Tp> 
# 174
struct atomic { 
# 178
private: static constexpr int _S_min_alignment = (((sizeof(_Tp) & (sizeof(_Tp) - (1))) || (sizeof(_Tp) > (16))) ? 0 : sizeof(_Tp)); 
# 182
static constexpr int _S_alignment = ((_S_min_alignment > __alignof__(_Tp)) ? _S_min_alignment : __alignof__(_Tp)); 
# 185
alignas(_S_alignment) _Tp _M_i; 
# 187
static_assert(__is_trivially_copyable(_Tp), "std::atomic requires a trivially copyable type");
# 190
static_assert((sizeof(_Tp) > (0)), "Incomplete or zero-sized types are not supported");
# 194
public: atomic() noexcept = default;
# 195
~atomic() noexcept = default;
# 196
atomic(const atomic &) = delete;
# 197
atomic &operator=(const atomic &) = delete;
# 198
atomic &operator=(const atomic &) volatile = delete;
# 200
constexpr atomic(_Tp __i) noexcept : _M_i(__i) { } 
# 202
operator _Tp() const noexcept 
# 203
{ return load(); } 
# 205
operator _Tp() const volatile noexcept 
# 206
{ return load(); } 
# 209
_Tp operator=(_Tp __i) noexcept 
# 210
{ store(__i); return __i; } 
# 213
_Tp operator=(_Tp __i) volatile noexcept 
# 214
{ store(__i); return __i; } 
# 217
bool is_lock_free() const noexcept 
# 218
{ 
# 220
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 222
} 
# 225
bool is_lock_free() const volatile noexcept 
# 226
{ 
# 228
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 230
} 
# 238
void store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept 
# 239
{ __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); } 
# 242
void store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept 
# 243
{ __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); } 
# 246
_Tp load(memory_order __m = memory_order_seq_cst) const noexcept 
# 247
{ 
# 248
alignas(_Tp) unsigned char __buf[sizeof(_Tp)]; 
# 249
_Tp *__ptr = reinterpret_cast< _Tp *>(__buf); 
# 250
__atomic_load(std::__addressof(_M_i), __ptr, __m); 
# 251
return *__ptr; 
# 252
} 
# 255
_Tp load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 256
{ 
# 257
alignas(_Tp) unsigned char __buf[sizeof(_Tp)]; 
# 258
_Tp *__ptr = reinterpret_cast< _Tp *>(__buf); 
# 259
__atomic_load(std::__addressof(_M_i), __ptr, __m); 
# 260
return *__ptr; 
# 261
} 
# 264
_Tp exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept 
# 265
{ 
# 266
alignas(_Tp) unsigned char __buf[sizeof(_Tp)]; 
# 267
_Tp *__ptr = reinterpret_cast< _Tp *>(__buf); 
# 268
__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i), __ptr, __m); 
# 270
return *__ptr; 
# 271
} 
# 274
_Tp exchange(_Tp __i, memory_order 
# 275
__m = memory_order_seq_cst) volatile noexcept 
# 276
{ 
# 277
alignas(_Tp) unsigned char __buf[sizeof(_Tp)]; 
# 278
_Tp *__ptr = reinterpret_cast< _Tp *>(__buf); 
# 279
__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i), __ptr, __m); 
# 281
return *__ptr; 
# 282
} 
# 285
bool compare_exchange_weak(_Tp &__e, _Tp __i, memory_order __s, memory_order 
# 286
__f) noexcept 
# 287
{ 
# 288
return __atomic_compare_exchange(std::__addressof(_M_i), std::__addressof(__e), std::__addressof(__i), true, __s, __f); 
# 292
} 
# 295
bool compare_exchange_weak(_Tp &__e, _Tp __i, memory_order __s, memory_order 
# 296
__f) volatile noexcept 
# 297
{ 
# 298
return __atomic_compare_exchange(std::__addressof(_M_i), std::__addressof(__e), std::__addressof(__i), true, __s, __f); 
# 302
} 
# 305
bool compare_exchange_weak(_Tp &__e, _Tp __i, memory_order 
# 306
__m = memory_order_seq_cst) noexcept 
# 307
{ return compare_exchange_weak(__e, __i, __m, __cmpexch_failure_order(__m)); 
# 308
} 
# 311
bool compare_exchange_weak(_Tp &__e, _Tp __i, memory_order 
# 312
__m = memory_order_seq_cst) volatile noexcept 
# 313
{ return compare_exchange_weak(__e, __i, __m, __cmpexch_failure_order(__m)); 
# 314
} 
# 317
bool compare_exchange_strong(_Tp &__e, _Tp __i, memory_order __s, memory_order 
# 318
__f) noexcept 
# 319
{ 
# 320
return __atomic_compare_exchange(std::__addressof(_M_i), std::__addressof(__e), std::__addressof(__i), false, __s, __f); 
# 324
} 
# 327
bool compare_exchange_strong(_Tp &__e, _Tp __i, memory_order __s, memory_order 
# 328
__f) volatile noexcept 
# 329
{ 
# 330
return __atomic_compare_exchange(std::__addressof(_M_i), std::__addressof(__e), std::__addressof(__i), false, __s, __f); 
# 334
} 
# 337
bool compare_exchange_strong(_Tp &__e, _Tp __i, memory_order 
# 338
__m = memory_order_seq_cst) noexcept 
# 339
{ return compare_exchange_strong(__e, __i, __m, __cmpexch_failure_order(__m)); 
# 340
} 
# 343
bool compare_exchange_strong(_Tp &__e, _Tp __i, memory_order 
# 344
__m = memory_order_seq_cst) volatile noexcept 
# 345
{ return compare_exchange_strong(__e, __i, __m, __cmpexch_failure_order(__m)); 
# 346
} 
# 347
}; 
# 351
template< class _Tp> 
# 352
struct atomic< _Tp *>  { 
# 354
typedef _Tp *__pointer_type; 
# 355
typedef __atomic_base< _Tp *>  __base_type; 
# 356
__base_type _M_b; 
# 358
atomic() noexcept = default;
# 359
~atomic() noexcept = default;
# 360
atomic(const std::atomic< _Tp *>  &) = delete;
# 361
std::atomic< _Tp *>  &operator=(const std::atomic< _Tp *>  &) = delete;
# 362
std::atomic< _Tp *>  &operator=(const std::atomic< _Tp *>  &) volatile = delete;
# 364
constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { } 
# 366
operator __pointer_type() const noexcept 
# 367
{ return (__pointer_type)(_M_b); } 
# 369
operator __pointer_type() const volatile noexcept 
# 370
{ return (__pointer_type)(_M_b); } 
# 373
__pointer_type operator=(__pointer_type __p) noexcept 
# 374
{ return (_M_b).operator=(__p); } 
# 377
__pointer_type operator=(__pointer_type __p) volatile noexcept 
# 378
{ return (_M_b).operator=(__p); } 
# 381
__pointer_type operator++(int) noexcept 
# 382
{ return (_M_b)++; } 
# 385
__pointer_type operator++(int) volatile noexcept 
# 386
{ return (_M_b)++; } 
# 389
__pointer_type operator--(int) noexcept 
# 390
{ return (_M_b)--; } 
# 393
__pointer_type operator--(int) volatile noexcept 
# 394
{ return (_M_b)--; } 
# 397
__pointer_type operator++() noexcept 
# 398
{ return ++(_M_b); } 
# 401
__pointer_type operator++() volatile noexcept 
# 402
{ return ++(_M_b); } 
# 405
__pointer_type operator--() noexcept 
# 406
{ return --(_M_b); } 
# 409
__pointer_type operator--() volatile noexcept 
# 410
{ return --(_M_b); } 
# 413
__pointer_type operator+=(ptrdiff_t __d) noexcept 
# 414
{ return (_M_b).operator+=(__d); } 
# 417
__pointer_type operator+=(ptrdiff_t __d) volatile noexcept 
# 418
{ return (_M_b).operator+=(__d); } 
# 421
__pointer_type operator-=(ptrdiff_t __d) noexcept 
# 422
{ return (_M_b).operator-=(__d); } 
# 425
__pointer_type operator-=(ptrdiff_t __d) volatile noexcept 
# 426
{ return (_M_b).operator-=(__d); } 
# 429
bool is_lock_free() const noexcept 
# 430
{ return (_M_b).is_lock_free(); } 
# 433
bool is_lock_free() const volatile noexcept 
# 434
{ return (_M_b).is_lock_free(); } 
# 441
void store(__pointer_type __p, memory_order 
# 442
__m = memory_order_seq_cst) noexcept 
# 443
{ return (_M_b).store(__p, __m); } 
# 446
void store(__pointer_type __p, memory_order 
# 447
__m = memory_order_seq_cst) volatile noexcept 
# 448
{ return (_M_b).store(__p, __m); } 
# 451
__pointer_type load(memory_order __m = memory_order_seq_cst) const noexcept 
# 452
{ return (_M_b).load(__m); } 
# 455
__pointer_type load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 456
{ return (_M_b).load(__m); } 
# 459
__pointer_type exchange(__pointer_type __p, memory_order 
# 460
__m = memory_order_seq_cst) noexcept 
# 461
{ return (_M_b).exchange(__p, __m); } 
# 464
__pointer_type exchange(__pointer_type __p, memory_order 
# 465
__m = memory_order_seq_cst) volatile noexcept 
# 466
{ return (_M_b).exchange(__p, __m); } 
# 469
bool compare_exchange_weak(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 470
__m1, memory_order __m2) noexcept 
# 471
{ return (_M_b).compare_exchange_strong(__p1, __p2, __m1, __m2); } 
# 474
bool compare_exchange_weak(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 475
__m1, memory_order 
# 476
__m2) volatile noexcept 
# 477
{ return (_M_b).compare_exchange_strong(__p1, __p2, __m1, __m2); } 
# 480
bool compare_exchange_weak(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 481
__m = memory_order_seq_cst) noexcept 
# 482
{ 
# 483
return compare_exchange_weak(__p1, __p2, __m, __cmpexch_failure_order(__m)); 
# 485
} 
# 488
bool compare_exchange_weak(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 489
__m = memory_order_seq_cst) volatile noexcept 
# 490
{ 
# 491
return compare_exchange_weak(__p1, __p2, __m, __cmpexch_failure_order(__m)); 
# 493
} 
# 496
bool compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 497
__m1, memory_order __m2) noexcept 
# 498
{ return (_M_b).compare_exchange_strong(__p1, __p2, __m1, __m2); } 
# 501
bool compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 502
__m1, memory_order 
# 503
__m2) volatile noexcept 
# 504
{ return (_M_b).compare_exchange_strong(__p1, __p2, __m1, __m2); } 
# 507
bool compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 508
__m = memory_order_seq_cst) noexcept 
# 509
{ 
# 510
return (_M_b).compare_exchange_strong(__p1, __p2, __m, __cmpexch_failure_order(__m)); 
# 512
} 
# 515
bool compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 516
__m = memory_order_seq_cst) volatile noexcept 
# 517
{ 
# 518
return (_M_b).compare_exchange_strong(__p1, __p2, __m, __cmpexch_failure_order(__m)); 
# 520
} 
# 523
__pointer_type fetch_add(ptrdiff_t __d, memory_order 
# 524
__m = memory_order_seq_cst) noexcept 
# 525
{ return (_M_b).fetch_add(__d, __m); } 
# 528
__pointer_type fetch_add(ptrdiff_t __d, memory_order 
# 529
__m = memory_order_seq_cst) volatile noexcept 
# 530
{ return (_M_b).fetch_add(__d, __m); } 
# 533
__pointer_type fetch_sub(ptrdiff_t __d, memory_order 
# 534
__m = memory_order_seq_cst) noexcept 
# 535
{ return (_M_b).fetch_sub(__d, __m); } 
# 538
__pointer_type fetch_sub(ptrdiff_t __d, memory_order 
# 539
__m = memory_order_seq_cst) volatile noexcept 
# 540
{ return (_M_b).fetch_sub(__d, __m); } 
# 541
}; 
# 546
template<> struct atomic< char>  : public __atomic_base< char>  { 
# 548
typedef char __integral_type; 
# 549
typedef std::__atomic_base< char>  __base_type; 
# 551
atomic() noexcept = default;
# 552
~atomic() noexcept = default;
# 553
atomic(const std::atomic< char>  &) = delete;
# 554
std::atomic< char>  &operator=(const std::atomic< char>  &) = delete;
# 555
std::atomic< char>  &operator=(const std::atomic< char>  &) volatile = delete;
# 557
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 559
using std::__atomic_base< char> ::operator char;
# 560
using std::__atomic_base< char> ::operator=;
# 565
}; 
# 569
template<> struct atomic< signed char>  : public __atomic_base< signed char>  { 
# 571
typedef signed char __integral_type; 
# 572
typedef std::__atomic_base< signed char>  __base_type; 
# 574
atomic() noexcept = default;
# 575
~atomic() noexcept = default;
# 576
atomic(const std::atomic< signed char>  &) = delete;
# 577
std::atomic< signed char>  &operator=(const std::atomic< signed char>  &) = delete;
# 578
std::atomic< signed char>  &operator=(const std::atomic< signed char>  &) volatile = delete;
# 580
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 582
using std::__atomic_base< signed char> ::operator signed char;
# 583
using std::__atomic_base< signed char> ::operator=;
# 588
}; 
# 592
template<> struct atomic< unsigned char>  : public __atomic_base< unsigned char>  { 
# 594
typedef unsigned char __integral_type; 
# 595
typedef std::__atomic_base< unsigned char>  __base_type; 
# 597
atomic() noexcept = default;
# 598
~atomic() noexcept = default;
# 599
atomic(const std::atomic< unsigned char>  &) = delete;
# 600
std::atomic< unsigned char>  &operator=(const std::atomic< unsigned char>  &) = delete;
# 601
std::atomic< unsigned char>  &operator=(const std::atomic< unsigned char>  &) volatile = delete;
# 603
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 605
using std::__atomic_base< unsigned char> ::operator unsigned char;
# 606
using std::__atomic_base< unsigned char> ::operator=;
# 611
}; 
# 615
template<> struct atomic< short>  : public __atomic_base< short>  { 
# 617
typedef short __integral_type; 
# 618
typedef std::__atomic_base< short>  __base_type; 
# 620
atomic() noexcept = default;
# 621
~atomic() noexcept = default;
# 622
atomic(const std::atomic< short>  &) = delete;
# 623
std::atomic< short>  &operator=(const std::atomic< short>  &) = delete;
# 624
std::atomic< short>  &operator=(const std::atomic< short>  &) volatile = delete;
# 626
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 628
using std::__atomic_base< short> ::operator short;
# 629
using std::__atomic_base< short> ::operator=;
# 634
}; 
# 638
template<> struct atomic< unsigned short>  : public __atomic_base< unsigned short>  { 
# 640
typedef unsigned short __integral_type; 
# 641
typedef std::__atomic_base< unsigned short>  __base_type; 
# 643
atomic() noexcept = default;
# 644
~atomic() noexcept = default;
# 645
atomic(const std::atomic< unsigned short>  &) = delete;
# 646
std::atomic< unsigned short>  &operator=(const std::atomic< unsigned short>  &) = delete;
# 647
std::atomic< unsigned short>  &operator=(const std::atomic< unsigned short>  &) volatile = delete;
# 649
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 651
using std::__atomic_base< unsigned short> ::operator unsigned short;
# 652
using std::__atomic_base< unsigned short> ::operator=;
# 657
}; 
# 661
template<> struct atomic< int>  : public __atomic_base< int>  { 
# 663
typedef int __integral_type; 
# 664
typedef std::__atomic_base< int>  __base_type; 
# 666
atomic() noexcept = default;
# 667
~atomic() noexcept = default;
# 668
atomic(const std::atomic< int>  &) = delete;
# 669
std::atomic< int>  &operator=(const std::atomic< int>  &) = delete;
# 670
std::atomic< int>  &operator=(const std::atomic< int>  &) volatile = delete;
# 672
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 674
using std::__atomic_base< int> ::operator int;
# 675
using std::__atomic_base< int> ::operator=;
# 680
}; 
# 684
template<> struct atomic< unsigned>  : public __atomic_base< unsigned>  { 
# 686
typedef unsigned __integral_type; 
# 687
typedef std::__atomic_base< unsigned>  __base_type; 
# 689
atomic() noexcept = default;
# 690
~atomic() noexcept = default;
# 691
atomic(const std::atomic< unsigned>  &) = delete;
# 692
std::atomic< unsigned>  &operator=(const std::atomic< unsigned>  &) = delete;
# 693
std::atomic< unsigned>  &operator=(const std::atomic< unsigned>  &) volatile = delete;
# 695
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 697
using std::__atomic_base< unsigned> ::operator unsigned;
# 698
using std::__atomic_base< unsigned> ::operator=;
# 703
}; 
# 707
template<> struct atomic< long>  : public __atomic_base< long>  { 
# 709
typedef long __integral_type; 
# 710
typedef std::__atomic_base< long>  __base_type; 
# 712
atomic() noexcept = default;
# 713
~atomic() noexcept = default;
# 714
atomic(const std::atomic< long>  &) = delete;
# 715
std::atomic< long>  &operator=(const std::atomic< long>  &) = delete;
# 716
std::atomic< long>  &operator=(const std::atomic< long>  &) volatile = delete;
# 718
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 720
using std::__atomic_base< long> ::operator long;
# 721
using std::__atomic_base< long> ::operator=;
# 726
}; 
# 730
template<> struct atomic< unsigned long>  : public __atomic_base< unsigned long>  { 
# 732
typedef unsigned long __integral_type; 
# 733
typedef std::__atomic_base< unsigned long>  __base_type; 
# 735
atomic() noexcept = default;
# 736
~atomic() noexcept = default;
# 737
atomic(const std::atomic< unsigned long>  &) = delete;
# 738
std::atomic< unsigned long>  &operator=(const std::atomic< unsigned long>  &) = delete;
# 739
std::atomic< unsigned long>  &operator=(const std::atomic< unsigned long>  &) volatile = delete;
# 741
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 743
using std::__atomic_base< unsigned long> ::operator unsigned long;
# 744
using std::__atomic_base< unsigned long> ::operator=;
# 749
}; 
# 753
template<> struct atomic< long long>  : public __atomic_base< long long>  { 
# 755
typedef long long __integral_type; 
# 756
typedef std::__atomic_base< long long>  __base_type; 
# 758
atomic() noexcept = default;
# 759
~atomic() noexcept = default;
# 760
atomic(const std::atomic< long long>  &) = delete;
# 761
std::atomic< long long>  &operator=(const std::atomic< long long>  &) = delete;
# 762
std::atomic< long long>  &operator=(const std::atomic< long long>  &) volatile = delete;
# 764
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 766
using std::__atomic_base< long long> ::operator long long;
# 767
using std::__atomic_base< long long> ::operator=;
# 772
}; 
# 776
template<> struct atomic< unsigned long long>  : public __atomic_base< unsigned long long>  { 
# 778
typedef unsigned long long __integral_type; 
# 779
typedef std::__atomic_base< unsigned long long>  __base_type; 
# 781
atomic() noexcept = default;
# 782
~atomic() noexcept = default;
# 783
atomic(const std::atomic< unsigned long long>  &) = delete;
# 784
std::atomic< unsigned long long>  &operator=(const std::atomic< unsigned long long>  &) = delete;
# 785
std::atomic< unsigned long long>  &operator=(const std::atomic< unsigned long long>  &) volatile = delete;
# 787
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 789
using std::__atomic_base< unsigned long long> ::operator unsigned long long;
# 790
using std::__atomic_base< unsigned long long> ::operator=;
# 795
}; 
# 799
template<> struct atomic< wchar_t>  : public __atomic_base< wchar_t>  { 
# 801
typedef wchar_t __integral_type; 
# 802
typedef std::__atomic_base< wchar_t>  __base_type; 
# 804
atomic() noexcept = default;
# 805
~atomic() noexcept = default;
# 806
atomic(const std::atomic< wchar_t>  &) = delete;
# 807
std::atomic< wchar_t>  &operator=(const std::atomic< wchar_t>  &) = delete;
# 808
std::atomic< wchar_t>  &operator=(const std::atomic< wchar_t>  &) volatile = delete;
# 810
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 812
using std::__atomic_base< wchar_t> ::operator wchar_t;
# 813
using std::__atomic_base< wchar_t> ::operator=;
# 818
}; 
# 822
template<> struct atomic< char16_t>  : public __atomic_base< char16_t>  { 
# 824
typedef char16_t __integral_type; 
# 825
typedef std::__atomic_base< char16_t>  __base_type; 
# 827
atomic() noexcept = default;
# 828
~atomic() noexcept = default;
# 829
atomic(const std::atomic< char16_t>  &) = delete;
# 830
std::atomic< char16_t>  &operator=(const std::atomic< char16_t>  &) = delete;
# 831
std::atomic< char16_t>  &operator=(const std::atomic< char16_t>  &) volatile = delete;
# 833
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 835
using std::__atomic_base< char16_t> ::operator char16_t;
# 836
using std::__atomic_base< char16_t> ::operator=;
# 841
}; 
# 845
template<> struct atomic< char32_t>  : public __atomic_base< char32_t>  { 
# 847
typedef char32_t __integral_type; 
# 848
typedef std::__atomic_base< char32_t>  __base_type; 
# 850
atomic() noexcept = default;
# 851
~atomic() noexcept = default;
# 852
atomic(const std::atomic< char32_t>  &) = delete;
# 853
std::atomic< char32_t>  &operator=(const std::atomic< char32_t>  &) = delete;
# 854
std::atomic< char32_t>  &operator=(const std::atomic< char32_t>  &) volatile = delete;
# 856
constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { } 
# 858
using std::__atomic_base< char32_t> ::operator char32_t;
# 859
using std::__atomic_base< char32_t> ::operator=;
# 864
}; 
# 868
typedef atomic< bool>  atomic_bool; 
# 871
typedef atomic< char>  atomic_char; 
# 874
typedef atomic< signed char>  atomic_schar; 
# 877
typedef atomic< unsigned char>  atomic_uchar; 
# 880
typedef atomic< short>  atomic_short; 
# 883
typedef atomic< unsigned short>  atomic_ushort; 
# 886
typedef atomic< int>  atomic_int; 
# 889
typedef atomic< unsigned>  atomic_uint; 
# 892
typedef atomic< long>  atomic_long; 
# 895
typedef atomic< unsigned long>  atomic_ulong; 
# 898
typedef atomic< long long>  atomic_llong; 
# 901
typedef atomic< unsigned long long>  atomic_ullong; 
# 904
typedef atomic< wchar_t>  atomic_wchar_t; 
# 907
typedef atomic< char16_t>  atomic_char16_t; 
# 910
typedef atomic< char32_t>  atomic_char32_t; 
# 917
typedef atomic< signed char>  atomic_int8_t; 
# 920
typedef atomic< unsigned char>  atomic_uint8_t; 
# 923
typedef atomic< short>  atomic_int16_t; 
# 926
typedef atomic< unsigned short>  atomic_uint16_t; 
# 929
typedef atomic< int>  atomic_int32_t; 
# 932
typedef atomic< unsigned>  atomic_uint32_t; 
# 935
typedef atomic< long>  atomic_int64_t; 
# 938
typedef atomic< unsigned long>  atomic_uint64_t; 
# 942
typedef atomic< signed char>  atomic_int_least8_t; 
# 945
typedef atomic< unsigned char>  atomic_uint_least8_t; 
# 948
typedef atomic< short>  atomic_int_least16_t; 
# 951
typedef atomic< unsigned short>  atomic_uint_least16_t; 
# 954
typedef atomic< int>  atomic_int_least32_t; 
# 957
typedef atomic< unsigned>  atomic_uint_least32_t; 
# 960
typedef atomic< long>  atomic_int_least64_t; 
# 963
typedef atomic< unsigned long>  atomic_uint_least64_t; 
# 967
typedef atomic< signed char>  atomic_int_fast8_t; 
# 970
typedef atomic< unsigned char>  atomic_uint_fast8_t; 
# 973
typedef atomic< long>  atomic_int_fast16_t; 
# 976
typedef atomic< unsigned long>  atomic_uint_fast16_t; 
# 979
typedef atomic< long>  atomic_int_fast32_t; 
# 982
typedef atomic< unsigned long>  atomic_uint_fast32_t; 
# 985
typedef atomic< long>  atomic_int_fast64_t; 
# 988
typedef atomic< unsigned long>  atomic_uint_fast64_t; 
# 992
typedef atomic< long>  atomic_intptr_t; 
# 995
typedef atomic< unsigned long>  atomic_uintptr_t; 
# 998
typedef atomic< unsigned long>  atomic_size_t; 
# 1001
typedef atomic< long>  atomic_intmax_t; 
# 1004
typedef atomic< unsigned long>  atomic_uintmax_t; 
# 1007
typedef atomic< long>  atomic_ptrdiff_t; 
# 1012
inline bool atomic_flag_test_and_set_explicit(atomic_flag *__a, memory_order 
# 1013
__m) noexcept 
# 1014
{ return __a->test_and_set(__m); } 
# 1017
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *__a, memory_order 
# 1018
__m) noexcept 
# 1019
{ return __a->test_and_set(__m); } 
# 1022
inline void atomic_flag_clear_explicit(atomic_flag *__a, memory_order __m) noexcept 
# 1023
{ __a->clear(__m); } 
# 1026
inline void atomic_flag_clear_explicit(volatile atomic_flag *__a, memory_order 
# 1027
__m) noexcept 
# 1028
{ __a->clear(__m); } 
# 1031
inline bool atomic_flag_test_and_set(atomic_flag *__a) noexcept 
# 1032
{ return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); } 
# 1035
inline bool atomic_flag_test_and_set(volatile atomic_flag *__a) noexcept 
# 1036
{ return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); } 
# 1039
inline void atomic_flag_clear(atomic_flag *__a) noexcept 
# 1040
{ atomic_flag_clear_explicit(__a, memory_order_seq_cst); } 
# 1043
inline void atomic_flag_clear(volatile atomic_flag *__a) noexcept 
# 1044
{ atomic_flag_clear_explicit(__a, memory_order_seq_cst); } 
# 1048
template< class _ITp> inline bool 
# 1050
atomic_is_lock_free(const atomic< _ITp>  *__a) noexcept 
# 1051
{ return __a->is_lock_free(); } 
# 1053
template< class _ITp> inline bool 
# 1055
atomic_is_lock_free(const volatile atomic< _ITp>  *__a) noexcept 
# 1056
{ return __a->is_lock_free(); } 
# 1058
template< class _ITp> inline void 
# 1060
atomic_init(atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1061
{ __a->store(__i, memory_order_relaxed); } 
# 1063
template< class _ITp> inline void 
# 1065
atomic_init(volatile atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1066
{ __a->store(__i, memory_order_relaxed); } 
# 1068
template< class _ITp> inline void 
# 1070
atomic_store_explicit(atomic< _ITp>  *__a, _ITp __i, memory_order 
# 1071
__m) noexcept 
# 1072
{ __a->store(__i, __m); } 
# 1074
template< class _ITp> inline void 
# 1076
atomic_store_explicit(volatile atomic< _ITp>  *__a, _ITp __i, memory_order 
# 1077
__m) noexcept 
# 1078
{ __a->store(__i, __m); } 
# 1080
template< class _ITp> inline _ITp 
# 1082
atomic_load_explicit(const atomic< _ITp>  *__a, memory_order __m) noexcept 
# 1083
{ return __a->load(__m); } 
# 1085
template< class _ITp> inline _ITp 
# 1087
atomic_load_explicit(const volatile atomic< _ITp>  *__a, memory_order 
# 1088
__m) noexcept 
# 1089
{ return __a->load(__m); } 
# 1091
template< class _ITp> inline _ITp 
# 1093
atomic_exchange_explicit(atomic< _ITp>  *__a, _ITp __i, memory_order 
# 1094
__m) noexcept 
# 1095
{ return __a->exchange(__i, __m); } 
# 1097
template< class _ITp> inline _ITp 
# 1099
atomic_exchange_explicit(volatile atomic< _ITp>  *__a, _ITp __i, memory_order 
# 1100
__m) noexcept 
# 1101
{ return __a->exchange(__i, __m); } 
# 1103
template< class _ITp> inline bool 
# 1105
atomic_compare_exchange_weak_explicit(atomic< _ITp>  *__a, _ITp *
# 1106
__i1, _ITp __i2, memory_order 
# 1107
__m1, memory_order 
# 1108
__m2) noexcept 
# 1109
{ return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); } 
# 1111
template< class _ITp> inline bool 
# 1113
atomic_compare_exchange_weak_explicit(volatile atomic< _ITp>  *__a, _ITp *
# 1114
__i1, _ITp __i2, memory_order 
# 1115
__m1, memory_order 
# 1116
__m2) noexcept 
# 1117
{ return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); } 
# 1119
template< class _ITp> inline bool 
# 1121
atomic_compare_exchange_strong_explicit(atomic< _ITp>  *__a, _ITp *
# 1122
__i1, _ITp __i2, memory_order 
# 1123
__m1, memory_order 
# 1124
__m2) noexcept 
# 1125
{ return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); } 
# 1127
template< class _ITp> inline bool 
# 1129
atomic_compare_exchange_strong_explicit(volatile atomic< _ITp>  *__a, _ITp *
# 1130
__i1, _ITp __i2, memory_order 
# 1131
__m1, memory_order 
# 1132
__m2) noexcept 
# 1133
{ return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); } 
# 1136
template< class _ITp> inline void 
# 1138
atomic_store(atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1139
{ atomic_store_explicit(__a, __i, memory_order_seq_cst); } 
# 1141
template< class _ITp> inline void 
# 1143
atomic_store(volatile atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1144
{ atomic_store_explicit(__a, __i, memory_order_seq_cst); } 
# 1146
template< class _ITp> inline _ITp 
# 1148
atomic_load(const atomic< _ITp>  *__a) noexcept 
# 1149
{ return atomic_load_explicit(__a, memory_order_seq_cst); } 
# 1151
template< class _ITp> inline _ITp 
# 1153
atomic_load(const volatile atomic< _ITp>  *__a) noexcept 
# 1154
{ return atomic_load_explicit(__a, memory_order_seq_cst); } 
# 1156
template< class _ITp> inline _ITp 
# 1158
atomic_exchange(atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1159
{ return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); } 
# 1161
template< class _ITp> inline _ITp 
# 1163
atomic_exchange(volatile atomic< _ITp>  *__a, _ITp __i) noexcept 
# 1164
{ return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); } 
# 1166
template< class _ITp> inline bool 
# 1168
atomic_compare_exchange_weak(atomic< _ITp>  *__a, _ITp *
# 1169
__i1, _ITp __i2) noexcept 
# 1170
{ 
# 1171
return atomic_compare_exchange_weak_explicit(__a, __i1, __i2, memory_order_seq_cst, memory_order_seq_cst); 
# 1174
} 
# 1176
template< class _ITp> inline bool 
# 1178
atomic_compare_exchange_weak(volatile atomic< _ITp>  *__a, _ITp *
# 1179
__i1, _ITp __i2) noexcept 
# 1180
{ 
# 1181
return atomic_compare_exchange_weak_explicit(__a, __i1, __i2, memory_order_seq_cst, memory_order_seq_cst); 
# 1184
} 
# 1186
template< class _ITp> inline bool 
# 1188
atomic_compare_exchange_strong(atomic< _ITp>  *__a, _ITp *
# 1189
__i1, _ITp __i2) noexcept 
# 1190
{ 
# 1191
return atomic_compare_exchange_strong_explicit(__a, __i1, __i2, memory_order_seq_cst, memory_order_seq_cst); 
# 1194
} 
# 1196
template< class _ITp> inline bool 
# 1198
atomic_compare_exchange_strong(volatile atomic< _ITp>  *__a, _ITp *
# 1199
__i1, _ITp __i2) noexcept 
# 1200
{ 
# 1201
return atomic_compare_exchange_strong_explicit(__a, __i1, __i2, memory_order_seq_cst, memory_order_seq_cst); 
# 1204
} 
# 1210
template< class _ITp> inline _ITp 
# 1212
atomic_fetch_add_explicit(__atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1213
__m) noexcept 
# 1214
{ return __a->fetch_add(__i, __m); } 
# 1216
template< class _ITp> inline _ITp 
# 1218
atomic_fetch_add_explicit(volatile __atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1219
__m) noexcept 
# 1220
{ return __a->fetch_add(__i, __m); } 
# 1222
template< class _ITp> inline _ITp 
# 1224
atomic_fetch_sub_explicit(__atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1225
__m) noexcept 
# 1226
{ return __a->fetch_sub(__i, __m); } 
# 1228
template< class _ITp> inline _ITp 
# 1230
atomic_fetch_sub_explicit(volatile __atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1231
__m) noexcept 
# 1232
{ return __a->fetch_sub(__i, __m); } 
# 1234
template< class _ITp> inline _ITp 
# 1236
atomic_fetch_and_explicit(__atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1237
__m) noexcept 
# 1238
{ return __a->fetch_and(__i, __m); } 
# 1240
template< class _ITp> inline _ITp 
# 1242
atomic_fetch_and_explicit(volatile __atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1243
__m) noexcept 
# 1244
{ return __a->fetch_and(__i, __m); } 
# 1246
template< class _ITp> inline _ITp 
# 1248
atomic_fetch_or_explicit(__atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1249
__m) noexcept 
# 1250
{ return __a->fetch_or(__i, __m); } 
# 1252
template< class _ITp> inline _ITp 
# 1254
atomic_fetch_or_explicit(volatile __atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1255
__m) noexcept 
# 1256
{ return __a->fetch_or(__i, __m); } 
# 1258
template< class _ITp> inline _ITp 
# 1260
atomic_fetch_xor_explicit(__atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1261
__m) noexcept 
# 1262
{ return __a->fetch_xor(__i, __m); } 
# 1264
template< class _ITp> inline _ITp 
# 1266
atomic_fetch_xor_explicit(volatile __atomic_base< _ITp>  *__a, _ITp __i, memory_order 
# 1267
__m) noexcept 
# 1268
{ return __a->fetch_xor(__i, __m); } 
# 1270
template< class _ITp> inline _ITp 
# 1272
atomic_fetch_add(__atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1273
{ return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); } 
# 1275
template< class _ITp> inline _ITp 
# 1277
atomic_fetch_add(volatile __atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1278
{ return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); } 
# 1280
template< class _ITp> inline _ITp 
# 1282
atomic_fetch_sub(__atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1283
{ return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); } 
# 1285
template< class _ITp> inline _ITp 
# 1287
atomic_fetch_sub(volatile __atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1288
{ return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); } 
# 1290
template< class _ITp> inline _ITp 
# 1292
atomic_fetch_and(__atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1293
{ return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); } 
# 1295
template< class _ITp> inline _ITp 
# 1297
atomic_fetch_and(volatile __atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1298
{ return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); } 
# 1300
template< class _ITp> inline _ITp 
# 1302
atomic_fetch_or(__atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1303
{ return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); } 
# 1305
template< class _ITp> inline _ITp 
# 1307
atomic_fetch_or(volatile __atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1308
{ return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); } 
# 1310
template< class _ITp> inline _ITp 
# 1312
atomic_fetch_xor(__atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1313
{ return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); } 
# 1315
template< class _ITp> inline _ITp 
# 1317
atomic_fetch_xor(volatile __atomic_base< _ITp>  *__a, _ITp __i) noexcept 
# 1318
{ return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); } 
# 1322
template< class _ITp> inline _ITp *
# 1324
atomic_fetch_add_explicit(atomic< _ITp *>  *__a, ptrdiff_t __d, memory_order 
# 1325
__m) noexcept 
# 1326
{ return __a->fetch_add(__d, __m); } 
# 1328
template< class _ITp> inline _ITp *
# 1330
atomic_fetch_add_explicit(volatile atomic< _ITp *>  *__a, ptrdiff_t __d, memory_order 
# 1331
__m) noexcept 
# 1332
{ return __a->fetch_add(__d, __m); } 
# 1334
template< class _ITp> inline _ITp *
# 1336
atomic_fetch_add(volatile atomic< _ITp *>  *__a, ptrdiff_t __d) noexcept 
# 1337
{ return __a->fetch_add(__d); } 
# 1339
template< class _ITp> inline _ITp *
# 1341
atomic_fetch_add(atomic< _ITp *>  *__a, ptrdiff_t __d) noexcept 
# 1342
{ return __a->fetch_add(__d); } 
# 1344
template< class _ITp> inline _ITp *
# 1346
atomic_fetch_sub_explicit(volatile atomic< _ITp *>  *__a, ptrdiff_t 
# 1347
__d, memory_order __m) noexcept 
# 1348
{ return __a->fetch_sub(__d, __m); } 
# 1350
template< class _ITp> inline _ITp *
# 1352
atomic_fetch_sub_explicit(atomic< _ITp *>  *__a, ptrdiff_t __d, memory_order 
# 1353
__m) noexcept 
# 1354
{ return __a->fetch_sub(__d, __m); } 
# 1356
template< class _ITp> inline _ITp *
# 1358
atomic_fetch_sub(volatile atomic< _ITp *>  *__a, ptrdiff_t __d) noexcept 
# 1359
{ return __a->fetch_sub(__d); } 
# 1361
template< class _ITp> inline _ITp *
# 1363
atomic_fetch_sub(atomic< _ITp *>  *__a, ptrdiff_t __d) noexcept 
# 1364
{ return __a->fetch_sub(__d); } 
# 1368
}
# 15 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic"
static_assert((2 == 2), "");
# 16
static_assert((2 == 2), "");
# 17
static_assert((2 == 2), "");
# 18
static_assert((2 == 2), "");
# 19
static_assert((2 == 2), "");
# 20
static_assert((2 == 2), "");
# 21
static_assert((2 == 2), "");
# 22
static_assert((2 == 2), "");
# 23
static_assert((2 == 2), "");
# 24
static_assert((2 == 2), "");
# 32 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__config" 3
extern "C++" {
# 42 "/home/poweruser/junda.feng/anaconda3/include/nv/target" 3
namespace nv { 
# 43
namespace target { 
# 44
namespace detail { 
# 46
typedef unsigned long long base_int_t; 
# 49
constexpr base_int_t all_hosts = (1); 
# 52
constexpr base_int_t sm_35_bit = (1 << 1); 
# 53
constexpr base_int_t sm_37_bit = (1 << 2); 
# 54
constexpr base_int_t sm_50_bit = (1 << 3); 
# 55
constexpr base_int_t sm_52_bit = (1 << 4); 
# 56
constexpr base_int_t sm_53_bit = (1 << 5); 
# 57
constexpr base_int_t sm_60_bit = (1 << 6); 
# 58
constexpr base_int_t sm_61_bit = (1 << 7); 
# 59
constexpr base_int_t sm_62_bit = (1 << 8); 
# 60
constexpr base_int_t sm_70_bit = (1 << 9); 
# 61
constexpr base_int_t sm_72_bit = (1 << 10); 
# 62
constexpr base_int_t sm_75_bit = (1 << 11); 
# 63
constexpr base_int_t sm_80_bit = (1 << 12); 
# 64
constexpr base_int_t sm_86_bit = (1 << 13); 
# 65
constexpr base_int_t sm_87_bit = (1 << 14); 
# 66
constexpr base_int_t all_devices = (((((((((((((sm_35_bit | sm_37_bit) | sm_50_bit) | sm_52_bit) | sm_53_bit) | sm_60_bit) | sm_61_bit) | sm_62_bit) | sm_70_bit) | sm_72_bit) | sm_75_bit) | sm_80_bit) | sm_86_bit) | sm_87_bit); 
# 74
struct target_description { 
# 75
base_int_t targets; 
# 77
constexpr target_description(base_int_t a) : targets(a) { } 
# 78
}; 
# 81
enum class sm_selector: base_int_t { 
# 82
sm_35 = 35ULL, sm_37 = 37ULL, 
# 83
sm_50 = 50ULL, sm_52 = 52ULL, sm_53, 
# 84
sm_60 = 60ULL, sm_61, sm_62, 
# 85
sm_70 = 70ULL, sm_72 = 72ULL, sm_75 = 75ULL, 
# 86
sm_80 = 80ULL, sm_86 = 86ULL, sm_87
# 87
}; 
# 89
constexpr base_int_t toint(sm_selector a) { 
# 90
return static_cast< base_int_t>(a); 
# 91
} 
# 93
constexpr base_int_t bitexact(sm_selector a) { 
# 94
return (toint(a) == (35)) ? sm_35_bit : ((toint(a) == (37)) ? sm_37_bit : ((toint(a) == (50)) ? sm_50_bit : ((toint(a) == (52)) ? sm_52_bit : ((toint(a) == (53)) ? sm_53_bit : ((toint(a) == (60)) ? sm_60_bit : ((toint(a) == (61)) ? sm_61_bit : ((toint(a) == (62)) ? sm_62_bit : ((toint(a) == (70)) ? sm_70_bit : ((toint(a) == (72)) ? sm_72_bit : ((toint(a) == (75)) ? sm_75_bit : ((toint(a) == (80)) ? sm_80_bit : ((toint(a) == (86)) ? sm_86_bit : ((toint(a) == (87)) ? sm_87_bit : (0)))))))))))))); 
# 108
} 
# 110
constexpr base_int_t bitrounddown(sm_selector a) { 
# 111
return (toint(a) >= (87)) ? sm_87_bit : ((toint(a) >= (86)) ? sm_86_bit : ((toint(a) >= (80)) ? sm_80_bit : ((toint(a) >= (75)) ? sm_75_bit : ((toint(a) >= (72)) ? sm_72_bit : ((toint(a) >= (70)) ? sm_70_bit : ((toint(a) >= (62)) ? sm_62_bit : ((toint(a) >= (61)) ? sm_61_bit : ((toint(a) >= (60)) ? sm_60_bit : ((toint(a) >= (53)) ? sm_53_bit : ((toint(a) >= (52)) ? sm_52_bit : ((toint(a) >= (50)) ? sm_50_bit : ((toint(a) >= (37)) ? sm_37_bit : ((toint(a) >= (35)) ? sm_35_bit : (0)))))))))))))); 
# 125
} 
# 130
constexpr target_description is_exactly(sm_selector a) { 
# 131
return ((target_description)(bitexact(a))); 
# 132
} 
# 135
constexpr target_description provides(sm_selector a) { 
# 136
return ((target_description)((~(bitrounddown(a) - (1))) & all_devices)); 
# 137
} 
# 142
constexpr target_description operator&&(target_description a, target_description 
# 143
b) { 
# 144
return ((target_description)((a.targets) & (b.targets))); 
# 145
} 
# 148
constexpr target_description operator||(target_description a, target_description 
# 149
b) { 
# 150
return ((target_description)((a.targets) | (b.targets))); 
# 151
} 
# 154
constexpr target_description operator!(target_description a) { 
# 155
return ((target_description)((~(a.targets)) & (all_devices | all_hosts))); 
# 156
} 
# 157
}
# 159
using detail::target_description;
# 160
using detail::sm_selector;
# 163
constexpr detail::target_description is_host = ((detail::target_description)(detail::all_hosts)); 
# 165
constexpr detail::target_description is_device = ((detail::target_description)(detail::all_devices)); 
# 167
constexpr detail::target_description any_target = ((detail::target_description)(detail::all_hosts | detail::all_devices)); 
# 169
constexpr detail::target_description no_target = ((detail::target_description)(0)); 
# 173
constexpr detail::sm_selector sm_35 = sm_selector::sm_35; 
# 174
constexpr detail::sm_selector sm_37 = sm_selector::sm_37; 
# 175
constexpr detail::sm_selector sm_50 = sm_selector::sm_50; 
# 176
constexpr detail::sm_selector sm_52 = sm_selector::sm_52; 
# 177
constexpr detail::sm_selector sm_53 = sm_selector::sm_53; 
# 178
constexpr detail::sm_selector sm_60 = sm_selector::sm_60; 
# 179
constexpr detail::sm_selector sm_61 = sm_selector::sm_61; 
# 180
constexpr detail::sm_selector sm_62 = sm_selector::sm_62; 
# 181
constexpr detail::sm_selector sm_70 = sm_selector::sm_70; 
# 182
constexpr detail::sm_selector sm_72 = sm_selector::sm_72; 
# 183
constexpr detail::sm_selector sm_75 = sm_selector::sm_75; 
# 184
constexpr detail::sm_selector sm_80 = sm_selector::sm_80; 
# 185
constexpr detail::sm_selector sm_86 = sm_selector::sm_86; 
# 186
constexpr detail::sm_selector sm_87 = sm_selector::sm_87; 
# 188
using detail::is_exactly;
# 189
using detail::provides;
# 190
}
# 191
}
# 34 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__config" 3
}
# 1190 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__config" 3
namespace std { inline namespace __1 { }}
# 53 "/usr/include/c++/7/cstddef" 3
namespace std { 
# 56
using ::max_align_t;
# 57
}
# 26 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/cstddef"
namespace cuda { namespace std { inline namespace __4 { 
# 28
typedef __decltype((nullptr)) nullptr_t; 
# 30
}}}
# 56 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
namespace cuda { namespace std { inline namespace __4 { 
# 58 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
using ::ptrdiff_t;
# 59
using ::size_t;
# 64
using ::max_align_t;
# 69 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef"
}}}
# 73
namespace cuda { namespace std { 
# 78 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
enum class byte: unsigned char { }; 
# 81 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte operator|(byte __lhs, byte __rhs) noexcept 
# 82
{ 
# 83
return static_cast< byte>(static_cast< unsigned char>((static_cast< unsigned>(__lhs)) | (static_cast< unsigned>(__rhs)))); 
# 87
} 
# 90 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte &operator|=(byte &__lhs, byte __rhs) noexcept 
# 91
{ return __lhs = (__lhs | __rhs); } 
# 94 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte operator&(byte __lhs, byte __rhs) noexcept 
# 95
{ 
# 96
return static_cast< byte>(static_cast< unsigned char>((static_cast< unsigned>(__lhs)) & (static_cast< unsigned>(__rhs)))); 
# 100
} 
# 103 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte &operator&=(byte &__lhs, byte __rhs) noexcept 
# 104
{ return __lhs = (__lhs & __rhs); } 
# 107 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte operator^(byte __lhs, byte __rhs) noexcept 
# 108
{ 
# 109
return static_cast< byte>(static_cast< unsigned char>((static_cast< unsigned>(__lhs)) ^ (static_cast< unsigned>(__rhs)))); 
# 113
} 
# 116 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte &operator^=(byte &__lhs, byte __rhs) noexcept 
# 117
{ return __lhs = (__lhs ^ __rhs); } 
# 120 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef" 3
constexpr byte operator~(byte __b) noexcept 
# 121
{ 
# 122
return static_cast< byte>(static_cast< unsigned char>(~(static_cast< unsigned>(__b)))); 
# 126
} 
# 129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstddef"
}}
# 99 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/climits"
static_assert((8 == 8), "");
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstdint" 3
namespace cuda { namespace std { inline namespace __4 { 
# 155 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstdint" 3
using ::int8_t;
# 156
using ::int16_t;
# 157
using ::int32_t;
# 158
using ::int64_t;
# 160
using ::uint8_t;
# 161
using ::uint16_t;
# 162
using ::uint32_t;
# 163
using ::uint64_t;
# 165
using ::int_least8_t;
# 166
using ::int_least16_t;
# 167
using ::int_least32_t;
# 168
using ::int_least64_t;
# 170
using ::uint_least8_t;
# 171
using ::uint_least16_t;
# 172
using ::uint_least32_t;
# 173
using ::uint_least64_t;
# 175
using ::int_fast8_t;
# 176
using ::int_fast16_t;
# 177
using ::int_fast32_t;
# 178
using ::int_fast64_t;
# 180
using ::uint_fast8_t;
# 181
using ::uint_fast16_t;
# 182
using ::uint_fast32_t;
# 183
using ::uint_fast64_t;
# 185
using ::intptr_t;
# 186
using ::uintptr_t;
# 188
using ::intmax_t;
# 189
using ::uintmax_t;
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/cstdint"
}}}
# 427 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
namespace cuda { namespace std { inline namespace __4 { 
# 429 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _T1, class _T2> struct pair; 
# 430
template< class _Tp> class reference_wrapper; 
# 431
template< class _Tp> struct hash; 
# 434
template< class _Tp, _Tp __v> 
# 435
struct __attribute((__visibility__("default"))) integral_constant { 
# 437
static constexpr const _Tp value = (__v); 
# 438
typedef _Tp value_type; 
# 439
typedef integral_constant type; 
# 441 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr operator value_type() const noexcept { return value; } 
# 444 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr value_type operator()() const noexcept { return value; } 
# 446
}; 
# 448
template< class _Tp, _Tp __v> constexpr const _Tp integral_constant< _Tp, __v> ::value; 
# 452
template< bool __b> using bool_constant = integral_constant< bool, __b> ; 
# 459
typedef bool_constant< true>  true_type; 
# 460
typedef bool_constant< false>  false_type; 
# 462
template< bool _Val> using _BoolConstant = integral_constant< bool, _Val> ; 
# 465
template< bool > struct _MetaBase; 
# 467
template<> struct _MetaBase< true>  { 
# 468
template< class _Tp, class _Up> using _SelectImpl = _Tp; 
# 470
template< template< class ...>  class _FirstFn, template< class ...>  class , class ..._Args> using _SelectApplyImpl = _FirstFn< _Args...> ; 
# 472
template< class _First, class ...> using _FirstImpl = _First; 
# 474
template< class , class _Second, class ...> using _SecondImpl = _Second; 
# 476
template< class _Tp = void> using _EnableIfImpl = _Tp; 
# 478
template< class _Result, class _First, class ..._Rest> using _OrImpl = typename __4::_MetaBase< (_First::value != true) && (sizeof...(_Rest) != (0))> ::template _OrImpl< _First, _Rest...> ; 
# 480
template< class _Result, class _First, class ..._Rest> using _AndImpl = typename __4::_MetaBase< (_First::value == true) && (sizeof...(_Rest) != (0))> ::template _AndImpl< _First, _Rest...> ; 
# 482
}; 
# 485
template<> struct _MetaBase< false>  { 
# 486
template< class _Tp, class _Up> using _SelectImpl = _Up; 
# 488
template< template< class ...>  class , template< class ...>  class _SecondFn, class ..._Args> using _SelectApplyImpl = _SecondFn< _Args...> ; 
# 490
template< class _Result, class ...> using _OrImpl = _Result; 
# 492
template< class _Result, class ...> using _AndImpl = _Result; 
# 494
}; 
# 495
template< bool _Cond, class _Ret = void> using _EnableIf = typename _MetaBase< _Cond> ::template _EnableIfImpl< _Ret> ; 
# 497
template< bool _Cond, class _IfRes, class _ElseRes> using _If = typename _MetaBase< _Cond> ::template _SelectImpl< _IfRes, _ElseRes> ; 
# 499
template< class ..._Rest> using _Or = typename _MetaBase< sizeof...(_Rest) != (0)> ::template _OrImpl< integral_constant< bool, false> , _Rest...> ; 
# 501
template< class ..._Rest> using _And = typename _MetaBase< sizeof...(_Rest) != (0)> ::template _AndImpl< integral_constant< bool, true> , _Rest...> ; 
# 503
template< class _Pred> 
# 504
struct _Not : public _BoolConstant< !_Pred::value>  { }; 
# 505
template< class ..._Args> using _FirstType = typename _MetaBase< sizeof...(_Args) >= (1)> ::template _FirstImpl< _Args...> ; 
# 507
template< class ..._Args> using _SecondType = typename _MetaBase< sizeof...(_Args) >= (2)> ::template _SecondImpl< _Args...> ; 
# 510
template< template< class ...>  class _Func, class ..._Args> 
# 511
struct _Lazy : public _Func< _Args...>  { }; 
# 515
template< template< class ...>  class _Templ, class ..._Args, class  = _Templ< _Args...> > true_type __sfinae_test_impl(int); 
# 518 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< template< class ...>  class , class ...> false_type __sfinae_test_impl(...); 
# 522 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< template< class ...>  class _Templ, class ..._Args> using _IsValidExpansion = __decltype((std::__sfinae_test_impl< _Templ, _Args...> (0))); 
# 525
template< class > 
# 526
struct __void_t { typedef void type; }; 
# 528
template< class _Tp> 
# 529
struct __identity { typedef _Tp type; }; 
# 531
template< class _Tp, bool > 
# 532
struct __attribute((__visibility__("default"))) __dependent_type : public _Tp { }; 
# 534
template< bool _Bp, class _If, class _Then> 
# 535
struct __attribute((__visibility__("default"))) conditional { typedef _If type; }; 
# 536
template< class _If, class _Then> 
# 537
struct __attribute((__visibility__("default"))) conditional< false, _If, _Then>  { typedef _Then type; }; 
# 540
template< bool _Bp, class _If, class _Then> using conditional_t = typename conditional< _Bp, _If, _Then> ::type; 
# 543
template< bool , class _Tp = void> struct __attribute((__visibility__("default"))) enable_if { }; 
# 544
template< class _Tp> struct __attribute((__visibility__("default"))) enable_if< true, _Tp>  { typedef _Tp type; }; 
# 547
template< bool _Bp, class _Tp = void> using enable_if_t = typename enable_if< _Bp, _Tp> ::type; 
# 552
template< class _Tp, class _Up> struct __attribute((__visibility__("default"))) is_same : public false_type { }; 
# 553
template< class _Tp> struct __attribute((__visibility__("default"))) is_same< _Tp, _Tp>  : public true_type { }; 
# 556
template< class _Tp, class _Up> constexpr bool 
# 557
is_same_v = (is_same< _Tp, _Up> ::value); 
# 561
template< class _Tp, class _Up> using _IsSame = _BoolConstant< is_same< _Tp, _Up> ::value> ; 
# 570 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _Up> using _IsNotSame = _BoolConstant< !is_same< _Tp, _Up> ::value> ; 
# 582 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> inline _Tp *
# 586 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
addressof(_Tp &__x) noexcept 
# 587
{ 
# 588
return __builtin_addressof(__x); 
# 589
} 
# 645 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template < class _Tp > _Tp * addressof ( const _Tp && ) noexcept = delete;
# 648
struct __two { char __lx[2]; }; 
# 654
template< class _Tp> struct __attribute((__visibility__("default"))) is_const : public false_type { }; 
# 655
template< class _Tp> struct __attribute((__visibility__("default"))) is_const< const _Tp>  : public true_type { }; 
# 658
template< class _Tp> constexpr bool 
# 659
is_const_v = (is_const< _Tp> ::value); 
# 665
template< class _Tp> struct __attribute((__visibility__("default"))) is_volatile : public false_type { }; 
# 666
template< class _Tp> struct __attribute((__visibility__("default"))) is_volatile< volatile _Tp>  : public true_type { }; 
# 669
template< class _Tp> constexpr bool 
# 670
is_volatile_v = (is_volatile< _Tp> ::value); 
# 676
template< class _Tp> struct __attribute((__visibility__("default"))) remove_const { typedef _Tp type; }; 
# 677
template< class _Tp> struct __attribute((__visibility__("default"))) remove_const< const _Tp>  { typedef _Tp type; }; 
# 679
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 684
template< class _Tp> struct __attribute((__visibility__("default"))) remove_volatile { typedef _Tp type; }; 
# 685
template< class _Tp> struct __attribute((__visibility__("default"))) remove_volatile< volatile _Tp>  { typedef _Tp type; }; 
# 687
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 692
template< class _Tp> struct __attribute((__visibility__("default"))) remove_cv { 
# 693
typedef typename remove_volatile< typename remove_const< _Tp> ::type> ::type type; }; 
# 695
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 700
template< class _Tp> struct __libcpp_is_void : public false_type { }; 
# 701
template<> struct __libcpp_is_void< void>  : public true_type { }; 
# 703
template< class _Tp> struct __attribute((__visibility__("default"))) is_void : public __libcpp_is_void< typename remove_cv< _Tp> ::type>  { 
# 704
}; 
# 707
template< class _Tp> constexpr bool 
# 708
is_void_v = (is_void< _Tp> ::value); 
# 714
template< class _Tp> struct __is_nullptr_t_impl : public false_type { }; 
# 715
template<> struct __is_nullptr_t_impl< nullptr_t>  : public true_type { }; 
# 717
template< class _Tp> struct __attribute((__visibility__("default"))) __is_nullptr_t : public __is_nullptr_t_impl< typename remove_cv< _Tp> ::type>  { 
# 718
}; 
# 721
template< class _Tp> struct __attribute((__visibility__("default"))) is_null_pointer : public __is_nullptr_t_impl< typename remove_cv< _Tp> ::type>  { 
# 722
}; 
# 725
template< class _Tp> constexpr bool 
# 726
is_null_pointer_v = (is_null_pointer< _Tp> ::value); 
# 733
template< class _Tp> struct __libcpp_is_integral : public false_type { }; 
# 734
template<> struct __libcpp_is_integral< bool>  : public true_type { }; 
# 735
template<> struct __libcpp_is_integral< char>  : public true_type { }; 
# 736
template<> struct __libcpp_is_integral< signed char>  : public true_type { }; 
# 737
template<> struct __libcpp_is_integral< unsigned char>  : public true_type { }; 
# 738
template<> struct __libcpp_is_integral< wchar_t>  : public true_type { }; 
# 743
template<> struct __libcpp_is_integral< char16_t>  : public true_type { }; 
# 744
template<> struct __libcpp_is_integral< char32_t>  : public true_type { }; 
# 746
template<> struct __libcpp_is_integral< short>  : public true_type { }; 
# 747
template<> struct __libcpp_is_integral< unsigned short>  : public true_type { }; 
# 748
template<> struct __libcpp_is_integral< int>  : public true_type { }; 
# 749
template<> struct __libcpp_is_integral< unsigned>  : public true_type { }; 
# 750
template<> struct __libcpp_is_integral< long>  : public true_type { }; 
# 751
template<> struct __libcpp_is_integral< unsigned long>  : public true_type { }; 
# 752
template<> struct __libcpp_is_integral< long long>  : public true_type { }; 
# 753
template<> struct __libcpp_is_integral< unsigned long long>  : public true_type { }; 
# 755
template<> struct __libcpp_is_integral< __int128>  : public true_type { }; 
# 756
template<> struct __libcpp_is_integral< unsigned __int128>  : public true_type { }; 
# 759
template< class _Tp> struct __attribute((__visibility__("default"))) is_integral : public __libcpp_is_integral< typename remove_cv< _Tp> ::type>  { 
# 760
}; 
# 763
template< class _Tp> constexpr bool 
# 764
is_integral_v = (is_integral< _Tp> ::value); 
# 770
template< class _Tp> struct __libcpp_is_floating_point : public false_type { }; 
# 771
template<> struct __libcpp_is_floating_point< float>  : public true_type { }; 
# 772
template<> struct __libcpp_is_floating_point< double>  : public true_type { }; 
# 773
template<> struct __libcpp_is_floating_point< long double>  : public true_type { }; 
# 775
template< class _Tp> struct __attribute((__visibility__("default"))) is_floating_point : public __libcpp_is_floating_point< typename remove_cv< _Tp> ::type>  { 
# 776
}; 
# 779
template< class _Tp> constexpr bool 
# 780
is_floating_point_v = (is_floating_point< _Tp> ::value); 
# 786
template< class _Tp> struct __attribute((__visibility__("default"))) is_array : public false_type { 
# 787
}; 
# 788
template< class _Tp> struct __attribute((__visibility__("default"))) is_array< _Tp []>  : public true_type { 
# 789
}; 
# 790
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) is_array< _Tp [_Np]>  : public true_type { 
# 791
}; 
# 794
template< class _Tp> constexpr bool 
# 795
is_array_v = (is_array< _Tp> ::value); 
# 801
template< class _Tp> struct __libcpp_is_pointer : public false_type { }; 
# 802
template< class _Tp> struct __libcpp_is_pointer< _Tp *>  : public true_type { }; 
# 804
template< class _Tp> struct __libcpp_remove_objc_qualifiers { typedef _Tp type; }; 
# 812
template< class _Tp> struct __attribute((__visibility__("default"))) is_pointer : public __libcpp_is_pointer< typename __libcpp_remove_objc_qualifiers< typename remove_cv< _Tp> ::type> ::type>  { 
# 813
}; 
# 816
template< class _Tp> constexpr bool 
# 817
is_pointer_v = (is_pointer< _Tp> ::value); 
# 823
template< class _Tp> struct __attribute((__visibility__("default"))) is_lvalue_reference : public false_type { }; 
# 824
template< class _Tp> struct __attribute((__visibility__("default"))) is_lvalue_reference< _Tp &>  : public true_type { }; 
# 826
template< class _Tp> struct __attribute((__visibility__("default"))) is_rvalue_reference : public false_type { }; 
# 827
template< class _Tp> struct __attribute((__visibility__("default"))) is_rvalue_reference< _Tp &&>  : public true_type { }; 
# 829
template< class _Tp> struct __attribute((__visibility__("default"))) is_reference : public false_type { }; 
# 830
template< class _Tp> struct __attribute((__visibility__("default"))) is_reference< _Tp &>  : public true_type { }; 
# 831
template< class _Tp> struct __attribute((__visibility__("default"))) is_reference< _Tp &&>  : public true_type { }; 
# 834
template< class _Tp> constexpr bool 
# 835
is_reference_v = (is_reference< _Tp> ::value); 
# 838
template< class _Tp> constexpr bool 
# 839
is_lvalue_reference_v = (is_lvalue_reference< _Tp> ::value); 
# 842
template< class _Tp> constexpr bool 
# 843
is_rvalue_reference_v = (is_rvalue_reference< _Tp> ::value); 
# 850
template< class _Tp> struct __attribute((__visibility__("default"))) is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 851
}; 
# 862 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 863
is_union_v = (is_union< _Tp> ::value); 
# 871
template< class _Tp> struct __attribute((__visibility__("default"))) is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 872
}; 
# 888 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 889
is_class_v = (is_class< _Tp> ::value); 
# 895
template< class _Tp> struct __attribute((__visibility__("default"))) is_function : public _BoolConstant< !(is_reference< _Tp> ::value || is_const< const _Tp> ::value)>  { 
# 902
}; 
# 906
template< class _Tp> constexpr bool 
# 907
is_function_v = (is_function< _Tp> ::value); 
# 911
template< class _Tp> struct __libcpp_is_member_pointer { 
# 912
enum { 
# 913
__is_member, 
# 914
__is_func = false, 
# 915
__is_obj = false
# 916
}; 
# 917
}; 
# 918
template< class _Tp, class _Up> struct __libcpp_is_member_pointer< _Tp (_Up::*)>  { 
# 919
enum { 
# 920
__is_member = true, 
# 921
__is_func = is_function< _Tp> ::value, 
# 922
__is_obj = !(is_function< _Tp> ::value)
# 923
}; 
# 924
}; 
# 927
template< class _Tp> struct __attribute((__visibility__("default"))) is_member_function_pointer : public _BoolConstant< __libcpp_is_member_pointer< typename remove_cv< _Tp> ::type> ::__is_func>  { 
# 928
}; 
# 931
template< class _Tp> constexpr bool 
# 932
is_member_function_pointer_v = (is_member_function_pointer< _Tp> ::value); 
# 938
template< class _Tp> struct __attribute((__visibility__("default"))) is_member_pointer : public _BoolConstant< __libcpp_is_member_pointer< typename remove_cv< _Tp> ::type> ::__is_member>  { 
# 939
}; 
# 942
template< class _Tp> constexpr bool 
# 943
is_member_pointer_v = (is_member_pointer< _Tp> ::value); 
# 949
template< class _Tp> struct __attribute((__visibility__("default"))) is_member_object_pointer : public _BoolConstant< __libcpp_is_member_pointer< typename remove_cv< _Tp> ::type> ::__is_obj>  { 
# 950
}; 
# 953
template< class _Tp> constexpr bool 
# 954
is_member_object_pointer_v = (is_member_object_pointer< _Tp> ::value); 
# 962
template< class _Tp> struct __attribute((__visibility__("default"))) is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 963
}; 
# 982 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 983
is_enum_v = (is_enum< _Tp> ::value); 
# 989
template< class _Tp> struct __attribute((__visibility__("default"))) is_arithmetic : public integral_constant< bool, is_integral< _Tp> ::value || is_floating_point< _Tp> ::value>  { 
# 991
}; 
# 994
template< class _Tp> constexpr bool 
# 995
is_arithmetic_v = (is_arithmetic< _Tp> ::value); 
# 1001
template< class _Tp> struct __attribute((__visibility__("default"))) is_fundamental : public integral_constant< bool, (is_void< _Tp> ::value || __is_nullptr_t< _Tp> ::value) || is_arithmetic< _Tp> ::value>  { 
# 1004
}; 
# 1007
template< class _Tp> constexpr bool 
# 1008
is_fundamental_v = (is_fundamental< _Tp> ::value); 
# 1014
template< class _Tp> struct __attribute((__visibility__("default"))) is_scalar : public integral_constant< bool, (((is_arithmetic< _Tp> ::value || is_member_pointer< _Tp> ::value) || is_pointer< _Tp> ::value) || __is_nullptr_t< _Tp> ::value) || is_enum< _Tp> ::value>  { 
# 1019
}; 
# 1021
template<> struct __attribute((__visibility__("default"))) is_scalar< nullptr_t>  : public true_type { }; 
# 1024
template< class _Tp> constexpr bool 
# 1025
is_scalar_v = (is_scalar< _Tp> ::value); 
# 1031
template< class _Tp> struct __attribute((__visibility__("default"))) is_object : public integral_constant< bool, ((is_scalar< _Tp> ::value || is_array< _Tp> ::value) || is_union< _Tp> ::value) || is_class< _Tp> ::value>  { 
# 1035
}; 
# 1038
template< class _Tp> constexpr bool 
# 1039
is_object_v = (is_object< _Tp> ::value); 
# 1045
template< class _Tp> struct __attribute((__visibility__("default"))) is_compound : public integral_constant< bool, !is_fundamental< _Tp> ::value>  { 
# 1046
}; 
# 1049
template< class _Tp> constexpr bool 
# 1050
is_compound_v = (is_compound< _Tp> ::value); 
# 1057
struct __is_referenceable_impl { 
# 1058
template< class _Tp> static _Tp &__test(int); 
# 1059 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> static __two __test(...); 
# 1060 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 1062
template< class _Tp> 
# 1063
struct __is_referenceable : public integral_constant< bool, integral_constant< bool, !is_same< __decltype((__is_referenceable_impl::__test< _Tp> (0))), __two> ::value> ::value>  { 
# 1064
}; 
# 1069
template< class _Tp> struct __attribute((__visibility__("default"))) add_const { 
# 1070
typedef const _Tp type; 
# 1071
}; 
# 1074
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1079
template< class _Tp> struct __attribute((__visibility__("default"))) add_volatile { 
# 1080
typedef volatile _Tp type; 
# 1081
}; 
# 1084
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1088
template< class _Tp> struct __attribute((__visibility__("default"))) add_cv { 
# 1089
typedef const volatile _Tp type; 
# 1090
}; 
# 1093
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1098
template< class _Tp> struct __attribute((__visibility__("default"))) remove_reference { typedef _Tp type; }; 
# 1099
template< class _Tp> struct __attribute((__visibility__("default"))) remove_reference< _Tp &>  { typedef _Tp type; }; 
# 1100
template< class _Tp> struct __attribute((__visibility__("default"))) remove_reference< _Tp &&>  { typedef _Tp type; }; 
# 1103
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1108
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __add_lvalue_reference_impl { typedef _Tp type; }; 
# 1109
template< class _Tp> struct __add_lvalue_reference_impl< _Tp, true>  { typedef _Tp &type; }; 
# 1111
template< class _Tp> struct __attribute((__visibility__("default"))) add_lvalue_reference { 
# 1112
typedef typename __add_lvalue_reference_impl< _Tp> ::type type; }; 
# 1115
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1118
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __add_rvalue_reference_impl { typedef _Tp type; }; 
# 1119
template< class _Tp> struct __add_rvalue_reference_impl< _Tp, true>  { typedef _Tp &&type; }; 
# 1121
template< class _Tp> struct __attribute((__visibility__("default"))) add_rvalue_reference { 
# 1122
typedef typename __add_rvalue_reference_impl< _Tp> ::type type; }; 
# 1125
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1128
template< class _Tp> _Tp &&__declval(int); 
# 1129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> _Tp __declval(long); 
# 1131 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> __decltype((__4::__declval< _Tp> (0))) declval() noexcept; 
# 1138 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> 
# 1139
struct __uncvref { 
# 1140
typedef typename remove_cv< typename remove_reference< _Tp> ::type> ::type type; 
# 1141
}; 
# 1143
template< class _Tp> 
# 1144
struct __unconstref { 
# 1145
typedef typename remove_const< typename remove_reference< _Tp> ::type> ::type type; 
# 1146
}; 
# 1149
template< class _Tp> using __uncvref_t = typename __uncvref< _Tp> ::type; 
# 1155
template< class _Tp, class _Up> 
# 1156
struct __is_same_uncvref : public _IsSame< typename __uncvref< _Tp> ::type, typename __uncvref< _Up> ::type>  { 
# 1157
}; 
# 1161
template< class _Tp> 
# 1162
struct remove_cvref : public __uncvref< _Tp>  { }; 
# 1164
template< class _Tp> using remove_cvref_t = typename remove_cvref< _Tp> ::type; 
# 1168
struct __any { 
# 1171 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__any(...); 
# 1172
}; 
# 1176
template< class _Tp> struct __attribute((__visibility__("default"))) remove_pointer { typedef _Tp type; }; 
# 1177
template< class _Tp> struct __attribute((__visibility__("default"))) remove_pointer< _Tp *>  { typedef _Tp type; }; 
# 1178
template< class _Tp> struct __attribute((__visibility__("default"))) remove_pointer< _Tp *const>  { typedef _Tp type; }; 
# 1179
template< class _Tp> struct __attribute((__visibility__("default"))) remove_pointer< _Tp *volatile>  { typedef _Tp type; }; 
# 1180
template< class _Tp> struct __attribute((__visibility__("default"))) remove_pointer< _Tp *const volatile>  { typedef _Tp type; }; 
# 1183
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 1188
template< class _Tp, bool 
# 1189
 = __is_referenceable< _Tp> ::value || _IsSame< typename remove_cv< _Tp> ::type, void> ::value> 
# 1191
struct __add_pointer_impl { 
# 1192
typedef typename remove_reference< _Tp> ::type *type; }; 
# 1193
template< class _Tp> struct __add_pointer_impl< _Tp, false>  { 
# 1194
typedef _Tp type; }; 
# 1196
template< class _Tp> struct __attribute((__visibility__("default"))) add_pointer { 
# 1197
typedef typename __add_pointer_impl< _Tp> ::type type; }; 
# 1200
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 1205
template< class _Tp> struct type_identity { typedef _Tp type; }; 
# 1206
template< class _Tp> using type_identity_t = typename type_identity< _Tp> ::type; 
# 1211
template< class _Tp, bool  = is_integral< _Tp> ::value> 
# 1212
struct __libcpp_is_signed_impl : public bool_constant< ((_Tp)(-1)) < ((_Tp)0)>  { }; 
# 1214
template< class _Tp> 
# 1215
struct __libcpp_is_signed_impl< _Tp, false>  : public true_type { }; 
# 1217
template< class _Tp, bool  = is_arithmetic< _Tp> ::value> 
# 1218
struct __libcpp_is_signed : public __libcpp_is_signed_impl< _Tp>  { }; 
# 1220
template< class _Tp> struct __libcpp_is_signed< _Tp, false>  : public false_type { }; 
# 1222
template< class _Tp> struct __attribute((__visibility__("default"))) is_signed : public __libcpp_is_signed< _Tp>  { }; 
# 1225
template< class _Tp> constexpr bool 
# 1226
is_signed_v = (is_signed< _Tp> ::value); 
# 1232
template< class _Tp, bool  = is_integral< _Tp> ::value> 
# 1233
struct __libcpp_is_unsigned_impl : public bool_constant< ((_Tp)0) < ((_Tp)(-1))>  { }; 
# 1235
template< class _Tp> 
# 1236
struct __libcpp_is_unsigned_impl< _Tp, false>  : public false_type { }; 
# 1238
template< class _Tp, bool  = is_arithmetic< _Tp> ::value> 
# 1239
struct __libcpp_is_unsigned : public __libcpp_is_unsigned_impl< _Tp>  { }; 
# 1241
template< class _Tp> struct __libcpp_is_unsigned< _Tp, false>  : public false_type { }; 
# 1243
template< class _Tp> struct __attribute((__visibility__("default"))) is_unsigned : public __libcpp_is_unsigned< _Tp>  { }; 
# 1246
template< class _Tp> constexpr bool 
# 1247
is_unsigned_v = (is_unsigned< _Tp> ::value); 
# 1253
template< class _Tp> struct __attribute((__visibility__("default"))) rank : public integral_constant< unsigned long, 0UL>  { 
# 1254
}; 
# 1255
template< class _Tp> struct __attribute((__visibility__("default"))) rank< _Tp []>  : public integral_constant< unsigned long, __4::rank< _Tp> ::value + 1>  { 
# 1256
}; 
# 1257
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) rank< _Tp [_Np]>  : public integral_constant< unsigned long, __4::rank< _Tp> ::value + 1>  { 
# 1258
}; 
# 1261
template< class _Tp> constexpr ::size_t 
# 1262
rank_v = (rank< _Tp> ::value); 
# 1268
template< class _Tp, unsigned _Ip = 0U> struct __attribute((__visibility__("default"))) extent : public integral_constant< unsigned long, 0UL>  { 
# 1269
}; 
# 1270
template< class _Tp> struct __attribute((__visibility__("default"))) extent< _Tp [], 0>  : public integral_constant< unsigned long, 0UL>  { 
# 1271
}; 
# 1272
template< class _Tp, unsigned _Ip> struct __attribute((__visibility__("default"))) extent< _Tp [], _Ip>  : public integral_constant< unsigned long, __4::extent< _Tp, _Ip - (1)> ::value>  { 
# 1273
}; 
# 1274
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) extent< _Tp [_Np], 0>  : public integral_constant< unsigned long, _Np>  { 
# 1275
}; 
# 1276
template< class _Tp, ::size_t _Np, unsigned _Ip> struct __attribute((__visibility__("default"))) extent< _Tp [_Np], _Ip>  : public integral_constant< unsigned long, __4::extent< _Tp, _Ip - (1)> ::value>  { 
# 1277
}; 
# 1280
template< class _Tp, unsigned _Ip = 0U> constexpr ::size_t 
# 1281
extent_v = (extent< _Tp, _Ip> ::value); 
# 1287
template< class _Tp> struct __attribute((__visibility__("default"))) remove_extent { 
# 1288
typedef _Tp type; }; 
# 1289
template< class _Tp> struct __attribute((__visibility__("default"))) remove_extent< _Tp []>  { 
# 1290
typedef _Tp type; }; 
# 1291
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) remove_extent< _Tp [_Np]>  { 
# 1292
typedef _Tp type; }; 
# 1295
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1300
template< class _Tp> struct __attribute((__visibility__("default"))) remove_all_extents { 
# 1301
typedef _Tp type; }; 
# 1302
template< class _Tp> struct __attribute((__visibility__("default"))) remove_all_extents< _Tp []>  { 
# 1303
typedef typename __4::remove_all_extents< _Tp> ::type type; }; 
# 1304
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) remove_all_extents< _Tp [_Np]>  { 
# 1305
typedef typename __4::remove_all_extents< _Tp> ::type type; }; 
# 1308
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1314
template< class > struct __attribute((__visibility__("default"))) is_bounded_array : public false_type { }; 
# 1315
template< class _Tp, ::size_t _Np> struct __attribute((__visibility__("default"))) is_bounded_array< _Tp [_Np]>  : public true_type { }; 
# 1317
template< class _Tp> constexpr bool 
# 1319
is_bounded_array_v = (is_bounded_array< _Tp> ::value); 
# 1323
template< class > struct __attribute((__visibility__("default"))) is_unbounded_array : public false_type { }; 
# 1324
template< class _Tp> struct __attribute((__visibility__("default"))) is_unbounded_array< _Tp []>  : public true_type { }; 
# 1326
template< class _Tp> constexpr bool 
# 1328
is_unbounded_array_v = (is_unbounded_array< _Tp> ::value); 
# 1333
template< class _Up, bool > 
# 1334
struct __decay { 
# 1335
typedef typename remove_cv< _Up> ::type type; 
# 1336
}; 
# 1338
template< class _Up> 
# 1339
struct __decay< _Up, true>  { 
# 1351
typedef typename conditional< is_array< _Up> ::value, typename remove_extent< _Up> ::type *, typename conditional< is_function< _Up> ::value, typename add_pointer< _Up> ::type, typename remove_cv< _Up> ::type> ::type> ::type type; 
# 1352
}; 
# 1354
template< class _Tp> 
# 1355
struct __attribute((__visibility__("default"))) decay { 
# 1358
private: typedef typename remove_reference< _Tp> ::type _Up; 
# 1360
public: typedef typename __decay< _Up, __is_referenceable< _Up> ::value> ::type type; 
# 1361
}; 
# 1364
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 1369
template< class _Tp> struct __attribute((__visibility__("default"))) is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 1370
}; 
# 1373
template< class _Tp> constexpr bool 
# 1374
is_abstract_v = (is_abstract< _Tp> ::value); 
# 1382
template< class _Tp> 
# 1383
struct
# 1382
 __attribute((__visibility__("default"))) __libcpp_is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 1383
}; 
# 1393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> 
# 1394
struct
# 1393
 __attribute((__visibility__("default"))) is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 1394
}; 
# 1398
template< class _Tp> constexpr bool 
# 1399
is_final_v = (is_final< _Tp> ::value); 
# 1406
template< class _Tp> 
# 1407
struct
# 1406
 __attribute((__visibility__("default"))) is_aggregate : public integral_constant< bool, __is_aggregate(_Tp)>  { 
# 1407
}; 
# 1410
template< class _Tp> constexpr bool 
# 1411
is_aggregate_v = (is_aggregate< _Tp> ::value); 
# 1421 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Bp, class _Dp> 
# 1422
struct __attribute((__visibility__("default"))) is_base_of : public integral_constant< bool, __is_base_of(_Bp, _Dp)>  { 
# 1423
}; 
# 1453 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Bp, class _Dp> constexpr bool 
# 1454
is_base_of_v = (is_base_of< _Bp, _Dp> ::value); 
# 1468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
namespace __is_convertible_imp { 
# 1470
template< class _Tp> void __test_convert(_Tp); 
# 1472 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _From, class _To, class  = void> 
# 1473
struct __is_convertible_test : public false_type { }; 
# 1475
template< class _From, class _To> 
# 1476
struct __is_convertible_test< _From, _To, __decltype((__is_convertible_imp::__test_convert< _To> (__4::declval< _From> ())))>  : public true_type { 
# 1478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 1480
template< class _Tp, bool _IsArray = is_array< _Tp> ::value, bool 
# 1481
_IsFunction = is_function< _Tp> ::value, bool 
# 1482
_IsVoid = is_void< _Tp> ::value> 
# 1483
struct __is_array_function_or_void { enum { value}; }; 
# 1484
template< class _Tp> struct __is_array_function_or_void< _Tp, true, false, false>  { enum { value = 1}; }; 
# 1485
template< class _Tp> struct __is_array_function_or_void< _Tp, false, true, false>  { enum { value = 2}; }; 
# 1486
template< class _Tp> struct __is_array_function_or_void< _Tp, false, false, true>  { enum { value = 3}; }; 
# 1487
}
# 1489
template< class _Tp, unsigned 
# 1490
 = __is_convertible_imp::template __is_array_function_or_void< typename remove_reference< _Tp> ::type> ::value> 
# 1491
struct __is_convertible_check { 
# 1493
static const ::size_t __v = (0); 
# 1494
}; 
# 1496
template< class _Tp> 
# 1497
struct __is_convertible_check< _Tp, 0>  { 
# 1499
static const ::size_t __v = sizeof(_Tp); 
# 1500
}; 
# 1502
template< class _T1, class _T2, unsigned 
# 1503
_T1_is_array_function_or_void = __is_convertible_imp::template __is_array_function_or_void< _T1> ::value, unsigned 
# 1504
_T2_is_array_function_or_void = __is_convertible_imp::template __is_array_function_or_void< _T2> ::value> 
# 1505
struct __is_convertible_fallback : public integral_constant< bool, __is_convertible_imp::__is_convertible_test< _T1, _T2> ::value>  { 
# 1509
}; 
# 1511
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 0, 1>  : public false_type { }; 
# 1512
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 1, 1>  : public false_type { }; 
# 1513
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 2, 1>  : public false_type { }; 
# 1514
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 3, 1>  : public false_type { }; 
# 1516
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 0, 2>  : public false_type { }; 
# 1517
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 1, 2>  : public false_type { }; 
# 1518
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 2, 2>  : public false_type { }; 
# 1519
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 3, 2>  : public false_type { }; 
# 1521
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 0, 3>  : public false_type { }; 
# 1522
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 1, 3>  : public false_type { }; 
# 1523
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 2, 3>  : public false_type { }; 
# 1524
template< class _T1, class _T2> struct __is_convertible_fallback< _T1, _T2, 3, 3>  : public true_type { }; 
# 1526
template< class _T1, class _T2> struct __attribute((__visibility__("default"))) is_convertible : public __is_convertible_fallback< _T1, _T2>  { 
# 1529
static const ::size_t __complete_check1 = (__is_convertible_check< _T1> ::__v); 
# 1530
static const ::size_t __complete_check2 = (__is_convertible_check< _T2> ::__v); 
# 1531
}; 
# 1536
template< class _From, class _To> constexpr bool 
# 1537
is_convertible_v = (is_convertible< _From, _To> ::value); 
# 1545
template< class _Tp> static void __test_noexcept(_Tp) noexcept; 
# 1548 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Fm, class _To> static bool_constant< noexcept(__test_noexcept< _To> (declval< _Fm> ()))>  __is_nothrow_convertible_test(); 
# 1552 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Fm, class _To> 
# 1553
struct __is_nothrow_convertible_helper : public __decltype((__is_nothrow_convertible_test< _Fm, _To> ())) { 
# 1554
}; 
# 1556
template< class _Fm, class _To> 
# 1557
struct is_nothrow_convertible : public _MetaBase< (_MetaBase< (is_void< _To> ::value == true) && (1UL != (0))> ::template _AndImpl< is_void< _To> , is_void< _Fm> > ::value != true) && (1UL != (0))> ::template _OrImpl< _And< is_void< _To> , is_void< _Fm> > , _Lazy< _And, is_convertible< _Fm, _To> , __is_nothrow_convertible_helper< _Fm, _To> > > ::type { 
# 1560
}; 
# 1562
template< class _Fm, class _To> constexpr bool 
# 1563
is_nothrow_convertible_v = (is_nothrow_convertible< _Fm, _To> ::value); 
# 1571
template< class _Tp> 
# 1572
struct __attribute((__visibility__("default"))) is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 1573
}; 
# 1599 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 1600
is_empty_v = (is_empty< _Tp> ::value); 
# 1608
template< class _Tp> 
# 1609
struct __attribute((__visibility__("default"))) is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 1610
}; 
# 1625 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 1626
is_polymorphic_v = (is_polymorphic< _Tp> ::value); 
# 1634
template< class _Tp> struct __attribute((__visibility__("default"))) has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1635
}; 
# 1645 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 1646
has_virtual_destructor_v = (has_virtual_destructor< _Tp> ::value); 
# 1654
template< class _Tp> struct __attribute((__visibility__("default"))) has_unique_object_representations : public integral_constant< bool, __has_unique_object_representations(remove_cv_t< remove_all_extents_t< _Tp> > )>  { 
# 1656
}; 
# 1659
template< class _Tp> constexpr bool 
# 1660
has_unique_object_representations_v = (has_unique_object_representations< _Tp> ::value); 
# 1668
template< class _Tp> struct __attribute((__visibility__("default"))) alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1669
}; 
# 1672
template< class _Tp> constexpr ::size_t 
# 1673
alignment_of_v = (alignment_of< _Tp> ::value); 
# 1679
template< class _Hp, class _Tp> 
# 1680
struct __type_list { 
# 1682
typedef _Hp _Head; 
# 1683
typedef _Tp _Tail; 
# 1684
}; 
# 1686
struct __nat { 
# 1689
__nat() = delete;
# 1690
__nat(const __nat &) = delete;
# 1691
__nat &operator=(const __nat &) = delete;
# 1692
~__nat() = delete;
# 1694
}; 
# 1696
template< class _Tp> 
# 1697
struct __align_type { 
# 1699
static const ::size_t value = __alignof__(_Tp); 
# 1700
typedef _Tp type; 
# 1701
}; 
# 1703
struct __struct_double { long double __lx; }; 
# 1704
struct __struct_double4 { double __lx[4]; }; 
# 1718
typedef __type_list< __align_type< unsigned char> , __type_list< __align_type< unsigned short> , __type_list< __align_type< unsigned> , __type_list< __align_type< unsigned long> , __type_list< __align_type< unsigned long long> , __type_list< __align_type< double> , __type_list< __align_type< long double> , __type_list< __align_type< __struct_double> , __type_list< __align_type< __struct_double4> , __type_list< __align_type< int *> , __nat> > > > > > > > > >  __all_types; 
# 1720
template< ::size_t _Align> 
# 1721
struct __attribute((__aligned__(_Align))) __fallback_overaligned { }; 
# 1723
template< class _TL, ::size_t _Align> struct __find_pod; 
# 1725
template< class _Hp, ::size_t _Align> 
# 1726
struct __find_pod< __type_list< _Hp, __nat> , _Align>  { 
# 1732
typedef typename conditional< _Align == _Hp::value, typename _Hp::type, __fallback_overaligned< _Align> > ::type type; 
# 1733
}; 
# 1735
template< class _Hp, class _Tp, ::size_t _Align> 
# 1736
struct __find_pod< __type_list< _Hp, _Tp> , _Align>  { 
# 1742
typedef typename conditional< _Align == _Hp::value, typename _Hp::type, typename __4::__find_pod< _Tp, _Align> ::type> ::type type; 
# 1743
}; 
# 1745
template< class _TL, ::size_t _Len> struct __find_max_align; 
# 1747
template< class _Hp, ::size_t _Len> 
# 1748
struct __find_max_align< __type_list< _Hp, __nat> , _Len>  : public integral_constant< unsigned long, _Hp::value>  { }; 
# 1750
template< ::size_t _Len, ::size_t _A1, ::size_t _A2> 
# 1751
struct __select_align { 
# 1754
private: static const ::size_t __min = ((_A2 < _A1) ? _A2 : _A1); 
# 1755
static const ::size_t __max = ((_A1 < _A2) ? _A2 : _A1); 
# 1757
public: static const ::size_t value = ((_Len < __max) ? __min : __max); 
# 1758
}; 
# 1760
template< class _Hp, class _Tp, ::size_t _Len> 
# 1761
struct __find_max_align< __type_list< _Hp, _Tp> , _Len>  : public integral_constant< unsigned long, __select_align< _Len, _Hp::value, __4::__find_max_align< _Tp, _Len> ::value> ::value>  { 
# 1762
}; 
# 1764
template< ::size_t _Len, ::size_t _Align = __find_max_align< __type_list< __align_type< unsigned char> , __type_list< __align_type< unsigned short> , __type_list< __align_type< unsigned> , __type_list< __align_type< unsigned long> , __type_list< __align_type< unsigned long long> , __type_list< __align_type< double> , __type_list< __align_type< long double> , __type_list< __align_type< __struct_double> , __type_list< __align_type< __struct_double4> , __type_list< __align_type< int *> , __nat> > > > > > > > > > , _Len> ::value> 
# 1765
struct __attribute((__visibility__("default"))) aligned_storage { 
# 1767
typedef typename __find_pod< __all_types, _Align> ::type _Aligner; 
# 1768
union type { 
# 1770
_Aligner __align; 
# 1771
unsigned char __data[(((_Len + _Align) - (1)) / _Align) * _Align]; 
# 1772
}; 
# 1773
}; 
# 1776
template< ::size_t _Len, ::size_t _Align = __find_max_align< __type_list< __align_type< unsigned char> , __type_list< __align_type< unsigned short> , __type_list< __align_type< unsigned> , __type_list< __align_type< unsigned long> , __type_list< __align_type< unsigned long long> , __type_list< __align_type< double> , __type_list< __align_type< long double> , __type_list< __align_type< __struct_double> , __type_list< __align_type< __struct_double4> , __type_list< __align_type< int *> , __nat> > > > > > > > > > , _Len> ::value> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 1790 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 1>  { struct __attribute((__aligned__(1))) type { unsigned char __lx[(((_Len + (1)) - (1)) / (1)) * (1)]; }; }; 
# 1791
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 2>  { struct __attribute((__aligned__(2))) type { unsigned char __lx[(((_Len + (2)) - (1)) / (2)) * (2)]; }; }; 
# 1792
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 4>  { struct __attribute((__aligned__(4))) type { unsigned char __lx[(((_Len + (4)) - (1)) / (4)) * (4)]; }; }; 
# 1793
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 8>  { struct __attribute((__aligned__(8))) type { unsigned char __lx[(((_Len + (8)) - (1)) / (8)) * (8)]; }; }; 
# 1794
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 16>  { struct __attribute((__aligned__(16))) type { unsigned char __lx[(((_Len + (16)) - (1)) / (16)) * (16)]; }; }; 
# 1795
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 32>  { struct __attribute((__aligned__(32))) type { unsigned char __lx[(((_Len + (32)) - (1)) / (32)) * (32)]; }; }; 
# 1796
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 64>  { struct __attribute((__aligned__(64))) type { unsigned char __lx[(((_Len + (64)) - (1)) / (64)) * (64)]; }; }; 
# 1797
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 128>  { struct __attribute((__aligned__(128))) type { unsigned char __lx[(((_Len + (128)) - (1)) / (128)) * (128)]; }; }; 
# 1798
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 256>  { struct __attribute((__aligned__(256))) type { unsigned char __lx[(((_Len + (256)) - (1)) / (256)) * (256)]; }; }; 
# 1799
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 512>  { struct __attribute((__aligned__(512))) type { unsigned char __lx[(((_Len + (512)) - (1)) / (512)) * (512)]; }; }; 
# 1800
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 1024>  { struct __attribute((__aligned__(1024))) type { unsigned char __lx[(((_Len + (1024)) - (1)) / (1024)) * (1024)]; }; }; 
# 1801
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 2048>  { struct __attribute((__aligned__(2048))) type { unsigned char __lx[(((_Len + (2048)) - (1)) / (2048)) * (2048)]; }; }; 
# 1802
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 4096>  { struct __attribute((__aligned__(4096))) type { unsigned char __lx[(((_Len + (4096)) - (1)) / (4096)) * (4096)]; }; }; 
# 1803
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 8192>  { struct __attribute((__aligned__(8192))) type { unsigned char __lx[(((_Len + (8192)) - (1)) / (8192)) * (8192)]; }; }; 
# 1806
template< ::size_t _Len> struct __attribute((__visibility__("default"))) aligned_storage< _Len, 16384>  { struct __attribute((__aligned__(16384))) type { unsigned char __lx[(((_Len + (16384)) - (1)) / (16384)) * (16384)]; }; }; 
# 1814
template< ::size_t _I0, ::size_t ..._In> struct __static_max; 
# 1817
template< ::size_t _I0> 
# 1818
struct __static_max< _I0>  { 
# 1820
static const ::size_t value = _I0; 
# 1821
}; 
# 1823
template< ::size_t _I0, ::size_t _I1, ::size_t ..._In> 
# 1824
struct __static_max< _I0, _I1, _In...>  { 
# 1826
static const ::size_t value = ((_I0 >= _I1) ? __static_max< _I0, _In...> ::value : __static_max< _I1, _In...> ::value); 
# 1828
}; 
# 1830
template< ::size_t _Len, class _Type0, class ..._Types> 
# 1831
struct aligned_union { 
# 1833
static const ::size_t alignment_value = (__static_max< __alignof__(_Type0), __alignof__(_Types)...> ::value); 
# 1835
static const ::size_t __len = (__static_max< _Len, sizeof(_Type0), sizeof(_Types)...> ::value); 
# 1837
typedef typename aligned_storage< __len, alignment_value> ::type type; 
# 1838
}; 
# 1841
template< ::size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 1844
template< class _Tp> 
# 1845
struct __numeric_type { 
# 1848 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static void __test(...); 
# 1850 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static float __test(float); 
# 1852 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(char); 
# 1854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(int); 
# 1856 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(unsigned); 
# 1858 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(long); 
# 1860 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(unsigned long); 
# 1862 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(long long); 
# 1864 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(unsigned long long); 
# 1866 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static double __test(double); 
# 1868 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static long double __test(long double); 
# 1870
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1871
static const bool value = (_IsNotSame< type, void> ::value); 
# 1872
}; 
# 1875
template<> struct __numeric_type< void>  { 
# 1877
static const bool value = true; 
# 1878
}; 
# 1882
template< class _A1, class _A2 = void, class _A3 = void, bool 
# 1883
 = __numeric_type< _A1> ::value && __numeric_type< _A2> ::value && __numeric_type< _A3> ::value> 
# 1886
class __promote_imp { 
# 1889
public: static const bool value = false; 
# 1890
}; 
# 1892
template< class _A1, class _A2, class _A3> 
# 1893
class __promote_imp< _A1, _A2, _A3, true>  { 
# 1896
typedef typename __4::__promote_imp< _A1> ::type __type1; 
# 1897
typedef typename __4::__promote_imp< _A2> ::type __type2; 
# 1898
typedef typename __4::__promote_imp< _A3> ::type __type3; 
# 1900
public: typedef __decltype(((__type1() + __type2()) + __type3())) type; 
# 1901
static const bool value = true; 
# 1902
}; 
# 1904
template< class _A1, class _A2> 
# 1905
class __promote_imp< _A1, _A2, void, true>  { 
# 1908
typedef typename __4::__promote_imp< _A1> ::type __type1; 
# 1909
typedef typename __4::__promote_imp< _A2> ::type __type2; 
# 1911
public: typedef __decltype((__type1() + __type2())) type; 
# 1912
static const bool value = true; 
# 1913
}; 
# 1915
template< class _A1> 
# 1916
class __promote_imp< _A1, void, void, true>  { 
# 1919
public: typedef typename __numeric_type< _A1> ::type type; 
# 1920
static const bool value = true; 
# 1921
}; 
# 1923
template< class _A1, class _A2 = void, class _A3 = void> 
# 1924
class __promote : public __promote_imp< _A1, _A2, _A3>  { }; 
# 1941
typedef __type_list< signed char, __type_list< signed short, __type_list< signed int, __type_list< signed long, __type_list< signed long long, __type_list< __int128, __nat> > > > > >  __signed_types; 
# 1956
typedef __type_list< unsigned char, __type_list< unsigned short, __type_list< unsigned, __type_list< unsigned long, __type_list< unsigned long long, __type_list< unsigned __int128, __nat> > > > > >  __unsigned_types; 
# 1958
template< class _TypeList, ::size_t _Size, bool  = _Size <= sizeof(typename _TypeList::_Head)> struct __find_first; 
# 1960
template< class _Hp, class _Tp, ::size_t _Size> 
# 1961
struct __find_first< __type_list< _Hp, _Tp> , _Size, true>  { 
# 1963
typedef _Hp type; 
# 1964
}; 
# 1966
template< class _Hp, class _Tp, ::size_t _Size> 
# 1967
struct __find_first< __type_list< _Hp, _Tp> , _Size, false>  { 
# 1969
typedef typename __4::__find_first< _Tp, _Size> ::type type; 
# 1970
}; 
# 1972
template< class _Tp, class _Up, bool  = is_const< typename remove_reference< _Tp> ::type> ::value, bool 
# 1973
 = is_volatile< typename remove_reference< _Tp> ::type> ::value> 
# 1974
struct __apply_cv { 
# 1976
typedef _Up type; 
# 1977
}; 
# 1979
template< class _Tp, class _Up> 
# 1980
struct __apply_cv< _Tp, _Up, true, false>  { 
# 1982
typedef const _Up type; 
# 1983
}; 
# 1985
template< class _Tp, class _Up> 
# 1986
struct __apply_cv< _Tp, _Up, false, true>  { 
# 1988
typedef volatile _Up type; 
# 1989
}; 
# 1991
template< class _Tp, class _Up> 
# 1992
struct __apply_cv< _Tp, _Up, true, true>  { 
# 1994
typedef const volatile _Up type; 
# 1995
}; 
# 1997
template< class _Tp, class _Up> 
# 1998
struct __apply_cv< _Tp &, _Up, false, false>  { 
# 2000
typedef _Up &type; 
# 2001
}; 
# 2003
template< class _Tp, class _Up> 
# 2004
struct __apply_cv< _Tp &, _Up, true, false>  { 
# 2006
typedef const _Up &type; 
# 2007
}; 
# 2009
template< class _Tp, class _Up> 
# 2010
struct __apply_cv< _Tp &, _Up, false, true>  { 
# 2012
typedef volatile _Up &type; 
# 2013
}; 
# 2015
template< class _Tp, class _Up> 
# 2016
struct __apply_cv< _Tp &, _Up, true, true>  { 
# 2018
typedef const volatile _Up &type; 
# 2019
}; 
# 2021
template< class _Tp, bool  = is_integral< _Tp> ::value || is_enum< _Tp> ::value> 
# 2022
struct __make_signed { }; 
# 2024
template< class _Tp> 
# 2025
struct __make_signed< _Tp, true>  { 
# 2027
typedef typename __find_first< __signed_types, sizeof(_Tp)> ::type type; 
# 2028
}; 
# 2030
template<> struct __make_signed< bool, true>  { }; 
# 2031
template<> struct __make_signed< signed short, true>  { typedef short type; }; 
# 2032
template<> struct __make_signed< unsigned short, true>  { typedef short type; }; 
# 2033
template<> struct __make_signed< signed int, true>  { typedef int type; }; 
# 2034
template<> struct __make_signed< unsigned, true>  { typedef int type; }; 
# 2035
template<> struct __make_signed< signed long, true>  { typedef long type; }; 
# 2036
template<> struct __make_signed< unsigned long, true>  { typedef long type; }; 
# 2037
template<> struct __make_signed< signed long long, true>  { typedef long long type; }; 
# 2038
template<> struct __make_signed< unsigned long long, true>  { typedef long long type; }; 
# 2040
template<> struct __make_signed< __int128, true>  { typedef __int128 type; }; 
# 2041
template<> struct __make_signed< unsigned __int128, true>  { typedef __int128 type; }; 
# 2044
template< class _Tp> 
# 2045
struct __attribute((__visibility__("default"))) make_signed { 
# 2047
typedef typename __apply_cv< _Tp, typename __make_signed< typename remove_cv< _Tp> ::type> ::type> ::type type; 
# 2048
}; 
# 2051
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 2054
template< class _Tp, bool  = is_integral< _Tp> ::value || is_enum< _Tp> ::value> 
# 2055
struct __make_unsigned { }; 
# 2057
template< class _Tp> 
# 2058
struct __make_unsigned< _Tp, true>  { 
# 2060
typedef typename __find_first< __unsigned_types, sizeof(_Tp)> ::type type; 
# 2061
}; 
# 2063
template<> struct __make_unsigned< bool, true>  { }; 
# 2064
template<> struct __make_unsigned< signed short, true>  { typedef unsigned short type; }; 
# 2065
template<> struct __make_unsigned< unsigned short, true>  { typedef unsigned short type; }; 
# 2066
template<> struct __make_unsigned< signed int, true>  { typedef unsigned type; }; 
# 2067
template<> struct __make_unsigned< unsigned, true>  { typedef unsigned type; }; 
# 2068
template<> struct __make_unsigned< signed long, true>  { typedef unsigned long type; }; 
# 2069
template<> struct __make_unsigned< unsigned long, true>  { typedef unsigned long type; }; 
# 2070
template<> struct __make_unsigned< signed long long, true>  { typedef unsigned long long type; }; 
# 2071
template<> struct __make_unsigned< unsigned long long, true>  { typedef unsigned long long type; }; 
# 2073
template<> struct __make_unsigned< __int128, true>  { typedef unsigned __int128 type; }; 
# 2074
template<> struct __make_unsigned< unsigned __int128, true>  { typedef unsigned __int128 type; }; 
# 2077
template< class _Tp> 
# 2078
struct __attribute((__visibility__("default"))) make_unsigned { 
# 2080
typedef typename __apply_cv< _Tp, typename __make_unsigned< typename remove_cv< _Tp> ::type> ::type> ::type type; 
# 2081
}; 
# 2084
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 2087
template< class _Tp, class _Up, class  = void> 
# 2088
struct __common_type2_imp { }; 
# 2090
template< class _Tp, class _Up> 
# 2091
struct __common_type2_imp< _Tp, _Up, typename __void_t< __decltype((true ? __4::declval< _Tp> () : __4::declval< _Up> ()))> ::type>  { 
# 2098 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
typedef typename decay< __decltype((true ? __4::declval< _Tp> () : __4::declval< _Up> ()))> ::type type; 
# 2099
}; 
# 2101
template< class , class  = void> 
# 2102
struct __common_type_impl { }; 
# 2107
template< class ...Tp> struct __common_types; 
# 2109
template< class ..._Tp> struct common_type; 
# 2124 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _Up> 
# 2125
struct __common_type_impl< __common_types< _Tp, _Up> , typename __void_t< typename common_type< _Tp, _Up> ::type> ::type>  { 
# 2129
typedef typename common_type< _Tp, _Up> ::type type; 
# 2130
}; 
# 2132
template< class _Tp, class _Up, class _Vp, class ..._Rest> 
# 2133
struct __common_type_impl< __common_types< _Tp, _Up, _Vp, _Rest...> , typename __void_t< typename common_type< _Tp, _Up> ::type> ::type>  : public __4::__common_type_impl< __common_types< typename common_type< _Tp, _Up> ::type, _Vp, _Rest...> >  { 
# 2138
}; 
# 2143
template<> struct __attribute((__visibility__("default"))) common_type< >  { }; 
# 2147
template< class _Tp> 
# 2148
struct __attribute((__visibility__("default"))) common_type< _Tp>  : public __4::common_type< _Tp, _Tp>  { 
# 2149
}; 
# 2153
template< class _Tp, class _Up> 
# 2154
struct __attribute((__visibility__("default"))) common_type< _Tp, _Up>  : public conditional< integral_constant< bool, is_same< _Tp, typename decay< _Tp> ::type> ::value> ::value && integral_constant< bool, is_same< _Up, typename decay< _Up> ::type> ::value> ::value, __common_type2_imp< _Tp, _Up> , __4::common_type< typename decay< _Tp> ::type, typename decay< _Up> ::type> > ::type { 
# 2160
}; 
# 2164
template< class _Tp, class _Up, class _Vp, class ..._Rest> 
# 2166
struct
# 2165
 __attribute((__visibility__("default"))) common_type< _Tp, _Up, _Vp, _Rest...>  : public __common_type_impl< __common_types< _Tp, _Up, _Vp, _Rest...> >  { 
# 2168
}; 
# 2173
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2178
template< class , class _Tp> struct __select_2nd { typedef _Tp type; }; 
# 2180
template< class _Tp, class _Arg> typename __select_2nd< __decltype((__4::declval< _Tp> () = __4::declval< _Arg> ())), integral_constant< bool, true> > ::type __is_assignable_test(int); 
# 2192 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class , class > false_type __is_assignable_test(...); 
# 2196 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _Arg, bool  = is_void< _Tp> ::value || is_void< _Arg> ::value> 
# 2197
struct __is_assignable_imp : public __decltype((__4::__is_assignable_test< _Tp, _Arg> (0))) { 
# 2198 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2200
template< class _Tp, class _Arg> 
# 2201
struct __is_assignable_imp< _Tp, _Arg, true>  : public false_type { 
# 2204
}; 
# 2206
template< class _Tp, class _Arg> 
# 2207
struct is_assignable : public __is_assignable_imp< _Tp, _Arg>  { 
# 2208
}; 
# 2213
template< class _Tp, class _Arg> constexpr bool 
# 2214
is_assignable_v = (is_assignable< _Tp, _Arg> ::value); 
# 2220
template< class _Tp> struct __attribute((__visibility__("default"))) is_copy_assignable : public is_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_lvalue_reference< typename add_const< _Tp> ::type> ::type>  { 
# 2222
}; 
# 2225
template< class _Tp> constexpr bool 
# 2226
is_copy_assignable_v = (is_copy_assignable< _Tp> ::value); 
# 2232
template< class _Tp> struct __attribute((__visibility__("default"))) is_move_assignable : public is_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_rvalue_reference< _Tp> ::type>  { 
# 2234
}; 
# 2237
template< class _Tp> constexpr bool 
# 2238
is_move_assignable_v = (is_move_assignable< _Tp> ::value); 
# 2259 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class > 
# 2260
struct __is_destructible_apply { typedef int type; }; 
# 2262
template< class _Tp> 
# 2263
struct __is_destructor_wellformed { 
# 2264
template< class _Tp1> static char __test(typename __is_destructible_apply< __decltype((__4::declval< _Tp1 &> ().~_Tp1()))> ::type); 
# 2270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp1> static __two __test(...); 
# 2274 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static const bool value = (sizeof(__test< _Tp> (12)) == sizeof(char)); 
# 2275
}; 
# 2277
template< class _Tp, bool > struct __destructible_imp; 
# 2280
template< class _Tp> 
# 2281
struct __destructible_imp< _Tp, false>  : public integral_constant< bool, __is_destructor_wellformed< typename remove_all_extents< _Tp> ::type> ::value>  { 
# 2283 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2285
template< class _Tp> 
# 2286
struct __destructible_imp< _Tp, true>  : public true_type { 
# 2287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2289
template< class _Tp, bool > struct __destructible_false; 
# 2292
template< class _Tp> 
# 2293
struct __destructible_false< _Tp, false>  : public __destructible_imp< _Tp, is_reference< _Tp> ::value>  { 
# 2293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2295
template< class _Tp> 
# 2296
struct __destructible_false< _Tp, true>  : public false_type { 
# 2296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2298
template< class _Tp> 
# 2299
struct is_destructible : public __destructible_false< _Tp, is_function< _Tp> ::value>  { 
# 2300 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2302
template< class _Tp> 
# 2303
struct is_destructible< _Tp []>  : public false_type { 
# 2304 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2307
template<> struct is_destructible< void>  : public false_type { 
# 2308 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 2313
template< class _Tp> constexpr bool 
# 2314
is_destructible_v = (is_destructible< _Tp> ::value); 
# 2320
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 2323 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
move(_Tp &&__t) noexcept 
# 2324
{ 
# 2325
typedef typename remove_reference< _Tp> ::type _Up; 
# 2326
return static_cast< _Up &&>(__t); 
# 2327
} 
# 2329
template< class _Tp> constexpr _Tp &&
# 2332 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 2333
{ 
# 2334
return static_cast< _Tp &&>(__t); 
# 2335
} 
# 2337
template< class _Tp> constexpr _Tp &&
# 2340 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 2341
{ 
# 2342
static_assert((!is_lvalue_reference< _Tp> ::value), "can not forward an rvalue as an lvalue");
# 2344
return static_cast< _Tp &&>(__t); 
# 2345
} 
# 2347
template< class _Tp> inline typename decay< _Tp> ::type 
# 2350 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__decay_copy(_Tp &&__t) 
# 2351
{ 
# 2352
return __4::forward< _Tp> (__t); 
# 2353 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 2355
template< class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr> 
# 2356
struct __member_pointer_traits_imp { 
# 2358
}; 
# 2362
template< class _Rp, class _Class, class ..._Param> 
# 2363
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...), true, false>  { 
# 2365
typedef _Class _ClassType; 
# 2366
typedef _Rp _ReturnType; 
# 2367
typedef _Rp _FnType(_Param ...); 
# 2368
}; 
# 2370
template< class _Rp, class _Class, class ..._Param> 
# 2371
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...), true, false>  { 
# 2373
typedef _Class _ClassType; 
# 2374
typedef _Rp _ReturnType; 
# 2375
typedef _Rp _FnType(_Param ..., ...); 
# 2376
}; 
# 2378
template< class _Rp, class _Class, class ..._Param> 
# 2379
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const, true, false>  { 
# 2381
typedef const _Class _ClassType; 
# 2382
typedef _Rp _ReturnType; 
# 2383
typedef _Rp _FnType(_Param ...); 
# 2384
}; 
# 2386
template< class _Rp, class _Class, class ..._Param> 
# 2387
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const, true, false>  { 
# 2389
typedef const _Class _ClassType; 
# 2390
typedef _Rp _ReturnType; 
# 2391
typedef _Rp _FnType(_Param ..., ...); 
# 2392
}; 
# 2394
template< class _Rp, class _Class, class ..._Param> 
# 2395
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) volatile, true, false>  { 
# 2397
typedef volatile _Class _ClassType; 
# 2398
typedef _Rp _ReturnType; 
# 2399
typedef _Rp _FnType(_Param ...); 
# 2400
}; 
# 2402
template< class _Rp, class _Class, class ..._Param> 
# 2403
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) volatile, true, false>  { 
# 2405
typedef volatile _Class _ClassType; 
# 2406
typedef _Rp _ReturnType; 
# 2407
typedef _Rp _FnType(_Param ..., ...); 
# 2408
}; 
# 2410
template< class _Rp, class _Class, class ..._Param> 
# 2411
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const volatile, true, false>  { 
# 2413
typedef const volatile _Class _ClassType; 
# 2414
typedef _Rp _ReturnType; 
# 2415
typedef _Rp _FnType(_Param ...); 
# 2416
}; 
# 2418
template< class _Rp, class _Class, class ..._Param> 
# 2419
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const volatile, true, false>  { 
# 2421
typedef const volatile _Class _ClassType; 
# 2422
typedef _Rp _ReturnType; 
# 2423
typedef _Rp _FnType(_Param ..., ...); 
# 2424
}; 
# 2428
template< class _Rp, class _Class, class ..._Param> 
# 2429
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) &, true, false>  { 
# 2431
typedef _Class &_ClassType; 
# 2432
typedef _Rp _ReturnType; 
# 2433
typedef _Rp _FnType(_Param ...); 
# 2434
}; 
# 2436
template< class _Rp, class _Class, class ..._Param> 
# 2437
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) &, true, false>  { 
# 2439
typedef _Class &_ClassType; 
# 2440
typedef _Rp _ReturnType; 
# 2441
typedef _Rp _FnType(_Param ..., ...); 
# 2442
}; 
# 2444
template< class _Rp, class _Class, class ..._Param> 
# 2445
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const &, true, false>  { 
# 2447
typedef const _Class &_ClassType; 
# 2448
typedef _Rp _ReturnType; 
# 2449
typedef _Rp _FnType(_Param ...); 
# 2450
}; 
# 2452
template< class _Rp, class _Class, class ..._Param> 
# 2453
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const &, true, false>  { 
# 2455
typedef const _Class &_ClassType; 
# 2456
typedef _Rp _ReturnType; 
# 2457
typedef _Rp _FnType(_Param ..., ...); 
# 2458
}; 
# 2460
template< class _Rp, class _Class, class ..._Param> 
# 2461
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) volatile &, true, false>  { 
# 2463
typedef volatile _Class &_ClassType; 
# 2464
typedef _Rp _ReturnType; 
# 2465
typedef _Rp _FnType(_Param ...); 
# 2466
}; 
# 2468
template< class _Rp, class _Class, class ..._Param> 
# 2469
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) volatile &, true, false>  { 
# 2471
typedef volatile _Class &_ClassType; 
# 2472
typedef _Rp _ReturnType; 
# 2473
typedef _Rp _FnType(_Param ..., ...); 
# 2474
}; 
# 2476
template< class _Rp, class _Class, class ..._Param> 
# 2477
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const volatile &, true, false>  { 
# 2479
typedef const volatile _Class &_ClassType; 
# 2480
typedef _Rp _ReturnType; 
# 2481
typedef _Rp _FnType(_Param ...); 
# 2482
}; 
# 2484
template< class _Rp, class _Class, class ..._Param> 
# 2485
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const volatile &, true, false>  { 
# 2487
typedef const volatile _Class &_ClassType; 
# 2488
typedef _Rp _ReturnType; 
# 2489
typedef _Rp _FnType(_Param ..., ...); 
# 2490
}; 
# 2492
template< class _Rp, class _Class, class ..._Param> 
# 2493
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) &&, true, false>  { 
# 2495
typedef _Class &&_ClassType; 
# 2496
typedef _Rp _ReturnType; 
# 2497
typedef _Rp _FnType(_Param ...); 
# 2498
}; 
# 2500
template< class _Rp, class _Class, class ..._Param> 
# 2501
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) &&, true, false>  { 
# 2503
typedef _Class &&_ClassType; 
# 2504
typedef _Rp _ReturnType; 
# 2505
typedef _Rp _FnType(_Param ..., ...); 
# 2506
}; 
# 2508
template< class _Rp, class _Class, class ..._Param> 
# 2509
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const &&, true, false>  { 
# 2511
typedef const _Class &&_ClassType; 
# 2512
typedef _Rp _ReturnType; 
# 2513
typedef _Rp _FnType(_Param ...); 
# 2514
}; 
# 2516
template< class _Rp, class _Class, class ..._Param> 
# 2517
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const &&, true, false>  { 
# 2519
typedef const _Class &&_ClassType; 
# 2520
typedef _Rp _ReturnType; 
# 2521
typedef _Rp _FnType(_Param ..., ...); 
# 2522
}; 
# 2524
template< class _Rp, class _Class, class ..._Param> 
# 2525
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) volatile &&, true, false>  { 
# 2527
typedef volatile _Class &&_ClassType; 
# 2528
typedef _Rp _ReturnType; 
# 2529
typedef _Rp _FnType(_Param ...); 
# 2530
}; 
# 2532
template< class _Rp, class _Class, class ..._Param> 
# 2533
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) volatile &&, true, false>  { 
# 2535
typedef volatile _Class &&_ClassType; 
# 2536
typedef _Rp _ReturnType; 
# 2537
typedef _Rp _FnType(_Param ..., ...); 
# 2538
}; 
# 2540
template< class _Rp, class _Class, class ..._Param> 
# 2541
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ...) const volatile &&, true, false>  { 
# 2543
typedef const volatile _Class &&_ClassType; 
# 2544
typedef _Rp _ReturnType; 
# 2545
typedef _Rp _FnType(_Param ...); 
# 2546
}; 
# 2548
template< class _Rp, class _Class, class ..._Param> 
# 2549
struct __member_pointer_traits_imp< _Rp (_Class::*)(_Param ..., ...) const volatile &&, true, false>  { 
# 2551
typedef const volatile _Class &&_ClassType; 
# 2552
typedef _Rp _ReturnType; 
# 2553
typedef _Rp _FnType(_Param ..., ...); 
# 2554
}; 
# 2779 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Rp, class _Class> 
# 2780
struct __member_pointer_traits_imp< _Rp (_Class::*), false, true>  { 
# 2782
typedef _Class _ClassType; 
# 2783
typedef _Rp _ReturnType; 
# 2784
}; 
# 2786
template< class _MP> 
# 2787
struct __member_pointer_traits : public __member_pointer_traits_imp< typename remove_cv< _MP> ::type, is_member_function_pointer< _MP> ::value, is_member_object_pointer< _MP> ::value>  { 
# 2795
}; 
# 2798
template< class _DecayedFp> 
# 2799
struct __member_pointer_class_type { }; 
# 2801
template< class _Ret, class _ClassType> 
# 2802
struct __member_pointer_class_type< _Ret (_ClassType::*)>  { 
# 2803
typedef _ClassType type; 
# 2804
}; 
# 2808
template< class _Callable> class result_of; 
# 2960 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
namespace __is_construct { 
# 2962
struct __nat { }; 
# 2963
}
# 2970
template< class _Tp, class ..._Args> struct __libcpp_is_constructible; 
# 2973
template< class _To, class _From> 
# 2974
struct __is_invalid_base_to_derived_cast { 
# 2975
static_assert((is_reference< _To> ::value), "Wrong specialization");
# 2976
using _RawFrom = __uncvref_t< _From> ; 
# 2977
using _RawTo = __uncvref_t< _To> ; 
# 2978
static const bool value = (_And< _IsNotSame< _RawFrom, _RawTo> , is_base_of< _RawFrom, _RawTo> , _Not< __libcpp_is_constructible< _RawTo, _From> > > ::value); 
# 2983
}; 
# 2985
template< class _To, class _From> 
# 2986
struct __is_invalid_lvalue_to_rvalue_cast : public false_type { 
# 2987
static_assert((is_reference< _To> ::value), "Wrong specialization");
# 2988
}; 
# 2990
template< class _ToRef, class _FromRef> 
# 2991
struct __is_invalid_lvalue_to_rvalue_cast< _ToRef &&, _FromRef &>  { 
# 2992
using _RawFrom = __uncvref_t< _FromRef> ; 
# 2993
using _RawTo = __uncvref_t< _ToRef> ; 
# 2994
static const bool value = (_And< _Not< is_function< _RawTo> > , _Or< _IsSame< _RawFrom, _RawTo> , is_base_of< _RawTo, _RawFrom> > > ::value); 
# 3000
}; 
# 3002
struct __is_constructible_helper { 
# 3004
template< class _To> static void __eat(_To); 
# 3013 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _To, class _From, class 
# 3014
 = __decltype((__eat< _To> (__4::declval< _From> ())))> static true_type 
# 3013
__test_cast(int); 
# 3018 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _To, class _From, class 
# 3019
 = __decltype((static_cast< _To>(__4::declval< _From> ())))> static integral_constant< bool, (!__is_invalid_base_to_derived_cast< _To, _From> ::value) && (!__is_invalid_lvalue_to_rvalue_cast< _To, _From> ::value)>  
# 3018
__test_cast(long); 
# 3026 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class , class > static false_type __test_cast(...); 
# 3030 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args, class 
# 3031
 = __decltype((_Tp(__4::declval< _Args> ()...)))> static true_type 
# 3030
__test_nary(int); 
# 3034 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ...> static false_type __test_nary(...); 
# 3038 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _A0, class  = __decltype((::new _Tp(__4::declval< _A0> ())))> static is_destructible< _Tp>  __test_unary(int); 
# 3041 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class , class > static false_type __test_unary(...); 
# 3044 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 3046
template< class _Tp, bool  = is_void< _Tp> ::value> 
# 3047
struct __is_default_constructible : public __decltype((__is_constructible_helper::__test_nary< _Tp> (0))) { 
# 3049
}; 
# 3051
template< class _Tp> 
# 3052
struct __is_default_constructible< _Tp, true>  : public false_type { }; 
# 3054
template< class _Tp> 
# 3055
struct __is_default_constructible< _Tp [], false>  : public false_type { }; 
# 3057
template< class _Tp, ::size_t _Nx> 
# 3058
struct __is_default_constructible< _Tp [_Nx], false>  : public __4::__is_default_constructible< typename remove_all_extents< _Tp> ::type>  { 
# 3059
}; 
# 3061
template< class _Tp, class ..._Args> 
# 3062
struct __libcpp_is_constructible { 
# 3064
static_assert((sizeof...(_Args) > (1)), "Wrong specialization");
# 3066
typedef __decltype((__is_constructible_helper::template __test_nary< _Tp, _Args...> (0))) type; 
# 3067
}; 
# 3069
template< class _Tp> 
# 3070
struct __libcpp_is_constructible< _Tp>  : public __is_default_constructible< _Tp>  { }; 
# 3072
template< class _Tp, class _A0> 
# 3073
struct __libcpp_is_constructible< _Tp, _A0>  : public __decltype((__is_constructible_helper::__test_unary< _Tp, _A0> (0))) { 
# 3075
}; 
# 3077
template< class _Tp, class _A0> 
# 3078
struct __libcpp_is_constructible< _Tp &, _A0>  : public __decltype((__is_constructible_helper::__test_cast< _Tp &, _A0> (0))) { 
# 3081
}; 
# 3083
template< class _Tp, class _A0> 
# 3084
struct __libcpp_is_constructible< _Tp &&, _A0>  : public __decltype((__is_constructible_helper::__test_cast< _Tp &&, _A0> (0))) { 
# 3087
}; 
# 3097 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args> 
# 3098
struct __attribute((__visibility__("default"))) is_constructible : public __libcpp_is_constructible< _Tp, _Args...> ::type { 
# 3099
}; 
# 3336 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args> constexpr bool 
# 3337
is_constructible_v = (is_constructible< _Tp, _Args...> ::value); 
# 3343
template< class _Tp> 
# 3344
struct __attribute((__visibility__("default"))) is_default_constructible : public is_constructible< _Tp>  { 
# 3346
}; 
# 3349
template< class _Tp> constexpr bool 
# 3350
is_default_constructible_v = (is_default_constructible< _Tp> ::value); 
# 3359
template< class _Tp> void __test_implicit_default_constructible(_Tp); 
# 3363 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class  = void, bool  = is_default_constructible< _Tp> ::value> 
# 3364
struct __is_implicitly_default_constructible : public false_type { 
# 3366
}; 
# 3368
template< class _Tp> 
# 3369
struct __is_implicitly_default_constructible< _Tp, __decltype((__test_implicit_default_constructible< const _Tp &> ({}))), true>  : public true_type { 
# 3371
}; 
# 3373
template< class _Tp> 
# 3374
struct __is_implicitly_default_constructible< _Tp, __decltype((__test_implicit_default_constructible< const _Tp &> ({}))), false>  : public false_type { 
# 3376
}; 
# 3381
template< class _Tp> 
# 3382
struct __attribute((__visibility__("default"))) is_copy_constructible : public is_constructible< _Tp, typename add_lvalue_reference< typename add_const< _Tp> ::type> ::type>  { 
# 3384
}; 
# 3387
template< class _Tp> constexpr bool 
# 3388
is_copy_constructible_v = (is_copy_constructible< _Tp> ::value); 
# 3394
template< class _Tp> 
# 3395
struct __attribute((__visibility__("default"))) is_move_constructible : public is_constructible< _Tp, typename add_rvalue_reference< _Tp> ::type>  { 
# 3397
}; 
# 3400
template< class _Tp> constexpr bool 
# 3401
is_move_constructible_v = (is_move_constructible< _Tp> ::value); 
# 3411 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args> 
# 3412
struct __attribute((__visibility__("default"))) is_trivially_constructible : public integral_constant< bool, __is_trivially_constructible(_Tp, _Args...)>  { 
# 3415
}; 
# 3529 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args> constexpr bool 
# 3530
is_trivially_constructible_v = (is_trivially_constructible< _Tp, _Args...> ::value); 
# 3536
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_default_constructible : public is_trivially_constructible< _Tp>  { 
# 3538
}; 
# 3541
template< class _Tp> constexpr bool 
# 3542
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Tp> ::value); 
# 3548
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_copy_constructible : public is_trivially_constructible< _Tp, typename add_lvalue_reference< const _Tp> ::type>  { 
# 3550
}; 
# 3553
template< class _Tp> constexpr bool 
# 3554
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Tp> ::value); 
# 3560
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_move_constructible : public is_trivially_constructible< _Tp, typename add_rvalue_reference< _Tp> ::type>  { 
# 3562
}; 
# 3565
template< class _Tp> constexpr bool 
# 3566
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Tp> ::value); 
# 3574
template< class _Tp, class _Arg> 
# 3575
struct is_trivially_assignable : public integral_constant< bool, __is_trivially_assignable(_Tp, _Arg)>  { 
# 3578
}; 
# 3605 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _Arg> constexpr bool 
# 3606
is_trivially_assignable_v = (is_trivially_assignable< _Tp, _Arg> ::value); 
# 3612
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_copy_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_lvalue_reference< typename add_const< _Tp> ::type> ::type>  { 
# 3614
}; 
# 3617
template< class _Tp> constexpr bool 
# 3618
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Tp> ::value); 
# 3624
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_move_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_rvalue_reference< _Tp> ::type>  { 
# 3627
}; 
# 3630
template< class _Tp> constexpr bool 
# 3631
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Tp> ::value); 
# 3644 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_destructible : public integral_constant< bool, is_destructible< _Tp> ::value && __has_trivial_destructor(_Tp)>  { 
# 3645
}; 
# 3662 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 3663
is_trivially_destructible_v = (is_trivially_destructible< _Tp> ::value); 
# 3683 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< bool , bool , class _Tp, class ..._Args> struct __libcpp_is_nothrow_constructible; 
# 3685
template< class _Tp, class ..._Args> 
# 3686
struct __libcpp_is_nothrow_constructible< true, false, _Tp, _Args...>  : public integral_constant< bool, noexcept((_Tp(declval< _Args> ()...)))>  { 
# 3689
}; 
# 3691
template< class _Tp> void 
# 3693 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__implicit_conversion_to(_Tp) noexcept { } 
# 3695
template< class _Tp, class _Arg> 
# 3696
struct __libcpp_is_nothrow_constructible< true, true, _Tp, _Arg>  : public integral_constant< bool, noexcept(__implicit_conversion_to< _Tp> (declval< _Arg> ()))>  { 
# 3699
}; 
# 3701
template< class _Tp, bool _IsReference, class ..._Args> 
# 3702
struct __libcpp_is_nothrow_constructible< false, _IsReference, _Tp, _Args...>  : public false_type { 
# 3705
}; 
# 3707
template< class _Tp, class ..._Args> 
# 3708
struct __attribute((__visibility__("default"))) is_nothrow_constructible : public __libcpp_is_nothrow_constructible< is_constructible< _Tp, _Args...> ::value, is_reference< _Tp> ::value, _Tp, _Args...>  { 
# 3711
}; 
# 3713
template< class _Tp, ::size_t _Ns> 
# 3714
struct __attribute((__visibility__("default"))) is_nothrow_constructible< _Tp [_Ns]>  : public __libcpp_is_nothrow_constructible< is_constructible< _Tp> ::value, is_reference< _Tp> ::value, _Tp>  { 
# 3717
}; 
# 3831 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class ..._Args> constexpr bool 
# 3832
is_nothrow_constructible_v = (is_nothrow_constructible< _Tp, _Args...> ::value); 
# 3838
template< class _Tp> struct __attribute((__visibility__("default"))) is_nothrow_default_constructible : public is_nothrow_constructible< _Tp>  { 
# 3840
}; 
# 3843
template< class _Tp> constexpr bool 
# 3844
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Tp> ::value); 
# 3850
template< class _Tp> struct __attribute((__visibility__("default"))) is_nothrow_copy_constructible : public is_nothrow_constructible< _Tp, typename add_lvalue_reference< typename add_const< _Tp> ::type> ::type>  { 
# 3852
}; 
# 3855
template< class _Tp> constexpr bool 
# 3856
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Tp> ::value); 
# 3862
template< class _Tp> struct __attribute((__visibility__("default"))) is_nothrow_move_constructible : public is_nothrow_constructible< _Tp, typename add_rvalue_reference< _Tp> ::type>  { 
# 3864
}; 
# 3867
template< class _Tp> constexpr bool 
# 3868
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Tp> ::value); 
# 3882 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< bool , class _Tp, class _Arg> struct __libcpp_is_nothrow_assignable; 
# 3884
template< class _Tp, class _Arg> 
# 3885
struct __libcpp_is_nothrow_assignable< false, _Tp, _Arg>  : public false_type { 
# 3888
}; 
# 3890
template< class _Tp, class _Arg> 
# 3891
struct __libcpp_is_nothrow_assignable< true, _Tp, _Arg>  : public integral_constant< bool, noexcept((__4::declval< _Tp> () = __4::declval< _Arg> ()))>  { 
# 3894 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 3896
template< class _Tp, class _Arg> 
# 3897
struct __attribute((__visibility__("default"))) is_nothrow_assignable : public __libcpp_is_nothrow_assignable< is_assignable< _Tp, _Arg> ::value, _Tp, _Arg>  { 
# 3900
}; 
# 3947 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, class _Arg> constexpr bool 
# 3948
is_nothrow_assignable_v = (is_nothrow_assignable< _Tp, _Arg> ::value); 
# 3954
template< class _Tp> struct __attribute((__visibility__("default"))) is_nothrow_copy_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_lvalue_reference< typename add_const< _Tp> ::type> ::type>  { 
# 3956
}; 
# 3959
template< class _Tp> constexpr bool 
# 3960
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Tp> ::value); 
# 3966
template< class _Tp> struct __attribute((__visibility__("default"))) is_nothrow_move_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Tp> ::type, typename add_rvalue_reference< _Tp> ::type>  { 
# 3969
}; 
# 3972
template< class _Tp> constexpr bool 
# 3973
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Tp> ::value); 
# 3987 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< bool , class _Tp> struct __libcpp_is_nothrow_destructible; 
# 3989
template< class _Tp> 
# 3990
struct __libcpp_is_nothrow_destructible< false, _Tp>  : public false_type { 
# 3993
}; 
# 3995
template< class _Tp> 
# 3996
struct __libcpp_is_nothrow_destructible< true, _Tp>  : public integral_constant< bool, noexcept(__4::declval< _Tp> ().~_Tp())>  { 
# 3999 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 4001
template< class _Tp> 
# 4002
struct __attribute((__visibility__("default"))) is_nothrow_destructible : public __libcpp_is_nothrow_destructible< is_destructible< _Tp> ::value, _Tp>  { 
# 4005
}; 
# 4007
template< class _Tp, ::size_t _Ns> 
# 4008
struct __attribute((__visibility__("default"))) is_nothrow_destructible< _Tp [_Ns]>  : public __4::is_nothrow_destructible< _Tp>  { 
# 4011
}; 
# 4013
template< class _Tp> 
# 4014
struct __attribute((__visibility__("default"))) is_nothrow_destructible< _Tp &>  : public true_type { 
# 4017
}; 
# 4019
template< class _Tp> 
# 4020
struct __attribute((__visibility__("default"))) is_nothrow_destructible< _Tp &&>  : public true_type { 
# 4023
}; 
# 4041 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 4042
is_nothrow_destructible_v = (is_nothrow_destructible< _Tp> ::value); 
# 4050
template< class _Tp> struct __attribute((__visibility__("default"))) is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 4051
}; 
# 4064 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> constexpr bool 
# 4065
is_pod_v = (is_pod< _Tp> ::value); 
# 4071
template< class _Tp> struct __attribute((__visibility__("default"))) is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 4078
}; 
# 4081
template< class _Tp> constexpr bool 
# 4082
is_literal_type_v = (is_literal_type< _Tp> ::value); 
# 4088
template< class _Tp> struct __attribute((__visibility__("default"))) is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 4094
}; 
# 4097
template< class _Tp> constexpr bool 
# 4098
is_standard_layout_v = (is_standard_layout< _Tp> ::value); 
# 4104
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 4110
}; 
# 4113
template< class _Tp> constexpr bool 
# 4114
is_trivially_copyable_v = (is_trivially_copyable< _Tp> ::value); 
# 4120
template< class _Tp> struct __attribute((__visibility__("default"))) is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 4127
}; 
# 4130
template< class _Tp> constexpr bool 
# 4131
is_trivial_v = (is_trivial< _Tp> ::value); 
# 4135
template< class _Tp> struct __is_reference_wrapper_impl : public false_type { }; 
# 4136
template< class _Tp> struct __is_reference_wrapper_impl< reference_wrapper< _Tp> >  : public true_type { }; 
# 4137
template< class _Tp> struct __is_reference_wrapper : public __is_reference_wrapper_impl< typename remove_cv< _Tp> ::type>  { 
# 4138
}; 
# 4142
template< class _Fp, class _A0, class 
# 4143
_DecayFp = typename decay< _Fp> ::type, class 
# 4144
_DecayA0 = typename decay< _A0> ::type, class 
# 4145
_ClassT = typename __member_pointer_class_type< _DecayFp> ::type> using __enable_if_bullet1 = typename enable_if< is_member_function_pointer< _DecayFp> ::value && is_base_of< _ClassT, _DecayA0> ::value> ::type; 
# 4152
template< class _Fp, class _A0, class 
# 4153
_DecayFp = typename decay< _Fp> ::type, class 
# 4154
_DecayA0 = typename decay< _A0> ::type> using __enable_if_bullet2 = typename enable_if< is_member_function_pointer< _DecayFp> ::value && __is_reference_wrapper< _DecayA0> ::value> ::type; 
# 4161
template< class _Fp, class _A0, class 
# 4162
_DecayFp = typename decay< _Fp> ::type, class 
# 4163
_DecayA0 = typename decay< _A0> ::type, class 
# 4164
_ClassT = typename __member_pointer_class_type< _DecayFp> ::type> using __enable_if_bullet3 = typename enable_if< is_member_function_pointer< _DecayFp> ::value && (!is_base_of< _ClassT, _DecayA0> ::value) && (!__is_reference_wrapper< _DecayA0> ::value)> ::type; 
# 4172
template< class _Fp, class _A0, class 
# 4173
_DecayFp = typename decay< _Fp> ::type, class 
# 4174
_DecayA0 = typename decay< _A0> ::type, class 
# 4175
_ClassT = typename __member_pointer_class_type< _DecayFp> ::type> using __enable_if_bullet4 = typename enable_if< is_member_object_pointer< _DecayFp> ::value && is_base_of< _ClassT, _DecayA0> ::value> ::type; 
# 4182
template< class _Fp, class _A0, class 
# 4183
_DecayFp = typename decay< _Fp> ::type, class 
# 4184
_DecayA0 = typename decay< _A0> ::type> using __enable_if_bullet5 = typename enable_if< is_member_object_pointer< _DecayFp> ::value && __is_reference_wrapper< _DecayA0> ::value> ::type; 
# 4191
template< class _Fp, class _A0, class 
# 4192
_DecayFp = typename decay< _Fp> ::type, class 
# 4193
_DecayA0 = typename decay< _A0> ::type, class 
# 4194
_ClassT = typename __member_pointer_class_type< _DecayFp> ::type> using __enable_if_bullet6 = typename enable_if< is_member_object_pointer< _DecayFp> ::value && (!is_base_of< _ClassT, _DecayA0> ::value) && (!__is_reference_wrapper< _DecayA0> ::value)> ::type; 
# 4210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class ..._Args> auto __invoke(__any, _Args && ...__args)->__nat; 
# 4214 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class ..._Args> auto __invoke_constexpr(__any, _Args && ...__args)->__nat; 
# 4220 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Fp, class _A0, class ..._Args, class 
# 4221
 = __enable_if_bullet1< _Fp, _A0> > inline auto 
# 4224 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept((__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...)))->__decltype(((__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...))) 
# 4225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...); 
# 4225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4227
template< class _Fp, class _A0, class ..._Args, class 
# 4228
 = __enable_if_bullet1< _Fp, _A0> > constexpr auto 
# 4231 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept((__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...)))->__decltype(((__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...))) 
# 4232 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (__4::forward< _A0> (__a0).*__f)(__4::forward< _Args> (__args)...); 
# 4232 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4234
template< class _Fp, class _A0, class ..._Args, class 
# 4235
 = __enable_if_bullet2< _Fp, _A0> > inline auto 
# 4238 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept((__a0.get().*__f)(__4::forward< _Args> (__args)...)))->__decltype(((__a0.get().*__f)(__4::forward< _Args> (__args)...))) 
# 4239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (__a0.get().*__f)(__4::forward< _Args> (__args)...); 
# 4239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4241
template< class _Fp, class _A0, class ..._Args, class 
# 4242
 = __enable_if_bullet2< _Fp, _A0> > constexpr auto 
# 4245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept((__a0.get().*__f)(__4::forward< _Args> (__args)...)))->__decltype(((__a0.get().*__f)(__4::forward< _Args> (__args)...))) 
# 4246 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (__a0.get().*__f)(__4::forward< _Args> (__args)...); 
# 4246 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4248
template< class _Fp, class _A0, class ..._Args, class 
# 4249
 = __enable_if_bullet3< _Fp, _A0> > inline auto 
# 4252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept(((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...)))->__decltype((((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...))) 
# 4253 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return ((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...); 
# 4253 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4255
template< class _Fp, class _A0, class ..._Args, class 
# 4256
 = __enable_if_bullet3< _Fp, _A0> > constexpr auto 
# 4259 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0, _Args &&...__args) noexcept(noexcept(((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...)))->__decltype((((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...))) 
# 4260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return ((*__4::forward< _A0> (__a0)).*__f)(__4::forward< _Args> (__args)...); 
# 4260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4264
template< class _Fp, class _A0, class 
# 4265
 = __enable_if_bullet4< _Fp, _A0> > inline auto 
# 4268 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0) noexcept(noexcept((__4::forward< _A0> (__a0).*__f)))->__decltype((__4::forward< _A0> (__a0).*__f)) 
# 4269 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return __4::forward< _A0> (__a0).*__f; 
# 4269 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4271
template< class _Fp, class _A0, class 
# 4272
 = __enable_if_bullet4< _Fp, _A0> > constexpr auto 
# 4275 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0) noexcept(noexcept((__4::forward< _A0> (__a0).*__f)))->__decltype((__4::forward< _A0> (__a0).*__f)) 
# 4276 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return __4::forward< _A0> (__a0).*__f; 
# 4276 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4278
template< class _Fp, class _A0, class 
# 4279
 = __enable_if_bullet5< _Fp, _A0> > inline auto 
# 4282 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0) noexcept(noexcept((__a0.get().*__f)))->__decltype((__a0.get().*__f)) 
# 4283
{ return __a0.get().*__f; } 
# 4285
template< class _Fp, class _A0, class 
# 4286
 = __enable_if_bullet5< _Fp, _A0> > constexpr auto 
# 4289 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0) noexcept(noexcept((__a0.get().*__f)))->__decltype((__a0.get().*__f)) 
# 4290
{ return __a0.get().*__f; } 
# 4292
template< class _Fp, class _A0, class 
# 4293
 = __enable_if_bullet6< _Fp, _A0> > inline auto 
# 4296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _A0 &&__a0) noexcept(noexcept(((*__4::forward< _A0> (__a0)).*__f)))->__decltype(((*__4::forward< _A0> (__a0)).*__f)) 
# 4297 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (*__4::forward< _A0> (__a0)).*__f; 
# 4297 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4299
template< class _Fp, class _A0, class 
# 4300
 = __enable_if_bullet6< _Fp, _A0> > constexpr auto 
# 4303 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _A0 &&__a0) noexcept(noexcept(((*__4::forward< _A0> (__a0)).*__f)))->__decltype(((*__4::forward< _A0> (__a0)).*__f)) 
# 4304 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return (*__4::forward< _A0> (__a0)).*__f; 
# 4304 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4308
template< class _Fp, class ..._Args> inline auto 
# 4311 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke(_Fp &&__f, _Args &&...__args) noexcept(noexcept(__4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...)))->__decltype((__4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...))) 
# 4312 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return __4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...); 
# 4312 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4314
template< class _Fp, class ..._Args> constexpr auto 
# 4317 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__invoke_constexpr(_Fp &&__f, _Args &&...__args) noexcept(noexcept(__4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...)))->__decltype((__4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...))) 
# 4318 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ return __4::forward< _Fp> (__f)(__4::forward< _Args> (__args)...); 
# 4318 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4323
template< class _Ret, class _Fp, class ..._Args> 
# 4324
struct __invokable_r { 
# 4326
template< class _XFp, class ..._XArgs> static auto __try_call(int)->__decltype((__4::__invoke(__4::declval< _XFp> (), __4::declval< _XArgs> ()...))); 
# 4330 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _XFp, class ..._XArgs> static __nat __try_call(...); 
# 4336 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
using _Result = __decltype((__try_call< _Fp, _Args...> (0))); 
# 4338
using type = typename conditional< integral_constant< bool, !is_same< _Result, __nat> ::value> ::value, typename conditional< is_void< _Ret> ::value, true_type, is_convertible< _Result, _Ret> > ::type, false_type> ::type; 
# 4348
static const bool value = (type::value); 
# 4349
}; 
# 4350
template< class _Fp, class ..._Args> using __invokable = __invokable_r< void, _Fp, _Args...> ; 
# 4353
template< bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class ..._Args> 
# 4354
struct __nothrow_invokable_r_imp { 
# 4355
static const bool value = false; 
# 4356
}; 
# 4358
template< class _Ret, class _Fp, class ..._Args> 
# 4359
struct __nothrow_invokable_r_imp< true, false, _Ret, _Fp, _Args...>  { 
# 4361
typedef __4::__nothrow_invokable_r_imp< true, false, _Ret, _Fp, _Args...>  _ThisT; 
# 4363
template< class _Tp> static void __test_noexcept(_Tp) noexcept; 
# 4367 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static const bool value = noexcept(__4::__nothrow_invokable_r_imp< true, false, _Ret, _Fp, _Args...> ::template __test_noexcept< _Ret> (__4::__invoke(__4::declval< _Fp> (), __4::declval< _Args> ()...))); 
# 4369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 4371
template< class _Ret, class _Fp, class ..._Args> 
# 4372
struct __nothrow_invokable_r_imp< true, true, _Ret, _Fp, _Args...>  { 
# 4374
static const bool value = noexcept(__4::__invoke(__4::declval< _Fp> (), __4::declval< _Args> ()...)); 
# 4376 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 4378
template< class _Ret, class _Fp, class ..._Args> using __nothrow_invokable_r = __nothrow_invokable_r_imp< __invokable_r< _Ret, _Fp, _Args...> ::value, is_void< _Ret> ::value, _Ret, _Fp, _Args...> ; 
# 4386
template< class _Fp, class ..._Args> using __nothrow_invokable = __nothrow_invokable_r_imp< __invokable_r< void, _Fp, _Args...> ::value, true, void, _Fp, _Args...> ; 
# 4393
template< class _Fp, class ..._Args> 
# 4394
struct __invoke_of : public enable_if< __invokable_r< void, _Fp, _Args...> ::value, typename __invokable_r< void, _Fp, _Args...> ::_Result>  { 
# 4399
}; 
# 4403
template< class _Fp, class ..._Args> 
# 4404
class __attribute((__visibility__("default"))) result_of< _Fp (_Args ...)>  : public __invoke_of< _Fp, _Args...>  { 
# 4407
}; 
# 4410
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 4417
template< class _Fn, class ..._Args> 
# 4418
struct __attribute((__visibility__("default"))) invoke_result : public __invoke_of< _Fn, _Args...>  { 
# 4421
}; 
# 4423
template< class _Fn, class ..._Args> using invoke_result_t = typename invoke_result< _Fn, _Args...> ::type; 
# 4428
template< class _Fn, class ..._Args> 
# 4429
struct __attribute((__visibility__("default"))) is_invocable : public integral_constant< bool, __invokable_r< void, _Fn, _Args...> ::value>  { 
# 4430
}; 
# 4432
template< class _Ret, class _Fn, class ..._Args> 
# 4433
struct __attribute((__visibility__("default"))) is_invocable_r : public integral_constant< bool, __invokable_r< _Ret, _Fn, _Args...> ::value>  { 
# 4434
}; 
# 4436
template< class _Fn, class ..._Args> constexpr bool 
# 4437
is_invocable_v = (is_invocable< _Fn, _Args...> ::value); 
# 4440
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 4441
is_invocable_r_v = (is_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 4446
template< class _Fn, class ..._Args> 
# 4447
struct __attribute((__visibility__("default"))) is_nothrow_invocable : public integral_constant< bool, __nothrow_invokable_r_imp< __invokable_r< void, _Fn, _Args...> ::value, true, void, _Fn, _Args...> ::value>  { 
# 4448
}; 
# 4450
template< class _Ret, class _Fn, class ..._Args> 
# 4451
struct __attribute((__visibility__("default"))) is_nothrow_invocable_r : public integral_constant< bool, __nothrow_invokable_r_imp< __invokable_r< _Ret, _Fn, _Args...> ::value, is_void< _Ret> ::value, _Ret, _Fn, _Args...> ::value>  { 
# 4452
}; 
# 4454
template< class _Fn, class ..._Args> constexpr bool 
# 4455
is_nothrow_invocable_v = (is_nothrow_invocable< _Fn, _Args...> ::value); 
# 4458
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 4459
is_nothrow_invocable_r_v = (is_nothrow_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 4466
template< class _Tp> struct __is_swappable; 
# 4467
template< class _Tp> struct __is_nothrow_swappable; 
# 4471
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator2 swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2); 
# 4476 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp> inline typename enable_if< is_move_constructible< _Tp> ::value && is_move_assignable< _Tp> ::value> ::type 
# 4488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
swap(_Tp &__x, _Tp &__y) noexcept(is_nothrow_move_constructible< _Tp> ::value && is_nothrow_move_assignable< _Tp> ::value) 
# 4490
{ 
# 4491
_Tp __t(__4::move(__x)); 
# 4492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__x = __4::move(__y); 
# 4493 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__y = __4::move(__t); 
# 4494 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4496
template< class _Tp, ::size_t _Np> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 4501 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 4502
{ 
# 4503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits"
__4::swap_ranges(__a, __a + _Np, __b); 
# 4504 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
} 
# 4506
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator2 
# 4509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) 
# 4510
{ 
# 4511
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 4512
swap(*__first1, *__first2); }  
# 4513
return __first2; 
# 4514
} 
# 4518
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 4521 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) noexcept(noexcept(swap(*__4::declval< _ForwardIterator1> (), *__4::declval< _ForwardIterator2> ()))) 
# 4525 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
{ 
# 4526
swap(*__a, *__b); 
# 4527
} 
# 4531
namespace __detail { 
# 4535
template< class _Tp, class _Up = _Tp, bool 
# 4536
_NotVoid = (!is_void< _Tp> ::value) && (!is_void< _Up> ::value)> 
# 4537
struct __swappable_with { 
# 4539
template< class _LHS, class _RHS> static __decltype((swap(__4::declval< _LHS> (), __4::declval< _RHS> ()))) __test_swap(int); 
# 4543 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class , class > static __nat __test_swap(long); 
# 4548 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
typedef __decltype((__test_swap< _Tp, _Up> (0))) __swap1; 
# 4549
typedef __decltype((__test_swap< _Up, _Tp> (0))) __swap2; 
# 4551
static const bool value = (_IsNotSame< __swap1, __nat> ::value && _IsNotSame< __swap2, __nat> ::value); 
# 4553
}; 
# 4555
template< class _Tp, class _Up> 
# 4556
struct __swappable_with< _Tp, _Up, false>  : public false_type { }; 
# 4558
template< class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with< _Tp, _Up> ::value> 
# 4559
struct __nothrow_swappable_with { 
# 4560
static const bool value = (noexcept(swap(__4::declval< _Tp> (), __4::declval< _Up> ())) && noexcept(swap(__4::declval< _Up> (), __4::declval< _Tp> ()))); 
# 4567 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
}; 
# 4569
template< class _Tp, class _Up> 
# 4570
struct __nothrow_swappable_with< _Tp, _Up, false>  : public false_type { }; 
# 4572
}
# 4574
template< class _Tp> 
# 4575
struct __is_swappable : public integral_constant< bool, __detail::__swappable_with< _Tp &> ::value>  { 
# 4578
}; 
# 4580
template< class _Tp> 
# 4581
struct __is_nothrow_swappable : public integral_constant< bool, __detail::__nothrow_swappable_with< _Tp &> ::value>  { 
# 4584
}; 
# 4588
template< class _Tp, class _Up> 
# 4589
struct __attribute((__visibility__("default"))) is_swappable_with : public integral_constant< bool, __detail::__swappable_with< _Tp, _Up> ::value>  { 
# 4592
}; 
# 4594
template< class _Tp> 
# 4595
struct __attribute((__visibility__("default"))) is_swappable : public conditional< __is_referenceable< _Tp> ::value, is_swappable_with< typename add_lvalue_reference< _Tp> ::type, typename add_lvalue_reference< _Tp> ::type> , integral_constant< bool, false> > ::type { 
# 4604
}; 
# 4606
template< class _Tp, class _Up> 
# 4607
struct __attribute((__visibility__("default"))) is_nothrow_swappable_with : public integral_constant< bool, __detail::__nothrow_swappable_with< _Tp, _Up> ::value>  { 
# 4610
}; 
# 4612
template< class _Tp> 
# 4613
struct __attribute((__visibility__("default"))) is_nothrow_swappable : public conditional< __is_referenceable< _Tp> ::value, is_nothrow_swappable_with< typename add_lvalue_reference< _Tp> ::type, typename add_lvalue_reference< _Tp> ::type> , integral_constant< bool, false> > ::type { 
# 4622
}; 
# 4624
template< class _Tp, class _Up> constexpr bool 
# 4625
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 4628
template< class _Tp> constexpr bool 
# 4629
is_swappable_v = (is_swappable< _Tp> ::value); 
# 4632
template< class _Tp, class _Up> constexpr bool 
# 4633
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 4636
template< class _Tp> constexpr bool 
# 4637
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 4643
template< class _Tp, bool  = is_enum< _Tp> ::value> struct __underlying_type_impl; 
# 4645
template< class _Tp> 
# 4646
struct __underlying_type_impl< _Tp, false>  { }; 
# 4648
template< class _Tp> 
# 4649
struct __underlying_type_impl< _Tp, true>  { 
# 4651
typedef __underlying_type(_Tp) type; 
# 4652
}; 
# 4654
template< class _Tp> 
# 4655
struct underlying_type : public __underlying_type_impl< _Tp, is_enum< _Tp> ::value>  { }; 
# 4658
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 4674 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 4675
struct __sfinae_underlying_type { 
# 4677
typedef typename underlying_type< _Tp> ::type type; 
# 4678
typedef __decltype((((type)1) + 0)) __promoted_type; 
# 4679
}; 
# 4681
template< class _Tp> 
# 4682
struct __sfinae_underlying_type< _Tp, false>  { }; 
# 4685 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr int __convert_to_integral(int __val) { return __val; } 
# 4688 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr unsigned __convert_to_integral(unsigned __val) { return __val; } 
# 4691 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr long __convert_to_integral(long __val) { return __val; } 
# 4694 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr unsigned long __convert_to_integral(unsigned long __val) { return __val; } 
# 4697 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr long long __convert_to_integral(long long __val) { return __val; } 
# 4700 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr unsigned long long __convert_to_integral(unsigned long long __val) { return __val; } 
# 4702
template< class _Fp> constexpr typename enable_if< is_floating_point< _Fp> ::value, long long> ::type 
# 4705 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__convert_to_integral(_Fp __val) { return __val; } 
# 4709 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr __int128 __convert_to_integral(__int128 __val) { return __val; } 
# 4712 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr unsigned __int128 __convert_to_integral(unsigned __int128 __val) { return __val; } 
# 4715
template< class _Tp> constexpr typename __sfinae_underlying_type< _Tp> ::__promoted_type 
# 4718 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
__convert_to_integral(_Tp __val) { return __val; } 
# 4722
template< class _Tp> 
# 4723
struct __has_operator_addressof_member_imp { 
# 4725
template< class _Up> static auto __test(int)->typename __select_2nd< __decltype((__4::declval< _Up> ().operator&())), true_type> ::type; 
# 4729 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class > static auto __test(long)->false_type; 
# 4733 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static const bool value = (__decltype((__test< _Tp> (0)))::value); 
# 4734
}; 
# 4736
template< class _Tp> 
# 4737
struct __has_operator_addressof_free_imp { 
# 4739
template< class _Up> static auto __test(int)->typename __select_2nd< __decltype((operator&(__4::declval< _Up> ()))), true_type> ::type; 
# 4743 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class > static auto __test(long)->false_type; 
# 4747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
static const bool value = (__decltype((__test< _Tp> (0)))::value); 
# 4748
}; 
# 4750
template< class _Tp> 
# 4751
struct __has_operator_addressof : public integral_constant< bool, __has_operator_addressof_member_imp< _Tp> ::value || __has_operator_addressof_free_imp< _Tp> ::value>  { 
# 4754
}; 
# 4760
template< class ...> using void_t = void; 
# 4762
template< class ..._Args> 
# 4763
struct conjunction : public _And< _Args...>  { 
# 4769
}; 
# 4770
template< class ..._Args> constexpr bool 
# 4771
conjunction_v = (conjunction< _Args...> ::value); 
# 4774
template< class ..._Args> 
# 4775
struct disjunction : public _Or< _Args...>  { 
# 4781
}; 
# 4782
template< class ..._Args> constexpr bool 
# 4783
disjunction_v = (disjunction< _Args...> ::value); 
# 4786
template< class _Tp> 
# 4787
struct negation : public _Not< _Tp>  { }; 
# 4788
template< class _Tp> constexpr bool 
# 4789
negation_v = (negation< _Tp> ::value); 
# 4795
struct __extract_key_fail_tag { }; 
# 4796
struct __extract_key_self_tag { }; 
# 4797
struct __extract_key_first_tag { }; 
# 4799
template< class _ValTy, class _Key, class 
# 4800
_RawValTy = typename __unconstref< _ValTy> ::type> 
# 4801
struct __can_extract_key : public conditional< integral_constant< bool, is_same< _RawValTy, _Key> ::value> ::value, __extract_key_self_tag, __extract_key_fail_tag> ::type { 
# 4803
}; 
# 4805
template< class _Pair, class _Key, class _First, class _Second> 
# 4806
struct __can_extract_key< _Pair, _Key, pair< _First, _Second> >  : public conditional< integral_constant< bool, is_same< typename remove_const< _First> ::type, _Key> ::value> ::value, __extract_key_first_tag, __extract_key_fail_tag> ::type { 
# 4808
}; 
# 4813
template< class _ValTy, class _Key, class _ContainerValueTy, class 
# 4814
_RawValTy = typename __unconstref< _ValTy> ::type> 
# 4815
struct __can_extract_map_key : public integral_constant< bool, integral_constant< bool, is_same< _RawValTy, _Key> ::value> ::value>  { 
# 4816
}; 
# 4820
template< class _ValTy, class _Key, class _RawValTy> 
# 4821
struct __can_extract_map_key< _ValTy, _Key, _Key, _RawValTy>  : public false_type { 
# 4822
}; 
# 4838 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
constexpr bool __libcpp_is_constant_evaluated() noexcept { return false; } 
# 4841
template< class _CharT> using _IsCharLikeType = _And< is_standard_layout< _CharT> , is_trivial< _CharT> > ; 
# 4844 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits"
}}}
# 4849
namespace cuda { namespace std { 
# 4854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
template< class _Integer> constexpr typename __4::enable_if< __4::is_integral_v< _Integer> , byte> ::type &
# 4857 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
operator<<=(byte &__lhs, _Integer __shift) noexcept 
# 4858
{ return __lhs = (__lhs << __shift); } 
# 4860
template< class _Integer> constexpr typename __4::enable_if< __4::is_integral_v< _Integer> , byte> ::type 
# 4863 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
operator<<(byte __lhs, _Integer __shift) noexcept 
# 4864
{ return static_cast< byte>(static_cast< unsigned char>((static_cast< unsigned>(__lhs)) << __shift)); } 
# 4866
template< class _Integer> constexpr typename __4::enable_if< __4::is_integral_v< _Integer> , byte> ::type &
# 4869 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
operator>>=(byte &__lhs, _Integer __shift) noexcept 
# 4870
{ return __lhs = (__lhs >> __shift); } 
# 4872
template< class _Integer> constexpr typename __4::enable_if< __4::is_integral_v< _Integer> , byte> ::type 
# 4875 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
operator>>(byte __lhs, _Integer __shift) noexcept 
# 4876
{ return static_cast< byte>(static_cast< unsigned char>((static_cast< unsigned>(__lhs)) >> __shift)); } 
# 4878
template< class _Integer> constexpr typename __4::enable_if< __4::is_integral_v< _Integer> , _Integer> ::type 
# 4881 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits" 3
to_integer(byte __b) noexcept { return static_cast< _Integer>(__b); } 
# 4884 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/type_traits"
}}
# 43 "/usr/include/c++/7/ratio" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/7/ratio" 3
template< intmax_t _Pn> 
# 56
struct __static_sign : public integral_constant< long, (_Pn < (0)) ? -1 : 1>  { 
# 58
}; 
# 60
template< intmax_t _Pn> 
# 61
struct __static_abs : public integral_constant< long, _Pn * __static_sign< _Pn> ::value>  { 
# 63
}; 
# 65
template< intmax_t _Pn, intmax_t _Qn> 
# 66
struct __static_gcd : public __static_gcd< _Qn, _Pn % _Qn>  { 
# 68
}; 
# 70
template< intmax_t _Pn> 
# 71
struct __static_gcd< _Pn, 0>  : public integral_constant< long, __static_abs< _Pn> ::value>  { 
# 73
}; 
# 75
template< intmax_t _Qn> 
# 76
struct __static_gcd< 0, _Qn>  : public integral_constant< long, __static_abs< _Qn> ::value>  { 
# 78
}; 
# 86
template< intmax_t _Pn, intmax_t _Qn> 
# 87
struct __safe_multiply { 
# 90
private: static const uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 92
static const uintmax_t __a0 = (__static_abs< _Pn> ::value % __c); 
# 93
static const uintmax_t __a1 = (__static_abs< _Pn> ::value / __c); 
# 94
static const uintmax_t __b0 = (__static_abs< _Qn> ::value % __c); 
# 95
static const uintmax_t __b1 = (__static_abs< _Qn> ::value / __c); 
# 97
static_assert(((__a1 == (0)) || (__b1 == (0))), "overflow in multiplication");
# 99
static_assert((((__a0 * __b1) + (__b0 * __a1)) < (__c >> 1)), "overflow in multiplication");
# 101
static_assert(((__b0 * __a0) <= (9223372036854775807L)), "overflow in multiplication");
# 103
static_assert(((((__a0 * __b1) + (__b0 * __a1)) * __c) <= ((9223372036854775807L) - (__b0 * __a0))), "overflow in multiplication");
# 108
public: static const intmax_t value = (_Pn * _Qn); 
# 109
}; 
# 113
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 114
struct __big_less : public integral_constant< bool, (__hi1 < __hi2) || ((__hi1 == __hi2) && (__lo1 < __lo2))>  { 
# 117
}; 
# 119
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 120
struct __big_add { 
# 122
static constexpr uintmax_t __lo = (__lo1 + __lo2); 
# 123
static constexpr uintmax_t __hi = ((__hi1 + __hi2) + ((__lo1 + __lo2) < __lo1)); 
# 125
}; 
# 128
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 129
struct __big_sub { 
# 131
static_assert((!__big_less< __hi1, __lo1, __hi2, __lo2> ::value), "Internal library error");
# 133
static constexpr uintmax_t __lo = (__lo1 - __lo2); 
# 134
static constexpr uintmax_t __hi = ((__hi1 - __hi2) - (__lo1 < __lo2)); 
# 136
}; 
# 139
template< uintmax_t __x, uintmax_t __y> 
# 140
struct __big_mul { 
# 143
private: static constexpr uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 144
static constexpr uintmax_t __x0 = (__x % __c); 
# 145
static constexpr uintmax_t __x1 = (__x / __c); 
# 146
static constexpr uintmax_t __y0 = (__y % __c); 
# 147
static constexpr uintmax_t __y1 = (__y / __c); 
# 148
static constexpr uintmax_t __x0y0 = (__x0 * __y0); 
# 149
static constexpr uintmax_t __x0y1 = (__x0 * __y1); 
# 150
static constexpr uintmax_t __x1y0 = (__x1 * __y0); 
# 151
static constexpr uintmax_t __x1y1 = (__x1 * __y1); 
# 152
static constexpr uintmax_t __mix = (__x0y1 + __x1y0); 
# 153
static constexpr uintmax_t __mix_lo = (__mix * __c); 
# 154
static constexpr uintmax_t __mix_hi = ((__mix / __c) + ((__mix < __x0y1) ? __c : (0))); 
# 156
typedef __big_add< __mix_hi, __mix_lo, __x1y1, __x0y0>  _Res; 
# 158
public: static constexpr uintmax_t __hi = (_Res::__hi); 
# 159
static constexpr uintmax_t __lo = (_Res::__lo); 
# 160
}; 
# 164
template< uintmax_t __n1, uintmax_t __n0, uintmax_t __d> 
# 165
struct __big_div_impl { 
# 168
static_assert((__d >= (((uintmax_t)1) << ((sizeof(intmax_t) * (8)) - (1)))), "Internal library error");
# 170
static_assert((__n1 < __d), "Internal library error");
# 171
private: static constexpr uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 172
static constexpr uintmax_t __d1 = (__d / __c); 
# 173
static constexpr uintmax_t __d0 = (__d % __c); 
# 175
static constexpr uintmax_t __q1x = (__n1 / __d1); 
# 176
static constexpr uintmax_t __r1x = (__n1 % __d1); 
# 177
static constexpr uintmax_t __m = (__q1x * __d0); 
# 178
static constexpr uintmax_t __r1y = ((__r1x * __c) + (__n0 / __c)); 
# 179
static constexpr uintmax_t __r1z = (__r1y + __d); 
# 180
static constexpr uintmax_t __r1 = (((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m)) ? __r1z + __d : __r1z : __r1y) - __m); 
# 183
static constexpr uintmax_t __q1 = (__q1x - ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0)); 
# 186
static constexpr uintmax_t __q0x = (__r1 / __d1); 
# 187
static constexpr uintmax_t __r0x = (__r1 % __d1); 
# 188
static constexpr uintmax_t __n = (__q0x * __d0); 
# 189
static constexpr uintmax_t __r0y = ((__r0x * __c) + (__n0 % __c)); 
# 190
static constexpr uintmax_t __r0z = (__r0y + __d); 
# 191
static constexpr uintmax_t __r0 = (((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n)) ? __r0z + __d : __r0z : __r0y) - __n); 
# 194
static constexpr uintmax_t __q0 = (__q0x - ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n)) ? 2 : 1 : 0)); 
# 199
public: static constexpr uintmax_t __quot = ((__q1 * __c) + __q0); 
# 200
static constexpr uintmax_t __rem = __r0; 
# 203
private: typedef __big_mul< __quot, __d>  _Prod; 
# 204
typedef __big_add< __big_mul< __quot, __d> ::__hi, __big_mul< __quot, __d> ::__lo, 0UL, __rem>  _Sum; 
# 205
static_assert(((_Sum::__hi == __n1) && (_Sum::__lo == __n0)), "Internal library error");
# 207
}; 
# 209
template< uintmax_t __n1, uintmax_t __n0, uintmax_t __d> 
# 210
struct __big_div { 
# 213
static_assert((__d != (0)), "Internal library error");
# 214
static_assert((sizeof(uintmax_t) == sizeof(unsigned long long)), "This library calls __builtin_clzll on uintmax_t, which is unsafe on your platform. Please complain to http://gcc.gnu.org/bugzill" "a/");
# 218
private: static constexpr int __shift = __builtin_clzll(__d); 
# 219
static constexpr int __coshift_ = ((sizeof(uintmax_t) * (8)) - __shift); 
# 220
static constexpr int __coshift = ((__shift != 0) ? __coshift_ : 0); 
# 221
static constexpr uintmax_t __c1 = (((uintmax_t)1) << __shift); 
# 222
static constexpr uintmax_t __c2 = (((uintmax_t)1) << __coshift); 
# 223
static constexpr uintmax_t __new_d = (__d * __c1); 
# 224
static constexpr uintmax_t __new_n0 = (__n0 * __c1); 
# 225
static constexpr uintmax_t __n1_shifted = ((__n1 % __d) * __c1); 
# 226
static constexpr uintmax_t __n0_top = ((__shift != 0) ? __n0 / __c2 : (0)); 
# 227
static constexpr uintmax_t __new_n1 = (__n1_shifted + __n0_top); 
# 228
typedef __big_div_impl< __new_n1, __new_n0, __new_d>  _Res; 
# 231
public: static constexpr uintmax_t __quot_hi = (__n1 / __d); 
# 232
static constexpr uintmax_t __quot_lo = (_Res::__quot); 
# 233
static constexpr uintmax_t __rem = (_Res::__rem / __c1); 
# 236
private: typedef __big_mul< __quot_lo, __d>  _P0; 
# 237
typedef __big_mul< __quot_hi, __d>  _P1; 
# 238
typedef __big_add< __big_mul< __quot_lo, __d> ::__hi, __big_mul< __quot_lo, __d> ::__lo, __big_mul< __quot_hi, __d> ::__lo, __rem>  _Sum; 
# 240
static_assert((_P1::__hi == 0), "Internal library error");
# 241
static_assert((_Sum::__hi >= _P0::__hi), "Internal library error");
# 243
static_assert(((_Sum::__hi == __n1) && (_Sum::__lo == __n0)), "Internal library error");
# 245
static_assert((__rem < __d), "Internal library error");
# 246
}; 
# 262 "/usr/include/c++/7/ratio" 3
template< intmax_t _Num, intmax_t _Den = 1L> 
# 263
struct ratio { 
# 265
static_assert((_Den != (0)), "denominator cannot be zero");
# 266
static_assert(((_Num >= (-9223372036854775807L)) && (_Den >= (-9223372036854775807L))), "out of range");
# 270
static constexpr intmax_t num = ((_Num * __static_sign< _Den> ::value) / __static_gcd< _Num, _Den> ::value); 
# 273
static constexpr intmax_t den = (__static_abs< _Den> ::value / __static_gcd< _Num, _Den> ::value); 
# 276
typedef ratio< num, den>  type; 
# 277
}; 
# 279
template< intmax_t _Num, intmax_t _Den> constexpr intmax_t ratio< _Num, _Den> ::num; 
# 282
template< intmax_t _Num, intmax_t _Den> constexpr intmax_t ratio< _Num, _Den> ::den; 
# 285
template< class _R1, class _R2> 
# 286
struct __ratio_multiply { 
# 289
private: static const intmax_t __gcd1 = (__static_gcd< _R1::num, _R2::den> ::value); 
# 291
static const intmax_t __gcd2 = (__static_gcd< _R2::num, _R1::den> ::value); 
# 299
public: typedef ratio< __safe_multiply< _R1::num / __gcd1, _R2::num / __gcd2> ::value, __safe_multiply< _R1::den / __gcd2, _R2::den / __gcd1> ::value>  type; 
# 301
static constexpr intmax_t num = (type::num); 
# 302
static constexpr intmax_t den = (type::den); 
# 303
}; 
# 305
template< class _R1, class _R2> constexpr intmax_t __ratio_multiply< _R1, _R2> ::num; 
# 308
template< class _R1, class _R2> constexpr intmax_t __ratio_multiply< _R1, _R2> ::den; 
# 312
template< class _R1, class _R2> using ratio_multiply = typename __ratio_multiply< _R1, _R2> ::type; 
# 315
template< class _R1, class _R2> 
# 316
struct __ratio_divide { 
# 318
static_assert((_R2::num != 0), "division by 0");
# 322
typedef typename __ratio_multiply< _R1, ratio< _R2::den, _R2::num> > ::type type; 
# 324
static constexpr intmax_t num = (type::num); 
# 325
static constexpr intmax_t den = (type::den); 
# 326
}; 
# 328
template< class _R1, class _R2> constexpr intmax_t __ratio_divide< _R1, _R2> ::num; 
# 331
template< class _R1, class _R2> constexpr intmax_t __ratio_divide< _R1, _R2> ::den; 
# 335
template< class _R1, class _R2> using ratio_divide = typename __ratio_divide< _R1, _R2> ::type; 
# 339
template< class _R1, class _R2> 
# 340
struct ratio_equal : public integral_constant< bool, (_R1::num == _R2::num) && (_R1::den == _R2::den)>  { 
# 342
}; 
# 345
template< class _R1, class _R2> 
# 346
struct ratio_not_equal : public integral_constant< bool, !ratio_equal< _R1, _R2> ::value>  { 
# 348
}; 
# 351
template< class _R1, class _R2, class 
# 352
_Left = __big_mul< _R1::num, _R2::den> , class 
# 353
_Right = __big_mul< _R2::num, _R1::den> > 
# 354
struct __ratio_less_impl_1 : public integral_constant< bool, __big_less< _Left::__hi, _Left::__lo, _Right::__hi, _Right::__lo> ::value>  { 
# 357
}; 
# 359
template< class _R1, class _R2, bool 
# 360
 = ((_R1::num == 0) || (_R2::num == 0)) || (__static_sign< _R1::num> ::value != __static_sign< _R2::num> ::value), bool 
# 363
 = (__static_sign< _R1::num> ::value == (-1)) && (__static_sign< _R2::num> ::value == (-1))> 
# 365
struct __ratio_less_impl : public __ratio_less_impl_1< _R1, _R2> ::type { 
# 367
}; 
# 369
template< class _R1, class _R2> 
# 370
struct __ratio_less_impl< _R1, _R2, true, false>  : public integral_constant< bool, _R1::num < _R2::num>  { 
# 372
}; 
# 374
template< class _R1, class _R2> 
# 375
struct __ratio_less_impl< _R1, _R2, false, true>  : public __ratio_less_impl_1< ratio< -_R2::num, _R2::den> , ratio< -_R1::num, _R1::den> > ::type { 
# 378
}; 
# 381
template< class _R1, class _R2> 
# 382
struct ratio_less : public __ratio_less_impl< _R1, _R2> ::type { 
# 384
}; 
# 387
template< class _R1, class _R2> 
# 388
struct ratio_less_equal : public integral_constant< bool, !ratio_less< _R2, _R1> ::value>  { 
# 390
}; 
# 393
template< class _R1, class _R2> 
# 394
struct ratio_greater : public integral_constant< bool, ratio_less< _R2, _R1> ::value>  { 
# 396
}; 
# 399
template< class _R1, class _R2> 
# 400
struct ratio_greater_equal : public integral_constant< bool, !ratio_less< _R1, _R2> ::value>  { 
# 402
}; 
# 421 "/usr/include/c++/7/ratio" 3
template< class _R1, class _R2, bool 
# 422
 = _R1::num >= 0, bool 
# 423
 = _R2::num >= 0, bool 
# 424
 = ratio_less< ratio< __static_abs< _R1::num> ::value, _R1::den> , ratio< __static_abs< _R2::num> ::value, _R2::den> > ::value> 
# 426
struct __ratio_add_impl { 
# 431
private: typedef typename __ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type __t; 
# 433
public: typedef ratio< -__ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type::num, __ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type::den>  type; 
# 434
}; 
# 437
template< class _R1, class _R2, bool __b> 
# 438
struct __ratio_add_impl< _R1, _R2, true, true, __b>  { 
# 441
private: static constexpr uintmax_t __g = (__static_gcd< _R1::den, _R2::den> ::value); 
# 442
static constexpr uintmax_t __d2 = (_R2::den / __g); 
# 443
typedef __big_mul< _R1::den, __d2>  __d; 
# 444
typedef __big_mul< _R1::num, _R2::den / __g>  __x; 
# 445
typedef __big_mul< _R2::num, _R1::den / __g>  __y; 
# 446
typedef __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo>  __n; 
# 447
static_assert((__n::__hi >= __x::__hi), "Internal library error");
# 448
typedef __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g>  __ng; 
# 449
static constexpr uintmax_t __g2 = (__static_gcd< __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g> ::__rem, __g> ::value); 
# 450
typedef __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g2>  __n_final; 
# 451
static_assert((__n_final::__rem == 0), "Internal library error");
# 452
static_assert(((__n_final::__quot_hi == 0) && (__n_final::__quot_lo <= 9223372036854775807L)), "overflow in addition");
# 454
typedef __big_mul< _R1::den / __g2, __d2>  __d_final; 
# 455
static_assert(((__d_final::__hi == 0) && (__d_final::__lo <= 9223372036854775807L)), "overflow in addition");
# 458
public: typedef ratio< __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g2> ::__quot_lo, __big_mul< _R1::den / __g2, __d2> ::__lo>  type; 
# 459
}; 
# 461
template< class _R1, class _R2> 
# 462
struct __ratio_add_impl< _R1, _R2, false, true, true>  : public std::__ratio_add_impl< _R2, _R1>  { 
# 464
}; 
# 467
template< class _R1, class _R2> 
# 468
struct __ratio_add_impl< _R1, _R2, true, false, false>  { 
# 471
private: static constexpr uintmax_t __g = (__static_gcd< _R1::den, _R2::den> ::value); 
# 472
static constexpr uintmax_t __d2 = (_R2::den / __g); 
# 473
typedef __big_mul< _R1::den, __d2>  __d; 
# 474
typedef __big_mul< _R1::num, _R2::den / __g>  __x; 
# 475
typedef __big_mul< -_R2::num, _R1::den / __g>  __y; 
# 476
typedef __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo>  __n; 
# 477
typedef __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g>  __ng; 
# 478
static constexpr uintmax_t __g2 = (__static_gcd< __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g> ::__rem, __g> ::value); 
# 479
typedef __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g2>  __n_final; 
# 480
static_assert((__n_final::__rem == 0), "Internal library error");
# 481
static_assert(((__n_final::__quot_hi == 0) && (__n_final::__quot_lo <= 9223372036854775807L)), "overflow in addition");
# 483
typedef __big_mul< _R1::den / __g2, __d2>  __d_final; 
# 484
static_assert(((__d_final::__hi == 0) && (__d_final::__lo <= 9223372036854775807L)), "overflow in addition");
# 487
public: typedef ratio< __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g2> ::__quot_lo, __big_mul< _R1::den / __g2, __d2> ::__lo>  type; 
# 488
}; 
# 490
template< class _R1, class _R2> 
# 491
struct __ratio_add { 
# 493
typedef typename __ratio_add_impl< _R1, _R2> ::type type; 
# 494
static constexpr intmax_t num = (type::num); 
# 495
static constexpr intmax_t den = (type::den); 
# 496
}; 
# 498
template< class _R1, class _R2> constexpr intmax_t __ratio_add< _R1, _R2> ::num; 
# 501
template< class _R1, class _R2> constexpr intmax_t __ratio_add< _R1, _R2> ::den; 
# 505
template< class _R1, class _R2> using ratio_add = typename __ratio_add< _R1, _R2> ::type; 
# 508
template< class _R1, class _R2> 
# 509
struct __ratio_subtract { 
# 513
typedef typename __ratio_add< _R1, ratio< -_R2::num, _R2::den> > ::type type; 
# 515
static constexpr intmax_t num = (type::num); 
# 516
static constexpr intmax_t den = (type::den); 
# 517
}; 
# 519
template< class _R1, class _R2> constexpr intmax_t __ratio_subtract< _R1, _R2> ::num; 
# 522
template< class _R1, class _R2> constexpr intmax_t __ratio_subtract< _R1, _R2> ::den; 
# 526
template< class _R1, class _R2> using ratio_subtract = typename __ratio_subtract< _R1, _R2> ::type; 
# 530
typedef ratio< 1L, 1000000000000000000L>  atto; 
# 531
typedef ratio< 1L, 1000000000000000L>  femto; 
# 532
typedef ratio< 1L, 1000000000000L>  pico; 
# 533
typedef ratio< 1L, 1000000000L>  nano; 
# 534
typedef ratio< 1L, 1000000L>  micro; 
# 535
typedef ratio< 1L, 1000L>  milli; 
# 536
typedef ratio< 1L, 100L>  centi; 
# 537
typedef ratio< 1L, 10L>  deci; 
# 538
typedef ratio< 10L, 1L>  deca; 
# 539
typedef ratio< 100L, 1L>  hecto; 
# 540
typedef ratio< 1000L, 1L>  kilo; 
# 541
typedef ratio< 1000000L, 1L>  mega; 
# 542
typedef ratio< 1000000000L, 1L>  giga; 
# 543
typedef ratio< 1000000000000L, 1L>  tera; 
# 544
typedef ratio< 1000000000000000L, 1L>  peta; 
# 545
typedef ratio< 1000000000000000000L, 1L>  exa; 
# 549
}
# 58 "/usr/include/c++/7/ctime" 3
namespace std { 
# 60
using ::clock_t;
# 61
using ::time_t;
# 62
using ::tm;
# 64
using ::clock;
# 65
using ::difftime;
# 66
using ::mktime;
# 67
using ::time;
# 68
using ::asctime;
# 69
using ::ctime;
# 70
using ::gmtime;
# 71
using ::localtime;
# 72
using ::strftime;
# 73
}
# 41 "/usr/include/c++/7/bits/parse_numbers.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
namespace __parse_int { 
# 47
template< unsigned _Base, char _Dig> struct _Digit; 
# 50
template< unsigned _Base> 
# 51
struct _Digit< _Base, '0'>  : public integral_constant< unsigned, 0U>  { 
# 53
using __valid = true_type; 
# 54
}; 
# 56
template< unsigned _Base> 
# 57
struct _Digit< _Base, '1'>  : public integral_constant< unsigned, 1U>  { 
# 59
using __valid = true_type; 
# 60
}; 
# 62
template< unsigned _Base, unsigned _Val> 
# 63
struct _Digit_impl : public integral_constant< unsigned, _Val>  { 
# 65
static_assert((_Base > _Val), "invalid digit");
# 66
using __valid = std::true_type; 
# 67
}; 
# 69
template< unsigned _Base> 
# 70
struct _Digit< _Base, '2'>  : public _Digit_impl< _Base, 2U>  { 
# 71
}; 
# 73
template< unsigned _Base> 
# 74
struct _Digit< _Base, '3'>  : public _Digit_impl< _Base, 3U>  { 
# 75
}; 
# 77
template< unsigned _Base> 
# 78
struct _Digit< _Base, '4'>  : public _Digit_impl< _Base, 4U>  { 
# 79
}; 
# 81
template< unsigned _Base> 
# 82
struct _Digit< _Base, '5'>  : public _Digit_impl< _Base, 5U>  { 
# 83
}; 
# 85
template< unsigned _Base> 
# 86
struct _Digit< _Base, '6'>  : public _Digit_impl< _Base, 6U>  { 
# 87
}; 
# 89
template< unsigned _Base> 
# 90
struct _Digit< _Base, '7'>  : public _Digit_impl< _Base, 7U>  { 
# 91
}; 
# 93
template< unsigned _Base> 
# 94
struct _Digit< _Base, '8'>  : public _Digit_impl< _Base, 8U>  { 
# 95
}; 
# 97
template< unsigned _Base> 
# 98
struct _Digit< _Base, '9'>  : public _Digit_impl< _Base, 9U>  { 
# 99
}; 
# 101
template< unsigned _Base> 
# 102
struct _Digit< _Base, 'a'>  : public _Digit_impl< _Base, 10U>  { 
# 103
}; 
# 105
template< unsigned _Base> 
# 106
struct _Digit< _Base, 'A'>  : public _Digit_impl< _Base, 10U>  { 
# 107
}; 
# 109
template< unsigned _Base> 
# 110
struct _Digit< _Base, 'b'>  : public _Digit_impl< _Base, 11U>  { 
# 111
}; 
# 113
template< unsigned _Base> 
# 114
struct _Digit< _Base, 'B'>  : public _Digit_impl< _Base, 11U>  { 
# 115
}; 
# 117
template< unsigned _Base> 
# 118
struct _Digit< _Base, 'c'>  : public _Digit_impl< _Base, 12U>  { 
# 119
}; 
# 121
template< unsigned _Base> 
# 122
struct _Digit< _Base, 'C'>  : public _Digit_impl< _Base, 12U>  { 
# 123
}; 
# 125
template< unsigned _Base> 
# 126
struct _Digit< _Base, 'd'>  : public _Digit_impl< _Base, 13U>  { 
# 127
}; 
# 129
template< unsigned _Base> 
# 130
struct _Digit< _Base, 'D'>  : public _Digit_impl< _Base, 13U>  { 
# 131
}; 
# 133
template< unsigned _Base> 
# 134
struct _Digit< _Base, 'e'>  : public _Digit_impl< _Base, 14U>  { 
# 135
}; 
# 137
template< unsigned _Base> 
# 138
struct _Digit< _Base, 'E'>  : public _Digit_impl< _Base, 14U>  { 
# 139
}; 
# 141
template< unsigned _Base> 
# 142
struct _Digit< _Base, 'f'>  : public _Digit_impl< _Base, 15U>  { 
# 143
}; 
# 145
template< unsigned _Base> 
# 146
struct _Digit< _Base, 'F'>  : public _Digit_impl< _Base, 15U>  { 
# 147
}; 
# 150
template< unsigned _Base> 
# 151
struct _Digit< _Base, '\''>  : public integral_constant< unsigned, 0U>  { 
# 153
using __valid = false_type; 
# 154
}; 
# 158
template< unsigned long long _Val> using __ull_constant = integral_constant< unsigned long long, _Val> ; 
# 161
template< unsigned _Base, char _Dig, char ..._Digs> 
# 162
struct _Power_help { 
# 164
using __next = typename _Power_help< _Base, _Digs...> ::type; 
# 165
using __valid_digit = typename _Digit< _Base, _Dig> ::__valid; 
# 166
using type = __ull_constant< _Power_help< _Base, _Digs...> ::type::value * ((__valid_digit{}) ? _Base : 1ULL)> ; 
# 168
}; 
# 170
template< unsigned _Base, char _Dig> 
# 171
struct _Power_help< _Base, _Dig>  { 
# 173
using __valid_digit = typename _Digit< _Base, _Dig> ::__valid; 
# 174
using type = __ull_constant< _Digit< _Base, _Dig> ::__valid::value> ; 
# 175
}; 
# 177
template< unsigned _Base, char ..._Digs> 
# 178
struct _Power : public _Power_help< _Base, _Digs...> ::type { 
# 179
}; 
# 181
template< unsigned _Base> 
# 182
struct _Power< _Base>  : public __ull_constant< 0ULL>  { 
# 183
}; 
# 187
template< unsigned _Base, unsigned long long _Pow, char _Dig, char ..._Digs> 
# 188
struct _Number_help { 
# 190
using __digit = _Digit< _Base, _Dig> ; 
# 191
using __valid_digit = typename _Digit< _Base, _Dig> ::__valid; 
# 192
using __next = _Number_help< _Base, (_Digit< _Base, _Dig> ::__valid::value) ? _Pow / (_Base) : _Pow, _Digs...> ; 
# 195
using type = __ull_constant< (_Pow * _Digit< _Base, _Dig> ::value) + _Number_help< _Base, (_Digit< _Base, _Dig> ::__valid::value) ? _Pow / (_Base) : _Pow, _Digs...> ::type::value> ; 
# 196
static_assert(((type::value / _Pow) == __digit::value), "integer literal does not fit in unsigned long long");
# 198
}; 
# 201
template< unsigned _Base, unsigned long long _Pow, char _Dig, char ..._Digs> 
# 202
struct _Number_help< _Base, _Pow, '\'', _Dig, _Digs...>  : public __parse_int::_Number_help< _Base, _Pow, _Dig, _Digs...>  { 
# 204
}; 
# 207
template< unsigned _Base, unsigned long long _Pow, char _Dig> 
# 208
struct _Number_help< _Base, _Pow, _Dig>  { 
# 211
using type = __ull_constant< _Digit< _Base, _Dig> ::value> ; 
# 212
}; 
# 214
template< unsigned _Base, char ..._Digs> 
# 215
struct _Number : public _Number_help< _Base, _Power< _Base, _Digs...> ::value, _Digs...> ::type { 
# 217
}; 
# 219
template< unsigned _Base> 
# 220
struct _Number< _Base>  : public __ull_constant< 0ULL>  { 
# 222
}; 
# 226
template< char ..._Digs> struct _Parse_int; 
# 229
template< char ..._Digs> 
# 230
struct _Parse_int< '0', 'b', _Digs...>  : public _Number< 2U, _Digs...> ::type { 
# 232
}; 
# 234
template< char ..._Digs> 
# 235
struct _Parse_int< '0', 'B', _Digs...>  : public _Number< 2U, _Digs...> ::type { 
# 237
}; 
# 239
template< char ..._Digs> 
# 240
struct _Parse_int< '0', 'x', _Digs...>  : public _Number< 16U, _Digs...> ::type { 
# 242
}; 
# 244
template< char ..._Digs> 
# 245
struct _Parse_int< '0', 'X', _Digs...>  : public _Number< 16U, _Digs...> ::type { 
# 247
}; 
# 249
template< char ..._Digs> 
# 250
struct _Parse_int< '0', _Digs...>  : public _Number< 8U, _Digs...> ::type { 
# 252
}; 
# 254
template< char ..._Digs> 
# 255
struct _Parse_int : public _Number< 10U, _Digs...> ::type { 
# 257
}; 
# 259
}
# 262
namespace __select_int { 
# 264
template< unsigned long long _Val, class ..._Ints> struct _Select_int_base; 
# 267
template< unsigned long long _Val, class _IntType, class ..._Ints> 
# 268
struct _Select_int_base< _Val, _IntType, _Ints...>  : public std::conditional_t< _Val <= numeric_limits< _IntType> ::max(), integral_constant< _IntType, _Val> , __select_int::_Select_int_base< _Val, _Ints...> >  { 
# 272
}; 
# 274
template< unsigned long long _Val> 
# 275
struct _Select_int_base< _Val>  { 
# 276
}; 
# 278
template< char ..._Digs> using _Select_int = typename _Select_int_base< __parse_int::_Parse_int< _Digs...> ::value, unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ::type; 
# 288
}
# 291
}
# 46 "/usr/include/c++/7/chrono" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/include/c++/7/chrono" 3
namespace chrono { 
# 63
template< class _Rep, class _Period = ratio< 1> > struct duration; 
# 66
template< class _Clock, class _Dur = typename _Clock::duration> struct time_point; 
# 70
}
# 76
template< class _CT, class _Period1, class _Period2> 
# 77
struct __duration_common_type_wrapper { 
# 80
private: typedef __static_gcd< _Period1::num, _Period2::num>  __gcd_num; 
# 81
typedef __static_gcd< _Period1::den, _Period2::den>  __gcd_den; 
# 82
typedef typename _CT::type __cr; 
# 84
typedef ratio< __static_gcd< _Period1::num, _Period2::num> ::value, (_Period1::den / __static_gcd< _Period1::den, _Period2::den> ::value) * _Period2::den>  __r; 
# 86
public: typedef __success_type< chrono::duration< __cr, __r> >  type; 
# 87
}; 
# 89
template< class _Period1, class _Period2> 
# 90
struct __duration_common_type_wrapper< __failure_type, _Period1, _Period2>  { 
# 91
typedef __failure_type type; }; 
# 93
template< class _Rep1, class _Period1, class _Rep2, class _Period2> 
# 94
struct common_type< chrono::duration< _Rep1, _Period1> , chrono::duration< _Rep2, _Period2> >  : public __duration_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Rep1, _Rep2> > ::type, _Period1, _Period2> ::type { 
# 98
}; 
# 102
template< class _CT, class _Clock> 
# 103
struct __timepoint_common_type_wrapper { 
# 106
typedef __success_type< chrono::time_point< _Clock, typename _CT::type> >  type; 
# 107
}; 
# 109
template< class _Clock> 
# 110
struct __timepoint_common_type_wrapper< __failure_type, _Clock>  { 
# 111
typedef __failure_type type; }; 
# 113
template< class _Clock, class _Duration1, class _Duration2> 
# 114
struct common_type< chrono::time_point< _Clock, _Duration1> , chrono::time_point< _Clock, _Duration2> >  : public __timepoint_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Duration1, _Duration2> > ::type, _Clock> ::type { 
# 118
}; 
# 122
namespace chrono { 
# 127
template< class _ToDur, class _CF, class _CR, bool 
# 128
_NumIsOne = false, bool _DenIsOne = false> 
# 129
struct __duration_cast_impl { 
# 131
template< class _Rep, class _Period> static constexpr _ToDur 
# 133
__cast(const duration< _Rep, _Period>  &__d) 
# 134
{ 
# 135
typedef typename _ToDur::rep __to_rep; 
# 136
return (_ToDur)(static_cast< __to_rep>(((static_cast< _CR>(__d.count())) * (static_cast< _CR>(_CF::num))) / (static_cast< _CR>(_CF::den)))); 
# 139
} 
# 140
}; 
# 142
template< class _ToDur, class _CF, class _CR> 
# 143
struct __duration_cast_impl< _ToDur, _CF, _CR, true, true>  { 
# 145
template< class _Rep, class _Period> static constexpr _ToDur 
# 147
__cast(const duration< _Rep, _Period>  &__d) 
# 148
{ 
# 149
typedef typename _ToDur::rep __to_rep; 
# 150
return (_ToDur)(static_cast< __to_rep>(__d.count())); 
# 151
} 
# 152
}; 
# 154
template< class _ToDur, class _CF, class _CR> 
# 155
struct __duration_cast_impl< _ToDur, _CF, _CR, true, false>  { 
# 157
template< class _Rep, class _Period> static constexpr _ToDur 
# 159
__cast(const duration< _Rep, _Period>  &__d) 
# 160
{ 
# 161
typedef typename _ToDur::rep __to_rep; 
# 162
return (_ToDur)(static_cast< __to_rep>((static_cast< _CR>(__d.count())) / (static_cast< _CR>(_CF::den)))); 
# 164
} 
# 165
}; 
# 167
template< class _ToDur, class _CF, class _CR> 
# 168
struct __duration_cast_impl< _ToDur, _CF, _CR, false, true>  { 
# 170
template< class _Rep, class _Period> static constexpr _ToDur 
# 172
__cast(const duration< _Rep, _Period>  &__d) 
# 173
{ 
# 174
typedef typename _ToDur::rep __to_rep; 
# 175
return (_ToDur)(static_cast< __to_rep>((static_cast< _CR>(__d.count())) * (static_cast< _CR>(_CF::num)))); 
# 177
} 
# 178
}; 
# 180
template< class _Tp> 
# 181
struct __is_duration : public false_type { 
# 183
}; 
# 185
template< class _Rep, class _Period> 
# 186
struct __is_duration< duration< _Rep, _Period> >  : public true_type { 
# 188
}; 
# 191
template< class _ToDur, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDur> ::value, _ToDur> ::type 
# 194
duration_cast(const duration< _Rep, _Period>  &__d) 
# 195
{ 
# 196
typedef typename _ToDur::period __to_period; 
# 197
typedef typename _ToDur::rep __to_rep; 
# 198
typedef ratio_divide< _Period, typename _ToDur::period>  __cf; 
# 200
typedef typename common_type< typename _ToDur::rep, _Rep, intmax_t> ::type __cr; 
# 202
typedef __duration_cast_impl< _ToDur, ratio_divide< _Period, typename _ToDur::period> , typename common_type< typename _ToDur::rep, _Rep, intmax_t> ::type, __ratio_divide< _Period, typename _ToDur::period> ::type::num == 1, __ratio_divide< _Period, typename _ToDur::period> ::type::den == 1>  __dc; 
# 203
return __dc::__cast(__d); 
# 204
} 
# 207
template< class _Rep> 
# 208
struct treat_as_floating_point : public is_floating_point< _Rep>  { 
# 210
}; 
# 275 "/usr/include/c++/7/chrono" 3
template< class _Rep> 
# 276
struct duration_values { 
# 279
static constexpr _Rep zero() 
# 280
{ return (_Rep)0; } 
# 283
static constexpr _Rep max() 
# 284
{ return numeric_limits< _Rep> ::max(); } 
# 287
static constexpr _Rep min() 
# 288
{ return numeric_limits< _Rep> ::lowest(); } 
# 289
}; 
# 291
template< class _Tp> 
# 292
struct __is_ratio : public false_type { 
# 294
}; 
# 296
template< intmax_t _Num, intmax_t _Den> 
# 297
struct __is_ratio< ratio< _Num, _Den> >  : public true_type { 
# 299
}; 
# 302
template< class _Rep, class _Period> 
# 303
struct duration { 
# 305
typedef _Rep rep; 
# 306
typedef _Period period; 
# 308
static_assert((!__is_duration< _Rep> ::value), "rep cannot be a duration");
# 309
static_assert((__is_ratio< _Period> ::value), "period must be a specialization of ratio");
# 311
static_assert((_Period::num > 0), "period must be positive");
# 314
constexpr duration() = default;
# 319
duration(const duration &) = default;
# 323
template< class _Rep2, class  = typename enable_if< is_convertible< const _Rep2 &, rep> ::value && (treat_as_floating_point< rep> ::value || (!treat_as_floating_point< _Rep2> ::value))> ::type> constexpr explicit 
# 327
duration(const _Rep2 &__rep) : __r(static_cast< rep>(__rep)) 
# 328
{ } 
# 330
template< class _Rep2, class _Period2, class  = typename enable_if< treat_as_floating_point< rep> ::value || ((__ratio_divide< _Period2, period> ::type::den == 1) && (!treat_as_floating_point< _Rep2> ::value))> ::type> constexpr 
# 334
duration(const duration< _Rep2, _Period2>  &__d) : __r(duration_cast< duration> (__d).count()) 
# 335
{ } 
# 337
~duration() = default;
# 338
duration &operator=(const duration &) = default;
# 342
constexpr rep count() const 
# 343
{ return __r; } 
# 347
constexpr duration operator+() const 
# 348
{ return *this; } 
# 351
constexpr duration operator-() const 
# 352
{ return ((duration)(-(__r))); } 
# 355
duration &operator++() 
# 356
{ 
# 357
++(__r); 
# 358
return *this; 
# 359
} 
# 362
duration operator++(int) 
# 363
{ return ((duration)((__r)++)); } 
# 366
duration &operator--() 
# 367
{ 
# 368
--(__r); 
# 369
return *this; 
# 370
} 
# 373
duration operator--(int) 
# 374
{ return ((duration)((__r)--)); } 
# 377
duration &operator+=(const duration &__d) 
# 378
{ 
# 379
(__r) += __d.count(); 
# 380
return *this; 
# 381
} 
# 384
duration &operator-=(const duration &__d) 
# 385
{ 
# 386
(__r) -= __d.count(); 
# 387
return *this; 
# 388
} 
# 391
duration &operator*=(const rep &__rhs) 
# 392
{ 
# 393
(__r) *= __rhs; 
# 394
return *this; 
# 395
} 
# 398
duration &operator/=(const rep &__rhs) 
# 399
{ 
# 400
(__r) /= __rhs; 
# 401
return *this; 
# 402
} 
# 405
template< class _Rep2 = rep> typename enable_if< !treat_as_floating_point< _Rep2> ::value, duration &> ::type 
# 409
operator%=(const rep &__rhs) 
# 410
{ 
# 411
(__r) %= __rhs; 
# 412
return *this; 
# 413
} 
# 415
template< class _Rep2 = rep> typename enable_if< !treat_as_floating_point< _Rep2> ::value, duration &> ::type 
# 419
operator%=(const duration &__d) 
# 420
{ 
# 421
(__r) %= __d.count(); 
# 422
return *this; 
# 423
} 
# 427
static constexpr duration zero() 
# 428
{ return ((duration)(duration_values< rep> ::zero())); } 
# 431
static constexpr duration min() 
# 432
{ return ((duration)(duration_values< rep> ::min())); } 
# 435
static constexpr duration max() 
# 436
{ return ((duration)(duration_values< rep> ::max())); } 
# 439
private: rep __r; 
# 440
}; 
# 442
template< class _Rep1, class _Period1, class 
# 443
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 446
operator+(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 447
__rhs) 
# 448
{ 
# 449
typedef duration< _Rep1, _Period1>  __dur1; 
# 450
typedef duration< _Rep2, _Period2>  __dur2; 
# 451
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 452
return (__cd)(((__cd)__lhs).count() + ((__cd)__rhs).count()); 
# 453
} 
# 455
template< class _Rep1, class _Period1, class 
# 456
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 459
operator-(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 460
__rhs) 
# 461
{ 
# 462
typedef duration< _Rep1, _Period1>  __dur1; 
# 463
typedef duration< _Rep2, _Period2>  __dur2; 
# 464
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 465
return (__cd)(((__cd)__lhs).count() - ((__cd)__rhs).count()); 
# 466
} 
# 472
template< class _Rep1, class _Rep2, bool  = is_convertible< const _Rep2 &, typename common_type< _Rep1, _Rep2> ::type> ::value> 
# 475
struct __common_rep_type { }; 
# 477
template< class _Rep1, class _Rep2> 
# 478
struct __common_rep_type< _Rep1, _Rep2, true>  { 
# 479
typedef typename common_type< _Rep1, _Rep2> ::type type; }; 
# 481
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, _Rep2> ::type, _Period>  
# 484
operator*(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 485
{ 
# 487
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 488
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() * __s)); 
# 489
} 
# 491
template< class _Rep1, class _Rep2, class _Period> constexpr duration< typename __common_rep_type< _Rep2, _Rep1> ::type, _Period>  
# 494
operator*(const _Rep1 &__s, const duration< _Rep2, _Period>  &__d) 
# 495
{ return __d * __s; } 
# 497
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, typename enable_if< !__is_duration< _Rep2> ::value, _Rep2> ::type> ::type, _Period>  
# 500
operator/(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 501
{ 
# 503
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 504
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() / __s)); 
# 505
} 
# 507
template< class _Rep1, class _Period1, class 
# 508
_Rep2, class _Period2> constexpr typename common_type< _Rep1, _Rep2> ::type 
# 510
operator/(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 511
__rhs) 
# 512
{ 
# 513
typedef duration< _Rep1, _Period1>  __dur1; 
# 514
typedef duration< _Rep2, _Period2>  __dur2; 
# 515
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 516
return ((__cd)__lhs).count() / ((__cd)__rhs).count(); 
# 517
} 
# 520
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, typename enable_if< !__is_duration< _Rep2> ::value, _Rep2> ::type> ::type, _Period>  
# 523
operator%(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 524
{ 
# 526
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 527
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() % __s)); 
# 528
} 
# 530
template< class _Rep1, class _Period1, class 
# 531
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 534
operator%(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 535
__rhs) 
# 536
{ 
# 537
typedef duration< _Rep1, _Period1>  __dur1; 
# 538
typedef duration< _Rep2, _Period2>  __dur2; 
# 539
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 540
return (__cd)(((__cd)__lhs).count() % ((__cd)__rhs).count()); 
# 541
} 
# 544
template< class _Rep1, class _Period1, class 
# 545
_Rep2, class _Period2> constexpr bool 
# 547
operator==(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 548
__rhs) 
# 549
{ 
# 550
typedef duration< _Rep1, _Period1>  __dur1; 
# 551
typedef duration< _Rep2, _Period2>  __dur2; 
# 552
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __ct; 
# 553
return ((__ct)__lhs).count() == ((__ct)__rhs).count(); 
# 554
} 
# 556
template< class _Rep1, class _Period1, class 
# 557
_Rep2, class _Period2> constexpr bool 
# 559
operator<(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 560
__rhs) 
# 561
{ 
# 562
typedef duration< _Rep1, _Period1>  __dur1; 
# 563
typedef duration< _Rep2, _Period2>  __dur2; 
# 564
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __ct; 
# 565
return ((__ct)__lhs).count() < ((__ct)__rhs).count(); 
# 566
} 
# 568
template< class _Rep1, class _Period1, class 
# 569
_Rep2, class _Period2> constexpr bool 
# 571
operator!=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 572
__rhs) 
# 573
{ return !(__lhs == __rhs); } 
# 575
template< class _Rep1, class _Period1, class 
# 576
_Rep2, class _Period2> constexpr bool 
# 578
operator<=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 579
__rhs) 
# 580
{ return !(__rhs < __lhs); } 
# 582
template< class _Rep1, class _Period1, class 
# 583
_Rep2, class _Period2> constexpr bool 
# 585
operator>(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 586
__rhs) 
# 587
{ return __rhs < __lhs; } 
# 589
template< class _Rep1, class _Period1, class 
# 590
_Rep2, class _Period2> constexpr bool 
# 592
operator>=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 593
__rhs) 
# 594
{ return !(__lhs < __rhs); } 
# 597
typedef duration< signed long, ratio< 1L, 1000000000L> >  nanoseconds; 
# 600
typedef duration< signed long, ratio< 1L, 1000000L> >  microseconds; 
# 603
typedef duration< signed long, ratio< 1L, 1000L> >  milliseconds; 
# 606
typedef duration< signed long>  seconds; 
# 609
typedef duration< signed long, ratio< 60L> >  minutes; 
# 612
typedef duration< signed long, ratio< 3600L> >  hours; 
# 615
template< class _Clock, class _Dur> 
# 616
struct time_point { 
# 618
typedef _Clock clock; 
# 619
typedef _Dur duration; 
# 620
typedef typename _Dur::rep rep; 
# 621
typedef typename _Dur::period period; 
# 623
constexpr time_point() : __d(duration::zero()) 
# 624
{ } 
# 626
constexpr explicit time_point(const duration &__dur) : __d(__dur) 
# 628
{ } 
# 631
template< class _Dur2, class 
# 632
 = _Require< is_convertible< _Dur2, _Dur> > > constexpr 
# 633
time_point(const time_point< clock, _Dur2>  &__t) : __d(__t.time_since_epoch()) 
# 635
{ } 
# 639
constexpr duration time_since_epoch() const 
# 640
{ return __d; } 
# 644
time_point &operator+=(const duration &__dur) 
# 645
{ 
# 646
(__d) += __dur; 
# 647
return *this; 
# 648
} 
# 651
time_point &operator-=(const duration &__dur) 
# 652
{ 
# 653
(__d) -= __dur; 
# 654
return *this; 
# 655
} 
# 659
static constexpr time_point min() 
# 660
{ return ((time_point)(duration::min())); } 
# 663
static constexpr time_point max() 
# 664
{ return ((time_point)(duration::max())); } 
# 667
private: duration __d; 
# 668
}; 
# 671
template< class _ToDur, class _Clock, class _Dur> constexpr typename enable_if< __is_duration< _ToDur> ::value, time_point< _Clock, _ToDur> > ::type 
# 674
time_point_cast(const time_point< _Clock, _Dur>  &__t) 
# 675
{ 
# 676
typedef time_point< _Clock, _ToDur>  __time_point; 
# 677
return ((time_point< _Clock, _ToDur> )(duration_cast< _ToDur> (__t.time_since_epoch()))); 
# 678
} 
# 711 "/usr/include/c++/7/chrono" 3
template< class _Clock, class _Dur1, class 
# 712
_Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  
# 715
operator+(const time_point< _Clock, _Dur1>  &__lhs, const duration< _Rep2, _Period2>  &
# 716
__rhs) 
# 717
{ 
# 718
typedef duration< _Rep2, _Period2>  __dur2; 
# 719
typedef typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type __ct; 
# 720
typedef time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  __time_point; 
# 721
return ((time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type> )(__lhs.time_since_epoch() + __rhs)); 
# 722
} 
# 724
template< class _Rep1, class _Period1, class 
# 725
_Clock, class _Dur2> constexpr time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type>  
# 728
operator+(const duration< _Rep1, _Period1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 729
__rhs) 
# 730
{ 
# 731
typedef duration< _Rep1, _Period1>  __dur1; 
# 732
typedef typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type __ct; 
# 733
typedef time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type>  __time_point; 
# 734
return ((time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type> )(__rhs.time_since_epoch() + __lhs)); 
# 735
} 
# 737
template< class _Clock, class _Dur1, class 
# 738
_Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  
# 741
operator-(const time_point< _Clock, _Dur1>  &__lhs, const duration< _Rep2, _Period2>  &
# 742
__rhs) 
# 743
{ 
# 744
typedef duration< _Rep2, _Period2>  __dur2; 
# 745
typedef typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type __ct; 
# 746
typedef time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  __time_point; 
# 747
return ((time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type> )(__lhs.time_since_epoch() - __rhs)); 
# 748
} 
# 750
template< class _Clock, class _Dur1, class _Dur2> constexpr typename common_type< _Dur1, _Dur2> ::type 
# 752
operator-(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 753
__rhs) 
# 754
{ return __lhs.time_since_epoch() - __rhs.time_since_epoch(); } 
# 756
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 758
operator==(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 759
__rhs) 
# 760
{ return __lhs.time_since_epoch() == __rhs.time_since_epoch(); } 
# 762
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 764
operator!=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 765
__rhs) 
# 766
{ return !(__lhs == __rhs); } 
# 768
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 770
operator<(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 771
__rhs) 
# 772
{ return __lhs.time_since_epoch() < __rhs.time_since_epoch(); } 
# 774
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 776
operator<=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 777
__rhs) 
# 778
{ return !(__rhs < __lhs); } 
# 780
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 782
operator>(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 783
__rhs) 
# 784
{ return __rhs < __lhs; } 
# 786
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 788
operator>=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 789
__rhs) 
# 790
{ return !(__lhs < __rhs); } 
# 811 "/usr/include/c++/7/chrono" 3
inline namespace _V2 { 
# 818
struct system_clock { 
# 820
typedef nanoseconds duration; 
# 821
typedef chrono::duration< signed long, ratio< 1L, 1000000000L> > ::rep rep; 
# 822
typedef chrono::duration< signed long, ratio< 1L, 1000000000L> > ::period period; 
# 823
typedef chrono::time_point< system_clock, chrono::duration< signed long, ratio< 1L, 1000000000L> > >  time_point; 
# 825
static_assert(((system_clock::duration::min()) < (system_clock::duration::zero())), "a clock\'s minimum duration cannot be less than its epoch");
# 829
static constexpr bool is_steady = false; 
# 832
static time_point now() noexcept; 
# 836
static time_t to_time_t(const time_point &__t) noexcept 
# 837
{ 
# 838
return (time_t)duration_cast< chrono::duration< signed long> > (__t.time_since_epoch()).count(); 
# 840
} 
# 843
static time_point from_time_t(time_t __t) noexcept 
# 844
{ 
# 845
typedef chrono::time_point< system_clock, chrono::duration< signed long> >  __from; 
# 846
return time_point_cast< chrono::duration< signed long, ratio< 1L, 1000000000L> > > (((chrono::time_point< system_clock, chrono::duration< signed long> > )(((chrono::duration< signed long> )(__t))))); 
# 848
} 
# 849
}; 
# 857
struct steady_clock { 
# 859
typedef nanoseconds duration; 
# 860
typedef chrono::duration< signed long, ratio< 1L, 1000000000L> > ::rep rep; 
# 861
typedef chrono::duration< signed long, ratio< 1L, 1000000000L> > ::period period; 
# 862
typedef chrono::time_point< steady_clock, chrono::duration< signed long, ratio< 1L, 1000000000L> > >  time_point; 
# 864
static constexpr bool is_steady = true; 
# 867
static time_point now() noexcept; 
# 868
}; 
# 878 "/usr/include/c++/7/chrono" 3
using high_resolution_clock = system_clock; 
# 880
}
# 883
}
# 889
inline namespace literals { 
# 891
inline namespace chrono_literals { 
# 895
template< class _Rep, unsigned long long _Val> 
# 896
struct _Checked_integral_constant : public integral_constant< _Rep, static_cast< _Rep>(_Val)>  { 
# 899
static_assert(((_Checked_integral_constant< _Rep, _Val> ::value >= 0) && (_Checked_integral_constant< _Rep, _Val> ::value == _Val)), "literal value cannot be represented by duration type");
# 902
}; 
# 904
template< class _Dur, char ..._Digits> constexpr _Dur 
# 905
__check_overflow() 
# 906
{ 
# 907
using _Val = __parse_int::_Parse_int< _Digits...> ; 
# 908
using _Rep = typename _Dur::rep; 
# 911
using _CheckedVal = _Checked_integral_constant< typename _Dur::rep, __parse_int::_Parse_int< _Digits...> ::value> ; 
# 912
return _Dur{_CheckedVal::value}; 
# 913
} 
# 916
constexpr chrono::duration< long double, ratio< 3600L> >  operator ""h(long double __hours) 
# 917
{ return chrono::duration< long double, ratio< 3600L> > {__hours}; } 
# 919
template< char ..._Digits> constexpr chrono::hours 
# 921
operator ""h() 
# 922
{ return __check_overflow< chrono::hours, _Digits...> (); } 
# 925
constexpr chrono::duration< long double, ratio< 60L> >  operator ""min(long double __mins) 
# 926
{ return chrono::duration< long double, ratio< 60L> > {__mins}; } 
# 928
template< char ..._Digits> constexpr chrono::minutes 
# 930
operator ""min() 
# 931
{ return __check_overflow< chrono::minutes, _Digits...> (); } 
# 934
constexpr chrono::duration< long double>  operator ""s(long double __secs) 
# 935
{ return chrono::duration< long double> {__secs}; } 
# 937
template< char ..._Digits> constexpr chrono::seconds 
# 939
operator ""s() 
# 940
{ return __check_overflow< chrono::seconds, _Digits...> (); } 
# 943
constexpr chrono::duration< long double, ratio< 1L, 1000L> >  operator ""ms(long double __msecs) 
# 944
{ return chrono::duration< long double, ratio< 1L, 1000L> > {__msecs}; } 
# 946
template< char ..._Digits> constexpr chrono::milliseconds 
# 948
operator ""ms() 
# 949
{ return __check_overflow< chrono::milliseconds, _Digits...> (); } 
# 952
constexpr chrono::duration< long double, ratio< 1L, 1000000L> >  operator ""us(long double __usecs) 
# 953
{ return chrono::duration< long double, ratio< 1L, 1000000L> > {__usecs}; } 
# 955
template< char ..._Digits> constexpr chrono::microseconds 
# 957
operator ""us() 
# 958
{ return __check_overflow< chrono::microseconds, _Digits...> (); } 
# 961
constexpr chrono::duration< long double, ratio< 1L, 1000000000L> >  operator ""ns(long double __nsecs) 
# 962
{ return chrono::duration< long double, ratio< 1L, 1000000000L> > {__nsecs}; } 
# 964
template< char ..._Digits> constexpr chrono::nanoseconds 
# 966
operator ""ns() 
# 967
{ return __check_overflow< chrono::nanoseconds, _Digits...> (); } 
# 970
}
# 971
}
# 973
namespace chrono { 
# 977
using namespace literals::chrono_literals;
# 980
}
# 985
}
# 59 "/usr/include/c++/7/bits/stl_raw_storage_iter.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
template< class _OutputIterator, class _Tp> 
# 68
class raw_storage_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 72
protected: _OutputIterator _M_iter; 
# 76
public: explicit raw_storage_iterator(_OutputIterator __x) : _M_iter(__x) 
# 77
{ } 
# 80
raw_storage_iterator &operator*() { return *this; } 
# 83
raw_storage_iterator &operator=(const _Tp &__element) 
# 84
{ 
# 85
std::_Construct(std::__addressof(*(_M_iter)), __element); 
# 86
return *this; 
# 87
} 
# 93
raw_storage_iterator &operator=(_Tp &&__element) 
# 94
{ 
# 95
std::_Construct(std::__addressof(*(_M_iter)), std::move(__element)); 
# 96
return *this; 
# 97
} 
# 101
raw_storage_iterator &operator++() 
# 102
{ 
# 103
++(_M_iter); 
# 104
return *this; 
# 105
} 
# 108
raw_storage_iterator operator++(int) 
# 109
{ 
# 110
raw_storage_iterator __tmp = *this; 
# 111
++(_M_iter); 
# 112
return __tmp; 
# 113
} 
# 117
_OutputIterator base() const { return _M_iter; } 
# 118
}; 
# 121
}
# 40 "/usr/include/c++/7/ext/concurrence.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
enum _Lock_policy { _S_single, _S_mutex, _S_atomic}; 
# 53
static const _Lock_policy __default_lock_policy = _S_atomic; 
# 67 "/usr/include/c++/7/ext/concurrence.h" 3
class __concurrence_lock_error : public std::exception { 
# 71
public: virtual const char *what() const throw() 
# 72
{ return "__gnu_cxx::__concurrence_lock_error"; } 
# 73
}; 
# 75
class __concurrence_unlock_error : public std::exception { 
# 79
public: virtual const char *what() const throw() 
# 80
{ return "__gnu_cxx::__concurrence_unlock_error"; } 
# 81
}; 
# 83
class __concurrence_broadcast_error : public std::exception { 
# 87
public: virtual const char *what() const throw() 
# 88
{ return "__gnu_cxx::__concurrence_broadcast_error"; } 
# 89
}; 
# 91
class __concurrence_wait_error : public std::exception { 
# 95
public: virtual const char *what() const throw() 
# 96
{ return "__gnu_cxx::__concurrence_wait_error"; } 
# 97
}; 
# 101
inline void __throw_concurrence_lock_error() 
# 102
{ throw __concurrence_lock_error(); } 
# 105
inline void __throw_concurrence_unlock_error() 
# 106
{ throw __concurrence_unlock_error(); } 
# 110
inline void __throw_concurrence_broadcast_error() 
# 111
{ throw __concurrence_broadcast_error(); } 
# 114
inline void __throw_concurrence_wait_error() 
# 115
{ throw __concurrence_wait_error(); } 
# 118
class __mutex { 
# 122
__gthread_mutex_t _M_mutex = {{0, (0), 0, (0), 0, (0), (0), {(0), (0)}}}; 
# 127
__mutex(const __mutex &); 
# 128
__mutex &operator=(const __mutex &); 
# 131
public: __mutex() 
# 132
{ 
# 137
} 
# 147 "/usr/include/c++/7/ext/concurrence.h" 3
void lock() 
# 148
{ 
# 150
if (__gthread_active_p()) 
# 151
{ 
# 152
if (__gthread_mutex_lock(&(_M_mutex)) != 0) { 
# 153
__throw_concurrence_lock_error(); }  
# 154
}  
# 156
} 
# 158
void unlock() 
# 159
{ 
# 161
if (__gthread_active_p()) 
# 162
{ 
# 163
if (__gthread_mutex_unlock(&(_M_mutex)) != 0) { 
# 164
__throw_concurrence_unlock_error(); }  
# 165
}  
# 167
} 
# 169
__gthread_mutex_t *gthread_mutex() 
# 170
{ return &(_M_mutex); } 
# 171
}; 
# 173
class __recursive_mutex { 
# 177
__gthread_recursive_mutex_t _M_mutex = {{0, (0), 0, (0), (PTHREAD_MUTEX_RECURSIVE_NP), (0), (0), {(0), (0)}}}; 
# 182
__recursive_mutex(const __recursive_mutex &); 
# 183
__recursive_mutex &operator=(const __recursive_mutex &); 
# 186
public: __recursive_mutex() 
# 187
{ 
# 192
} 
# 202 "/usr/include/c++/7/ext/concurrence.h" 3
void lock() 
# 203
{ 
# 205
if (__gthread_active_p()) 
# 206
{ 
# 207
if (__gthread_recursive_mutex_lock(&(_M_mutex)) != 0) { 
# 208
__throw_concurrence_lock_error(); }  
# 209
}  
# 211
} 
# 213
void unlock() 
# 214
{ 
# 216
if (__gthread_active_p()) 
# 217
{ 
# 218
if (__gthread_recursive_mutex_unlock(&(_M_mutex)) != 0) { 
# 219
__throw_concurrence_unlock_error(); }  
# 220
}  
# 222
} 
# 224
__gthread_recursive_mutex_t *gthread_recursive_mutex() 
# 225
{ return &(_M_mutex); } 
# 226
}; 
# 231
class __scoped_lock { 
# 234
public: typedef __mutex __mutex_type; 
# 237
private: __mutex_type &_M_device; 
# 239
__scoped_lock(const __scoped_lock &); 
# 240
__scoped_lock &operator=(const __scoped_lock &); 
# 243
public: explicit __scoped_lock(__mutex_type &__name) : _M_device(__name) 
# 244
{ (_M_device).lock(); } 
# 246
~__scoped_lock() throw() 
# 247
{ (_M_device).unlock(); } 
# 248
}; 
# 251
class __cond { 
# 255
__gthread_cond_t _M_cond = {{{(0)}, {(0)}, {(0), (0)}, {(0), (0)}, (0), (0), {(0), (0)}}}; 
# 260
__cond(const __cond &); 
# 261
__cond &operator=(const __cond &); 
# 264
public: __cond() 
# 265
{ 
# 270
} 
# 280 "/usr/include/c++/7/ext/concurrence.h" 3
void broadcast() 
# 281
{ 
# 283
if (__gthread_active_p()) 
# 284
{ 
# 285
if (__gthread_cond_broadcast(&(_M_cond)) != 0) { 
# 286
__throw_concurrence_broadcast_error(); }  
# 287
}  
# 289
} 
# 291
void wait(__mutex *mutex) 
# 292
{ 
# 294
{ 
# 295
if (__gthread_cond_wait(&(_M_cond), mutex->gthread_mutex()) != 0) { 
# 296
__throw_concurrence_wait_error(); }  
# 297
} 
# 299
} 
# 301
void wait_recursive(__recursive_mutex *mutex) 
# 302
{ 
# 304
{ 
# 305
if (__gthread_cond_wait_recursive(&(_M_cond), mutex->gthread_recursive_mutex()) != 0) { 
# 308
__throw_concurrence_wait_error(); }  
# 309
} 
# 311
} 
# 312
}; 
# 316
}
# 41 "/usr/include/c++/7/bits/unique_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< class > class auto_ptr; 
# 55
template< class _Tp> 
# 56
struct default_delete { 
# 59
constexpr default_delete() noexcept = default;
# 66
template< class _Up, class  = typename enable_if< is_convertible< _Up *, _Tp *> ::value> ::type> 
# 68
default_delete(const default_delete< _Up>  &) noexcept { } 
# 72
void operator()(_Tp *__ptr) const 
# 73
{ 
# 74
static_assert((!is_void< _Tp> ::value), "can\'t delete pointer to incomplete type");
# 76
static_assert((sizeof(_Tp) > (0)), "can\'t delete pointer to incomplete type");
# 78
delete __ptr; 
# 79
} 
# 80
}; 
# 85
template< class _Tp> 
# 86
struct default_delete< _Tp []>  { 
# 90
constexpr default_delete() noexcept = default;
# 101 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class  = typename enable_if< is_convertible< _Up (*)[], _Tp (*)[]> ::value> ::type> 
# 103
default_delete(const std::default_delete< _Up []>  &) noexcept { } 
# 106
template< class _Up> typename enable_if< is_convertible< _Up (*)[], _Tp (*)[]> ::value> ::type 
# 108
operator()(_Up *__ptr) const 
# 109
{ 
# 110
static_assert((sizeof(_Tp) > (0)), "can\'t delete pointer to incomplete type");
# 112
delete [] __ptr; 
# 113
} 
# 114
}; 
# 116
template< class _Tp, class _Dp> 
# 117
class __uniq_ptr_impl { 
# 119
template< class _Up, class _Ep, class  = void> 
# 120
struct _Ptr { 
# 122
using type = _Up *; 
# 123
}; 
# 125
template< class _Up, class _Ep> 
# 127
struct _Ptr< _Up, _Ep, __void_t< typename remove_reference< _Ep> ::type::pointer> >  { 
# 129
using type = typename remove_reference< _Ep> ::type::pointer; 
# 130
}; 
# 133
public: using _DeleterConstraint = enable_if< __and_< __not_< is_pointer< _Dp> > , is_default_constructible< _Dp> > ::value> ; 
# 137
using pointer = typename _Ptr< _Tp, _Dp> ::type; 
# 139
__uniq_ptr_impl() = default;
# 140
__uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; } 
# 142
template< class _Del> 
# 143
__uniq_ptr_impl(pointer __p, _Del &&__d) : _M_t(__p, std::forward< _Del> (__d)) 
# 144
{ } 
# 146
pointer &_M_ptr() { return std::get< 0> (_M_t); } 
# 147
pointer _M_ptr() const { return std::get< 0> (_M_t); } 
# 148
_Dp &_M_deleter() { return std::get< 1> (_M_t); } 
# 149
const _Dp &_M_deleter() const { return std::get< 1> (_M_t); } 
# 152
private: tuple< pointer, _Dp>  _M_t; 
# 153
}; 
# 156
template< class _Tp, class _Dp = default_delete< _Tp> > 
# 157
class unique_ptr { 
# 159
template< class _Up> using _DeleterConstraint = typename __uniq_ptr_impl< _Tp, _Up> ::_DeleterConstraint::type; 
# 163
__uniq_ptr_impl< _Tp, _Dp>  _M_t; 
# 166
public: using pointer = typename __uniq_ptr_impl< _Tp, _Dp> ::pointer; 
# 167
using element_type = _Tp; 
# 168
using deleter_type = _Dp; 
# 172
template< class _Up, class _Ep> using __safe_conversion_up = __and_< is_convertible< typename unique_ptr< _Up, _Ep> ::pointer, pointer> , __not_< is_array< _Up> > > ; 
# 181
template< class _Up = _Dp, class 
# 182
 = _DeleterConstraint< _Up> > constexpr 
# 183
unique_ptr() noexcept : _M_t() 
# 185
{ } 
# 193
template< class _Up = _Dp, class 
# 194
 = _DeleterConstraint< _Up> > explicit 
# 196
unique_ptr(pointer __p) noexcept : _M_t(__p) 
# 198
{ } 
# 207 "/usr/include/c++/7/bits/unique_ptr.h" 3
unique_ptr(pointer __p, typename conditional< is_reference< deleter_type> ::value, deleter_type, const deleter_type &> ::type 
# 209
__d) noexcept : _M_t(__p, __d) 
# 210
{ } 
# 219 "/usr/include/c++/7/bits/unique_ptr.h" 3
unique_ptr(pointer __p, typename remove_reference< deleter_type> ::type &&
# 220
__d) noexcept : _M_t(std::move(__p), std::move(__d)) 
# 222
{ static_assert((!std::template is_reference< deleter_type> ::value), "rvalue deleter bound to reference");
# 223
} 
# 226
template< class _Up = _Dp, class 
# 227
 = _DeleterConstraint< _Up> > constexpr 
# 228
unique_ptr(nullptr_t) noexcept : _M_t() { } 
# 233
unique_ptr(unique_ptr &&__u) noexcept : _M_t(__u.release(), std::forward< deleter_type> (__u.get_deleter())) 
# 234
{ } 
# 242
template< class _Up, class _Ep, class  = _Require< __safe_conversion_up< _Up, _Ep> , typename conditional< is_reference< deleter_type> ::value, is_same< _Ep, _Dp> , is_convertible< _Ep, _Dp> > ::type> > 
# 247
unique_ptr(unique_ptr< _Up, _Ep>  &&__u) noexcept : _M_t(__u.release(), std::forward< _Ep> (__u.get_deleter())) 
# 249
{ } 
# 253
template< class _Up, class  = _Require< is_convertible< _Up *, _Tp *> , is_same< _Dp, default_delete< _Tp> > > > inline unique_ptr(auto_ptr< _Up>  && __u) noexcept; 
# 259
~unique_ptr() noexcept 
# 260
{ 
# 261
auto &__ptr = (_M_t)._M_ptr(); 
# 262
if (__ptr != nullptr) { 
# 263
get_deleter()(__ptr); }  
# 264
__ptr = pointer(); 
# 265
} 
# 276 "/usr/include/c++/7/bits/unique_ptr.h" 3
unique_ptr &operator=(unique_ptr &&__u) noexcept 
# 277
{ 
# 278
reset(__u.release()); 
# 279
get_deleter() = std::forward< deleter_type> (__u.get_deleter()); 
# 280
return *this; 
# 281
} 
# 290 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class _Ep> typename enable_if< __and_< __safe_conversion_up< _Up, _Ep> , is_assignable< deleter_type &, _Ep &&> > ::value, unique_ptr &> ::type 
# 296
operator=(unique_ptr< _Up, _Ep>  &&__u) noexcept 
# 297
{ 
# 298
reset(__u.release()); 
# 299
get_deleter() = std::forward< _Ep> (__u.get_deleter()); 
# 300
return *this; 
# 301
} 
# 305
unique_ptr &operator=(nullptr_t) noexcept 
# 306
{ 
# 307
reset(); 
# 308
return *this; 
# 309
} 
# 315
typename add_lvalue_reference< element_type> ::type operator*() const 
# 316
{ 
# 317
; 
# 318
return *get(); 
# 319
} 
# 323
pointer operator->() const noexcept 
# 324
{ 
# 325
; 
# 326
return get(); 
# 327
} 
# 331
pointer get() const noexcept 
# 332
{ return (_M_t)._M_ptr(); } 
# 336
deleter_type &get_deleter() noexcept 
# 337
{ return (_M_t)._M_deleter(); } 
# 341
const deleter_type &get_deleter() const noexcept 
# 342
{ return (_M_t)._M_deleter(); } 
# 345
explicit operator bool() const noexcept 
# 346
{ return (get() == pointer()) ? false : true; } 
# 352
pointer release() noexcept 
# 353
{ 
# 354
pointer __p = get(); 
# 355
(_M_t)._M_ptr() = pointer(); 
# 356
return __p; 
# 357
} 
# 366
void reset(pointer __p = pointer()) noexcept 
# 367
{ 
# 368
using std::swap;
# 369
swap((_M_t)._M_ptr(), __p); 
# 370
if (__p != pointer()) { 
# 371
get_deleter()(__p); }  
# 372
} 
# 376
void swap(unique_ptr &__u) noexcept 
# 377
{ 
# 378
using std::swap;
# 379
swap(_M_t, __u._M_t); 
# 380
} 
# 383
unique_ptr(const unique_ptr &) = delete;
# 384
unique_ptr &operator=(const unique_ptr &) = delete;
# 385
}; 
# 391
template< class _Tp, class _Dp> 
# 392
class unique_ptr< _Tp [], _Dp>  { 
# 394
template< class _Up> using _DeleterConstraint = typename __uniq_ptr_impl< _Tp, _Up> ::_DeleterConstraint::type; 
# 398
__uniq_ptr_impl< _Tp, _Dp>  _M_t; 
# 400
template< class _Up> using __remove_cv = typename remove_cv< _Up> ::type; 
# 404
template< class _Up> using __is_derived_Tp = __and_< is_base_of< _Tp, _Up> , __not_< is_same< __remove_cv< _Tp> , __remove_cv< _Up> > > > ; 
# 410
public: using pointer = typename __uniq_ptr_impl< _Tp, _Dp> ::pointer; 
# 411
using element_type = _Tp; 
# 412
using deleter_type = _Dp; 
# 416
template< class _Up, class _Ep, class 
# 417
_UPtr = std::unique_ptr< _Up, _Ep> , class 
# 418
_UP_pointer = typename _UPtr::pointer, class 
# 419
_UP_element_type = typename _UPtr::element_type> using __safe_conversion_up = __and_< is_array< _Up> , is_same< pointer, element_type *> , is_same< _UP_pointer, _UP_element_type *> , is_convertible< _UP_element_type (*)[], element_type (*)[]> > ; 
# 428
template< class _Up> using __safe_conversion_raw = __and_< __or_< __or_< is_same< _Up, pointer> , is_same< _Up, nullptr_t> > , __and_< is_pointer< _Up> , is_same< pointer, element_type *> , is_convertible< typename remove_pointer< _Up> ::type (*)[], element_type (*)[]> > > > ; 
# 444
template< class _Up = _Dp, class 
# 445
 = _DeleterConstraint< _Up> > constexpr 
# 446
unique_ptr() noexcept : _M_t() 
# 448
{ } 
# 457 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class 
# 458
_Vp = _Dp, class 
# 459
 = _DeleterConstraint< _Vp> , class 
# 460
 = typename enable_if< __safe_conversion_raw< _Up> ::value, bool> ::type> explicit 
# 463
unique_ptr(_Up __p) noexcept : _M_t(__p) 
# 465
{ } 
# 475 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class 
# 476
 = typename enable_if< __safe_conversion_raw< _Up> ::value, bool> ::type> 
# 478
unique_ptr(_Up __p, typename conditional< is_reference< deleter_type> ::value, deleter_type, const deleter_type &> ::type 
# 480
__d) noexcept : _M_t(__p, __d) 
# 481
{ } 
# 491 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class 
# 492
 = typename enable_if< __safe_conversion_raw< _Up> ::value, bool> ::type> 
# 494
unique_ptr(_Up __p, typename remove_reference< deleter_type> ::type &&
# 495
__d) noexcept : _M_t(std::move(__p), std::move(__d)) 
# 497
{ static_assert((!is_reference< deleter_type> ::value), "rvalue deleter bound to reference");
# 498
} 
# 501
unique_ptr(std::unique_ptr< _Tp [], _Dp>  &&__u) noexcept : _M_t(__u.release(), std::forward< deleter_type> (__u.get_deleter())) 
# 502
{ } 
# 505
template< class _Up = _Dp, class 
# 506
 = _DeleterConstraint< _Up> > constexpr 
# 507
unique_ptr(nullptr_t) noexcept : _M_t() { } 
# 509
template< class _Up, class _Ep, class  = _Require< __safe_conversion_up< _Up, _Ep> , typename conditional< is_reference< deleter_type> ::value, is_same< _Ep, _Dp> , is_convertible< _Ep, _Dp> > ::type> > 
# 514
unique_ptr(std::unique_ptr< _Up, _Ep>  &&__u) noexcept : _M_t(__u.release(), std::forward< _Ep> (__u.get_deleter())) 
# 516
{ } 
# 519
~unique_ptr() 
# 520
{ 
# 521
auto &__ptr = (_M_t)._M_ptr(); 
# 522
if (__ptr != nullptr) { 
# 523
get_deleter()(__ptr); }  
# 524
__ptr = pointer(); 
# 525
} 
# 536 "/usr/include/c++/7/bits/unique_ptr.h" 3
std::unique_ptr< _Tp [], _Dp>  &operator=(std::unique_ptr< _Tp [], _Dp>  &&__u) noexcept 
# 537
{ 
# 538
reset(__u.release()); 
# 539
get_deleter() = std::forward< deleter_type> (__u.get_deleter()); 
# 540
return *this; 
# 541
} 
# 550 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Up, class _Ep> typename enable_if< __and_< __safe_conversion_up< _Up, _Ep> , is_assignable< deleter_type &, _Ep &&> > ::value, std::unique_ptr< _Tp [], _Dp>  &> ::type 
# 556
operator=(std::unique_ptr< _Up, _Ep>  &&__u) noexcept 
# 557
{ 
# 558
reset(__u.release()); 
# 559
get_deleter() = std::forward< _Ep> (__u.get_deleter()); 
# 560
return *this; 
# 561
} 
# 565
std::unique_ptr< _Tp [], _Dp>  &operator=(nullptr_t) noexcept 
# 566
{ 
# 567
reset(); 
# 568
return *this; 
# 569
} 
# 575
typename add_lvalue_reference< element_type> ::type operator[](size_t __i) const 
# 576
{ 
# 577
; 
# 578
return get()[__i]; 
# 579
} 
# 583
pointer get() const noexcept 
# 584
{ return (_M_t)._M_ptr(); } 
# 588
deleter_type &get_deleter() noexcept 
# 589
{ return (_M_t)._M_deleter(); } 
# 593
const deleter_type &get_deleter() const noexcept 
# 594
{ return (_M_t)._M_deleter(); } 
# 597
explicit operator bool() const noexcept 
# 598
{ return (get() == pointer()) ? false : true; } 
# 604
pointer release() noexcept 
# 605
{ 
# 606
pointer __p = get(); 
# 607
(_M_t)._M_ptr() = pointer(); 
# 608
return __p; 
# 609
} 
# 617
template< class _Up, class 
# 618
 = _Require< __or_< is_same< _Up, pointer> , __and_< is_same< pointer, element_type *> , is_pointer< _Up> , is_convertible< typename remove_pointer< _Up> ::type (*)[], element_type (*)[]> > > > > void 
# 630
reset(_Up __p) noexcept 
# 631
{ 
# 632
pointer __ptr = __p; 
# 633
using std::swap;
# 634
swap((_M_t)._M_ptr(), __ptr); 
# 635
if (__ptr != nullptr) { 
# 636
get_deleter()(__ptr); }  
# 637
} 
# 639
void reset(nullptr_t = nullptr) noexcept 
# 640
{ 
# 641
reset(pointer()); 
# 642
} 
# 646
void swap(std::unique_ptr< _Tp [], _Dp>  &__u) noexcept 
# 647
{ 
# 648
using std::swap;
# 649
swap(_M_t, __u._M_t); 
# 650
} 
# 653
unique_ptr(const std::unique_ptr< _Tp [], _Dp>  &) = delete;
# 654
std::unique_ptr< _Tp [], _Dp>  &operator=(const std::unique_ptr< _Tp [], _Dp>  &) = delete;
# 655
}; 
# 657
template< class _Tp, class _Dp> inline void 
# 665
swap(unique_ptr< _Tp, _Dp>  &__x, unique_ptr< _Tp, _Dp>  &
# 666
__y) noexcept 
# 667
{ __x.swap(__y); } 
# 676 "/usr/include/c++/7/bits/unique_ptr.h" 3
template< class _Tp, class _Dp, class 
# 677
_Up, class _Ep> inline bool 
# 679
operator==(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 680
__y) 
# 681
{ return __x.get() == __y.get(); } 
# 683
template< class _Tp, class _Dp> inline bool 
# 685
operator==(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) noexcept 
# 686
{ return !__x; } 
# 688
template< class _Tp, class _Dp> inline bool 
# 690
operator==(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) noexcept 
# 691
{ return !__x; } 
# 693
template< class _Tp, class _Dp, class 
# 694
_Up, class _Ep> inline bool 
# 696
operator!=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 697
__y) 
# 698
{ return __x.get() != __y.get(); } 
# 700
template< class _Tp, class _Dp> inline bool 
# 702
operator!=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) noexcept 
# 703
{ return (bool)__x; } 
# 705
template< class _Tp, class _Dp> inline bool 
# 707
operator!=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) noexcept 
# 708
{ return (bool)__x; } 
# 710
template< class _Tp, class _Dp, class 
# 711
_Up, class _Ep> inline bool 
# 713
operator<(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 714
__y) 
# 715
{ 
# 718
typedef typename common_type< typename unique_ptr< _Tp, _Dp> ::pointer, typename unique_ptr< _Up, _Ep> ::pointer> ::type _CT; 
# 719
return less< typename common_type< typename unique_ptr< _Tp, _Dp> ::pointer, typename unique_ptr< _Up, _Ep> ::pointer> ::type> ()(__x.get(), __y.get()); 
# 720
} 
# 722
template< class _Tp, class _Dp> inline bool 
# 724
operator<(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 725
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(__x.get(), nullptr); 
# 726
} 
# 728
template< class _Tp, class _Dp> inline bool 
# 730
operator<(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 731
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(nullptr, __x.get()); 
# 732
} 
# 734
template< class _Tp, class _Dp, class 
# 735
_Up, class _Ep> inline bool 
# 737
operator<=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 738
__y) 
# 739
{ return !(__y < __x); } 
# 741
template< class _Tp, class _Dp> inline bool 
# 743
operator<=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 744
{ return !(nullptr < __x); } 
# 746
template< class _Tp, class _Dp> inline bool 
# 748
operator<=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 749
{ return !(__x < nullptr); } 
# 751
template< class _Tp, class _Dp, class 
# 752
_Up, class _Ep> inline bool 
# 754
operator>(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 755
__y) 
# 756
{ return (__y < __x); } 
# 758
template< class _Tp, class _Dp> inline bool 
# 760
operator>(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 761
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(nullptr, __x.get()); 
# 762
} 
# 764
template< class _Tp, class _Dp> inline bool 
# 766
operator>(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 767
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(__x.get(), nullptr); 
# 768
} 
# 770
template< class _Tp, class _Dp, class 
# 771
_Up, class _Ep> inline bool 
# 773
operator>=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 774
__y) 
# 775
{ return !(__x < __y); } 
# 777
template< class _Tp, class _Dp> inline bool 
# 779
operator>=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 780
{ return !(__x < nullptr); } 
# 782
template< class _Tp, class _Dp> inline bool 
# 784
operator>=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 785
{ return !(nullptr < __x); } 
# 788
template< class _Tp, class _Dp> 
# 789
struct hash< unique_ptr< _Tp, _Dp> >  : public __hash_base< unsigned long, unique_ptr< _Tp, _Dp> > , private __poison_hash< typename unique_ptr< _Tp, _Dp> ::pointer>  { 
# 794
std::size_t operator()(const unique_ptr< _Tp, _Dp>  &__u) const noexcept 
# 795
{ 
# 796
typedef unique_ptr< _Tp, _Dp>  _UP; 
# 797
return std::hash< typename unique_ptr< _Tp, _Dp> ::pointer> ()(__u.get()); 
# 798
} 
# 799
}; 
# 805
template< class _Tp> 
# 806
struct _MakeUniq { 
# 807
typedef unique_ptr< _Tp>  __single_object; }; 
# 809
template< class _Tp> 
# 810
struct _MakeUniq< _Tp []>  { 
# 811
typedef unique_ptr< _Tp []>  __array; }; 
# 813
template< class _Tp, size_t _Bound> 
# 814
struct _MakeUniq< _Tp [_Bound]>  { 
# 815
struct __invalid_type { }; }; 
# 818
template< class _Tp, class ..._Args> inline typename _MakeUniq< _Tp> ::__single_object 
# 820
make_unique(_Args &&...__args) 
# 821
{ return ((unique_ptr< _Tp> )(new _Tp(std::forward< _Args> (__args)...))); } 
# 824
template< class _Tp> inline typename _MakeUniq< _Tp> ::__array 
# 826
make_unique(size_t __num) 
# 827
{ return ((unique_ptr< _Tp> )(new remove_extent_t< _Tp>  [__num]())); } 
# 830
template < typename _Tp, typename ... _Args >
    inline typename _MakeUniq < _Tp > :: __invalid_type
    make_unique ( _Args && ... ) = delete;
# 838
}
# 40 "/usr/include/c++/7/bits/allocated_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Alloc> 
# 46
struct __allocated_ptr { 
# 48
using pointer = typename allocator_traits< _Alloc> ::pointer; 
# 49
using value_type = typename allocator_traits< _Alloc> ::value_type; 
# 52
__allocated_ptr(_Alloc &__a, pointer __ptr) noexcept : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr) 
# 54
{ } 
# 57
template< class _Ptr, class 
# 58
_Req = _Require< is_same< _Ptr, value_type *> > > 
# 59
__allocated_ptr(_Alloc &__a, _Ptr __ptr) : _M_alloc(std::__addressof(__a)), _M_ptr(pointer_traits< pointer> ::pointer_to(*__ptr)) 
# 62
{ } 
# 65
__allocated_ptr(__allocated_ptr &&__gd) noexcept : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr) 
# 67
{ (__gd._M_ptr) = nullptr; } 
# 70
~__allocated_ptr() 
# 71
{ 
# 72
if ((_M_ptr) != nullptr) { 
# 73
std::template allocator_traits< _Alloc> ::deallocate(*(_M_alloc), _M_ptr, 1); }  
# 74
} 
# 78
__allocated_ptr &operator=(nullptr_t) noexcept 
# 79
{ 
# 80
(_M_ptr) = nullptr; 
# 81
return *this; 
# 82
} 
# 85
value_type *get() { return _S_raw_ptr(_M_ptr); } 
# 88
private: static value_type *_S_raw_ptr(value_type *__ptr) { return __ptr; } 
# 90
template< class _Ptr> static auto 
# 92
_S_raw_ptr(_Ptr __ptr)->__decltype(((_S_raw_ptr)(__ptr.operator->()))) 
# 93
{ return _S_raw_ptr(__ptr.operator->()); } 
# 95
_Alloc *_M_alloc; 
# 96
pointer _M_ptr; 
# 97
}; 
# 100
template< class _Alloc> __allocated_ptr< _Alloc>  
# 102
__allocate_guarded(_Alloc &__a) 
# 103
{ 
# 104
return {__a, std::template allocator_traits< _Alloc> ::allocate(__a, 1)}; 
# 105
} 
# 108
}
# 40 "/usr/include/c++/7/ext/aligned_buffer.h" 3
namespace __gnu_cxx { 
# 46
template< class _Tp> 
# 47
struct __aligned_membuf { 
# 52
struct _Tp2 { _Tp _M_t; }; 
# 54
alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)]; 
# 56
__aligned_membuf() = default;
# 59
__aligned_membuf(std::nullptr_t) { } 
# 62
void *_M_addr() noexcept 
# 63
{ return static_cast< void *>(&(_M_storage)); } 
# 66
const void *_M_addr() const noexcept 
# 67
{ return static_cast< const void *>(&(_M_storage)); } 
# 70
_Tp *_M_ptr() noexcept 
# 71
{ return static_cast< _Tp *>(_M_addr()); } 
# 74
const _Tp *_M_ptr() const noexcept 
# 75
{ return static_cast< const _Tp *>(_M_addr()); } 
# 76
}; 
# 83
template< class _Tp> 
# 84
struct __aligned_buffer : public std::aligned_storage< sizeof(_Tp), std::alignment_of< _Tp> ::value>  { 
# 89
typename std::aligned_storage< sizeof(_Tp), std::alignment_of< _Tp> ::value> ::type _M_storage; 
# 91
__aligned_buffer() = default;
# 94
__aligned_buffer(std::nullptr_t) { } 
# 97
void *_M_addr() noexcept 
# 98
{ 
# 99
return static_cast< void *>(&(_M_storage)); 
# 100
} 
# 103
const void *_M_addr() const noexcept 
# 104
{ 
# 105
return static_cast< const void *>(&(_M_storage)); 
# 106
} 
# 109
_Tp *_M_ptr() noexcept 
# 110
{ return static_cast< _Tp *>(_M_addr()); } 
# 113
const _Tp *_M_ptr() const noexcept 
# 114
{ return static_cast< const _Tp *>(_M_addr()); } 
# 115
}; 
# 117
}
# 60 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 65
template< class > class auto_ptr; 
# 72
class bad_weak_ptr : public exception { 
# 75
public: virtual const char *what() const noexcept; 
# 77
virtual ~bad_weak_ptr() noexcept; 
# 78
}; 
# 82
inline void __throw_bad_weak_ptr() 
# 83
{ throw bad_weak_ptr(); } 
# 85
using __gnu_cxx::_Lock_policy;
# 86
using __gnu_cxx::__default_lock_policy;
# 87
using __gnu_cxx::_S_single;
# 88
using __gnu_cxx::_S_mutex;
# 89
using __gnu_cxx::_S_atomic;
# 92
template< __gnu_cxx::_Lock_policy _Lp> 
# 93
class _Mutex_base { 
# 97
protected: enum { _S_need_barriers}; 
# 98
}; 
# 101
template<> class _Mutex_base< __gnu_cxx::_S_mutex>  : public __gnu_cxx::__mutex { 
# 108
protected: enum { _S_need_barriers = 1}; 
# 109
}; 
# 111
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> 
# 112
class _Sp_counted_base : public _Mutex_base< _Lp>  { 
# 116
public: _Sp_counted_base() noexcept : _M_use_count(1), _M_weak_count(1) 
# 117
{ } 
# 120
virtual ~_Sp_counted_base() noexcept 
# 121
{ } 
# 126
virtual void _M_dispose() noexcept = 0; 
# 130
virtual void _M_destroy() noexcept 
# 131
{ delete this; } 
# 134
virtual void *_M_get_deleter(const std::type_info &) noexcept = 0; 
# 137
void _M_add_ref_copy() 
# 138
{ __gnu_cxx::__atomic_add_dispatch(&(_M_use_count), 1); } 
# 141
void _M_add_ref_lock(); 
# 144
bool _M_add_ref_lock_nothrow(); 
# 147
void _M_release() noexcept 
# 148
{ 
# 150
; 
# 151
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), -1) == 1) 
# 152
{ 
# 153
; 
# 154
_M_dispose(); 
# 159
if (_Mutex_base< _Lp> ::_S_need_barriers) 
# 160
{ 
# 161
__atomic_thread_fence(4); 
# 162
}  
# 165
; 
# 166
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_weak_count), -1) == 1) 
# 168
{ 
# 169
; 
# 170
_M_destroy(); 
# 171
}  
# 172
}  
# 173
} 
# 176
void _M_weak_add_ref() noexcept 
# 177
{ __gnu_cxx::__atomic_add_dispatch(&(_M_weak_count), 1); } 
# 180
void _M_weak_release() noexcept 
# 181
{ 
# 183
; 
# 184
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_weak_count), -1) == 1) 
# 185
{ 
# 186
; 
# 187
if (_Mutex_base< _Lp> ::_S_need_barriers) 
# 188
{ 
# 191
__atomic_thread_fence(4); 
# 192
}  
# 193
_M_destroy(); 
# 194
}  
# 195
} 
# 198
long _M_get_use_count() const noexcept 
# 199
{ 
# 202
return __atomic_load_n(&(_M_use_count), 0); 
# 203
} 
# 206
private: _Sp_counted_base(const _Sp_counted_base &) = delete;
# 207
_Sp_counted_base &operator=(const _Sp_counted_base &) = delete;
# 209
::_Atomic_word _M_use_count; 
# 210
::_Atomic_word _M_weak_count; 
# 211
}; 
# 216
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_lock() 
# 217
{ 
# 218
if ((_M_use_count) == 0) { 
# 219
__throw_bad_weak_ptr(); }  
# 220
++(_M_use_count); 
# 221
} 
# 226
template<> inline void _Sp_counted_base< __gnu_cxx::_S_mutex> ::_M_add_ref_lock() 
# 227
{ 
# 228
__gnu_cxx::__scoped_lock sentry(*this); 
# 229
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), 1) == 0) 
# 230
{ 
# 231
(_M_use_count) = 0; 
# 232
__throw_bad_weak_ptr(); 
# 233
}  
# 234
} 
# 239
template<> inline void _Sp_counted_base< __gnu_cxx::_S_atomic> ::_M_add_ref_lock() 
# 240
{ 
# 242
_Atomic_word __count = this->_M_get_use_count(); 
# 243
do 
# 244
{ 
# 245
if (__count == 0) { 
# 246
__throw_bad_weak_ptr(); }  
# 249
} 
# 250
while (!__atomic_compare_exchange_n(&(_M_use_count), &__count, __count + 1, true, 4, 0)); 
# 253
} 
# 258
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_lock_nothrow() 
# 259
{ 
# 260
if ((_M_use_count) == 0) { 
# 261
return false; }  
# 262
++(_M_use_count); 
# 263
return true; 
# 264
} 
# 269
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_mutex> ::_M_add_ref_lock_nothrow() 
# 270
{ 
# 271
__gnu_cxx::__scoped_lock sentry(*this); 
# 272
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), 1) == 0) 
# 273
{ 
# 274
(_M_use_count) = 0; 
# 275
return false; 
# 276
}  
# 277
return true; 
# 278
} 
# 283
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_atomic> ::_M_add_ref_lock_nothrow() 
# 284
{ 
# 286
_Atomic_word __count = this->_M_get_use_count(); 
# 287
do 
# 288
{ 
# 289
if (__count == 0) { 
# 290
return false; }  
# 293
} 
# 294
while (!__atomic_compare_exchange_n(&(_M_use_count), &__count, __count + 1, true, 4, 0)); 
# 297
return true; 
# 298
} 
# 302
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_copy() 
# 303
{ ++(_M_use_count); } 
# 307
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_release() noexcept 
# 308
{ 
# 309
if ((--(_M_use_count)) == 0) 
# 310
{ 
# 311
this->_M_dispose(); 
# 312
if ((--(_M_weak_count)) == 0) { 
# 313
this->_M_destroy(); }  
# 314
}  
# 315
} 
# 319
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_weak_add_ref() noexcept 
# 320
{ ++(_M_weak_count); } 
# 324
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_weak_release() noexcept 
# 325
{ 
# 326
if ((--(_M_weak_count)) == 0) { 
# 327
this->_M_destroy(); }  
# 328
} 
# 332
template<> inline long _Sp_counted_base< __gnu_cxx::_S_single> ::_M_get_use_count() const noexcept 
# 333
{ return _M_use_count; } 
# 337
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __shared_ptr; 
# 340
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __weak_ptr; 
# 343
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __enable_shared_from_this; 
# 346
template< class _Tp> class shared_ptr; 
# 349
template< class _Tp> class weak_ptr; 
# 352
template< class _Tp> struct owner_less; 
# 355
template< class _Tp> class enable_shared_from_this; 
# 358
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __weak_count; 
# 361
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __shared_count; 
# 366
template< class _Ptr, __gnu_cxx::_Lock_policy _Lp> 
# 367
class _Sp_counted_ptr __final : public _Sp_counted_base< _Lp>  { 
# 371
public: explicit _Sp_counted_ptr(_Ptr __p) noexcept : _M_ptr(__p) 
# 372
{ } 
# 375
virtual void _M_dispose() noexcept 
# 376
{ delete (_M_ptr); } 
# 379
virtual void _M_destroy() noexcept 
# 380
{ delete this; } 
# 383
virtual void *_M_get_deleter(const std::type_info &) noexcept 
# 384
{ return nullptr; } 
# 386
_Sp_counted_ptr(const _Sp_counted_ptr &) = delete;
# 387
_Sp_counted_ptr &operator=(const _Sp_counted_ptr &) = delete;
# 390
private: _Ptr _M_ptr; 
# 391
}; 
# 395
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_single> ::_M_dispose() noexcept { } 
# 399
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_mutex> ::_M_dispose() noexcept { } 
# 403
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_atomic> ::_M_dispose() noexcept { } 
# 405
template< int _Nm, class _Tp, bool 
# 406
__use_ebo = (!__is_final(_Tp)) && __is_empty(_Tp)> struct _Sp_ebo_helper; 
# 410
template< int _Nm, class _Tp> 
# 411
struct _Sp_ebo_helper< _Nm, _Tp, true>  : private _Tp { 
# 413
explicit _Sp_ebo_helper(const _Tp &__tp) : _Tp(__tp) { } 
# 414
explicit _Sp_ebo_helper(_Tp &&__tp) : _Tp(std::move(__tp)) { } 
# 417
static _Tp &_S_get(std::_Sp_ebo_helper< _Nm, _Tp, true>  &__eboh) { return static_cast< _Tp &>(__eboh); } 
# 418
}; 
# 421
template< int _Nm, class _Tp> 
# 422
struct _Sp_ebo_helper< _Nm, _Tp, false>  { 
# 424
explicit _Sp_ebo_helper(const _Tp &__tp) : _M_tp(__tp) { } 
# 425
explicit _Sp_ebo_helper(_Tp &&__tp) : _M_tp(std::move(__tp)) { } 
# 428
static _Tp &_S_get(std::_Sp_ebo_helper< _Nm, _Tp, false>  &__eboh) 
# 429
{ return __eboh._M_tp; } 
# 432
private: _Tp _M_tp; 
# 433
}; 
# 436
template< class _Ptr, class _Deleter, class _Alloc, __gnu_cxx::_Lock_policy _Lp> 
# 437
class _Sp_counted_deleter __final : public _Sp_counted_base< _Lp>  { 
# 439
class _Impl : private _Sp_ebo_helper< 0, _Deleter> , private _Sp_ebo_helper< 1, _Alloc>  { 
# 441
typedef _Sp_ebo_helper< 0, _Deleter>  _Del_base; 
# 442
typedef _Sp_ebo_helper< 1, _Alloc>  _Alloc_base; 
# 445
public: _Impl(_Ptr __p, _Deleter __d, const _Alloc &__a) noexcept : _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p) 
# 447
{ } 
# 449
_Deleter &_M_del() noexcept { return _Del_base::_S_get(*this); } 
# 450
_Alloc &_M_alloc() noexcept { return _Alloc_base::_S_get(*this); } 
# 452
_Ptr _M_ptr; 
# 453
}; 
# 456
public: using __allocator_type = std::__alloc_rebind< _Alloc, _Sp_counted_deleter> ; 
# 459
_Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept : _M_impl(__p, std::move(__d), _Alloc()) 
# 460
{ } 
# 463
_Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc &__a) noexcept : _M_impl(__p, std::move(__d), __a) 
# 464
{ } 
# 466
~_Sp_counted_deleter() noexcept { } 
# 469
virtual void _M_dispose() noexcept 
# 470
{ (_M_impl)._M_del()(((_M_impl)._M_ptr)); } 
# 473
virtual void _M_destroy() noexcept 
# 474
{ 
# 475
__allocator_type __a((_M_impl)._M_alloc()); 
# 476
__allocated_ptr< __allocator_type>  __guard_ptr{__a, this}; 
# 477
this->~_Sp_counted_deleter(); 
# 478
} 
# 481
virtual void *_M_get_deleter(const std::type_info &__ti) noexcept 
# 482
{ 
# 486
return (__ti == (typeid(_Deleter))) ? std::__addressof((_M_impl)._M_del()) : nullptr; 
# 492
} 
# 495
private: _Impl _M_impl; 
# 496
}; 
# 500
struct _Sp_make_shared_tag { }; 
# 502
template< class _Tp, class _Alloc, __gnu_cxx::_Lock_policy _Lp> 
# 503
class _Sp_counted_ptr_inplace __final : public _Sp_counted_base< _Lp>  { 
# 505
class _Impl : private _Sp_ebo_helper< 0, _Alloc>  { 
# 507
typedef _Sp_ebo_helper< 0, _Alloc>  _A_base; 
# 510
public: explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { } 
# 512
_Alloc &_M_alloc() noexcept { return _A_base::_S_get(*this); } 
# 514
__gnu_cxx::__aligned_buffer< _Tp>  _M_storage; 
# 515
}; 
# 518
public: using __allocator_type = std::__alloc_rebind< _Alloc, _Sp_counted_ptr_inplace> ; 
# 520
template< class ..._Args> 
# 521
_Sp_counted_ptr_inplace(_Alloc __a, _Args &&...__args) : _M_impl(__a) 
# 523
{ 
# 526
allocator_traits< _Alloc> ::construct(__a, _M_ptr(), std::forward< _Args> (__args)...); 
# 528
} 
# 530
~_Sp_counted_ptr_inplace() noexcept { } 
# 533
virtual void _M_dispose() noexcept 
# 534
{ 
# 535
allocator_traits< _Alloc> ::destroy((_M_impl)._M_alloc(), _M_ptr()); 
# 536
} 
# 540
virtual void _M_destroy() noexcept 
# 541
{ 
# 542
__allocator_type __a((_M_impl)._M_alloc()); 
# 543
__allocated_ptr< __allocator_type>  __guard_ptr{__a, this}; 
# 544
this->~_Sp_counted_ptr_inplace(); 
# 545
} 
# 549
virtual void *_M_get_deleter(const std::type_info &__ti) noexcept 
# 550
{ 
# 552
if ((__ti == (typeid(std::_Sp_make_shared_tag)))) { 
# 553
return const_cast< typename remove_cv< _Tp> ::type *>(_M_ptr()); }  
# 555
return nullptr; 
# 556
} 
# 559
private: _Tp *_M_ptr() noexcept { return ((_M_impl)._M_storage)._M_ptr(); } 
# 561
_Impl _M_impl; 
# 562
}; 
# 565
struct __sp_array_delete { 
# 567
template< class _Yp> void 
# 568
operator()(_Yp *__p) const { delete [] __p; } 
# 569
}; 
# 571
template< __gnu_cxx::_Lock_policy _Lp> 
# 572
class __shared_count { 
# 575
public: constexpr __shared_count() noexcept : _M_pi((0)) 
# 576
{ } 
# 578
template< class _Ptr> explicit 
# 580
__shared_count(_Ptr __p) : _M_pi((0)) 
# 581
{ 
# 582
try 
# 583
{ 
# 584
(_M_pi) = (new _Sp_counted_ptr< _Ptr, _Lp> (__p)); 
# 585
} 
# 586
catch (...) 
# 587
{ 
# 588
delete __p; 
# 589
throw; 
# 590
}  
# 591
} 
# 593
template< class _Ptr> 
# 594
__shared_count(_Ptr __p, false_type) : __shared_count(__p) 
# 596
{ } 
# 598
template< class _Ptr> 
# 599
__shared_count(_Ptr __p, true_type) : __shared_count(__p, __sp_array_delete{}, allocator< void> ()) 
# 601
{ } 
# 603
template< class _Ptr, class _Deleter> 
# 604
__shared_count(_Ptr __p, _Deleter __d) : __shared_count(__p, std::move(__d), allocator< void> ()) 
# 606
{ } 
# 608
template< class _Ptr, class _Deleter, class _Alloc> 
# 609
__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi((0)) 
# 610
{ 
# 611
typedef _Sp_counted_deleter< _Ptr, _Deleter, _Alloc, _Lp>  _Sp_cd_type; 
# 612
try 
# 613
{ 
# 614
typename _Sp_counted_deleter< _Ptr, _Deleter, _Alloc, _Lp> ::__allocator_type __a2(__a); 
# 615
auto __guard = std::__allocate_guarded(__a2); 
# 616
_Sp_cd_type *__mem = __guard.get(); 
# 617
::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a)); 
# 618
(_M_pi) = __mem; 
# 619
__guard = nullptr; 
# 620
} 
# 621
catch (...) 
# 622
{ 
# 623
__d(__p); 
# 624
throw; 
# 625
}  
# 626
} 
# 628
template< class _Tp, class _Alloc, class ..._Args> 
# 629
__shared_count(_Sp_make_shared_tag, _Tp *, const _Alloc &__a, _Args &&...
# 630
__args) : _M_pi((0)) 
# 632
{ 
# 633
typedef _Sp_counted_ptr_inplace< _Tp, _Alloc, _Lp>  _Sp_cp_type; 
# 634
typename _Sp_counted_ptr_inplace< _Tp, _Alloc, _Lp> ::__allocator_type __a2(__a); 
# 635
auto __guard = std::__allocate_guarded(__a2); 
# 636
_Sp_cp_type *__mem = __guard.get(); 
# 637
::new (__mem) _Sp_cp_type(std::move(__a), std::forward< _Args> (__args)...); 
# 639
(_M_pi) = __mem; 
# 640
__guard = nullptr; 
# 641
} 
# 645
template< class _Tp> inline explicit __shared_count(auto_ptr< _Tp>  && __r); 
# 651
template< class _Tp, class _Del> explicit 
# 653
__shared_count(unique_ptr< _Tp, _Del>  &&__r) : _M_pi((0)) 
# 654
{ 
# 657
if (__r.get() == nullptr) { 
# 658
return; }  
# 660
using _Ptr = typename unique_ptr< _Tp, _Del> ::pointer; 
# 661
using _Del2 = typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type; 
# 664
using _Sp_cd_type = _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> ; 
# 666
using _Alloc = allocator< _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> > ; 
# 667
using _Alloc_traits = allocator_traits< allocator< _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> > > ; 
# 668
_Alloc __a; 
# 669
_Sp_cd_type *__mem = _Alloc_traits::allocate(__a, 1); 
# 670
_Alloc_traits::construct(__a, __mem, __r.release(), __r.get_deleter()); 
# 672
(_M_pi) = __mem; 
# 673
} 
# 676
inline explicit __shared_count(const __weak_count< _Lp>  & __r); 
# 679
inline explicit __shared_count(const __weak_count< _Lp>  & __r, nothrow_t); 
# 681
~__shared_count() noexcept 
# 682
{ 
# 683
if ((_M_pi) != nullptr) { 
# 684
(_M_pi)->_M_release(); }  
# 685
} 
# 687
__shared_count(const __shared_count &__r) noexcept : _M_pi(__r._M_pi) 
# 689
{ 
# 690
if ((_M_pi) != 0) { 
# 691
(_M_pi)->_M_add_ref_copy(); }  
# 692
} 
# 695
__shared_count &operator=(const __shared_count &__r) noexcept 
# 696
{ 
# 697
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 698
if (__tmp != (_M_pi)) 
# 699
{ 
# 700
if (__tmp != 0) { 
# 701
__tmp->_M_add_ref_copy(); }  
# 702
if ((_M_pi) != 0) { 
# 703
(_M_pi)->_M_release(); }  
# 704
(_M_pi) = __tmp; 
# 705
}  
# 706
return *this; 
# 707
} 
# 710
void _M_swap(__shared_count &__r) noexcept 
# 711
{ 
# 712
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 713
(__r._M_pi) = (_M_pi); 
# 714
(_M_pi) = __tmp; 
# 715
} 
# 718
long _M_get_use_count() const noexcept 
# 719
{ return ((_M_pi) != 0) ? (_M_pi)->_M_get_use_count() : 0; } 
# 722
bool _M_unique() const noexcept 
# 723
{ return _M_get_use_count() == (1); } 
# 726
void *_M_get_deleter(const type_info &__ti) const noexcept 
# 727
{ return (_M_pi) ? (_M_pi)->_M_get_deleter(__ti) : nullptr; } 
# 730
bool _M_less(const __shared_count &__rhs) const noexcept 
# 731
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, __rhs._M_pi); } 
# 734
bool _M_less(const __weak_count< _Lp>  &__rhs) const noexcept 
# 735
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, (__rhs._M_pi)); } 
# 739
friend inline bool operator==(const __shared_count< _Lp>  &__a, const __shared_count< _Lp>  &__b) noexcept 
# 740
{ return (__a._M_pi) == (__b._M_pi); } 
# 743
friend class __weak_count< _Lp> ; 
# 745
private: _Sp_counted_base< _Lp>  *_M_pi; 
# 746
}; 
# 749
template< __gnu_cxx::_Lock_policy _Lp> 
# 750
class __weak_count { 
# 753
public: constexpr __weak_count() noexcept : _M_pi((nullptr)) 
# 754
{ } 
# 756
__weak_count(const __shared_count< _Lp>  &__r) noexcept : _M_pi(((__r._M_pi))) 
# 758
{ 
# 759
if ((_M_pi) != nullptr) { 
# 760
(_M_pi)->_M_weak_add_ref(); }  
# 761
} 
# 763
__weak_count(const __weak_count &__r) noexcept : _M_pi(__r._M_pi) 
# 765
{ 
# 766
if ((_M_pi) != nullptr) { 
# 767
(_M_pi)->_M_weak_add_ref(); }  
# 768
} 
# 770
__weak_count(__weak_count &&__r) noexcept : _M_pi(__r._M_pi) 
# 772
{ (__r._M_pi) = nullptr; } 
# 774
~__weak_count() noexcept 
# 775
{ 
# 776
if ((_M_pi) != nullptr) { 
# 777
(_M_pi)->_M_weak_release(); }  
# 778
} 
# 781
__weak_count &operator=(const __shared_count< _Lp>  &__r) noexcept 
# 782
{ 
# 783
_Sp_counted_base< _Lp>  *__tmp = ((__r._M_pi)); 
# 784
if (__tmp != nullptr) { 
# 785
__tmp->_M_weak_add_ref(); }  
# 786
if ((_M_pi) != nullptr) { 
# 787
(_M_pi)->_M_weak_release(); }  
# 788
(_M_pi) = __tmp; 
# 789
return *this; 
# 790
} 
# 793
__weak_count &operator=(const __weak_count &__r) noexcept 
# 794
{ 
# 795
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 796
if (__tmp != nullptr) { 
# 797
__tmp->_M_weak_add_ref(); }  
# 798
if ((_M_pi) != nullptr) { 
# 799
(_M_pi)->_M_weak_release(); }  
# 800
(_M_pi) = __tmp; 
# 801
return *this; 
# 802
} 
# 805
__weak_count &operator=(__weak_count &&__r) noexcept 
# 806
{ 
# 807
if ((_M_pi) != nullptr) { 
# 808
(_M_pi)->_M_weak_release(); }  
# 809
(_M_pi) = (__r._M_pi); 
# 810
(__r._M_pi) = nullptr; 
# 811
return *this; 
# 812
} 
# 815
void _M_swap(__weak_count &__r) noexcept 
# 816
{ 
# 817
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 818
(__r._M_pi) = (_M_pi); 
# 819
(_M_pi) = __tmp; 
# 820
} 
# 823
long _M_get_use_count() const noexcept 
# 824
{ return ((_M_pi) != nullptr) ? (_M_pi)->_M_get_use_count() : 0; } 
# 827
bool _M_less(const __weak_count &__rhs) const noexcept 
# 828
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, __rhs._M_pi); } 
# 831
bool _M_less(const __shared_count< _Lp>  &__rhs) const noexcept 
# 832
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, (__rhs._M_pi)); } 
# 836
friend inline bool operator==(const __weak_count< _Lp>  &__a, const __weak_count< _Lp>  &__b) noexcept 
# 837
{ return (__a._M_pi) == (__b._M_pi); } 
# 840
friend class __shared_count< _Lp> ; 
# 842
private: _Sp_counted_base< _Lp>  *_M_pi; 
# 843
}; 
# 846
template< __gnu_cxx::_Lock_policy _Lp> inline 
# 848
__shared_count< _Lp> ::__shared_count(const __weak_count< _Lp>  &__r) : _M_pi(((__r._M_pi))) 
# 850
{ 
# 851
if ((_M_pi) != nullptr) { 
# 852
(_M_pi)->_M_add_ref_lock(); } else { 
# 854
__throw_bad_weak_ptr(); }  
# 855
} 
# 858
template< __gnu_cxx::_Lock_policy _Lp> inline 
# 861
__shared_count< _Lp> ::__shared_count(const __weak_count< _Lp>  &__r, nothrow_t) : _M_pi(((__r._M_pi))) 
# 863
{ 
# 864
if ((_M_pi) != nullptr) { 
# 865
if (!(_M_pi)->_M_add_ref_lock_nothrow()) { 
# 866
(_M_pi) = nullptr; }  }  
# 867
} 
# 875
template< class _Yp_ptr, class _Tp_ptr> 
# 876
struct __sp_compatible_with : public false_type { 
# 878
}; 
# 880
template< class _Yp, class _Tp> 
# 881
struct __sp_compatible_with< _Yp *, _Tp *>  : public is_convertible< _Yp *, _Tp *> ::type { 
# 883
}; 
# 885
template< class _Up, size_t _Nm> 
# 886
struct __sp_compatible_with< _Up (*)[_Nm], _Up (*)[]>  : public true_type { 
# 888
}; 
# 890
template< class _Up, size_t _Nm> 
# 891
struct __sp_compatible_with< _Up (*)[_Nm], const _Up (*)[]>  : public true_type { 
# 893
}; 
# 895
template< class _Up, size_t _Nm> 
# 896
struct __sp_compatible_with< _Up (*)[_Nm], volatile _Up (*)[]>  : public true_type { 
# 898
}; 
# 900
template< class _Up, size_t _Nm> 
# 901
struct __sp_compatible_with< _Up (*)[_Nm], const volatile _Up (*)[]>  : public true_type { 
# 903
}; 
# 906
template< class _Up, size_t _Nm, class _Yp, class  = void> 
# 907
struct __sp_is_constructible_arrN : public false_type { 
# 909
}; 
# 911
template< class _Up, size_t _Nm, class _Yp> 
# 912
struct __sp_is_constructible_arrN< _Up, _Nm, _Yp, __void_t< _Yp [_Nm]> >  : public is_convertible< _Yp (*)[_Nm], _Up (*)[_Nm]> ::type { 
# 914
}; 
# 917
template< class _Up, class _Yp, class  = void> 
# 918
struct __sp_is_constructible_arr : public false_type { 
# 920
}; 
# 922
template< class _Up, class _Yp> 
# 923
struct __sp_is_constructible_arr< _Up, _Yp, __void_t< _Yp []> >  : public is_convertible< _Yp (*)[], _Up (*)[]> ::type { 
# 925
}; 
# 928
template< class _Tp, class _Yp> struct __sp_is_constructible; 
# 932
template< class _Up, size_t _Nm, class _Yp> 
# 933
struct __sp_is_constructible< _Up [_Nm], _Yp>  : public __sp_is_constructible_arrN< _Up, _Nm, _Yp> ::type { 
# 935
}; 
# 938
template< class _Up, class _Yp> 
# 939
struct __sp_is_constructible< _Up [], _Yp>  : public __sp_is_constructible_arr< _Up, _Yp> ::type { 
# 941
}; 
# 944
template< class _Tp, class _Yp> 
# 945
struct __sp_is_constructible : public is_convertible< _Yp *, _Tp *> ::type { 
# 947
}; 
# 951
template< class _Tp, __gnu_cxx::_Lock_policy _Lp, bool 
# 952
 = is_array< _Tp> ::value, bool  = is_void< _Tp> ::value> 
# 953
class __shared_ptr_access { 
# 956
public: using element_type = _Tp; 
# 959
element_type &operator*() const noexcept 
# 960
{ 
# 961
; 
# 962
return *_M_get(); 
# 963
} 
# 966
element_type *operator->() const noexcept 
# 967
{ 
# 968
; 
# 969
return _M_get(); 
# 970
} 
# 974
private: element_type *_M_get() const noexcept 
# 975
{ return (static_cast< const __shared_ptr< _Tp, _Lp>  *>(this))->get(); } 
# 976
}; 
# 979
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 980
class __shared_ptr_access< _Tp, _Lp, false, true>  { 
# 983
public: using element_type = _Tp; 
# 986
element_type *operator->() const noexcept 
# 987
{ 
# 988
auto __ptr = (static_cast< const __shared_ptr< _Tp, _Lp>  *>(this))->get(); 
# 989
; 
# 990
return __ptr; 
# 991
} 
# 992
}; 
# 995
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 996
class __shared_ptr_access< _Tp, _Lp, true, false>  { 
# 999
public: using element_type = typename remove_extent< _Tp> ::type; 
# 1002
[[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]] element_type &
# 1004
operator*() const noexcept 
# 1005
{ 
# 1006
; 
# 1007
return *_M_get(); 
# 1008
} 
# 1010
[[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]] element_type *
# 1012
operator->() const noexcept 
# 1013
{ 
# 1014
; 
# 1015
return _M_get(); 
# 1016
} 
# 1020
element_type &operator[](ptrdiff_t __i) const 
# 1021
{ 
# 1022
; 
# 1023
; 
# 1024
return _M_get()[__i]; 
# 1025
} 
# 1029
private: element_type *_M_get() const noexcept 
# 1030
{ return (static_cast< const __shared_ptr< _Tp, _Lp>  *>(this))->get(); } 
# 1031
}; 
# 1033
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1034
class __shared_ptr : public __shared_ptr_access< _Tp, _Lp>  { 
# 1038
public: using element_type = typename remove_extent< _Tp> ::type; 
# 1043
private: 
# 1042
template< class _Yp> using _SafeConv = typename enable_if< __sp_is_constructible< _Tp, _Yp> ::value> ::type; 
# 1047
template< class _Yp, class _Res = void> using _Compatible = typename enable_if< __sp_compatible_with< _Yp *, _Tp *> ::value, _Res> ::type; 
# 1052
template< class _Yp> using _Assignable = _Compatible< _Yp, __shared_ptr &> ; 
# 1056
template< class _Yp, class _Del, class _Res = void, class 
# 1057
_Ptr = typename unique_ptr< _Yp, _Del> ::pointer> using _UniqCompatible = typename enable_if< __and_< __sp_compatible_with< _Yp *, _Tp *> , is_convertible< _Ptr, element_type *> > ::value, _Res> ::type; 
# 1063
template< class _Yp, class _Del> using _UniqAssignable = _UniqCompatible< _Yp, _Del, __shared_ptr &> ; 
# 1072
public: constexpr __shared_ptr() noexcept : _M_ptr((0)), _M_refcount() 
# 1074
{ } 
# 1076
template< class _Yp, class  = _SafeConv< _Yp> > explicit 
# 1078
__shared_ptr(_Yp *__p) : _M_ptr(__p), _M_refcount(__p, typename is_array< _Tp> ::type()) 
# 1080
{ 
# 1081
static_assert((!is_void< _Yp> ::value), "incomplete type");
# 1082
static_assert((sizeof(_Yp) > (0)), "incomplete type");
# 1083
_M_enable_shared_from_this_with(__p); 
# 1084
} 
# 1086
template< class _Yp, class _Deleter, class  = _SafeConv< _Yp> > 
# 1087
__shared_ptr(_Yp *__p, _Deleter __d) : _M_ptr(__p), _M_refcount(__p, std::move(__d)) 
# 1089
{ 
# 1090
static_assert((__is_invocable< _Deleter &, _Yp *&> ::value), "deleter expression d(p) is well-formed");
# 1092
_M_enable_shared_from_this_with(__p); 
# 1093
} 
# 1095
template< class _Yp, class _Deleter, class _Alloc, class 
# 1096
 = _SafeConv< _Yp> > 
# 1097
__shared_ptr(_Yp *__p, _Deleter __d, _Alloc __a) : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a)) 
# 1099
{ 
# 1100
static_assert((__is_invocable< _Deleter &, _Yp *&> ::value), "deleter expression d(p) is well-formed");
# 1102
_M_enable_shared_from_this_with(__p); 
# 1103
} 
# 1105
template< class _Deleter> 
# 1106
__shared_ptr(std::nullptr_t __p, _Deleter __d) : _M_ptr((0)), _M_refcount(__p, std::move(__d)) 
# 1108
{ } 
# 1110
template< class _Deleter, class _Alloc> 
# 1111
__shared_ptr(std::nullptr_t __p, _Deleter __d, _Alloc __a) : _M_ptr((0)), _M_refcount(__p, std::move(__d), std::move(__a)) 
# 1113
{ } 
# 1115
template< class _Yp> 
# 1116
__shared_ptr(const __shared_ptr< _Yp, _Lp>  &__r, element_type *
# 1117
__p) noexcept : _M_ptr(__p), _M_refcount((__r._M_refcount)) 
# 1119
{ } 
# 1121
__shared_ptr(const __shared_ptr &) noexcept = default;
# 1122
__shared_ptr &operator=(const __shared_ptr &) noexcept = default;
# 1123
~__shared_ptr() = default;
# 1125
template< class _Yp, class  = _Compatible< _Yp> > 
# 1126
__shared_ptr(const __shared_ptr< _Yp, _Lp>  &__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount((__r._M_refcount)) 
# 1128
{ } 
# 1130
__shared_ptr(__shared_ptr &&__r) noexcept : _M_ptr(__r._M_ptr), _M_refcount() 
# 1132
{ 
# 1133
(_M_refcount)._M_swap(__r._M_refcount); 
# 1134
(__r._M_ptr) = 0; 
# 1135
} 
# 1137
template< class _Yp, class  = _Compatible< _Yp> > 
# 1138
__shared_ptr(__shared_ptr< _Yp, _Lp>  &&__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount() 
# 1140
{ 
# 1141
(_M_refcount)._M_swap((__r._M_refcount)); 
# 1142
(__r._M_ptr) = 0; 
# 1143
} 
# 1145
template< class _Yp, class  = _Compatible< _Yp> > explicit 
# 1146
__shared_ptr(const __weak_ptr< _Yp, _Lp>  &__r) : _M_refcount((__r._M_refcount)) 
# 1148
{ 
# 1151
(_M_ptr) = (__r._M_ptr); 
# 1152
} 
# 1155
template< class _Yp, class _Del, class 
# 1156
 = _UniqCompatible< _Yp, _Del> > 
# 1157
__shared_ptr(unique_ptr< _Yp, _Del>  &&__r) : _M_ptr(__r.get()), _M_refcount() 
# 1159
{ 
# 1160
auto __raw = _S_raw_ptr(__r.get()); 
# 1161
(_M_refcount) = ((__shared_count< _Lp> )(std::move(__r))); 
# 1162
_M_enable_shared_from_this_with(__raw); 
# 1163
} 
# 1173
protected: 
# 1168
template< class _Tp1, class _Del, typename enable_if< __and_< __not_< is_array< _Tp> > , is_array< _Tp1> , is_convertible< typename unique_ptr< _Tp1, _Del> ::pointer, _Tp *> > ::value, bool> ::type 
# 1172
 = true> 
# 1173
__shared_ptr(unique_ptr< _Tp1, _Del>  &&__r, std::__sp_array_delete) : _M_ptr(__r.get()), _M_refcount() 
# 1175
{ 
# 1176
auto __raw = _S_raw_ptr(__r.get()); 
# 1177
(_M_refcount) = ((__shared_count< _Lp> )(std::move(__r))); 
# 1178
_M_enable_shared_from_this_with(__raw); 
# 1179
} 
# 1185
public: template< class _Yp, class  = _Compatible< _Yp> > inline __shared_ptr(auto_ptr< _Yp>  && __r); 
# 1189
constexpr __shared_ptr(std::nullptr_t) noexcept : __shared_ptr() { } 
# 1191
template< class _Yp> _Assignable< _Yp>  
# 1193
operator=(const __shared_ptr< _Yp, _Lp>  &__r) noexcept 
# 1194
{ 
# 1195
(_M_ptr) = (__r._M_ptr); 
# 1196
(_M_refcount) = (__r._M_refcount); 
# 1197
return *this; 
# 1198
} 
# 1201
template< class _Yp> _Assignable< _Yp>  
# 1203
operator=(auto_ptr< _Yp>  &&__r) 
# 1204
{ 
# 1205
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1206
return *this; 
# 1207
} 
# 1211
__shared_ptr &operator=(__shared_ptr &&__r) noexcept 
# 1212
{ 
# 1213
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1214
return *this; 
# 1215
} 
# 1217
template< class _Yp> _Assignable< _Yp>  
# 1219
operator=(__shared_ptr< _Yp, _Lp>  &&__r) noexcept 
# 1220
{ 
# 1221
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1222
return *this; 
# 1223
} 
# 1225
template< class _Yp, class _Del> _UniqAssignable< _Yp, _Del>  
# 1227
operator=(unique_ptr< _Yp, _Del>  &&__r) 
# 1228
{ 
# 1229
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1230
return *this; 
# 1231
} 
# 1234
void reset() noexcept 
# 1235
{ __shared_ptr().swap(*this); } 
# 1237
template< class _Yp> _SafeConv< _Yp>  
# 1239
reset(_Yp *__p) 
# 1240
{ 
# 1242
; 
# 1243
((__shared_ptr)(__p)).swap(*this); 
# 1244
} 
# 1246
template< class _Yp, class _Deleter> _SafeConv< _Yp>  
# 1248
reset(_Yp *__p, _Deleter __d) 
# 1249
{ __shared_ptr(__p, std::move(__d)).swap(*this); } 
# 1251
template< class _Yp, class _Deleter, class _Alloc> _SafeConv< _Yp>  
# 1253
reset(_Yp *__p, _Deleter __d, _Alloc __a) 
# 1254
{ __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); } 
# 1257
element_type *get() const noexcept 
# 1258
{ return _M_ptr; } 
# 1260
explicit operator bool() const 
# 1261
{ return ((_M_ptr) == 0) ? false : true; } 
# 1264
bool unique() const noexcept 
# 1265
{ return (_M_refcount)._M_unique(); } 
# 1268
long use_count() const noexcept 
# 1269
{ return (_M_refcount)._M_get_use_count(); } 
# 1272
void swap(__shared_ptr &__other) noexcept 
# 1273
{ 
# 1274
std::swap(_M_ptr, __other._M_ptr); 
# 1275
(_M_refcount)._M_swap(__other._M_refcount); 
# 1276
} 
# 1278
template< class _Tp1> bool 
# 1280
owner_before(const __shared_ptr< _Tp1, _Lp>  &__rhs) const noexcept 
# 1281
{ return (_M_refcount)._M_less((__rhs._M_refcount)); } 
# 1283
template< class _Tp1> bool 
# 1285
owner_before(const __weak_ptr< _Tp1, _Lp>  &__rhs) const noexcept 
# 1286
{ return (_M_refcount)._M_less((__rhs._M_refcount)); } 
# 1292
protected: 
# 1291
template< class _Alloc, class ..._Args> 
# 1292
__shared_ptr(std::_Sp_make_shared_tag __tag, const _Alloc &__a, _Args &&...
# 1293
__args) : _M_ptr(), _M_refcount(__tag, (_Tp *)0, __a, std::forward< _Args> (__args)...) 
# 1296
{ 
# 1299
void *__p = (_M_refcount)._M_get_deleter(typeid(std::_Sp_make_shared_tag)); 
# 1300
(_M_ptr) = (static_cast< _Tp *>(__p)); 
# 1301
_M_enable_shared_from_this_with(_M_ptr); 
# 1302
} 
# 1337 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1, class _Alloc, class ...
# 1338
_Args> friend __shared_ptr< _Tp1, _Lp1>  
# 1337
__allocate_shared(const _Alloc & __a, _Args && ...__args); 
# 1344
__shared_ptr(const __weak_ptr< _Tp, _Lp>  &__r, std::nothrow_t) : _M_refcount((__r._M_refcount), std::nothrow) 
# 1346
{ 
# 1347
(_M_ptr) = (((_M_refcount)._M_get_use_count()) ? __r._M_ptr : nullptr); 
# 1348
} 
# 1350
friend class __weak_ptr< _Tp, _Lp> ; 
# 1355
private: 
# 1354
template< class _Yp> using __esft_base_t = __decltype((__enable_shared_from_this_base(std::declval< const __shared_count< _Lp>  &> (), std::declval< _Yp *> ()))); 
# 1360
template< class _Yp, class  = void> 
# 1361
struct __has_esft_base : public std::false_type { 
# 1362
}; 
# 1364
template< class _Yp> 
# 1365
struct __has_esft_base< _Yp, std::__void_t< __esft_base_t< _Yp> > >  : public __not_< is_array< _Tp> >  { 
# 1366
}; 
# 1368
template< class _Yp, class _Yp2 = typename remove_cv< _Yp> ::type> typename enable_if< __has_esft_base< _Yp2> ::value> ::type 
# 1370
_M_enable_shared_from_this_with(_Yp *__p) noexcept 
# 1371
{ 
# 1372
if (auto __base = __enable_shared_from_this_base(_M_refcount, __p)) { 
# 1373
(__base->_M_weak_assign)(const_cast< _Yp2 *>(__p), _M_refcount); }  
# 1374
} 
# 1376
template< class _Yp, class _Yp2 = typename remove_cv< _Yp> ::type> typename enable_if< !__has_esft_base< _Yp2> ::value> ::type 
# 1378
_M_enable_shared_from_this_with(_Yp *) noexcept 
# 1379
{ } 
# 1382
void *_M_get_deleter(const std::type_info &__ti) const noexcept 
# 1383
{ return (_M_refcount)._M_get_deleter(__ti); } 
# 1385
template< class _Tp1> static _Tp1 *
# 1387
_S_raw_ptr(_Tp1 *__ptr) 
# 1388
{ return __ptr; } 
# 1390
template< class _Tp1> static auto 
# 1392
_S_raw_ptr(_Tp1 __ptr)->__decltype((std::__addressof(*__ptr))) 
# 1393
{ return std::__addressof(*__ptr); } 
# 1395
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __shared_ptr; 
# 1396
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __weak_ptr; 
# 1398
template< class _Del, class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend _Del *get_deleter(const std::__shared_ptr< _Tp1, _Lp1>  &) noexcept; 
# 1401
element_type *_M_ptr; 
# 1402
__shared_count< _Lp>  _M_refcount; 
# 1403
}; 
# 1407
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1409
operator==(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1410
__b) noexcept 
# 1411
{ return __a.get() == __b.get(); } 
# 1413
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1415
operator==(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1416
{ return !__a; } 
# 1418
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1420
operator==(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1421
{ return !__a; } 
# 1423
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1425
operator!=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1426
__b) noexcept 
# 1427
{ return __a.get() != __b.get(); } 
# 1429
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1431
operator!=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1432
{ return (bool)__a; } 
# 1434
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1436
operator!=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1437
{ return (bool)__a; } 
# 1439
template< class _Tp, class _Up, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1441
operator<(const __shared_ptr< _Tp, _Lp>  &__a, const __shared_ptr< _Up, _Lp>  &
# 1442
__b) noexcept 
# 1443
{ 
# 1444
using _Tp_elt = typename __shared_ptr< _Tp, _Lp> ::element_type; 
# 1445
using _Up_elt = typename __shared_ptr< _Up, _Lp> ::element_type; 
# 1446
using _Vp = typename common_type< typename __shared_ptr< _Tp, _Lp> ::element_type *, typename __shared_ptr< _Up, _Lp> ::element_type *> ::type; 
# 1447
return less< typename common_type< typename __shared_ptr< _Tp, _Lp> ::element_type *, typename __shared_ptr< _Up, _Lp> ::element_type *> ::type> ()(__a.get(), __b.get()); 
# 1448
} 
# 1450
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1452
operator<(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1453
{ 
# 1454
using _Tp_elt = typename __shared_ptr< _Tp, _Lp> ::element_type; 
# 1455
return less< typename __shared_ptr< _Tp, _Lp> ::element_type *> ()(__a.get(), nullptr); 
# 1456
} 
# 1458
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1460
operator<(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1461
{ 
# 1462
using _Tp_elt = typename __shared_ptr< _Tp, _Lp> ::element_type; 
# 1463
return less< typename __shared_ptr< _Tp, _Lp> ::element_type *> ()(nullptr, __a.get()); 
# 1464
} 
# 1466
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1468
operator<=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1469
__b) noexcept 
# 1470
{ return !(__b < __a); } 
# 1472
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1474
operator<=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1475
{ return !(nullptr < __a); } 
# 1477
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1479
operator<=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1480
{ return !(__a < nullptr); } 
# 1482
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1484
operator>(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1485
__b) noexcept 
# 1486
{ return (__b < __a); } 
# 1488
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1490
operator>(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1491
{ return nullptr < __a; } 
# 1493
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1495
operator>(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1496
{ return __a < nullptr; } 
# 1498
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1500
operator>=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1501
__b) noexcept 
# 1502
{ return !(__a < __b); } 
# 1504
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1506
operator>=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1507
{ return !(__a < nullptr); } 
# 1509
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1511
operator>=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1512
{ return !(nullptr < __a); } 
# 1514
template< class _Sp> 
# 1515
struct _Sp_less : public binary_function< _Sp, _Sp, bool>  { 
# 1518
bool operator()(const _Sp &__lhs, const _Sp &__rhs) const noexcept 
# 1519
{ 
# 1520
typedef typename _Sp::element_type element_type; 
# 1521
return less< typename _Sp::element_type *> ()(__lhs.get(), __rhs.get()); 
# 1522
} 
# 1523
}; 
# 1525
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1526
struct less< __shared_ptr< _Tp, _Lp> >  : public _Sp_less< __shared_ptr< _Tp, _Lp> >  { 
# 1528
}; 
# 1531
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 1533
swap(__shared_ptr< _Tp, _Lp>  &__a, __shared_ptr< _Tp, _Lp>  &__b) noexcept 
# 1534
{ __a.swap(__b); } 
# 1543 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1545
static_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1546
{ 
# 1547
using _Sp = __shared_ptr< _Tp, _Lp> ; 
# 1548
return _Sp(__r, static_cast< typename __shared_ptr< _Tp, _Lp> ::element_type *>(__r.get())); 
# 1549
} 
# 1556
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1558
const_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1559
{ 
# 1560
using _Sp = __shared_ptr< _Tp, _Lp> ; 
# 1561
return _Sp(__r, const_cast< typename __shared_ptr< _Tp, _Lp> ::element_type *>(__r.get())); 
# 1562
} 
# 1569
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1571
dynamic_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1572
{ 
# 1573
using _Sp = __shared_ptr< _Tp, _Lp> ; 
# 1574
if (auto *__p = dynamic_cast< typename __shared_ptr< _Tp, _Lp> ::element_type *>(__r.get())) { 
# 1575
return _Sp(__r, __p); }  
# 1576
return _Sp(); 
# 1577
} 
# 1589 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1590
class __weak_ptr { 
# 1592
template< class _Yp, class _Res = void> using _Compatible = typename enable_if< __sp_compatible_with< _Yp *, _Tp *> ::value, _Res> ::type; 
# 1597
template< class _Yp> using _Assignable = _Compatible< _Yp, __weak_ptr &> ; 
# 1601
public: using element_type = typename remove_extent< _Tp> ::type; 
# 1603
constexpr __weak_ptr() noexcept : _M_ptr((nullptr)), _M_refcount() 
# 1605
{ } 
# 1607
__weak_ptr(const __weak_ptr &) noexcept = default;
# 1609
~__weak_ptr() = default;
# 1625 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
template< class _Yp, class  = _Compatible< _Yp> > 
# 1626
__weak_ptr(const __weak_ptr< _Yp, _Lp>  &__r) noexcept : _M_refcount((__r._M_refcount)) 
# 1628
{ (_M_ptr) = __r.lock().get(); } 
# 1630
template< class _Yp, class  = _Compatible< _Yp> > 
# 1631
__weak_ptr(const __shared_ptr< _Yp, _Lp>  &__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount((__r._M_refcount)) 
# 1633
{ } 
# 1635
__weak_ptr(__weak_ptr &&__r) noexcept : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount)) 
# 1637
{ (__r._M_ptr) = nullptr; } 
# 1639
template< class _Yp, class  = _Compatible< _Yp> > 
# 1640
__weak_ptr(__weak_ptr< _Yp, _Lp>  &&__r) noexcept : _M_ptr(__r.lock().get()), _M_refcount(std::move((__r._M_refcount))) 
# 1642
{ (__r._M_ptr) = nullptr; } 
# 1645
__weak_ptr &operator=(const __weak_ptr & __r) noexcept = default;
# 1647
template< class _Yp> _Assignable< _Yp>  
# 1649
operator=(const __weak_ptr< _Yp, _Lp>  &__r) noexcept 
# 1650
{ 
# 1651
(_M_ptr) = __r.lock().get(); 
# 1652
(_M_refcount) = (__r._M_refcount); 
# 1653
return *this; 
# 1654
} 
# 1656
template< class _Yp> _Assignable< _Yp>  
# 1658
operator=(const __shared_ptr< _Yp, _Lp>  &__r) noexcept 
# 1659
{ 
# 1660
(_M_ptr) = (__r._M_ptr); 
# 1661
(_M_refcount) = (__r._M_refcount); 
# 1662
return *this; 
# 1663
} 
# 1666
__weak_ptr &operator=(__weak_ptr &&__r) noexcept 
# 1667
{ 
# 1668
(_M_ptr) = (__r._M_ptr); 
# 1669
(_M_refcount) = std::move(__r._M_refcount); 
# 1670
(__r._M_ptr) = nullptr; 
# 1671
return *this; 
# 1672
} 
# 1674
template< class _Yp> _Assignable< _Yp>  
# 1676
operator=(__weak_ptr< _Yp, _Lp>  &&__r) noexcept 
# 1677
{ 
# 1678
(_M_ptr) = __r.lock().get(); 
# 1679
(_M_refcount) = std::move((__r._M_refcount)); 
# 1680
(__r._M_ptr) = nullptr; 
# 1681
return *this; 
# 1682
} 
# 1685
__shared_ptr< _Tp, _Lp>  lock() const noexcept 
# 1686
{ return __shared_ptr< element_type, _Lp> (*this, std::nothrow); } 
# 1689
long use_count() const noexcept 
# 1690
{ return (_M_refcount)._M_get_use_count(); } 
# 1693
bool expired() const noexcept 
# 1694
{ return (_M_refcount)._M_get_use_count() == 0; } 
# 1696
template< class _Tp1> bool 
# 1698
owner_before(const __shared_ptr< _Tp1, _Lp>  &__rhs) const noexcept 
# 1699
{ return (_M_refcount)._M_less((__rhs._M_refcount)); } 
# 1701
template< class _Tp1> bool 
# 1703
owner_before(const __weak_ptr< _Tp1, _Lp>  &__rhs) const noexcept 
# 1704
{ return (_M_refcount)._M_less((__rhs._M_refcount)); } 
# 1707
void reset() noexcept 
# 1708
{ __weak_ptr().swap(*this); } 
# 1711
void swap(__weak_ptr &__s) noexcept 
# 1712
{ 
# 1713
std::swap(_M_ptr, __s._M_ptr); 
# 1714
(_M_refcount)._M_swap(__s._M_refcount); 
# 1715
} 
# 1720
private: void _M_assign(_Tp *__ptr, const __shared_count< _Lp>  &__refcount) noexcept 
# 1721
{ 
# 1722
if (use_count() == 0) 
# 1723
{ 
# 1724
(_M_ptr) = __ptr; 
# 1725
(_M_refcount) = __refcount; 
# 1726
}  
# 1727
} 
# 1729
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __shared_ptr; 
# 1730
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __weak_ptr; 
# 1731
friend class __enable_shared_from_this< _Tp, _Lp> ; 
# 1732
friend class enable_shared_from_this< _Tp> ; 
# 1734
element_type *_M_ptr; 
# 1735
__weak_count< _Lp>  _M_refcount; 
# 1736
}; 
# 1739
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 1741
swap(__weak_ptr< _Tp, _Lp>  &__a, __weak_ptr< _Tp, _Lp>  &__b) noexcept 
# 1742
{ __a.swap(__b); } 
# 1744
template< class _Tp, class _Tp1> 
# 1745
struct _Sp_owner_less : public binary_function< _Tp, _Tp, bool>  { 
# 1748
bool operator()(const _Tp &__lhs, const _Tp &__rhs) const noexcept 
# 1749
{ return __lhs.owner_before(__rhs); } 
# 1752
bool operator()(const _Tp &__lhs, const _Tp1 &__rhs) const noexcept 
# 1753
{ return __lhs.owner_before(__rhs); } 
# 1756
bool operator()(const _Tp1 &__lhs, const _Tp &__rhs) const noexcept 
# 1757
{ return __lhs.owner_before(__rhs); } 
# 1758
}; 
# 1761
template<> struct _Sp_owner_less< void, void>  { 
# 1763
template< class _Tp, class _Up> auto 
# 1765
operator()(const _Tp &__lhs, const _Up &__rhs) const noexcept->__decltype((__lhs.owner_before(__rhs))) 
# 1767
{ return __lhs.owner_before(__rhs); } 
# 1769
using is_transparent = void; 
# 1770
}; 
# 1772
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1773
struct owner_less< __shared_ptr< _Tp, _Lp> >  : public _Sp_owner_less< __shared_ptr< _Tp, _Lp> , __weak_ptr< _Tp, _Lp> >  { 
# 1775
}; 
# 1777
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1778
struct owner_less< __weak_ptr< _Tp, _Lp> >  : public _Sp_owner_less< __weak_ptr< _Tp, _Lp> , __shared_ptr< _Tp, _Lp> >  { 
# 1780
}; 
# 1783
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1784
class __enable_shared_from_this { 
# 1787
protected: constexpr __enable_shared_from_this() noexcept { } 
# 1789
__enable_shared_from_this(const __enable_shared_from_this &) noexcept { } 
# 1792
__enable_shared_from_this &operator=(const __enable_shared_from_this &) noexcept 
# 1793
{ return *this; } 
# 1795
~__enable_shared_from_this() { } 
# 1799
public: __shared_ptr< _Tp, _Lp>  shared_from_this() 
# 1800
{ return ((__shared_ptr< _Tp, _Lp> )(this->_M_weak_this)); } 
# 1803
__shared_ptr< const _Tp, _Lp>  shared_from_this() const 
# 1804
{ return ((__shared_ptr< const _Tp, _Lp> )(this->_M_weak_this)); } 
# 1819 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
private: 
# 1817
template< class _Tp1> void 
# 1819
_M_weak_assign(_Tp1 *__p, const __shared_count< _Lp>  &__n) const noexcept 
# 1820
{ (_M_weak_this)._M_assign(__p, __n); } 
# 1823
friend inline const __enable_shared_from_this *__enable_shared_from_this_base(const std::__shared_count< _Lp>  &, const __enable_shared_from_this< _Tp, _Lp>  *
# 1824
__p) 
# 1825
{ return __p; } 
# 1827
template< class , __gnu_cxx::_Lock_policy > friend class __shared_ptr; 
# 1830
mutable __weak_ptr< _Tp, _Lp>  _M_weak_this; 
# 1831
}; 
# 1833
template< class _Tp, __gnu_cxx::_Lock_policy _Lp, class _Alloc, class ..._Args> inline __shared_ptr< _Tp, _Lp>  
# 1835
__allocate_shared(const _Alloc &__a, _Args &&...__args) 
# 1836
{ 
# 1837
return __shared_ptr< _Tp, _Lp> (_Sp_make_shared_tag(), __a, std::forward< _Args> (__args)...); 
# 1839
} 
# 1841
template< class _Tp, __gnu_cxx::_Lock_policy _Lp, class ..._Args> inline __shared_ptr< _Tp, _Lp>  
# 1843
__make_shared(_Args &&...__args) 
# 1844
{ 
# 1845
typedef typename remove_const< _Tp> ::type _Tp_nc; 
# 1846
return std::__allocate_shared< _Tp, _Lp> (allocator< typename remove_const< _Tp> ::type> (), std::forward< _Args> (__args)...); 
# 1848
} 
# 1851
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1852
struct hash< __shared_ptr< _Tp, _Lp> >  : public __hash_base< unsigned long, __shared_ptr< _Tp, _Lp> >  { 
# 1856
std::size_t operator()(const __shared_ptr< _Tp, _Lp>  &__s) const noexcept 
# 1857
{ 
# 1858
return std::hash< typename __shared_ptr< _Tp, _Lp> ::element_type *> ()(__s.get()); 
# 1860
} 
# 1861
}; 
# 1864
}
# 54 "/usr/include/c++/7/bits/shared_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> inline basic_ostream< _Ch, _Tr>  &
# 66
operator<<(basic_ostream< _Ch, _Tr>  &__os, const __shared_ptr< _Tp, _Lp>  &
# 67
__p) 
# 68
{ 
# 69
__os << __p.get(); 
# 70
return __os; 
# 71
} 
# 74
template< class _Del, class _Tp, __gnu_cxx::_Lock_policy _Lp> inline _Del *
# 76
get_deleter(const __shared_ptr< _Tp, _Lp>  &__p) noexcept 
# 77
{ 
# 79
return static_cast< _Del *>(__p._M_get_deleter(typeid(_Del))); 
# 83
} 
# 92 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Tp> 
# 93
class shared_ptr : public __shared_ptr< _Tp>  { 
# 95
template< class ..._Args> using _Constructible = typename enable_if< is_constructible< __shared_ptr< _Tp> , _Args...> ::value> ::type; 
# 100
template< class _Arg> using _Assignable = typename enable_if< is_assignable< __shared_ptr< _Tp>  &, _Arg> ::value, shared_ptr &> ::type; 
# 107
public: using element_type = typename __shared_ptr< _Tp> ::element_type; 
# 117 "/usr/include/c++/7/bits/shared_ptr.h" 3
constexpr shared_ptr() noexcept : __shared_ptr< _Tp> () { } 
# 119
shared_ptr(const shared_ptr &) noexcept = default;
# 127
template< class _Yp, class  = _Constructible< _Yp *> > explicit 
# 129
shared_ptr(_Yp *__p) : __shared_ptr< _Tp> (__p) { } 
# 144 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Yp, class _Deleter, class 
# 145
 = _Constructible< _Yp *, _Deleter> > 
# 146
shared_ptr(_Yp *__p, _Deleter __d) : __shared_ptr< _Tp> (__p, std::move(__d)) 
# 147
{ } 
# 162 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Deleter> 
# 163
shared_ptr(std::nullptr_t __p, _Deleter __d) : __shared_ptr< _Tp> (__p, std::move(__d)) 
# 164
{ } 
# 181 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Yp, class _Deleter, class _Alloc, class 
# 182
 = _Constructible< _Yp *, _Deleter, _Alloc> > 
# 183
shared_ptr(_Yp *__p, _Deleter __d, _Alloc __a) : __shared_ptr< _Tp> (__p, std::move(__d), std::move(__a)) 
# 184
{ } 
# 201 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Deleter, class _Alloc> 
# 202
shared_ptr(std::nullptr_t __p, _Deleter __d, _Alloc __a) : __shared_ptr< _Tp> (__p, std::move(__d), std::move(__a)) 
# 203
{ } 
# 223 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Yp> 
# 224
shared_ptr(const shared_ptr< _Yp>  &__r, element_type *__p) noexcept : __shared_ptr< _Tp> (__r, __p) 
# 225
{ } 
# 234 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Yp, class 
# 235
 = _Constructible< const shared_ptr< _Yp>  &> > 
# 236
shared_ptr(const shared_ptr< _Yp>  &__r) noexcept : __shared_ptr< _Tp> (__r) 
# 237
{ } 
# 244
shared_ptr(shared_ptr &&__r) noexcept : __shared_ptr< _Tp> (std::move(__r)) 
# 245
{ } 
# 252
template< class _Yp, class  = _Constructible< shared_ptr< _Yp> > > 
# 253
shared_ptr(shared_ptr< _Yp>  &&__r) noexcept : __shared_ptr< _Tp> (std::move(__r)) 
# 254
{ } 
# 264 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Yp, class  = _Constructible< const weak_ptr< _Yp>  &> > explicit 
# 265
shared_ptr(const weak_ptr< _Yp>  &__r) : __shared_ptr< _Tp> (__r) 
# 266
{ } 
# 269
template< class _Yp, class  = _Constructible< auto_ptr< _Yp> > > inline shared_ptr(auto_ptr< _Yp>  && __r); 
# 275
template< class _Yp, class _Del, class 
# 276
 = _Constructible< unique_ptr< _Yp, _Del> > > 
# 277
shared_ptr(unique_ptr< _Yp, _Del>  &&__r) : __shared_ptr< _Tp> (std::move(__r)) 
# 278
{ } 
# 284
template< class _Yp, class _Del, _Constructible< unique_ptr< _Yp, _Del> , std::__sp_array_delete>  *
# 285
 = 0> 
# 286
shared_ptr(unique_ptr< _Yp, _Del>  &&__r) : __shared_ptr< _Tp> (std::move(__r), std::__sp_array_delete()) 
# 287
{ } 
# 294
constexpr shared_ptr(std::nullptr_t) noexcept : shared_ptr() { } 
# 296
shared_ptr &operator=(const shared_ptr &) noexcept = default;
# 298
template< class _Yp> _Assignable< const shared_ptr< _Yp>  &>  
# 300
operator=(const shared_ptr< _Yp>  &__r) noexcept 
# 301
{ 
# 302
this->__shared_ptr< _Tp> ::operator=(__r); 
# 303
return *this; 
# 304
} 
# 307
template< class _Yp> _Assignable< auto_ptr< _Yp> >  
# 309
operator=(auto_ptr< _Yp>  &&__r) 
# 310
{ 
# 311
this->__shared_ptr< _Tp> ::operator=(std::move(__r)); 
# 312
return *this; 
# 313
} 
# 317
shared_ptr &operator=(shared_ptr &&__r) noexcept 
# 318
{ 
# 319
this->__shared_ptr< _Tp> ::operator=(std::move(__r)); 
# 320
return *this; 
# 321
} 
# 323
template< class _Yp> _Assignable< shared_ptr< _Yp> >  
# 325
operator=(shared_ptr< _Yp>  &&__r) noexcept 
# 326
{ 
# 327
this->__shared_ptr< _Tp> ::operator=(std::move(__r)); 
# 328
return *this; 
# 329
} 
# 331
template< class _Yp, class _Del> _Assignable< unique_ptr< _Yp, _Del> >  
# 333
operator=(unique_ptr< _Yp, _Del>  &&__r) 
# 334
{ 
# 335
this->__shared_ptr< _Tp> ::operator=(std::move(__r)); 
# 336
return *this; 
# 337
} 
# 342
private: 
# 341
template< class _Alloc, class ..._Args> 
# 342
shared_ptr(std::_Sp_make_shared_tag __tag, const _Alloc &__a, _Args &&...
# 343
__args) : __shared_ptr< _Tp> (__tag, __a, std::forward< _Args> (__args)...) 
# 345
{ } 
# 347
template< class _Yp, class _Alloc, class ..._Args> friend shared_ptr< _Yp>  allocate_shared(const _Alloc & __a, _Args && ...__args); 
# 352
shared_ptr(const weak_ptr< _Tp>  &__r, std::nothrow_t) : __shared_ptr< _Tp> (__r, std::nothrow) 
# 353
{ } 
# 355
friend class weak_ptr< _Tp> ; 
# 356
}; 
# 366 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Tp, class _Up> inline bool 
# 368
operator==(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 369
{ return __a.get() == __b.get(); } 
# 371
template< class _Tp> inline bool 
# 373
operator==(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 374
{ return !__a; } 
# 376
template< class _Tp> inline bool 
# 378
operator==(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 379
{ return !__a; } 
# 381
template< class _Tp, class _Up> inline bool 
# 383
operator!=(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 384
{ return __a.get() != __b.get(); } 
# 386
template< class _Tp> inline bool 
# 388
operator!=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 389
{ return (bool)__a; } 
# 391
template< class _Tp> inline bool 
# 393
operator!=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 394
{ return (bool)__a; } 
# 396
template< class _Tp, class _Up> inline bool 
# 398
operator<(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 399
{ 
# 400
using _Tp_elt = typename shared_ptr< _Tp> ::element_type; 
# 401
using _Up_elt = typename shared_ptr< _Up> ::element_type; 
# 402
using _Vp = typename common_type< typename shared_ptr< _Tp> ::element_type *, typename shared_ptr< _Up> ::element_type *> ::type; 
# 403
return less< typename common_type< typename shared_ptr< _Tp> ::element_type *, typename shared_ptr< _Up> ::element_type *> ::type> ()(__a.get(), __b.get()); 
# 404
} 
# 406
template< class _Tp> inline bool 
# 408
operator<(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 409
{ 
# 410
using _Tp_elt = typename shared_ptr< _Tp> ::element_type; 
# 411
return less< typename shared_ptr< _Tp> ::element_type *> ()(__a.get(), nullptr); 
# 412
} 
# 414
template< class _Tp> inline bool 
# 416
operator<(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 417
{ 
# 418
using _Tp_elt = typename shared_ptr< _Tp> ::element_type; 
# 419
return less< typename shared_ptr< _Tp> ::element_type *> ()(nullptr, __a.get()); 
# 420
} 
# 422
template< class _Tp, class _Up> inline bool 
# 424
operator<=(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 425
{ return !(__b < __a); } 
# 427
template< class _Tp> inline bool 
# 429
operator<=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 430
{ return !(nullptr < __a); } 
# 432
template< class _Tp> inline bool 
# 434
operator<=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 435
{ return !(__a < nullptr); } 
# 437
template< class _Tp, class _Up> inline bool 
# 439
operator>(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 440
{ return (__b < __a); } 
# 442
template< class _Tp> inline bool 
# 444
operator>(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 445
{ return nullptr < __a; } 
# 447
template< class _Tp> inline bool 
# 449
operator>(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 450
{ return __a < nullptr; } 
# 452
template< class _Tp, class _Up> inline bool 
# 454
operator>=(const shared_ptr< _Tp>  &__a, const shared_ptr< _Up>  &__b) noexcept 
# 455
{ return !(__a < __b); } 
# 457
template< class _Tp> inline bool 
# 459
operator>=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 460
{ return !(__a < nullptr); } 
# 462
template< class _Tp> inline bool 
# 464
operator>=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 465
{ return !(nullptr < __a); } 
# 467
template< class _Tp> 
# 468
struct less< shared_ptr< _Tp> >  : public _Sp_less< shared_ptr< _Tp> >  { 
# 469
}; 
# 472
template< class _Tp> inline void 
# 474
swap(shared_ptr< _Tp>  &__a, shared_ptr< _Tp>  &__b) noexcept 
# 475
{ __a.swap(__b); } 
# 478
template< class _Tp, class _Up> inline shared_ptr< _Tp>  
# 480
static_pointer_cast(const shared_ptr< _Up>  &__r) noexcept 
# 481
{ 
# 482
using _Sp = shared_ptr< _Tp> ; 
# 483
return _Sp(__r, static_cast< typename shared_ptr< _Tp> ::element_type *>(__r.get())); 
# 484
} 
# 486
template< class _Tp, class _Up> inline shared_ptr< _Tp>  
# 488
const_pointer_cast(const shared_ptr< _Up>  &__r) noexcept 
# 489
{ 
# 490
using _Sp = shared_ptr< _Tp> ; 
# 491
return _Sp(__r, const_cast< typename shared_ptr< _Tp> ::element_type *>(__r.get())); 
# 492
} 
# 494
template< class _Tp, class _Up> inline shared_ptr< _Tp>  
# 496
dynamic_pointer_cast(const shared_ptr< _Up>  &__r) noexcept 
# 497
{ 
# 498
using _Sp = shared_ptr< _Tp> ; 
# 499
if (auto *__p = dynamic_cast< typename shared_ptr< _Tp> ::element_type *>(__r.get())) { 
# 500
return _Sp(__r, __p); }  
# 501
return _Sp(); 
# 502
} 
# 519 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Tp> 
# 520
class weak_ptr : public __weak_ptr< _Tp>  { 
# 522
template< class _Arg> using _Constructible = typename enable_if< is_constructible< __weak_ptr< _Tp> , _Arg> ::value> ::type; 
# 527
template< class _Arg> using _Assignable = typename enable_if< is_assignable< __weak_ptr< _Tp>  &, _Arg> ::value, weak_ptr &> ::type; 
# 533
public: constexpr weak_ptr() noexcept = default;
# 535
template< class _Yp, class 
# 536
 = _Constructible< const shared_ptr< _Yp>  &> > 
# 537
weak_ptr(const shared_ptr< _Yp>  &__r) noexcept : __weak_ptr< _Tp> (__r) 
# 538
{ } 
# 540
weak_ptr(const weak_ptr &) noexcept = default;
# 542
template< class _Yp, class  = _Constructible< const weak_ptr< _Yp>  &> > 
# 543
weak_ptr(const weak_ptr< _Yp>  &__r) noexcept : __weak_ptr< _Tp> (__r) 
# 544
{ } 
# 546
weak_ptr(weak_ptr &&) noexcept = default;
# 548
template< class _Yp, class  = _Constructible< weak_ptr< _Yp> > > 
# 549
weak_ptr(weak_ptr< _Yp>  &&__r) noexcept : __weak_ptr< _Tp> (std::move(__r)) 
# 550
{ } 
# 553
weak_ptr &operator=(const weak_ptr & __r) noexcept = default;
# 555
template< class _Yp> _Assignable< const weak_ptr< _Yp>  &>  
# 557
operator=(const weak_ptr< _Yp>  &__r) noexcept 
# 558
{ 
# 559
this->__weak_ptr< _Tp> ::operator=(__r); 
# 560
return *this; 
# 561
} 
# 563
template< class _Yp> _Assignable< const shared_ptr< _Yp>  &>  
# 565
operator=(const shared_ptr< _Yp>  &__r) noexcept 
# 566
{ 
# 567
this->__weak_ptr< _Tp> ::operator=(__r); 
# 568
return *this; 
# 569
} 
# 572
weak_ptr &operator=(weak_ptr && __r) noexcept = default;
# 574
template< class _Yp> _Assignable< weak_ptr< _Yp> >  
# 576
operator=(weak_ptr< _Yp>  &&__r) noexcept 
# 577
{ 
# 578
this->__weak_ptr< _Tp> ::operator=(std::move(__r)); 
# 579
return *this; 
# 580
} 
# 583
shared_ptr< _Tp>  lock() const noexcept 
# 584
{ return shared_ptr< _Tp> (*this, std::nothrow); } 
# 585
}; 
# 593
template< class _Tp> inline void 
# 595
swap(weak_ptr< _Tp>  &__a, weak_ptr< _Tp>  &__b) noexcept 
# 596
{ __a.swap(__b); } 
# 600
template< class _Tp = void> struct owner_less; 
# 605
template<> struct owner_less< void>  : public _Sp_owner_less< void, void>  { 
# 606
}; 
# 609
template< class _Tp> 
# 610
struct owner_less< shared_ptr< _Tp> >  : public _Sp_owner_less< shared_ptr< _Tp> , weak_ptr< _Tp> >  { 
# 612
}; 
# 615
template< class _Tp> 
# 616
struct owner_less< weak_ptr< _Tp> >  : public _Sp_owner_less< weak_ptr< _Tp> , shared_ptr< _Tp> >  { 
# 618
}; 
# 623
template< class _Tp> 
# 624
class enable_shared_from_this { 
# 627
protected: constexpr enable_shared_from_this() noexcept { } 
# 629
enable_shared_from_this(const enable_shared_from_this &) noexcept { } 
# 632
enable_shared_from_this &operator=(const enable_shared_from_this &) noexcept 
# 633
{ return *this; } 
# 635
~enable_shared_from_this() { } 
# 639
public: shared_ptr< _Tp>  shared_from_this() 
# 640
{ return ((shared_ptr< _Tp> )(this->_M_weak_this)); } 
# 643
shared_ptr< const _Tp>  shared_from_this() const 
# 644
{ return ((shared_ptr< const _Tp> )(this->_M_weak_this)); } 
# 660 "/usr/include/c++/7/bits/shared_ptr.h" 3
private: 
# 658
template< class _Tp1> void 
# 660
_M_weak_assign(_Tp1 *__p, const __shared_count<>  &__n) const noexcept 
# 661
{ (_M_weak_this)._M_assign(__p, __n); } 
# 665
friend inline const enable_shared_from_this *__enable_shared_from_this_base(const std::__shared_count<>  &, const enable_shared_from_this< _Tp>  *
# 666
__p) 
# 667
{ return __p; } 
# 669
template< class , __gnu_cxx::_Lock_policy > friend class __shared_ptr; 
# 672
mutable weak_ptr< _Tp>  _M_weak_this; 
# 673
}; 
# 686 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Tp, class _Alloc, class ..._Args> inline shared_ptr< _Tp>  
# 688
allocate_shared(const _Alloc &__a, _Args &&...__args) 
# 689
{ 
# 690
return shared_ptr< _Tp> (_Sp_make_shared_tag(), __a, std::forward< _Args> (__args)...); 
# 692
} 
# 701 "/usr/include/c++/7/bits/shared_ptr.h" 3
template< class _Tp, class ..._Args> inline shared_ptr< _Tp>  
# 703
make_shared(_Args &&...__args) 
# 704
{ 
# 705
typedef typename remove_const< _Tp> ::type _Tp_nc; 
# 706
return std::allocate_shared< _Tp> (allocator< typename remove_const< _Tp> ::type> (), std::forward< _Args> (__args)...); 
# 708
} 
# 711
template< class _Tp> 
# 712
struct hash< shared_ptr< _Tp> >  : public __hash_base< unsigned long, shared_ptr< _Tp> >  { 
# 716
std::size_t operator()(const shared_ptr< _Tp>  &__s) const noexcept 
# 717
{ 
# 718
return std::hash< typename shared_ptr< _Tp> ::element_type *> ()(__s.get()); 
# 719
} 
# 720
}; 
# 725
}
# 35 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
struct _Sp_locker { 
# 46
_Sp_locker(const _Sp_locker &) = delete;
# 47
_Sp_locker &operator=(const _Sp_locker &) = delete;
# 51
explicit _Sp_locker(const void *) noexcept; 
# 52
_Sp_locker(const void *, const void *) noexcept; 
# 53
~_Sp_locker(); 
# 56
private: unsigned char _M_key1; 
# 57
unsigned char _M_key2; 
# 61
}; 
# 69
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 71
atomic_is_lock_free(const __shared_ptr< _Tp, _Lp>  *__p) 
# 72
{ 
# 74
return __gthread_active_p() == 0; 
# 78
} 
# 80
template< class _Tp> inline bool 
# 82
atomic_is_lock_free(const shared_ptr< _Tp>  *__p) 
# 83
{ return std::atomic_is_lock_free< _Tp, __gnu_cxx::__default_lock_policy> (__p); } 
# 96 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
template< class _Tp> inline shared_ptr< _Tp>  
# 98
atomic_load_explicit(const shared_ptr< _Tp>  *__p, memory_order) 
# 99
{ 
# 100
_Sp_locker __lock{__p}; 
# 101
return *__p; 
# 102
} 
# 104
template< class _Tp> inline shared_ptr< _Tp>  
# 106
atomic_load(const shared_ptr< _Tp>  *__p) 
# 107
{ return std::atomic_load_explicit(__p, memory_order_seq_cst); } 
# 109
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 111
atomic_load_explicit(const __shared_ptr< _Tp, _Lp>  *__p, memory_order) 
# 112
{ 
# 113
_Sp_locker __lock{__p}; 
# 114
return *__p; 
# 115
} 
# 117
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 119
atomic_load(const __shared_ptr< _Tp, _Lp>  *__p) 
# 120
{ return std::atomic_load_explicit(__p, memory_order_seq_cst); } 
# 132 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
template< class _Tp> inline void 
# 134
atomic_store_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r, memory_order) 
# 136
{ 
# 137
_Sp_locker __lock{__p}; 
# 138
__p->swap(__r); 
# 139
} 
# 141
template< class _Tp> inline void 
# 143
atomic_store(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r) 
# 144
{ std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); } 
# 146
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 148
atomic_store_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  
# 149
__r, memory_order) 
# 151
{ 
# 152
_Sp_locker __lock{__p}; 
# 153
__p->swap(__r); 
# 154
} 
# 156
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 158
atomic_store(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  __r) 
# 159
{ std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); } 
# 169 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
template< class _Tp> inline shared_ptr< _Tp>  
# 171
atomic_exchange_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r, memory_order) 
# 173
{ 
# 174
_Sp_locker __lock{__p}; 
# 175
__p->swap(__r); 
# 176
return __r; 
# 177
} 
# 179
template< class _Tp> inline shared_ptr< _Tp>  
# 181
atomic_exchange(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r) 
# 182
{ 
# 183
return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst); 
# 185
} 
# 187
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 189
atomic_exchange_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  
# 190
__r, memory_order) 
# 192
{ 
# 193
_Sp_locker __lock{__p}; 
# 194
__p->swap(__r); 
# 195
return __r; 
# 196
} 
# 198
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 200
atomic_exchange(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  __r) 
# 201
{ 
# 202
return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst); 
# 204
} 
# 218 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
template< class _Tp> bool 
# 220
atomic_compare_exchange_strong_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *
# 221
__v, shared_ptr< _Tp>  
# 222
__w, memory_order, memory_order) 
# 225
{ 
# 226
shared_ptr< _Tp>  __x; 
# 227
_Sp_locker __lock{__p, __v}; 
# 228
owner_less< shared_ptr< _Tp> >  __less; 
# 229
if (((*__p) == (*__v)) && (!__less(*__p, *__v)) && (!__less(*__v, *__p))) 
# 230
{ 
# 231
__x = std::move(*__p); 
# 232
(*__p) = std::move(__w); 
# 233
return true; 
# 234
}  
# 235
__x = std::move(*__v); 
# 236
(*__v) = (*__p); 
# 237
return false; 
# 238
} 
# 240
template< class _Tp> inline bool 
# 242
atomic_compare_exchange_strong(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *__v, shared_ptr< _Tp>  
# 243
__w) 
# 244
{ 
# 245
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 247
} 
# 249
template< class _Tp> inline bool 
# 251
atomic_compare_exchange_weak_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *
# 252
__v, shared_ptr< _Tp>  
# 253
__w, memory_order 
# 254
__success, memory_order 
# 255
__failure) 
# 256
{ 
# 257
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure); 
# 259
} 
# 261
template< class _Tp> inline bool 
# 263
atomic_compare_exchange_weak(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *__v, shared_ptr< _Tp>  
# 264
__w) 
# 265
{ 
# 266
return std::atomic_compare_exchange_weak_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 268
} 
# 270
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> bool 
# 272
atomic_compare_exchange_strong_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 273
__v, __shared_ptr< _Tp, _Lp>  
# 274
__w, memory_order, memory_order) 
# 277
{ 
# 278
__shared_ptr< _Tp, _Lp>  __x; 
# 279
_Sp_locker __lock{__p, __v}; 
# 280
owner_less< __shared_ptr< _Tp, _Lp> >  __less; 
# 281
if (((*__p) == (*__v)) && (!__less(*__p, *__v)) && (!__less(*__v, *__p))) 
# 282
{ 
# 283
__x = std::move(*__p); 
# 284
(*__p) = std::move(__w); 
# 285
return true; 
# 286
}  
# 287
__x = std::move(*__v); 
# 288
(*__v) = (*__p); 
# 289
return false; 
# 290
} 
# 292
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 294
atomic_compare_exchange_strong(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 295
__v, __shared_ptr< _Tp, _Lp>  
# 296
__w) 
# 297
{ 
# 298
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 300
} 
# 302
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 304
atomic_compare_exchange_weak_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 305
__v, __shared_ptr< _Tp, _Lp>  
# 306
__w, memory_order 
# 307
__success, memory_order 
# 308
__failure) 
# 309
{ 
# 310
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure); 
# 312
} 
# 314
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 316
atomic_compare_exchange_weak(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 317
__v, __shared_ptr< _Tp, _Lp>  
# 318
__w) 
# 319
{ 
# 320
return std::atomic_compare_exchange_weak_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 322
} 
# 328
}
# 36 "/usr/include/c++/7/backward/auto_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47 "/usr/include/c++/7/backward/auto_ptr.h" 3
template< class _Tp1> 
# 48
struct auto_ptr_ref { 
# 50
_Tp1 *_M_ptr; 
# 53
explicit auto_ptr_ref(_Tp1 *__p) : _M_ptr(__p) { } 
# 54
} __attribute((__deprecated__)); 
# 86 "/usr/include/c++/7/backward/auto_ptr.h" 3
template< class _Tp> 
# 87
class auto_ptr { 
# 90
_Tp *_M_ptr; 
# 94
public: typedef _Tp element_type; 
# 103
explicit auto_ptr(element_type *__p = 0) throw() : _M_ptr(__p) { } 
# 112 "/usr/include/c++/7/backward/auto_ptr.h" 3
auto_ptr(auto_ptr &__a) throw() : _M_ptr(__a.release()) { } 
# 124 "/usr/include/c++/7/backward/auto_ptr.h" 3
template< class _Tp1> 
# 125
auto_ptr(auto_ptr< _Tp1>  &__a) throw() : _M_ptr(__a.release()) { } 
# 136 "/usr/include/c++/7/backward/auto_ptr.h" 3
auto_ptr &operator=(auto_ptr &__a) throw() 
# 137
{ 
# 138
reset(__a.release()); 
# 139
return *this; 
# 140
} 
# 152 "/usr/include/c++/7/backward/auto_ptr.h" 3
template< class _Tp1> auto_ptr &
# 154
operator=(auto_ptr< _Tp1>  &__a) throw() 
# 155
{ 
# 156
reset(__a.release()); 
# 157
return *this; 
# 158
} 
# 170 "/usr/include/c++/7/backward/auto_ptr.h" 3
~auto_ptr() { delete (_M_ptr); } 
# 181 "/usr/include/c++/7/backward/auto_ptr.h" 3
element_type &operator*() const throw() 
# 182
{ 
# 183
; 
# 184
return *(_M_ptr); 
# 185
} 
# 194
element_type *operator->() const throw() 
# 195
{ 
# 196
; 
# 197
return _M_ptr; 
# 198
} 
# 211 "/usr/include/c++/7/backward/auto_ptr.h" 3
element_type *get() const throw() { return _M_ptr; } 
# 225 "/usr/include/c++/7/backward/auto_ptr.h" 3
element_type *release() throw() 
# 226
{ 
# 227
element_type *__tmp = _M_ptr; 
# 228
(_M_ptr) = 0; 
# 229
return __tmp; 
# 230
} 
# 240 "/usr/include/c++/7/backward/auto_ptr.h" 3
void reset(element_type *__p = 0) throw() 
# 241
{ 
# 242
if (__p != (_M_ptr)) 
# 243
{ 
# 244
delete (_M_ptr); 
# 245
(_M_ptr) = __p; 
# 246
}  
# 247
} 
# 264 "/usr/include/c++/7/backward/auto_ptr.h" 3
auto_ptr(auto_ptr_ref< element_type>  __ref) throw() : _M_ptr(((__ref._M_ptr))) 
# 265
{ } 
# 268
auto_ptr &operator=(auto_ptr_ref< element_type>  __ref) throw() 
# 269
{ 
# 270
if ((__ref._M_ptr) != get()) 
# 271
{ 
# 272
delete (_M_ptr); 
# 273
(_M_ptr) = (__ref._M_ptr); 
# 274
}  
# 275
return *this; 
# 276
} 
# 278
template< class _Tp1> 
# 279
operator auto_ptr_ref< _Tp1> () throw() 
# 280
{ return ((auto_ptr_ref< _Tp1> )(release())); } 
# 282
template< class _Tp1> 
# 283
operator auto_ptr< _Tp1> () throw() 
# 284
{ return ((auto_ptr< _Tp1> )(release())); } 
# 285
} __attribute((__deprecated__)); 
# 290
template<> class auto_ptr< void>  { 
# 293
public: typedef void element_type; 
# 294
} __attribute((__deprecated__)); 
# 297
template< __gnu_cxx::_Lock_policy _Lp> 
# 298
template< class _Tp> inline 
# 300
__shared_count< _Lp> ::__shared_count(auto_ptr< _Tp>  &&__r) : _M_pi(new _Sp_counted_ptr< _Tp *, _Lp> (__r.get())) 
# 302
{ __r.release(); } 
# 304
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 305
template< class _Tp1, class > inline 
# 307
__shared_ptr< _Tp, _Lp> ::__shared_ptr(auto_ptr< _Tp1>  &&__r) : _M_ptr(__r.get()), _M_refcount() 
# 309
{ 
# 311
static_assert((sizeof(_Tp1) > (0)), "incomplete type");
# 312
_Tp1 *__tmp = __r.get(); 
# 313
(_M_refcount) = ((__shared_count< _Lp> )(std::move(__r))); 
# 314
_M_enable_shared_from_this_with(__tmp); 
# 315
} 
# 317
template< class _Tp> 
# 318
template< class _Tp1, class > inline 
# 320
shared_ptr< _Tp> ::shared_ptr(auto_ptr< _Tp1>  &&__r) : __shared_ptr< _Tp> (std::move(__r)) 
# 321
{ } 
# 323
template< class _Tp, class _Dp> 
# 324
template< class _Up, class > inline 
# 326
unique_ptr< _Tp, _Dp> ::unique_ptr(auto_ptr< _Up>  &&__u) noexcept : _M_t(__u.release(), deleter_type()) 
# 327
{ } 
# 331
}
# 93 "/usr/include/c++/7/memory" 3
namespace std __attribute((__visibility__("default"))) { 
# 114 "/usr/include/c++/7/memory" 3
inline void *align(size_t __align, size_t __size, void *&__ptr, size_t &__space) noexcept 
# 115
{ 
# 116
const auto __intptr = reinterpret_cast< uintptr_t>(__ptr); 
# 117
const auto __aligned = ((__intptr - (1U)) + __align) & (-__align); 
# 118
const auto __diff = __aligned - __intptr; 
# 119
if ((__size + __diff) > __space) { 
# 120
return nullptr; } else 
# 122
{ 
# 123
__space -= __diff; 
# 124
return __ptr = (reinterpret_cast< void *>(__aligned)); 
# 125
}  
# 126
} 
# 130
enum class pointer_safety { relaxed, preferred, strict}; 
# 133
inline void declare_reachable(void *) { } 
# 135
template< class _Tp> inline _Tp *
# 137
undeclare_reachable(_Tp *__p) { return __p; } 
# 140
inline void declare_no_pointers(char *, size_t) { } 
# 143
inline void undeclare_no_pointers(char *, size_t) { } 
# 146
inline pointer_safety get_pointer_safety() noexcept { return pointer_safety::relaxed; } 
# 149
}
# 49 "/usr/include/c++/7/thread" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/7/thread" 3
class thread { 
# 67
public: struct _State { 
# 69
virtual ~_State(); 
# 70
virtual void _M_run() = 0; 
# 71
}; 
# 72
using _State_ptr = unique_ptr< _State> ; 
# 74
typedef __gthread_t native_handle_type; 
# 77
class id { 
# 79
native_handle_type _M_thread; 
# 82
public: id() noexcept : _M_thread() { } 
# 85
explicit id(native_handle_type __id) : _M_thread(__id) { } 
# 88
friend class thread; 
# 89
friend struct hash< id> ; 
# 92
friend inline bool operator==(id __x, id __y) noexcept; 
# 95
friend inline bool operator<(id __x, id __y) noexcept; 
# 97
template< class _CharT, class _Traits> friend inline basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __out, id __id); 
# 100
}; 
# 103
private: id _M_id; 
# 106
public: thread() noexcept = default;
# 109
thread(thread &) = delete;
# 110
thread(const thread &) = delete;
# 111
thread(const thread &&) = delete;
# 113
thread(thread &&__t) noexcept 
# 114
{ this->swap(__t); } 
# 116
template< class _Callable, class ..._Args> explicit 
# 118
thread(_Callable &&__f, _Args &&...__args) 
# 119
{ 
# 122
auto __depend = reinterpret_cast< void (*)(void)>(&pthread_create); 
# 126
this->_M_start_thread(_S_make_state(__make_invoker(std::forward< _Callable> (__f), std::forward< _Args> (__args)...)), __depend); 
# 130
} 
# 132
~thread() 
# 133
{ 
# 134
if (this->joinable()) { 
# 135
std::terminate(); }  
# 136
} 
# 138
thread &operator=(const thread &) = delete;
# 140
thread &operator=(thread &&__t) noexcept 
# 141
{ 
# 142
if (this->joinable()) { 
# 143
std::terminate(); }  
# 144
this->swap(__t); 
# 145
return *this; 
# 146
} 
# 149
void swap(thread &__t) noexcept 
# 150
{ std::swap(_M_id, __t._M_id); } 
# 153
bool joinable() const noexcept 
# 154
{ return !((_M_id) == id()); } 
# 157
void join(); 
# 160
void detach(); 
# 163
id get_id() const noexcept 
# 164
{ return _M_id; } 
# 169
native_handle_type native_handle() 
# 170
{ return (_M_id)._M_thread; } 
# 174
static unsigned hardware_concurrency() noexcept; 
# 178
private: 
# 177
template< class _Callable> 
# 178
struct _State_impl : public _State { 
# 180
_Callable _M_func; 
# 182
_State_impl(_Callable &&__f) : _M_func(std::forward< _Callable> (__f)) 
# 183
{ } 
# 186
virtual void _M_run() { (_M_func)(); } 
# 187
}; 
# 190
void _M_start_thread(_State_ptr, void (*)(void)); 
# 192
template< class _Callable> static _State_ptr 
# 194
_S_make_state(_Callable &&__f) 
# 195
{ 
# 196
using _Impl = _State_impl< _Callable> ; 
# 197
return _State_ptr{new _Impl{std::forward< _Callable> (__f)}}; 
# 198
} 
# 220 "/usr/include/c++/7/thread" 3
template< class _Tuple> 
# 221
struct _Invoker { 
# 223
_Tuple _M_t; 
# 225
template< size_t _Index> static __tuple_element_t< _Index, _Tuple>  &&_S_declval(); 
# 229
template< size_t ..._Ind> auto 
# 231
_M_invoke(_Index_tuple< _Ind...> ) noexcept(noexcept(std::__invoke(_S_declval< _Ind> ()...)))->__decltype((std::__invoke(_S_declval< _Ind> ()...))) 
# 234
{ return std::__invoke(std::get< _Ind> (std::move(_M_t))...); } 
# 236
using _Indices = typename _Build_index_tuple< tuple_size< _Tuple> ::value> ::__type; 
# 240
auto operator()() noexcept(noexcept(std::declval< _Invoker &> ()._M_invoke(_Indices())))->__decltype((std::declval< _Invoker &> ()._M_invoke(_Indices()))) 
# 243
{ return _M_invoke(_Indices()); } 
# 244
}; 
# 246
template< class ..._Tp> using __decayed_tuple = tuple< typename decay< _Tp> ::type...> ; 
# 254
public: 
# 252
template< class _Callable, class ..._Args> static _Invoker< __decayed_tuple< _Callable, _Args...> >  
# 254
__make_invoker(_Callable &&__callable, _Args &&...__args) 
# 255
{ 
# 256
return {__decayed_tuple< _Callable, _Args...> {std::forward< _Callable> (__callable), std::forward< _Args> (__args)...}}; 
# 259
} 
# 260
}; 
# 263
inline void swap(thread &__x, thread &__y) noexcept 
# 264
{ __x.swap(__y); } 
# 267
inline bool operator==(thread::id __x, thread::id __y) noexcept 
# 268
{ 
# 273
return (__x._M_thread) == (__y._M_thread); 
# 274
} 
# 277
inline bool operator!=(thread::id __x, thread::id __y) noexcept 
# 278
{ return !(__x == __y); } 
# 281
inline bool operator<(thread::id __x, thread::id __y) noexcept 
# 282
{ 
# 285
return (__x._M_thread) < (__y._M_thread); 
# 286
} 
# 289
inline bool operator<=(thread::id __x, thread::id __y) noexcept 
# 290
{ return !(__y < __x); } 
# 293
inline bool operator>(thread::id __x, thread::id __y) noexcept 
# 294
{ return (__y < __x); } 
# 297
inline bool operator>=(thread::id __x, thread::id __y) noexcept 
# 298
{ return !(__x < __y); } 
# 303
template<> struct hash< thread::id>  : public __hash_base< unsigned long, thread::id>  { 
# 307
size_t operator()(const thread::id &__id) const noexcept 
# 308
{ return std::_Hash_impl::hash(__id._M_thread); } 
# 309
}; 
# 311
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 313
operator<<(basic_ostream< _CharT, _Traits>  &__out, thread::id __id) 
# 314
{ 
# 315
if ((__id == thread::id())) { 
# 316
return __out << "thread::id of a non-executing thread"; } else { 
# 318
return __out << (__id._M_thread); }  
# 319
} 
# 327
namespace this_thread { 
# 333
inline thread::id get_id() noexcept 
# 334
{ 
# 340
if (!(__gthread_active_p())) { 
# 341
return ((thread::id)(1)); }  
# 343
return ((thread::id)(__gthread_self())); 
# 344
} 
# 348
inline void yield() noexcept 
# 349
{ 
# 351
__gthread_yield(); 
# 353
} 
# 356
void __sleep_for(chrono::seconds, chrono::nanoseconds); 
# 359
template< class _Rep, class _Period> inline void 
# 361
sleep_for(const chrono::duration< _Rep, _Period>  &__rtime) 
# 362
{ 
# 363
if (__rtime <= __rtime.zero()) { 
# 364
return; }  
# 365
auto __s = chrono::duration_cast< chrono::seconds> (__rtime); 
# 366
auto __ns = chrono::duration_cast< chrono::nanoseconds> (__rtime - __s); 
# 368
__gthread_time_t __ts = {static_cast< time_t>(__s.count()), static_cast< long>(__ns.count())}; 
# 373
while ((::nanosleep(&__ts, &__ts) == (-1)) && ((*__errno_location()) == 4)) 
# 374
{ }  
# 378
} 
# 381
template< class _Clock, class _Duration> inline void 
# 383
sleep_until(const chrono::time_point< _Clock, _Duration>  &__atime) 
# 384
{ 
# 385
auto __now = _Clock::now(); 
# 386
if (_Clock::is_steady) 
# 387
{ 
# 388
if (__now < __atime) { 
# 389
sleep_for(__atime - __now); }  
# 390
return; 
# 391
}  
# 392
while (__now < __atime) 
# 393
{ 
# 394
sleep_for(__atime - __now); 
# 395
__now = _Clock::now(); 
# 396
}  
# 397
} 
# 400
}
# 404
}
# 58 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ctime"
namespace cuda { namespace std { inline namespace __4 { 
# 60 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ctime" 3
using ::clock_t;
# 62
using ::time_t;
# 66
using ::tm;
# 70
using ::clock;
# 71
using ::difftime;
# 72
using ::mktime;
# 73
using ::time;
# 75
using ::asctime;
# 76
using ::ctime;
# 77
using ::gmtime;
# 78
using ::localtime;
# 80
using ::strftime;
# 88 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ctime"
}}}
# 92 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
namespace cuda { namespace std { inline namespace __4 { 
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
template< intmax_t _Xp, intmax_t _Yp> 
# 97
struct __static_gcd { 
# 99
static const intmax_t value = (__static_gcd< _Yp, _Xp % _Yp> ::value); 
# 100
}; 
# 102
template< intmax_t _Xp> 
# 103
struct __static_gcd< _Xp, 0>  { 
# 105
static const intmax_t value = _Xp; 
# 106
}; 
# 109
template<> struct __static_gcd< 0L, 0L>  { 
# 111
static const intmax_t value = (1); 
# 112
}; 
# 116
template< intmax_t _Xp, intmax_t _Yp> 
# 117
struct __static_lcm { 
# 119
static const intmax_t value = ((_Xp / __static_gcd< _Xp, _Yp> ::value) * _Yp); 
# 120
}; 
# 122
template< intmax_t _Xp> 
# 123
struct __static_abs { 
# 125
static const intmax_t value = ((_Xp < (0)) ? -_Xp : _Xp); 
# 126
}; 
# 128
template< intmax_t _Xp> 
# 129
struct __static_sign { 
# 131
static const intmax_t value = ((_Xp == (0)) ? 0 : ((_Xp < (0)) ? -1 : 1)); 
# 132
}; 
# 134
template< intmax_t _Xp, intmax_t _Yp, intmax_t  = __static_sign< _Yp> ::value> class __ll_add; 
# 137
template< intmax_t _Xp, intmax_t _Yp> 
# 138
class __ll_add< _Xp, _Yp, 1>  { 
# 140
static const intmax_t min = ((1LL << ((sizeof(intmax_t) * (8)) - (1))) + (1)); 
# 141
static const intmax_t max = (-min); 
# 143
static_assert((_Xp <= (max - _Yp)), "overflow in __ll_add");
# 145
public: static const intmax_t value = (_Xp + _Yp); 
# 146
}; 
# 148
template< intmax_t _Xp, intmax_t _Yp> 
# 149
class __ll_add< _Xp, _Yp, 0>  { 
# 152
public: static const intmax_t value = _Xp; 
# 153
}; 
# 155
template< intmax_t _Xp, intmax_t _Yp> 
# 156
class __ll_add< _Xp, _Yp, -1>  { 
# 158
static const intmax_t min = ((1LL << ((sizeof(intmax_t) * (8)) - (1))) + (1)); 
# 159
static const intmax_t max = (-min); 
# 161
static_assert(((min - _Yp) <= _Xp), "overflow in __ll_add");
# 163
public: static const intmax_t value = (_Xp + _Yp); 
# 164
}; 
# 166
template< intmax_t _Xp, intmax_t _Yp, intmax_t  = __static_sign< _Yp> ::value> class __ll_sub; 
# 169
template< intmax_t _Xp, intmax_t _Yp> 
# 170
class __ll_sub< _Xp, _Yp, 1>  { 
# 172
static const intmax_t min = ((1LL << ((sizeof(intmax_t) * (8)) - (1))) + (1)); 
# 173
static const intmax_t max = (-min); 
# 175
static_assert(((min + _Yp) <= _Xp), "overflow in __ll_sub");
# 177
public: static const intmax_t value = (_Xp - _Yp); 
# 178
}; 
# 180
template< intmax_t _Xp, intmax_t _Yp> 
# 181
class __ll_sub< _Xp, _Yp, 0>  { 
# 184
public: static const intmax_t value = _Xp; 
# 185
}; 
# 187
template< intmax_t _Xp, intmax_t _Yp> 
# 188
class __ll_sub< _Xp, _Yp, -1>  { 
# 190
static const intmax_t min = ((1LL << ((sizeof(intmax_t) * (8)) - (1))) + (1)); 
# 191
static const intmax_t max = (-min); 
# 193
static_assert((_Xp <= (max + _Yp)), "overflow in __ll_sub");
# 195
public: static const intmax_t value = (_Xp - _Yp); 
# 196
}; 
# 198
template< intmax_t _Xp, intmax_t _Yp> 
# 199
class __ll_mul { 
# 201
static const intmax_t nan = (1LL << ((sizeof(intmax_t) * (8)) - (1))); 
# 202
static const intmax_t min = (nan + (1)); 
# 203
static const intmax_t max = (-min); 
# 204
static const intmax_t __a_x = (__static_abs< _Xp> ::value); 
# 205
static const intmax_t __a_y = (__static_abs< _Yp> ::value); 
# 207
static_assert(((_Xp != nan) && (_Yp != nan) && (__a_x <= (max / __a_y))), "overflow in __ll_mul");
# 209
public: static const intmax_t value = (_Xp * _Yp); 
# 210
}; 
# 212
template< intmax_t _Yp> 
# 213
class __ll_mul< 0, _Yp>  { 
# 216
public: static const intmax_t value = (0); 
# 217
}; 
# 219
template< intmax_t _Xp> 
# 220
class __ll_mul< _Xp, 0>  { 
# 223
public: static const intmax_t value = (0); 
# 224
}; 
# 227
template<> class __ll_mul< 0L, 0L>  { 
# 230
public: static const intmax_t value = (0); 
# 231
}; 
# 234
template< intmax_t _Xp, intmax_t _Yp> 
# 235
class __ll_div { 
# 237
static const intmax_t nan = (1LL << ((sizeof(intmax_t) * (8)) - (1))); 
# 238
static const intmax_t min = (nan + (1)); 
# 239
static const intmax_t max = (-min); 
# 241
static_assert(((_Xp != nan) && (_Yp != nan) && (_Yp != (0))), "overflow in __ll_div");
# 243
public: static const intmax_t value = (_Xp / _Yp); 
# 244
}; 
# 246
template< intmax_t _Num, intmax_t _Den = 1L> 
# 247
class __attribute((__visibility__("default"))) ratio { 
# 249
static_assert((__static_abs< _Num> ::value >= 0), "ratio numerator is out of range");
# 250
static_assert((_Den != (0)), "ratio divide by 0");
# 251
static_assert((__static_abs< _Den> ::value > 0), "ratio denominator is out of range");
# 252
static constexpr const intmax_t __na = (__static_abs< _Num> ::value); 
# 253
static constexpr const intmax_t __da = (__static_abs< _Den> ::value); 
# 254
static constexpr const intmax_t __s = (__static_sign< _Num> ::value * __static_sign< _Den> ::value); 
# 255
static constexpr const intmax_t __gcd = (__static_gcd< __na, __da> ::value); 
# 257
public: static constexpr const intmax_t num = ((__s * __na) / __gcd); 
# 258
static constexpr const intmax_t den = (__da / __gcd); 
# 260
typedef ratio< num, den>  type; 
# 261
}; 
# 263
template< intmax_t _Num, intmax_t _Den> constexpr const intmax_t ratio< _Num, _Den> ::num; 
# 266
template< intmax_t _Num, intmax_t _Den> constexpr const intmax_t ratio< _Num, _Den> ::den; 
# 269
template< class _Tp> struct __is_ratio : public false_type { }; 
# 270
template< intmax_t _Num, intmax_t _Den> struct __is_ratio< ratio< _Num, _Den> >  : public true_type { }; 
# 272
typedef ratio< 1L, 1000000000000000000L>  atto; 
# 273
typedef ratio< 1L, 1000000000000000L>  femto; 
# 274
typedef ratio< 1L, 1000000000000L>  pico; 
# 275
typedef ratio< 1L, 1000000000L>  nano; 
# 276
typedef ratio< 1L, 1000000L>  micro; 
# 277
typedef ratio< 1L, 1000L>  milli; 
# 278
typedef ratio< 1L, 100L>  centi; 
# 279
typedef ratio< 1L, 10L>  deci; 
# 280
typedef ratio< 10L, 1L>  deca; 
# 281
typedef ratio< 100L, 1L>  hecto; 
# 282
typedef ratio< 1000L, 1L>  kilo; 
# 283
typedef ratio< 1000000L, 1L>  mega; 
# 284
typedef ratio< 1000000000L, 1L>  giga; 
# 285
typedef ratio< 1000000000000L, 1L>  tera; 
# 286
typedef ratio< 1000000000000000L, 1L>  peta; 
# 287
typedef ratio< 1000000000000000000L, 1L>  exa; 
# 289
template< class _R1, class _R2> 
# 290
struct __ratio_multiply { 
# 293
static const intmax_t __gcd_n1_d2 = (__static_gcd< _R1::num, _R2::den> ::value); 
# 294
static const intmax_t __gcd_d1_n2 = (__static_gcd< _R1::den, _R2::num> ::value); 
# 300
typedef typename ratio< __ll_mul< _R1::num / __gcd_n1_d2, _R2::num / __gcd_d1_n2> ::value, __ll_mul< _R2::den / __gcd_n1_d2, _R1::den / __gcd_d1_n2> ::value> ::type type; 
# 301
}; 
# 305
template< class _R1, class _R2> using ratio_multiply = typename __ratio_multiply< _R1, _R2> ::type; 
# 316 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
template< class _R1, class _R2> 
# 317
struct __ratio_divide { 
# 320
static const intmax_t __gcd_n1_n2 = (__static_gcd< _R1::num, _R2::num> ::value); 
# 321
static const intmax_t __gcd_d1_d2 = (__static_gcd< _R1::den, _R2::den> ::value); 
# 327
typedef typename ratio< __ll_mul< _R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2> ::value, __ll_mul< _R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2> ::value> ::type type; 
# 328
}; 
# 332
template< class _R1, class _R2> using ratio_divide = typename __ratio_divide< _R1, _R2> ::type; 
# 343 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
template< class _R1, class _R2> 
# 344
struct __ratio_add { 
# 347
static const intmax_t __gcd_n1_n2 = (__static_gcd< _R1::num, _R2::num> ::value); 
# 348
static const intmax_t __gcd_d1_d2 = (__static_gcd< _R1::den, _R2::den> ::value); 
# 362
typedef typename __ratio_multiply< ratio< __gcd_n1_n2, _R1::den / __gcd_d1_d2> , ratio< __ll_add< __ll_mul< _R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2> ::value, __ll_mul< _R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2> ::value> ::value, _R2::den> > ::type::type type; 
# 363
}; 
# 367
template< class _R1, class _R2> using ratio_add = typename __ratio_add< _R1, _R2> ::type; 
# 378 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
template< class _R1, class _R2> 
# 379
struct __ratio_subtract { 
# 382
static const intmax_t __gcd_n1_n2 = (__static_gcd< _R1::num, _R2::num> ::value); 
# 383
static const intmax_t __gcd_d1_d2 = (__static_gcd< _R1::den, _R2::den> ::value); 
# 397
typedef typename __ratio_multiply< ratio< __gcd_n1_n2, _R1::den / __gcd_d1_d2> , ratio< __ll_sub< __ll_mul< _R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2> ::value, __ll_mul< _R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2> ::value> ::value, _R2::den> > ::type::type type; 
# 398
}; 
# 402
template< class _R1, class _R2> using ratio_subtract = typename __ratio_subtract< _R1, _R2> ::type; 
# 415 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio" 3
template< class _R1, class _R2> 
# 416
struct __attribute((__visibility__("default"))) ratio_equal : public bool_constant< (_R1::num == _R2::num) && (_R1::den == _R2::den)>  { 
# 417
}; 
# 419
template< class _R1, class _R2> 
# 420
struct __attribute((__visibility__("default"))) ratio_not_equal : public bool_constant< !ratio_equal< _R1, _R2> ::value>  { 
# 421
}; 
# 425
template< class _R1, class _R2, bool _Odd = false, intmax_t 
# 426
_Q1 = _R1::num / _R1::den, intmax_t _M1 = _R1::num % _R1::den, intmax_t 
# 427
_Q2 = _R2::num / _R2::den, intmax_t _M2 = _R2::num % _R2::den> 
# 428
struct __ratio_less1 { 
# 430
static const bool value = (_Odd ? _Q2 < _Q1 : (_Q1 < _Q2)); 
# 431
}; 
# 433
template< class _R1, class _R2, bool _Odd, intmax_t _Qp> 
# 434
struct __ratio_less1< _R1, _R2, _Odd, _Qp, 0, _Qp, 0>  { 
# 436
static const bool value = false; 
# 437
}; 
# 439
template< class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M2> 
# 440
struct __ratio_less1< _R1, _R2, _Odd, _Qp, 0, _Qp, _M2>  { 
# 442
static const bool value = (!_Odd); 
# 443
}; 
# 445
template< class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1> 
# 446
struct __ratio_less1< _R1, _R2, _Odd, _Qp, _M1, _Qp, 0>  { 
# 448
static const bool value = _Odd; 
# 449
}; 
# 451
template< class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1, intmax_t 
# 452
_M2> 
# 453
struct __ratio_less1< _R1, _R2, _Odd, _Qp, _M1, _Qp, _M2>  { 
# 455
static const bool value = (__ratio_less1< ratio< _R1::den, _M1> , ratio< _R2::den, _M2> , !_Odd> ::value); 
# 457
}; 
# 459
template< class _R1, class _R2, intmax_t _S1 = __static_sign< _R1::num> ::value, intmax_t 
# 460
_S2 = __static_sign< _R2::num> ::value> 
# 461
struct __ratio_less { 
# 463
static const bool value = (_S1 < _S2); 
# 464
}; 
# 466
template< class _R1, class _R2> 
# 467
struct __ratio_less< _R1, _R2, 1LL, 1LL>  { 
# 469
static const bool value = (__ratio_less1< _R1, _R2> ::value); 
# 470
}; 
# 472
template< class _R1, class _R2> 
# 473
struct __ratio_less< _R1, _R2, -1LL, -1LL>  { 
# 475
static const bool value = (__ratio_less1< ratio< -_R2::num, _R2::den> , ratio< -_R1::num, _R1::den> > ::value); 
# 476
}; 
# 478
template< class _R1, class _R2> 
# 479
struct __attribute((__visibility__("default"))) ratio_less : public bool_constant< __ratio_less< _R1, _R2> ::value>  { 
# 480
}; 
# 482
template< class _R1, class _R2> 
# 483
struct __attribute((__visibility__("default"))) ratio_less_equal : public bool_constant< !ratio_less< _R2, _R1> ::value>  { 
# 484
}; 
# 486
template< class _R1, class _R2> 
# 487
struct __attribute((__visibility__("default"))) ratio_greater : public bool_constant< ratio_less< _R2, _R1> ::value>  { 
# 488
}; 
# 490
template< class _R1, class _R2> 
# 491
struct __attribute((__visibility__("default"))) ratio_greater_equal : public bool_constant< !ratio_less< _R1, _R2> ::value>  { 
# 492
}; 
# 494
template< class _R1, class _R2> 
# 495
struct __ratio_gcd { 
# 498
typedef ratio< __static_gcd< _R1::num, _R2::num> ::value, __static_lcm< _R1::den, _R2::den> ::value>  type; 
# 499
}; 
# 527 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/ratio"
}}}
# 127 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
namespace cuda { namespace std { inline namespace __4 { 
# 129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
enum float_round_style { 
# 131
round_indeterminate = (-1), 
# 132
round_toward_zero = 0, 
# 133
round_to_nearest, 
# 134
round_toward_infinity, 
# 135
round_toward_neg_infinity
# 136
}; 
# 138
enum float_denorm_style { 
# 140
denorm_indeterminate = (-1), 
# 141
denorm_absent = 0, 
# 142
denorm_present
# 143
}; 
# 145
template< class _Tp, bool  = is_arithmetic< _Tp> ::value> 
# 146
class __libcpp_numeric_limits { 
# 149
protected: typedef _Tp type; 
# 151
static constexpr const bool is_specialized = false; 
# 152 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return type(); } 
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return type(); } 
# 154 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return type(); } 
# 156
static constexpr const int digits = 0; 
# 157
static constexpr const int digits10 = 0; 
# 158
static constexpr const int max_digits10 = 0; 
# 159
static constexpr const bool is_signed = false; 
# 160
static constexpr const bool is_integer = false; 
# 161
static constexpr const bool is_exact = false; 
# 162
static constexpr const int radix = 0; 
# 163 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return type(); } 
# 164 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return type(); } 
# 166
static constexpr const int min_exponent = 0; 
# 167
static constexpr const int min_exponent10 = 0; 
# 168
static constexpr const int max_exponent = 0; 
# 169
static constexpr const int max_exponent10 = 0; 
# 171
static constexpr const bool has_infinity = false; 
# 172
static constexpr const bool has_quiet_NaN = false; 
# 173
static constexpr const bool has_signaling_NaN = false; 
# 174
static constexpr const float_denorm_style has_denorm = denorm_absent; 
# 175
static constexpr const bool has_denorm_loss = false; 
# 176 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return type(); } 
# 177 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return type(); } 
# 178 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return type(); } 
# 179 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return type(); } 
# 181
static constexpr const bool is_iec559 = false; 
# 182
static constexpr const bool is_bounded = false; 
# 183
static constexpr const bool is_modulo = false; 
# 185
static constexpr const bool traps = false; 
# 186
static constexpr const bool tinyness_before = false; 
# 187
static constexpr const float_round_style round_style = round_toward_zero; 
# 188
}; 
# 190
template< class _Tp, int __digits, bool _IsSigned> 
# 191
struct __libcpp_compute_min { 
# 193
static constexpr const _Tp value = ((_Tp)(((_Tp)1) << __digits)); 
# 194
}; 
# 196
template< class _Tp, int __digits> 
# 197
struct __libcpp_compute_min< _Tp, __digits, false>  { 
# 199
static constexpr const _Tp value = ((_Tp)0); 
# 200
}; 
# 202
template< class _Tp> 
# 203
class __libcpp_numeric_limits< _Tp, true>  { 
# 206
protected: typedef _Tp type; 
# 208
static constexpr const bool is_specialized = true; 
# 210
static constexpr const bool is_signed = (((type)(-1)) < ((type)0)); 
# 211
static constexpr const int digits = (static_cast< int>((sizeof(type) * (8)) - is_signed)); 
# 212
static constexpr const int digits10 = ((digits * 3) / 10); 
# 213
static constexpr const int max_digits10 = 0; 
# 214
static constexpr const type __min = (__libcpp_compute_min< type, digits, is_signed> ::value); 
# 215
static constexpr const type __max = (is_signed ? (type)(((type)(~0)) ^ __min) : ((type)(~0))); 
# 216 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __min; } 
# 217 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __max; } 
# 218 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return (min)(); } 
# 220
static constexpr const bool is_integer = true; 
# 221
static constexpr const bool is_exact = true; 
# 222
static constexpr const int radix = 2; 
# 223 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return (type)0; } 
# 224 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return (type)0; } 
# 226
static constexpr const int min_exponent = 0; 
# 227
static constexpr const int min_exponent10 = 0; 
# 228
static constexpr const int max_exponent = 0; 
# 229
static constexpr const int max_exponent10 = 0; 
# 231
static constexpr const bool has_infinity = false; 
# 232
static constexpr const bool has_quiet_NaN = false; 
# 233
static constexpr const bool has_signaling_NaN = false; 
# 234
static constexpr const float_denorm_style has_denorm = denorm_absent; 
# 235
static constexpr const bool has_denorm_loss = false; 
# 236 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return (type)0; } 
# 237 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return (type)0; } 
# 238 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return (type)0; } 
# 239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return (type)0; } 
# 241
static constexpr const bool is_iec559 = false; 
# 242
static constexpr const bool is_bounded = true; 
# 243
static constexpr const bool is_modulo = (!cuda::std::__4::template is_signed< _Tp> ::value); 
# 247 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr const bool traps = true; 
# 251
static constexpr const bool tinyness_before = false; 
# 252
static constexpr const float_round_style round_style = round_toward_zero; 
# 253
}; 
# 256
template<> class __libcpp_numeric_limits< bool, true>  { 
# 259
protected: typedef bool type; 
# 261
static constexpr const bool is_specialized = true; 
# 263
static constexpr const bool is_signed = false; 
# 264
static constexpr const int digits = 1; 
# 265
static constexpr const int digits10 = 0; 
# 266
static constexpr const int max_digits10 = 0; 
# 267
static constexpr const type __min = false; 
# 268
static constexpr const type __max = true; 
# 269 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __min; } 
# 270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __max; } 
# 271 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return min(); } 
# 273
static constexpr const bool is_integer = true; 
# 274
static constexpr const bool is_exact = true; 
# 275
static constexpr const int radix = 2; 
# 276 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return (type)0; } 
# 277 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return (type)0; } 
# 279
static constexpr const int min_exponent = 0; 
# 280
static constexpr const int min_exponent10 = 0; 
# 281
static constexpr const int max_exponent = 0; 
# 282
static constexpr const int max_exponent10 = 0; 
# 284
static constexpr const bool has_infinity = false; 
# 285
static constexpr const bool has_quiet_NaN = false; 
# 286
static constexpr const bool has_signaling_NaN = false; 
# 287
static constexpr const float_denorm_style has_denorm = denorm_absent; 
# 288
static constexpr const bool has_denorm_loss = false; 
# 289 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return (type)0; } 
# 290 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return (type)0; } 
# 291 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return (type)0; } 
# 292 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return (type)0; } 
# 294
static constexpr const bool is_iec559 = false; 
# 295
static constexpr const bool is_bounded = true; 
# 296
static constexpr const bool is_modulo = false; 
# 298
static constexpr const bool traps = false; 
# 299
static constexpr const bool tinyness_before = false; 
# 300
static constexpr const float_round_style round_style = round_toward_zero; 
# 301
}; 
# 304
template<> class __libcpp_numeric_limits< float, true>  { 
# 307
protected: typedef float type; 
# 309
static constexpr const bool is_specialized = true; 
# 311
static constexpr const bool is_signed = true; 
# 312
static constexpr const int digits = 24; 
# 313
static constexpr const int digits10 = 6; 
# 314
static constexpr const int max_digits10 = ((2) + ((digits * 30103L) / 100000L)); 
# 315 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return (1.1754944E-38F); } 
# 316 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return (3.4028235E38F); } 
# 317 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return -max(); } 
# 319
static constexpr const bool is_integer = false; 
# 320
static constexpr const bool is_exact = false; 
# 321
static constexpr const int radix = 2; 
# 322 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return (1.1920929E-7F); } 
# 323 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return (0.5F); } 
# 325
static constexpr const int min_exponent = (-125); 
# 326
static constexpr const int min_exponent10 = (-37); 
# 327
static constexpr const int max_exponent = 128; 
# 328
static constexpr const int max_exponent10 = 38; 
# 330
static constexpr const bool has_infinity = true; 
# 331
static constexpr const bool has_quiet_NaN = true; 
# 332
static constexpr const bool has_signaling_NaN = true; 
# 333
static constexpr const float_denorm_style has_denorm = denorm_present; 
# 334
static constexpr const bool has_denorm_loss = false; 
# 340 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __builtin_huge_valf(); } 
# 341 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 342 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 344 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return (1.4E-45F); } 
# 346
static constexpr const bool is_iec559 = true; 
# 347
static constexpr const bool is_bounded = true; 
# 348
static constexpr const bool is_modulo = false; 
# 350
static constexpr const bool traps = false; 
# 351
static constexpr const bool tinyness_before = false; 
# 352
static constexpr const float_round_style round_style = round_to_nearest; 
# 353
}; 
# 356
template<> class __libcpp_numeric_limits< double, true>  { 
# 359
protected: typedef double type; 
# 361
static constexpr const bool is_specialized = true; 
# 363
static constexpr const bool is_signed = true; 
# 364
static constexpr const int digits = 53; 
# 365
static constexpr const int digits10 = 15; 
# 366
static constexpr const int max_digits10 = ((2) + ((digits * 30103L) / 100000L)); 
# 367 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 368 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return -max(); } 
# 371
static constexpr const bool is_integer = false; 
# 372
static constexpr const bool is_exact = false; 
# 373
static constexpr const int radix = 2; 
# 374 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 375 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return (0.5); } 
# 377
static constexpr const int min_exponent = (-1021); 
# 378
static constexpr const int min_exponent10 = (-307); 
# 379
static constexpr const int max_exponent = 1024; 
# 380
static constexpr const int max_exponent10 = 308; 
# 382
static constexpr const bool has_infinity = true; 
# 383
static constexpr const bool has_quiet_NaN = true; 
# 384
static constexpr const bool has_signaling_NaN = true; 
# 385
static constexpr const float_denorm_style has_denorm = denorm_present; 
# 386
static constexpr const bool has_denorm_loss = false; 
# 392 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __builtin_huge_val(); } 
# 393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __builtin_nan(""); } 
# 394 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __builtin_nans(""); } 
# 396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 398
static constexpr const bool is_iec559 = true; 
# 399
static constexpr const bool is_bounded = true; 
# 400
static constexpr const bool is_modulo = false; 
# 402
static constexpr const bool traps = false; 
# 403
static constexpr const bool tinyness_before = false; 
# 404
static constexpr const float_round_style round_style = round_to_nearest; 
# 405
}; 
# 408
template<> class __libcpp_numeric_limits< long double, true>  { 
# 457 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
}; 
# 459
template< class _Tp> 
# 460
class __attribute((__visibility__("default"))) numeric_limits : private __libcpp_numeric_limits< typename remove_cv< _Tp> ::type>  { 
# 463
typedef __libcpp_numeric_limits< typename remove_cv< _Tp> ::type>  __base; 
# 464
typedef typename __libcpp_numeric_limits< typename remove_cv< _Tp> ::type> ::type type; 
# 466
public: static constexpr const bool is_specialized = (__base::is_specialized); 
# 467 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __base::min(); } 
# 468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __base::max(); } 
# 469 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return __base::lowest(); } 
# 471
static constexpr const int digits = (__base::digits); 
# 472
static constexpr const int digits10 = (__base::digits10); 
# 473
static constexpr const int max_digits10 = (__base::max_digits10); 
# 474
static constexpr const bool is_signed = (__base::is_signed); 
# 475
static constexpr const bool is_integer = (__base::is_integer); 
# 476
static constexpr const bool is_exact = (__base::is_exact); 
# 477
static constexpr const int radix = (__base::radix); 
# 478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return __base::epsilon(); } 
# 479 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return __base::round_error(); } 
# 481
static constexpr const int min_exponent = (__base::min_exponent); 
# 482
static constexpr const int min_exponent10 = (__base::min_exponent10); 
# 483
static constexpr const int max_exponent = (__base::max_exponent); 
# 484
static constexpr const int max_exponent10 = (__base::max_exponent10); 
# 486
static constexpr const bool has_infinity = (__base::has_infinity); 
# 487
static constexpr const bool has_quiet_NaN = (__base::has_quiet_NaN); 
# 488
static constexpr const bool has_signaling_NaN = (__base::has_signaling_NaN); 
# 489
static constexpr const __4::float_denorm_style has_denorm = (__base::has_denorm); 
# 490
static constexpr const bool has_denorm_loss = (__base::has_denorm_loss); 
# 491 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __base::infinity(); } 
# 492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); } 
# 493 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); } 
# 494 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return __base::denorm_min(); } 
# 496
static constexpr const bool is_iec559 = (__base::is_iec559); 
# 497
static constexpr const bool is_bounded = (__base::is_bounded); 
# 498
static constexpr const bool is_modulo = (__base::is_modulo); 
# 500
static constexpr const bool traps = (__base::traps); 
# 501
static constexpr const bool tinyness_before = (__base::tinyness_before); 
# 502
static constexpr const __4::float_round_style round_style = (__base::round_style); 
# 503
}; 
# 505
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_specialized; 
# 507
template< class _Tp> constexpr const int numeric_limits< _Tp> ::digits; 
# 509
template< class _Tp> constexpr const int numeric_limits< _Tp> ::digits10; 
# 511
template< class _Tp> constexpr const int numeric_limits< _Tp> ::max_digits10; 
# 513
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_signed; 
# 515
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_integer; 
# 517
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_exact; 
# 519
template< class _Tp> constexpr const int numeric_limits< _Tp> ::radix; 
# 521
template< class _Tp> constexpr const int numeric_limits< _Tp> ::min_exponent; 
# 523
template< class _Tp> constexpr const int numeric_limits< _Tp> ::min_exponent10; 
# 525
template< class _Tp> constexpr const int numeric_limits< _Tp> ::max_exponent; 
# 527
template< class _Tp> constexpr const int numeric_limits< _Tp> ::max_exponent10; 
# 529
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::has_infinity; 
# 531
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::has_quiet_NaN; 
# 533
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::has_signaling_NaN; 
# 535
template< class _Tp> constexpr const float_denorm_style numeric_limits< _Tp> ::has_denorm; 
# 537
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::has_denorm_loss; 
# 539
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_iec559; 
# 541
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_bounded; 
# 543
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::is_modulo; 
# 545
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::traps; 
# 547
template< class _Tp> constexpr const bool numeric_limits< _Tp> ::tinyness_before; 
# 549
template< class _Tp> constexpr const float_round_style numeric_limits< _Tp> ::round_style; 
# 552
template< class _Tp> 
# 553
class __attribute((__visibility__("default"))) numeric_limits< const _Tp>  : private __4::numeric_limits< _Tp>  { 
# 556
typedef __4::numeric_limits< _Tp>  __base; 
# 557
typedef _Tp type; 
# 559
public: static constexpr const bool is_specialized = (__base::is_specialized); 
# 560 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __base::min(); } 
# 561 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __base::max(); } 
# 562 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return __base::lowest(); } 
# 564
static constexpr const int digits = (__base::digits); 
# 565
static constexpr const int digits10 = (__base::digits10); 
# 566
static constexpr const int max_digits10 = (__base::max_digits10); 
# 567
static constexpr const bool is_signed = (__base::is_signed); 
# 568
static constexpr const bool is_integer = (__base::is_integer); 
# 569
static constexpr const bool is_exact = (__base::is_exact); 
# 570
static constexpr const int radix = (__base::radix); 
# 571 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return __base::epsilon(); } 
# 572 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return __base::round_error(); } 
# 574
static constexpr const int min_exponent = (__base::min_exponent); 
# 575
static constexpr const int min_exponent10 = (__base::min_exponent10); 
# 576
static constexpr const int max_exponent = (__base::max_exponent); 
# 577
static constexpr const int max_exponent10 = (__base::max_exponent10); 
# 579
static constexpr const bool has_infinity = (__base::has_infinity); 
# 580
static constexpr const bool has_quiet_NaN = (__base::has_quiet_NaN); 
# 581
static constexpr const bool has_signaling_NaN = (__base::has_signaling_NaN); 
# 582
static constexpr const __4::float_denorm_style has_denorm = (__base::has_denorm); 
# 583
static constexpr const bool has_denorm_loss = (__base::has_denorm_loss); 
# 584 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __base::infinity(); } 
# 585 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); } 
# 586 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); } 
# 587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return __base::denorm_min(); } 
# 589
static constexpr const bool is_iec559 = (__base::is_iec559); 
# 590
static constexpr const bool is_bounded = (__base::is_bounded); 
# 591
static constexpr const bool is_modulo = (__base::is_modulo); 
# 593
static constexpr const bool traps = (__base::traps); 
# 594
static constexpr const bool tinyness_before = (__base::tinyness_before); 
# 595
static constexpr const __4::float_round_style round_style = (__base::round_style); 
# 596
}; 
# 598
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_specialized; 
# 600
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::digits; 
# 602
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::digits10; 
# 604
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::max_digits10; 
# 606
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_signed; 
# 608
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_integer; 
# 610
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_exact; 
# 612
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::radix; 
# 614
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::min_exponent; 
# 616
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::min_exponent10; 
# 618
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::max_exponent; 
# 620
template< class _Tp> constexpr const int numeric_limits< const _Tp> ::max_exponent10; 
# 622
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::has_infinity; 
# 624
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::has_quiet_NaN; 
# 626
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::has_signaling_NaN; 
# 628
template< class _Tp> constexpr const float_denorm_style numeric_limits< const _Tp> ::has_denorm; 
# 630
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::has_denorm_loss; 
# 632
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_iec559; 
# 634
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_bounded; 
# 636
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::is_modulo; 
# 638
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::traps; 
# 640
template< class _Tp> constexpr const bool numeric_limits< const _Tp> ::tinyness_before; 
# 642
template< class _Tp> constexpr const float_round_style numeric_limits< const _Tp> ::round_style; 
# 645
template< class _Tp> 
# 646
class __attribute((__visibility__("default"))) numeric_limits< volatile _Tp>  : private __4::numeric_limits< _Tp>  { 
# 649
typedef __4::numeric_limits< _Tp>  __base; 
# 650
typedef _Tp type; 
# 652
public: static constexpr const bool is_specialized = (__base::is_specialized); 
# 653 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __base::min(); } 
# 654 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __base::max(); } 
# 655 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return __base::lowest(); } 
# 657
static constexpr const int digits = (__base::digits); 
# 658
static constexpr const int digits10 = (__base::digits10); 
# 659
static constexpr const int max_digits10 = (__base::max_digits10); 
# 660
static constexpr const bool is_signed = (__base::is_signed); 
# 661
static constexpr const bool is_integer = (__base::is_integer); 
# 662
static constexpr const bool is_exact = (__base::is_exact); 
# 663
static constexpr const int radix = (__base::radix); 
# 664 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return __base::epsilon(); } 
# 665 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return __base::round_error(); } 
# 667
static constexpr const int min_exponent = (__base::min_exponent); 
# 668
static constexpr const int min_exponent10 = (__base::min_exponent10); 
# 669
static constexpr const int max_exponent = (__base::max_exponent); 
# 670
static constexpr const int max_exponent10 = (__base::max_exponent10); 
# 672
static constexpr const bool has_infinity = (__base::has_infinity); 
# 673
static constexpr const bool has_quiet_NaN = (__base::has_quiet_NaN); 
# 674
static constexpr const bool has_signaling_NaN = (__base::has_signaling_NaN); 
# 675
static constexpr const __4::float_denorm_style has_denorm = (__base::has_denorm); 
# 676
static constexpr const bool has_denorm_loss = (__base::has_denorm_loss); 
# 677 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __base::infinity(); } 
# 678 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); } 
# 679 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); } 
# 680 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return __base::denorm_min(); } 
# 682
static constexpr const bool is_iec559 = (__base::is_iec559); 
# 683
static constexpr const bool is_bounded = (__base::is_bounded); 
# 684
static constexpr const bool is_modulo = (__base::is_modulo); 
# 686
static constexpr const bool traps = (__base::traps); 
# 687
static constexpr const bool tinyness_before = (__base::tinyness_before); 
# 688
static constexpr const __4::float_round_style round_style = (__base::round_style); 
# 689
}; 
# 691
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_specialized; 
# 693
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::digits; 
# 695
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::digits10; 
# 697
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::max_digits10; 
# 699
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_signed; 
# 701
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_integer; 
# 703
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_exact; 
# 705
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::radix; 
# 707
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::min_exponent; 
# 709
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::min_exponent10; 
# 711
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::max_exponent; 
# 713
template< class _Tp> constexpr const int numeric_limits< volatile _Tp> ::max_exponent10; 
# 715
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::has_infinity; 
# 717
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::has_quiet_NaN; 
# 719
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::has_signaling_NaN; 
# 721
template< class _Tp> constexpr const float_denorm_style numeric_limits< volatile _Tp> ::has_denorm; 
# 723
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::has_denorm_loss; 
# 725
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_iec559; 
# 727
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_bounded; 
# 729
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::is_modulo; 
# 731
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::traps; 
# 733
template< class _Tp> constexpr const bool numeric_limits< volatile _Tp> ::tinyness_before; 
# 735
template< class _Tp> constexpr const float_round_style numeric_limits< volatile _Tp> ::round_style; 
# 738
template< class _Tp> 
# 739
class __attribute((__visibility__("default"))) numeric_limits< const volatile _Tp>  : private __4::numeric_limits< _Tp>  { 
# 742
typedef __4::numeric_limits< _Tp>  __base; 
# 743
typedef _Tp type; 
# 745
public: static constexpr const bool is_specialized = (__base::is_specialized); 
# 746 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type min() noexcept { return __base::min(); } 
# 747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type max() noexcept { return __base::max(); } 
# 748 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type lowest() noexcept { return __base::lowest(); } 
# 750
static constexpr const int digits = (__base::digits); 
# 751
static constexpr const int digits10 = (__base::digits10); 
# 752
static constexpr const int max_digits10 = (__base::max_digits10); 
# 753
static constexpr const bool is_signed = (__base::is_signed); 
# 754
static constexpr const bool is_integer = (__base::is_integer); 
# 755
static constexpr const bool is_exact = (__base::is_exact); 
# 756
static constexpr const int radix = (__base::radix); 
# 757 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type epsilon() noexcept { return __base::epsilon(); } 
# 758 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type round_error() noexcept { return __base::round_error(); } 
# 760
static constexpr const int min_exponent = (__base::min_exponent); 
# 761
static constexpr const int min_exponent10 = (__base::min_exponent10); 
# 762
static constexpr const int max_exponent = (__base::max_exponent); 
# 763
static constexpr const int max_exponent10 = (__base::max_exponent10); 
# 765
static constexpr const bool has_infinity = (__base::has_infinity); 
# 766
static constexpr const bool has_quiet_NaN = (__base::has_quiet_NaN); 
# 767
static constexpr const bool has_signaling_NaN = (__base::has_signaling_NaN); 
# 768
static constexpr const __4::float_denorm_style has_denorm = (__base::has_denorm); 
# 769
static constexpr const bool has_denorm_loss = (__base::has_denorm_loss); 
# 770 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type infinity() noexcept { return __base::infinity(); } 
# 771 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); } 
# 772 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); } 
# 773 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits" 3
static constexpr type denorm_min() noexcept { return __base::denorm_min(); } 
# 775
static constexpr const bool is_iec559 = (__base::is_iec559); 
# 776
static constexpr const bool is_bounded = (__base::is_bounded); 
# 777
static constexpr const bool is_modulo = (__base::is_modulo); 
# 779
static constexpr const bool traps = (__base::traps); 
# 780
static constexpr const bool tinyness_before = (__base::tinyness_before); 
# 781
static constexpr const __4::float_round_style round_style = (__base::round_style); 
# 782
}; 
# 784
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_specialized; 
# 786
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::digits; 
# 788
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::digits10; 
# 790
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::max_digits10; 
# 792
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_signed; 
# 794
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_integer; 
# 796
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_exact; 
# 798
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::radix; 
# 800
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::min_exponent; 
# 802
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::min_exponent10; 
# 804
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::max_exponent; 
# 806
template< class _Tp> constexpr const int numeric_limits< const volatile _Tp> ::max_exponent10; 
# 808
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::has_infinity; 
# 810
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::has_quiet_NaN; 
# 812
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::has_signaling_NaN; 
# 814
template< class _Tp> constexpr const float_denorm_style numeric_limits< const volatile _Tp> ::has_denorm; 
# 816
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::has_denorm_loss; 
# 818
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_iec559; 
# 820
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_bounded; 
# 822
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::is_modulo; 
# 824
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::traps; 
# 826
template< class _Tp> constexpr const bool numeric_limits< const volatile _Tp> ::tinyness_before; 
# 828
template< class _Tp> constexpr const float_round_style numeric_limits< const volatile _Tp> ::round_style; 
# 831 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/limits"
}}}
# 841 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
namespace cuda { namespace std { inline namespace __4 { 
# 841 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
namespace __fs { namespace filesystem { 
# 842
struct _FilesystemClock; 
# 843 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono"
}}}
# 843 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
}}
# 852 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono"
namespace cuda { namespace std { inline namespace __4 { 
# 854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
namespace chrono { 
# 857
template< class _Rep, class _Period = ratio< 1> > class duration; 
# 859
template< class _Tp> 
# 860
struct __is_duration : public false_type { }; 
# 862
template< class _Rep, class _Period> 
# 863
struct __is_duration< duration< _Rep, _Period> >  : public true_type { }; 
# 865
template< class _Rep, class _Period> 
# 866
struct __is_duration< const duration< _Rep, _Period> >  : public true_type { }; 
# 868
template< class _Rep, class _Period> 
# 869
struct __is_duration< volatile duration< _Rep, _Period> >  : public true_type { }; 
# 871
template< class _Rep, class _Period> 
# 872
struct __is_duration< const volatile duration< _Rep, _Period> >  : public true_type { }; 
# 874
}
# 876
template< class _Rep1, class _Period1, class _Rep2, class _Period2> 
# 877
struct __attribute((__visibility__("default"))) common_type< chrono::duration< _Rep1, _Period1> , chrono::duration< _Rep2, _Period2> >  { 
# 881
typedef chrono::duration< typename __4::common_type< _Rep1, _Rep2> ::type, typename __ratio_gcd< _Period1, _Period2> ::type>  type; 
# 882
}; 
# 884
namespace chrono { 
# 888
template< class _FromDuration, class _ToDuration, class 
# 889
_Period = typename __ratio_divide< typename _FromDuration::period, typename _ToDuration::period> ::type::type, bool 
# 890
 = _Period::num == 1, bool 
# 891
 = _Period::den == 1> struct __duration_cast; 
# 894
template< class _FromDuration, class _ToDuration, class _Period> 
# 895
struct __duration_cast< _FromDuration, _ToDuration, _Period, true, true>  { 
# 898 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr _ToDuration operator()(const _FromDuration &__fd) const 
# 899
{ 
# 900
return (_ToDuration)(static_cast< typename _ToDuration::rep>(__fd.count())); 
# 901
} 
# 902
}; 
# 904
template< class _FromDuration, class _ToDuration, class _Period> 
# 905
struct __duration_cast< _FromDuration, _ToDuration, _Period, true, false>  { 
# 908 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr _ToDuration operator()(const _FromDuration &__fd) const 
# 909
{ 
# 910
typedef typename common_type< typename _ToDuration::rep, typename _FromDuration::rep, intmax_t> ::type _Ct; 
# 911
return (_ToDuration)(static_cast< typename _ToDuration::rep>((static_cast< _Ct>(__fd.count())) / (static_cast< _Ct>(_Period::den)))); 
# 913
} 
# 914
}; 
# 916
template< class _FromDuration, class _ToDuration, class _Period> 
# 917
struct __duration_cast< _FromDuration, _ToDuration, _Period, false, true>  { 
# 920 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr _ToDuration operator()(const _FromDuration &__fd) const 
# 921
{ 
# 922
typedef typename common_type< typename _ToDuration::rep, typename _FromDuration::rep, intmax_t> ::type _Ct; 
# 923
return (_ToDuration)(static_cast< typename _ToDuration::rep>((static_cast< _Ct>(__fd.count())) * (static_cast< _Ct>(_Period::num)))); 
# 925
} 
# 926
}; 
# 928
template< class _FromDuration, class _ToDuration, class _Period> 
# 929
struct __duration_cast< _FromDuration, _ToDuration, _Period, false, false>  { 
# 932 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr _ToDuration operator()(const _FromDuration &__fd) const 
# 933
{ 
# 934
typedef typename common_type< typename _ToDuration::rep, typename _FromDuration::rep, intmax_t> ::type _Ct; 
# 935
return (_ToDuration)(static_cast< typename _ToDuration::rep>(((static_cast< _Ct>(__fd.count())) * (static_cast< _Ct>(_Period::num))) / (static_cast< _Ct>(_Period::den)))); 
# 938
} 
# 939
}; 
# 941
template< class _ToDuration, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDuration> ::value, _ToDuration> ::type 
# 949 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration_cast(const duration< _Rep, _Period>  &__fd) 
# 950
{ 
# 951
return __duration_cast< duration< _Rep, _Period> , _ToDuration> ()(__fd); 
# 952
} 
# 954
template< class _Rep> 
# 955
struct __attribute((__visibility__("default"))) treat_as_floating_point : public is_floating_point< _Rep>  { }; 
# 958
template< class _Rep> constexpr bool 
# 959
treat_as_floating_point_v = (treat_as_floating_point< _Rep> ::value); 
# 963
template< class _Rep> 
# 964
struct __attribute((__visibility__("default"))) duration_values { 
# 967 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr _Rep zero() noexcept { return (_Rep)0; } 
# 968 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr _Rep max() noexcept { return numeric_limits< _Rep> ::max(); } 
# 969 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr _Rep min() noexcept { return numeric_limits< _Rep> ::lowest(); } 
# 970
}; 
# 973
template< class _ToDuration, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDuration> ::value, _ToDuration> ::type 
# 980 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
floor(const duration< _Rep, _Period>  &__d) 
# 981
{ 
# 982
_ToDuration __t = duration_cast< _ToDuration> (__d); 
# 983
if (__t > __d) { 
# 984
__t = (__t - _ToDuration{1}); }  
# 985
return __t; 
# 986
} 
# 988
template< class _ToDuration, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDuration> ::value, _ToDuration> ::type 
# 995 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
ceil(const duration< _Rep, _Period>  &__d) 
# 996
{ 
# 997
_ToDuration __t = duration_cast< _ToDuration> (__d); 
# 998
if (__t < __d) { 
# 999
__t = (__t + _ToDuration{1}); }  
# 1000
return __t; 
# 1001
} 
# 1003
template< class _ToDuration, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDuration> ::value, _ToDuration> ::type 
# 1010 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
round(const duration< _Rep, _Period>  &__d) 
# 1011
{ 
# 1012
_ToDuration __lower = floor< _ToDuration> (__d); 
# 1013
_ToDuration __upper = __lower + _ToDuration{1}; 
# 1014
auto __lowerDiff = __d - __lower; 
# 1015
auto __upperDiff = __upper - __d; 
# 1016
if (__lowerDiff < __upperDiff) { 
# 1017
return __lower; }  
# 1018
if (__lowerDiff > __upperDiff) { 
# 1019
return __upper; }  
# 1020
return (__lower.count() & 1) ? __upper : __lower; 
# 1021
} 
# 1026
template< class _Rep, class _Period> 
# 1027
class
# 857 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
 __attribute((__visibility__("default"))) duration { 
# 1029 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static_assert((!__is_duration< _Rep> ::value), "A duration representation can not be a duration");
# 1030
static_assert((__is_ratio< _Period> ::value), "Second template parameter of duration must be a std::ratio");
# 1031
static_assert((_Period::num > 0), "duration period must be positive");
# 1033
template< class _R1, class _R2> 
# 1034
struct __no_overflow { 
# 1037
private: static const intmax_t __gcd_n1_n2 = (__static_gcd< _R1::num, _R2::num> ::value); 
# 1038
static const intmax_t __gcd_d1_d2 = (__static_gcd< _R1::den, _R2::den> ::value); 
# 1039
static const intmax_t __n1 = (_R1::num / __gcd_n1_n2); 
# 1040
static const intmax_t __d1 = (_R1::den / __gcd_d1_d2); 
# 1041
static const intmax_t __n2 = (_R2::num / __gcd_n1_n2); 
# 1042
static const intmax_t __d2 = (_R2::den / __gcd_d1_d2); 
# 1043
static const intmax_t max = (-((((intmax_t)1) << ((sizeof(intmax_t) * (8)) - (1))) + (1))); 
# 1045
template< intmax_t _Xp, intmax_t _Yp, bool __overflow> 
# 1046
struct __mul { 
# 1048
static const intmax_t value = (_Xp * _Yp); 
# 1049
}; 
# 1051
template< intmax_t _Xp, intmax_t _Yp> 
# 1052
struct __mul< _Xp, _Yp, true>  { 
# 1054
static const intmax_t value = (1); 
# 1055
}; 
# 1058
public: static const bool value = ((__n1 <= (max / __d2)) && (__n2 <= (max / __d1))); 
# 1060
typedef ratio< __mul< __n1, __d2, !value> ::value, __mul< __n2, __d1, !value> ::value>  type; 
# 1061
}; 
# 1064
public: typedef _Rep rep; 
# 1065
typedef typename _Period::type period; 
# 1067
private: rep __rep_; 
# 1072
public: constexpr duration() = default;
# 1078
template< class _Rep2> constexpr explicit 
# 1080 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration(const _Rep2 &__r, typename enable_if< is_convertible< _Rep2, rep> ::value && (treat_as_floating_point< rep> ::value || (!treat_as_floating_point< _Rep2> ::value))> ::type * = 0) : __rep_(static_cast< rep>(__r)) 
# 1087
{ } 
# 1090
template< class _Rep2, class _Period2> constexpr 
# 1092 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration(const duration< _Rep2, _Period2>  &__d, typename enable_if< __no_overflow< _Period2, period> ::value && (treat_as_floating_point< rep> ::value || ((__no_overflow< _Period2, period> ::type::den == 1) && (!treat_as_floating_point< _Rep2> ::value)))> ::type * = 0) : __rep_(chrono::duration_cast< duration> (__d).count()) 
# 1100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
{ } 
# 1104 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr rep count() const { return __rep_; } 
# 1108 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr typename common_type< duration> ::type operator+() const { return (typename common_type< duration> ::type)(*this); } 
# 1109 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr typename common_type< duration> ::type operator-() const { return (typename common_type< duration> ::type)(-(__rep_)); } 
# 1110 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator++() { ++(__rep_); return *this; } 
# 1111 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration operator++(int) { return ((duration)((__rep_)++)); } 
# 1112 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator--() { --(__rep_); return *this; } 
# 1113 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration operator--(int) { return ((duration)((__rep_)--)); } 
# 1115 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator+=(const duration &__d) { (__rep_) += __d.count(); return *this; } 
# 1116 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator-=(const duration &__d) { (__rep_) -= __d.count(); return *this; } 
# 1118 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator*=(const rep &rhs) { (__rep_) *= rhs; return *this; } 
# 1119 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator/=(const rep &rhs) { (__rep_) /= rhs; return *this; } 
# 1120 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator%=(const rep &rhs) { (__rep_) %= rhs; return *this; } 
# 1121 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
duration &operator%=(const duration &rhs) { (__rep_) %= rhs.count(); return *this; } 
# 1125 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr duration zero() noexcept { return ((duration)(duration_values< rep> ::zero())); } 
# 1126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr duration min() noexcept { return ((duration)(duration_values< rep> ::min())); } 
# 1127 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr duration max() noexcept { return ((duration)(duration_values< rep> ::max())); } 
# 1128
}; 
# 1130
typedef duration< long long, ratio< 1L, 1000000000L> >  nanoseconds; 
# 1131
typedef duration< long long, ratio< 1L, 1000000L> >  microseconds; 
# 1132
typedef duration< long long, ratio< 1L, 1000L> >  milliseconds; 
# 1133
typedef duration< long long>  seconds; 
# 1134
typedef duration< long, ratio< 60L> >  minutes; 
# 1135
typedef duration< long, ratio< 3600L> >  hours; 
# 1137
typedef duration< int, ratio< 86400L, 1L> >  days; 
# 1138
typedef duration< int, ratio< 604800L, 1L> >  weeks; 
# 1139
typedef duration< int, ratio< 31556952L, 1L> >  years; 
# 1140
typedef duration< int, ratio< 2629746L, 1L> >  months; 
# 1144
template< class _LhsDuration, class _RhsDuration> 
# 1145
struct __duration_eq { 
# 1148 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator()(const _LhsDuration &__lhs, const _RhsDuration &__rhs) const 
# 1149
{ 
# 1150
typedef typename common_type< _LhsDuration, _RhsDuration> ::type _Ct; 
# 1151
return ((_Ct)__lhs).count() == ((_Ct)__rhs).count(); 
# 1152
} 
# 1153
}; 
# 1155
template< class _LhsDuration> 
# 1156
struct __duration_eq< _LhsDuration, _LhsDuration>  { 
# 1159 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator()(const _LhsDuration &__lhs, const _LhsDuration &__rhs) const 
# 1160
{ return __lhs.count() == __rhs.count(); } 
# 1161
}; 
# 1163
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1167 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator==(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1168
{ 
# 1169
return __duration_eq< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ()(__lhs, __rhs); 
# 1170
} 
# 1174
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1178 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator!=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1179
{ 
# 1180
return !(__lhs == __rhs); 
# 1181
} 
# 1185
template< class _LhsDuration, class _RhsDuration> 
# 1186
struct __duration_lt { 
# 1189 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator()(const _LhsDuration &__lhs, const _RhsDuration &__rhs) const 
# 1190
{ 
# 1191
typedef typename common_type< _LhsDuration, _RhsDuration> ::type _Ct; 
# 1192
return ((_Ct)__lhs).count() < ((_Ct)__rhs).count(); 
# 1193
} 
# 1194
}; 
# 1196
template< class _LhsDuration> 
# 1197
struct __duration_lt< _LhsDuration, _LhsDuration>  { 
# 1200 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator()(const _LhsDuration &__lhs, const _LhsDuration &__rhs) const 
# 1201
{ return __lhs.count() < __rhs.count(); } 
# 1202
}; 
# 1204
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1208 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator<(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1209
{ 
# 1210
return __duration_lt< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ()(__lhs, __rhs); 
# 1211
} 
# 1215
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1219 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator>(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1220
{ 
# 1221
return __rhs < __lhs; 
# 1222
} 
# 1226
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1230 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator<=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1231
{ 
# 1232
return !(__rhs < __lhs); 
# 1233
} 
# 1237
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr bool 
# 1241 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator>=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1242
{ 
# 1243
return !(__lhs < __rhs); 
# 1244
} 
# 1248
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 1252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator+(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1253
{ 
# 1254
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type _Cd; 
# 1255
return (_Cd)(((_Cd)__lhs).count() + ((_Cd)__rhs).count()); 
# 1256
} 
# 1260
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 1264 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator-(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1265
{ 
# 1266
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type _Cd; 
# 1267
return (_Cd)(((_Cd)__lhs).count() - ((_Cd)__rhs).count()); 
# 1268
} 
# 1272
template< class _Rep1, class _Period, class _Rep2> constexpr typename enable_if< is_convertible< _Rep2, typename common_type< _Rep1, _Rep2> ::type> ::value, duration< typename common_type< _Rep1, _Rep2> ::type, _Period> > ::type 
# 1280 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator*(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 1281
{ 
# 1282
typedef typename common_type< _Rep1, _Rep2> ::type _Cr; 
# 1283
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  _Cd; 
# 1284
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() * (static_cast< _Cr>(__s)))); 
# 1285
} 
# 1287
template< class _Rep1, class _Period, class _Rep2> constexpr typename enable_if< is_convertible< _Rep1, typename common_type< _Rep1, _Rep2> ::type> ::value, duration< typename common_type< _Rep1, _Rep2> ::type, _Period> > ::type 
# 1295 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator*(const _Rep1 &__s, const duration< _Rep2, _Period>  &__d) 
# 1296
{ 
# 1297
return __d * __s; 
# 1298
} 
# 1302
template< class _Rep1, class _Period, class _Rep2> constexpr typename enable_if< (!__is_duration< _Rep2> ::value) && is_convertible< _Rep2, typename common_type< _Rep1, _Rep2> ::type> ::value, duration< typename common_type< _Rep1, _Rep2> ::type, _Period> > ::type 
# 1311 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator/(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 1312
{ 
# 1313
typedef typename common_type< _Rep1, _Rep2> ::type _Cr; 
# 1314
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  _Cd; 
# 1315
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() / (static_cast< _Cr>(__s)))); 
# 1316
} 
# 1318
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr typename common_type< _Rep1, _Rep2> ::type 
# 1322 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator/(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1323
{ 
# 1324
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type _Ct; 
# 1325
return ((_Ct)__lhs).count() / ((_Ct)__rhs).count(); 
# 1326
} 
# 1330
template< class _Rep1, class _Period, class _Rep2> constexpr typename enable_if< (!__is_duration< _Rep2> ::value) && is_convertible< _Rep2, typename common_type< _Rep1, _Rep2> ::type> ::value, duration< typename common_type< _Rep1, _Rep2> ::type, _Period> > ::type 
# 1339 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator%(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 1340
{ 
# 1341
typedef typename common_type< _Rep1, _Rep2> ::type _Cr; 
# 1342
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  _Cd; 
# 1343
return ((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(((duration< typename common_type< _Rep1, _Rep2> ::type, _Period> )(__d)).count() % (static_cast< _Cr>(__s)))); 
# 1344
} 
# 1346
template< class _Rep1, class _Period1, class _Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 1350 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator%(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1351
{ 
# 1352
typedef typename common_type< _Rep1, _Rep2> ::type _Cr; 
# 1353
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type _Cd; 
# 1354
return (_Cd)((static_cast< _Cr>(((_Cd)__lhs).count())) % (static_cast< _Cr>(((_Cd)__rhs).count()))); 
# 1355
} 
# 1361
template< class _Clock, class _Duration = typename _Clock::duration> 
# 1362
class __attribute((__visibility__("default"))) time_point { 
# 1364
static_assert((__is_duration< _Duration> ::value), "Second template parameter of time_point must be a std::chrono::duration");
# 1367
public: typedef _Clock clock; 
# 1368
typedef _Duration duration; 
# 1369
typedef typename _Duration::rep rep; 
# 1370
typedef typename _Duration::period period; 
# 1372
private: duration __d_; 
# 1375 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr time_point() : __d_(duration::zero()) { } 
# 1376 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit time_point(const duration &__d) : __d_(__d) { } 
# 1379
template< class _Duration2> constexpr 
# 1381 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
time_point(const time_point< clock, _Duration2>  &t, typename enable_if< is_convertible< _Duration2, duration> ::value> ::type * = 0) : __d_(t.time_since_epoch()) 
# 1386
{ } 
# 1390 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr duration time_since_epoch() const { return __d_; } 
# 1394 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
time_point &operator+=(const duration &__d) { (__d_) += __d; return *this; } 
# 1395 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
time_point &operator-=(const duration &__d) { (__d_) -= __d; return *this; } 
# 1399 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr time_point min() noexcept { return ((time_point)(duration::min())); } 
# 1400 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr time_point max() noexcept { return ((time_point)(duration::max())); } 
# 1401
}; 
# 1403
}
# 1405
template< class _Clock, class _Duration1, class _Duration2> 
# 1406
struct __attribute((__visibility__("default"))) common_type< chrono::time_point< _Clock, _Duration1> , chrono::time_point< _Clock, _Duration2> >  { 
# 1409
typedef chrono::time_point< _Clock, typename __4::common_type< _Duration1, _Duration2> ::type>  type; 
# 1410
}; 
# 1412
namespace chrono { 
# 1414
template< class _ToDuration, class _Clock, class _Duration> constexpr time_point< _Clock, _ToDuration>  
# 1417 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
time_point_cast(const time_point< _Clock, _Duration>  &__t) 
# 1418
{ 
# 1419
return ((time_point< _Clock, _ToDuration> )(chrono::duration_cast< _ToDuration> (__t.time_since_epoch()))); 
# 1420 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
} 
# 1423
template< class _ToDuration, class _Clock, class _Duration> constexpr typename enable_if< __is_duration< _ToDuration> ::value, time_point< _Clock, _ToDuration> > ::type 
# 1430 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
floor(const time_point< _Clock, _Duration>  &__t) 
# 1431
{ 
# 1432
return time_point< _Clock, _ToDuration> {floor< _ToDuration> (__t.time_since_epoch())}; 
# 1433
} 
# 1435
template< class _ToDuration, class _Clock, class _Duration> constexpr typename enable_if< __is_duration< _ToDuration> ::value, time_point< _Clock, _ToDuration> > ::type 
# 1442 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
ceil(const time_point< _Clock, _Duration>  &__t) 
# 1443
{ 
# 1444
return time_point< _Clock, _ToDuration> {ceil< _ToDuration> (__t.time_since_epoch())}; 
# 1445
} 
# 1447
template< class _ToDuration, class _Clock, class _Duration> constexpr typename enable_if< __is_duration< _ToDuration> ::value, time_point< _Clock, _ToDuration> > ::type 
# 1454 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
round(const time_point< _Clock, _Duration>  &__t) 
# 1455
{ 
# 1456
return time_point< _Clock, _ToDuration> {round< _ToDuration> (__t.time_since_epoch())}; 
# 1457
} 
# 1459
template< class _Rep, class _Period> constexpr typename enable_if< numeric_limits< _Rep> ::is_signed, duration< _Rep, _Period> > ::type 
# 1466 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
abs(duration< _Rep, _Period>  __d) 
# 1467
{ 
# 1468
return (__d >= __d.zero()) ? +__d : (-__d); 
# 1469
} 
# 1474
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1477 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator==(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1478
{ 
# 1479
return __lhs.time_since_epoch() == __rhs.time_since_epoch(); 
# 1480
} 
# 1484
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1487 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator!=(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1488
{ 
# 1489
return !(__lhs == __rhs); 
# 1490
} 
# 1494
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1497 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator<(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1498
{ 
# 1499
return __lhs.time_since_epoch() < __rhs.time_since_epoch(); 
# 1500
} 
# 1504
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1507 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator>(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1508
{ 
# 1509
return __rhs < __lhs; 
# 1510
} 
# 1514
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1517 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator<=(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1518
{ 
# 1519
return !(__rhs < __lhs); 
# 1520
} 
# 1524
template< class _Clock, class _Duration1, class _Duration2> constexpr bool 
# 1527 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator>=(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1528
{ 
# 1529
return !(__lhs < __rhs); 
# 1530
} 
# 1534
template< class _Clock, class _Duration1, class _Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type>  
# 1537 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator+(const time_point< _Clock, _Duration1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1538
{ 
# 1539
typedef time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type>  _Tr; 
# 1540
return ((time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type> )(__lhs.time_since_epoch() + __rhs)); 
# 1541
} 
# 1545
template< class _Rep1, class _Period1, class _Clock, class _Duration2> constexpr time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Duration2> ::type>  
# 1548 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator+(const duration< _Rep1, _Period1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1549
{ 
# 1550
return __rhs + __lhs; 
# 1551
} 
# 1555
template< class _Clock, class _Duration1, class _Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type>  
# 1558 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator-(const time_point< _Clock, _Duration1>  &__lhs, const duration< _Rep2, _Period2>  &__rhs) 
# 1559
{ 
# 1560
typedef time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type>  _Ret; 
# 1561
return ((time_point< _Clock, typename common_type< _Duration1, duration< _Rep2, _Period2> > ::type> )(__lhs.time_since_epoch() - __rhs)); 
# 1562
} 
# 1566
template< class _Clock, class _Duration1, class _Duration2> constexpr typename common_type< _Duration1, _Duration2> ::type 
# 1569 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
operator-(const time_point< _Clock, _Duration1>  &__lhs, const time_point< _Clock, _Duration2>  &__rhs) 
# 1570
{ 
# 1571
return __lhs.time_since_epoch() - __rhs.time_since_epoch(); 
# 1572
} 
# 1584 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
class system_clock { 
# 1587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: typedef nanoseconds duration; 
# 1588
typedef chrono::duration< long long, ratio< 1L, 1000000000L> > ::rep rep; 
# 1589
typedef chrono::duration< long long, ratio< 1L, 1000000000L> > ::period period; 
# 1590
typedef chrono::time_point< system_clock>  time_point; 
# 1591
static constexpr const bool is_steady = false; 
# 1594 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static inline time_point now() noexcept; 
# 1596 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static inline time_t to_time_t(const time_point & __t) noexcept; 
# 1598 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static inline time_point from_time_t(time_t __t) noexcept; 
# 1599
}; 
# 1616 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
typedef system_clock high_resolution_clock; 
# 1624
using file_clock = __fs::filesystem::_FilesystemClock; 
# 1626 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
template< class _Duration> using file_time = time_point< __fs::filesystem::_FilesystemClock, _Duration> ; 
# 1630
template< class _Duration> using sys_time = time_point< system_clock, _Duration> ; 
# 1632
using sys_seconds = sys_time< duration< long long> > ; 
# 1633
using sys_days = sys_time< duration< int, ratio< 86400L, 1L> > > ; 
# 1635
struct local_t { }; 
# 1636
template< class Duration> using local_time = time_point< local_t, Duration> ; 
# 1638
using local_seconds = local_time< duration< long long> > ; 
# 1639
using local_days = local_time< duration< int, ratio< 86400L, 1L> > > ; 
# 1641
struct last_spec { explicit last_spec() = default;}; 
# 1643
class day { 
# 1645
unsigned char __d; 
# 1647
public: day() = default;
# 1649 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit day(unsigned __val) noexcept : __d(static_cast< unsigned char>(__val)) { } 
# 1651 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &operator++() noexcept { ++(__d); return *this; } 
# 1653 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day operator++(int) noexcept { day __tmp = *this; (++(*this)); return __tmp; } 
# 1655 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &operator--() noexcept { --(__d); return *this; } 
# 1657 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day operator--(int) noexcept { day __tmp = *this; (--(*this)); return __tmp; } 
# 1659 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &operator+=(const days & __dd) noexcept; 
# 1661 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &operator-=(const days & __dd) noexcept; 
# 1663 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator unsigned() const noexcept { return __d; } 
# 1665 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return ((__d) >= 1) && ((__d) <= 31); } 
# 1666
}; 
# 1671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const day &__lhs, const day &__rhs) noexcept 
# 1672
{ return (static_cast< unsigned>(__lhs)) == (static_cast< unsigned>(__rhs)); } 
# 1676 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const day &__lhs, const day &__rhs) noexcept 
# 1677
{ return !(__lhs == __rhs); } 
# 1681 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const day &__lhs, const day &__rhs) noexcept 
# 1682
{ return (static_cast< unsigned>(__lhs)) < (static_cast< unsigned>(__rhs)); } 
# 1686 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const day &__lhs, const day &__rhs) noexcept 
# 1687
{ return (__rhs < __lhs); } 
# 1691 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const day &__lhs, const day &__rhs) noexcept 
# 1692
{ return !(__rhs < __lhs); } 
# 1696 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const day &__lhs, const day &__rhs) noexcept 
# 1697
{ return !(__lhs < __rhs); } 
# 1701 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day operator+(const day &__lhs, const days &__rhs) noexcept 
# 1702
{ return ((day)((static_cast< unsigned>(__lhs)) + (__rhs.count()))); } 
# 1706 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day operator+(const days &__lhs, const day &__rhs) noexcept 
# 1707
{ return (__rhs + __lhs); } 
# 1711 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day operator-(const day &__lhs, const days &__rhs) noexcept 
# 1712
{ return (__lhs + ((-__rhs))); } 
# 1716 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days operator-(const day &__lhs, const day &__rhs) noexcept 
# 1717
{ return ((duration< int, ratio< 86400L, 1L> > )((static_cast< int>(static_cast< unsigned>(__lhs))) - (static_cast< int>(static_cast< unsigned>(__rhs))))); 
# 1718
} 
# 1721 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &day::operator+=(const days &__dd) noexcept 
# 1722
{ (*this) = ((*this) + __dd); return *this; } 
# 1725 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day &day::operator-=(const days &__dd) noexcept 
# 1726
{ (*this) = ((*this) - __dd); return *this; } 
# 1729
class month { 
# 1731
unsigned char __m; 
# 1733
public: month() = default;
# 1735 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit month(unsigned __val) noexcept : __m(static_cast< unsigned char>(__val)) { } 
# 1737 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &operator++() noexcept { ++(__m); return *this; } 
# 1739 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month operator++(int) noexcept { month __tmp = *this; (++(*this)); return __tmp; } 
# 1741 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &operator--() noexcept { --(__m); return *this; } 
# 1743 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month operator--(int) noexcept { month __tmp = *this; (--(*this)); return __tmp; } 
# 1745 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &operator+=(const months & __m1) noexcept; 
# 1747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &operator-=(const months & __m1) noexcept; 
# 1749 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator unsigned() const noexcept { return __m; } 
# 1751 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return ((__m) >= 1) && ((__m) <= 12); } 
# 1752
}; 
# 1757 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const month &__lhs, const month &__rhs) noexcept 
# 1758
{ return (static_cast< unsigned>(__lhs)) == (static_cast< unsigned>(__rhs)); } 
# 1762 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const month &__lhs, const month &__rhs) noexcept 
# 1763
{ return !(__lhs == __rhs); } 
# 1767 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const month &__lhs, const month &__rhs) noexcept 
# 1768
{ return (static_cast< unsigned>(__lhs)) < (static_cast< unsigned>(__rhs)); } 
# 1772 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const month &__lhs, const month &__rhs) noexcept 
# 1773
{ return (__rhs < __lhs); } 
# 1777 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const month &__lhs, const month &__rhs) noexcept 
# 1778
{ return !(__rhs < __lhs); } 
# 1782 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const month &__lhs, const month &__rhs) noexcept 
# 1783
{ return !(__lhs < __rhs); } 
# 1787 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month operator+(const month &__lhs, const months &__rhs) noexcept 
# 1788
{ 
# 1789
const auto __mu = (static_cast< long long>(static_cast< unsigned>(__lhs))) + (__rhs.count() - 1); 
# 1790
const auto __yr = ((__mu >= (0)) ? __mu : (__mu - (11))) / (12); 
# 1791
return month{static_cast< unsigned>((__mu - (__yr * (12))) + (1))}; 
# 1792
} 
# 1796 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month operator+(const months &__lhs, const month &__rhs) noexcept 
# 1797
{ return (__rhs + __lhs); } 
# 1801 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month operator-(const month &__lhs, const months &__rhs) noexcept 
# 1802
{ return (__lhs + ((-__rhs))); } 
# 1806 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr months operator-(const month &__lhs, const month &__rhs) noexcept 
# 1807
{ 
# 1808
const auto __dm = (static_cast< unsigned>(__lhs)) - (static_cast< unsigned>(__rhs)); 
# 1809
return ((duration< int, ratio< 2629746L, 1L> > )((__dm <= (11)) ? __dm : (__dm + (12)))); 
# 1810
} 
# 1813 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &month::operator+=(const months &__dm) noexcept 
# 1814
{ (*this) = ((*this) + __dm); return *this; } 
# 1817 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month &month::operator-=(const months &__dm) noexcept 
# 1818
{ (*this) = ((*this) - __dm); return *this; } 
# 1821
class year { 
# 1823
short __y; 
# 1825
public: year() = default;
# 1827 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit year(int __val) noexcept : __y(static_cast< short>(__val)) { } 
# 1830 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &operator++() noexcept { ++(__y); return *this; } 
# 1832 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator++(int) noexcept { year __tmp = *this; (++(*this)); return __tmp; } 
# 1834 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &operator--() noexcept { --(__y); return *this; } 
# 1836 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator--(int) noexcept { year __tmp = *this; (--(*this)); return __tmp; } 
# 1838 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &operator+=(const years & __dy) noexcept; 
# 1840 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &operator-=(const years & __dy) noexcept; 
# 1842 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator+() const noexcept { return *this; } 
# 1844 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator-() const noexcept { return year{-(__y)}; } 
# 1847 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool is_leap() const noexcept { return (((__y) % 4) == 0) && ((((__y) % 100) != 0) || (((__y) % 400) == 0)); } 
# 1849 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator int() const noexcept { return __y; } 
# 1851 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept; 
# 1853 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr year min() noexcept { return year{-32767}; } 
# 1855 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr year max() noexcept { return year{32767}; } 
# 1856
}; 
# 1861 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year &__lhs, const year &__rhs) noexcept 
# 1862
{ return (static_cast< int>(__lhs)) == (static_cast< int>(__rhs)); } 
# 1866 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year &__lhs, const year &__rhs) noexcept 
# 1867
{ return !(__lhs == __rhs); } 
# 1871 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const year &__lhs, const year &__rhs) noexcept 
# 1872
{ return (static_cast< int>(__lhs)) < (static_cast< int>(__rhs)); } 
# 1876 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const year &__lhs, const year &__rhs) noexcept 
# 1877
{ return (__rhs < __lhs); } 
# 1881 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const year &__lhs, const year &__rhs) noexcept 
# 1882
{ return !(__rhs < __lhs); } 
# 1886 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const year &__lhs, const year &__rhs) noexcept 
# 1887
{ return !(__lhs < __rhs); } 
# 1891 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator+(const year &__lhs, const years &__rhs) noexcept 
# 1892
{ return ((year)((static_cast< int>(__lhs)) + __rhs.count())); } 
# 1896 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator+(const years &__lhs, const year &__rhs) noexcept 
# 1897
{ return (__rhs + __lhs); } 
# 1901 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year operator-(const year &__lhs, const years &__rhs) noexcept 
# 1902
{ return (__lhs + ((-__rhs))); } 
# 1906 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr years operator-(const year &__lhs, const year &__rhs) noexcept 
# 1907
{ return years{(static_cast< int>(__lhs)) - (static_cast< int>(__rhs))}; } 
# 1911 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &year::operator+=(const years &__dy) noexcept 
# 1912
{ (*this) = ((*this) + __dy); return *this; } 
# 1915 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year &year::operator-=(const years &__dy) noexcept 
# 1916
{ (*this) = ((*this) - __dy); return *this; } 
# 1919 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool year::ok() const noexcept 
# 1920
{ return ((static_cast< int>(((int)(min())))) <= (__y)) && ((__y) <= (static_cast< int>(((int)(max()))))); } 
# 1922
class weekday_indexed; 
# 1923
class weekday_last; 
# 1925
class weekday { 
# 1927
unsigned char __wd; 
# 1929
public: weekday() = default;
# 1931 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit weekday(unsigned __val) noexcept : __wd(static_cast< unsigned char>((__val == (7)) ? 0 : __val)) { } 
# 1933 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday(const sys_days &__sysd) noexcept : __wd(__weekday_from_days(__sysd.time_since_epoch().count())) 
# 1934
{ } 
# 1936 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit weekday(const local_days &__locd) noexcept : __wd(__weekday_from_days(__locd.time_since_epoch().count())) 
# 1937
{ } 
# 1940 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &operator++() noexcept { (__wd) = (((__wd) == 6) ? 0 : ((__wd) + 1)); return *this; } 
# 1942 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday operator++(int) noexcept { weekday __tmp = *this; (++(*this)); return __tmp; } 
# 1944 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &operator--() noexcept { (__wd) = (((__wd) == 0) ? 6 : ((__wd) - 1)); return *this; } 
# 1946 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday operator--(int) noexcept { weekday __tmp = *this; (--(*this)); return __tmp; } 
# 1948 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &operator+=(const days & __dd) noexcept; 
# 1950 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &operator-=(const days & __dd) noexcept; 
# 1952 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr unsigned c_encoding() const noexcept { return __wd; } 
# 1954 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr unsigned iso_encoding() const noexcept { return ((__wd) == 0U) ? 7 : (__wd); } 
# 1956 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__wd) <= 6; } 
# 1958 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday_indexed operator[](unsigned __index) const noexcept; 
# 1960 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday_last operator[](last_spec) const noexcept; 
# 1963 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr unsigned char __weekday_from_days(int __days) noexcept; 
# 1964
}; 
# 1970 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr unsigned char weekday::__weekday_from_days(int __days) noexcept 
# 1971
{ 
# 1972
return static_cast< unsigned char>(static_cast< unsigned>((__days >= (-4)) ? (__days + 4) % 7 : (((__days + 5) % 7) + 6))); 
# 1975
} 
# 1979 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const weekday &__lhs, const weekday &__rhs) noexcept 
# 1980
{ return __lhs.c_encoding() == __rhs.c_encoding(); } 
# 1984 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const weekday &__lhs, const weekday &__rhs) noexcept 
# 1985
{ return !(__lhs == __rhs); } 
# 1989 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const weekday &__lhs, const weekday &__rhs) noexcept 
# 1990
{ return __lhs.c_encoding() < __rhs.c_encoding(); } 
# 1994 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const weekday &__lhs, const weekday &__rhs) noexcept 
# 1995
{ return (__rhs < __lhs); } 
# 1999 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const weekday &__lhs, const weekday &__rhs) noexcept 
# 2000
{ return !(__rhs < __lhs); } 
# 2004 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const weekday &__lhs, const weekday &__rhs) noexcept 
# 2005
{ return !(__lhs < __rhs); } 
# 2008 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday operator+(const weekday &__lhs, const days &__rhs) noexcept 
# 2009
{ 
# 2010
const auto __mu = (static_cast< long long>(__lhs.c_encoding())) + (__rhs.count()); 
# 2011
const auto __yr = ((__mu >= (0)) ? __mu : (__mu - (6))) / (7); 
# 2012
return weekday{static_cast< unsigned>(__mu - (__yr * (7)))}; 
# 2013
} 
# 2016 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday operator+(const days &__lhs, const weekday &__rhs) noexcept 
# 2017
{ return (__rhs + __lhs); } 
# 2020 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday operator-(const weekday &__lhs, const days &__rhs) noexcept 
# 2021
{ return (__lhs + ((-__rhs))); } 
# 2024 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days operator-(const weekday &__lhs, const weekday &__rhs) noexcept 
# 2025
{ 
# 2027
const int __wdu = (static_cast< int>(__lhs.c_encoding())) - (static_cast< int>(__rhs.c_encoding())); 
# 2028
const int __wk = ((__wdu >= 0) ? __wdu : (__wdu - 6)) / 7; 
# 2029
return days{__wdu - (__wk * 7)}; 
# 2030
} 
# 2033 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &weekday::operator+=(const days &__dd) noexcept 
# 2034
{ (*this) = ((*this) + __dd); return *this; } 
# 2037 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday &weekday::operator-=(const days &__dd) noexcept 
# 2038
{ (*this) = ((*this) - __dd); return *this; } 
# 2041
class weekday_indexed { 
# 2043 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
chrono::weekday __wd; 
# 2044
unsigned char __idx; 
# 2046
public: weekday_indexed() = default;
# 2048 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday_indexed(const chrono::weekday &
# 2048 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
__wdval, unsigned __idxval) noexcept : __wd{__wdval}, __idx(static_cast< unsigned char>(__idxval)) 
# 2049
{ } 
# 2051 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday weekday() const noexcept { return __wd; } 
# 2053 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr unsigned index() const noexcept { return __idx; } 
# 2055 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__wd).ok() && ((__idx) >= 1) && ((__idx) <= 5); } 
# 2056
}; 
# 2060 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const weekday_indexed &__lhs, const weekday_indexed &__rhs) noexcept 
# 2061
{ return ((__lhs.weekday()) == (__rhs.weekday())) && (__lhs.index() == __rhs.index()); } 
# 2065 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const weekday_indexed &__lhs, const weekday_indexed &__rhs) noexcept 
# 2066
{ return !(__lhs == __rhs); } 
# 2069
class weekday_last { 
# 2071 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
chrono::weekday __wd; 
# 2074 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr explicit weekday_last(const chrono::weekday &
# 2074 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
__val) noexcept : __wd{__val} 
# 2075
{ } 
# 2077 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday weekday() const noexcept { return __wd; } 
# 2079 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__wd).ok(); } 
# 2080
}; 
# 2084 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const weekday_last &__lhs, const weekday_last &__rhs) noexcept 
# 2085
{ return ((__lhs.weekday()) == (__rhs.weekday())); } 
# 2089 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const weekday_last &__lhs, const weekday_last &__rhs) noexcept 
# 2090
{ return !(__lhs == __rhs); } 
# 2094 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday_indexed weekday::operator[](unsigned __index) const noexcept { return weekday_indexed{*this, __index}; } 
# 2098 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr weekday_last weekday::operator[](last_spec) const noexcept { return weekday_last{*this}; } 
# 2101
constexpr last_spec last{}; 
# 2102
constexpr weekday Sunday{0}; 
# 2103
constexpr weekday Monday{1}; 
# 2104
constexpr weekday Tuesday{2}; 
# 2105
constexpr weekday Wednesday{3}; 
# 2106
constexpr weekday Thursday{4}; 
# 2107
constexpr weekday Friday{5}; 
# 2108
constexpr weekday Saturday{6}; 
# 2110
constexpr month January{1}; 
# 2111
constexpr month February{2}; 
# 2112
constexpr month March{3}; 
# 2113
constexpr month April{4}; 
# 2114
constexpr month May{5}; 
# 2115
constexpr month June{6}; 
# 2116
constexpr month July{7}; 
# 2117
constexpr month August{8}; 
# 2118
constexpr month September{9}; 
# 2119
constexpr month October{10}; 
# 2120
constexpr month November{11}; 
# 2121
constexpr month December{12}; 
# 2124
class month_day { 
# 2126
chrono::month __m; 
# 2127
chrono::day __d; 
# 2129
public: month_day() = default;
# 2131 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day(const chrono::month &__mval, const chrono::day &__dval) noexcept : __m{__mval}, __d{__dval} 
# 2132
{ } 
# 2134 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2136 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::day day() const noexcept { return __d; } 
# 2138 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept; 
# 2139
}; 
# 2143 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool month_day::ok() const noexcept 
# 2144
{ 
# 2145
if (!(__m).ok()) { return false; }  
# 2146
const unsigned __dval = static_cast< unsigned>((__d)); 
# 2147
if ((__dval < (1)) || (__dval > (31))) { return false; }  
# 2148
if (__dval <= (29)) { return true; }  
# 2150
const unsigned __mval = static_cast< unsigned>((__m)); 
# 2151
if (__mval == (2)) { return false; }  
# 2152
if ((((__mval == (4)) || (__mval == (6))) || (__mval == (9))) || (__mval == (11))) { 
# 2153
return __dval == (30); }  
# 2154
return true; 
# 2155
} 
# 2159 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2160
{ return ((__lhs.month()) == (__rhs.month())) && ((__lhs.day()) == (__rhs.day())); } 
# 2164 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2165
{ return !(__lhs == __rhs); } 
# 2169 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day operator/(const month &__lhs, const day &__rhs) noexcept 
# 2170
{ return month_day{__lhs, __rhs}; } 
# 2174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day operator/(const day &__lhs, const month &__rhs) noexcept 
# 2175
{ return (__rhs / __lhs); } 
# 2179 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day operator/(const month &__lhs, int __rhs) noexcept 
# 2180
{ return (__lhs / ((day)(__rhs))); } 
# 2184 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day operator/(int __lhs, const day &__rhs) noexcept 
# 2185
{ return (((month)(__lhs)) / __rhs); } 
# 2189 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day operator/(const day &__lhs, int __rhs) noexcept 
# 2190
{ return (((month)(__rhs)) / __lhs); } 
# 2195 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2196
{ return ((__lhs.month()) != (__rhs.month())) ? ((__lhs.month()) < (__rhs.month())) : ((__lhs.day()) < (__rhs.day())); } 
# 2200 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2201
{ return (__rhs < __lhs); } 
# 2205 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2206
{ return !(__rhs < __lhs); } 
# 2210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const month_day &__lhs, const month_day &__rhs) noexcept 
# 2211
{ return !(__lhs < __rhs); } 
# 2215
class month_day_last { 
# 2217
chrono::month __m; 
# 2220 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr explicit month_day_last(const chrono::month &__val) noexcept : __m{__val} 
# 2221
{ } 
# 2223 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__m).ok(); } 
# 2226
}; 
# 2230 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2231
{ return ((__lhs.month()) == (__rhs.month())); } 
# 2235 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2236
{ return !(__lhs == __rhs); } 
# 2240 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2241
{ return ((__lhs.month()) < (__rhs.month())); } 
# 2245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2246
{ return (__rhs < __lhs); } 
# 2250 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2251
{ return !(__rhs < __lhs); } 
# 2255 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const month_day_last &__lhs, const month_day_last &__rhs) noexcept 
# 2256
{ return !(__lhs < __rhs); } 
# 2260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day_last operator/(const month &__lhs, last_spec) noexcept 
# 2261
{ return month_day_last{__lhs}; } 
# 2265 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day_last operator/(last_spec, const month &__rhs) noexcept 
# 2266
{ return month_day_last{__rhs}; } 
# 2270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day_last operator/(int __lhs, last_spec) noexcept 
# 2271
{ return month_day_last{((month)(__lhs))}; } 
# 2275 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_day_last operator/(last_spec, int __rhs) noexcept 
# 2276
{ return month_day_last{((month)(__rhs))}; } 
# 2279
class month_weekday { 
# 2281
chrono::month __m; 
# 2282
chrono::weekday_indexed __wdi; 
# 2284
public: month_weekday() = default;
# 2286 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday(const chrono::month &__mval, const chrono::weekday_indexed &__wdival) noexcept : __m{__mval}, __wdi{__wdival} 
# 2287
{ } 
# 2289 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2291 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday_indexed weekday_indexed() const noexcept { return __wdi; } 
# 2293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__m).ok() && (__wdi).ok(); } 
# 2294
}; 
# 2298 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const month_weekday &__lhs, const month_weekday &__rhs) noexcept 
# 2299
{ return ((__lhs.month()) == (__rhs.month())) && ((__lhs.weekday_indexed()) == (__rhs.weekday_indexed())); } 
# 2303 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const month_weekday &__lhs, const month_weekday &__rhs) noexcept 
# 2304
{ return !(__lhs == __rhs); } 
# 2308 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday operator/(const month &__lhs, const weekday_indexed &__rhs) noexcept 
# 2309
{ return month_weekday{__lhs, __rhs}; } 
# 2313 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday operator/(int __lhs, const weekday_indexed &__rhs) noexcept 
# 2314
{ return month_weekday{((month)(__lhs)), __rhs}; } 
# 2318 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday operator/(const weekday_indexed &__lhs, const month &__rhs) noexcept 
# 2319
{ return month_weekday{__rhs, __lhs}; } 
# 2323 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday operator/(const weekday_indexed &__lhs, int __rhs) noexcept 
# 2324
{ return month_weekday{((month)(__rhs)), __lhs}; } 
# 2327
class month_weekday_last { 
# 2328
chrono::month __m; 
# 2329
chrono::weekday_last __wdl; 
# 2332 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr month_weekday_last(const chrono::month &__mval, const chrono::weekday_last &__wdlval) noexcept : __m{__mval}, __wdl{__wdlval} 
# 2333
{ } 
# 2335 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2337 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday_last weekday_last() const noexcept { return __wdl; } 
# 2339 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__m).ok() && (__wdl).ok(); } 
# 2340
}; 
# 2344 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const month_weekday_last &__lhs, const month_weekday_last &__rhs) noexcept 
# 2345
{ return ((__lhs.month()) == (__rhs.month())) && ((__lhs.weekday_last()) == (__rhs.weekday_last())); } 
# 2349 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const month_weekday_last &__lhs, const month_weekday_last &__rhs) noexcept 
# 2350
{ return !(__lhs == __rhs); } 
# 2355 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday_last operator/(const month &__lhs, const weekday_last &__rhs) noexcept 
# 2356
{ return month_weekday_last{__lhs, __rhs}; } 
# 2360 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday_last operator/(int __lhs, const weekday_last &__rhs) noexcept 
# 2361
{ return month_weekday_last{((month)(__lhs)), __rhs}; } 
# 2365 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday_last operator/(const weekday_last &__lhs, const month &__rhs) noexcept 
# 2366
{ return month_weekday_last{__rhs, __lhs}; } 
# 2370 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr month_weekday_last operator/(const weekday_last &__lhs, int __rhs) noexcept 
# 2371
{ return month_weekday_last{((month)(__rhs)), __lhs}; } 
# 2374
class year_month { 
# 2375
chrono::year __y; 
# 2376
chrono::month __m; 
# 2378
public: year_month() = default;
# 2380 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month(const chrono::year &__yval, const chrono::month &__mval) noexcept : __y{__yval}, __m{__mval} 
# 2381
{ } 
# 2383 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::year year() const noexcept { return __y; } 
# 2385 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2387 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month &operator+=(const months &__dm) noexcept { ((this->__m) += __dm); return *this; } 
# 2389 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month &operator-=(const months &__dm) noexcept { ((this->__m) -= __dm); return *this; } 
# 2391 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month &operator+=(const years &__dy) noexcept { ((this->__y) += __dy); return *this; } 
# 2393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month &operator-=(const years &__dy) noexcept { ((this->__y) -= __dy); return *this; } 
# 2395 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__y).ok() && (__m).ok(); } 
# 2396
}; 
# 2400 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator/(const year &__y, const month &__m) noexcept { return year_month{__y, __m}; } 
# 2404 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator/(const year &__y, int __m) noexcept { return year_month{__y, ((month)(__m))}; } 
# 2408 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2409
{ return ((__lhs.year()) == (__rhs.year())) && ((__lhs.month()) == (__rhs.month())); } 
# 2413 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2414
{ return !(__lhs == __rhs); } 
# 2418 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2419
{ return ((__lhs.year()) != (__rhs.year())) ? ((__lhs.year()) < (__rhs.year())) : ((__lhs.month()) < (__rhs.month())); } 
# 2423 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2424
{ return (__rhs < __lhs); } 
# 2428 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2429
{ return !(__rhs < __lhs); } 
# 2433 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2434
{ return !(__lhs < __rhs); } 
# 2437 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator+(const year_month &__lhs, const months &__rhs) noexcept 
# 2438
{ 
# 2439
int __dmi = ((static_cast< int>(static_cast< unsigned>(__lhs.month()))) - 1) + __rhs.count(); 
# 2440
const int __dy = ((__dmi >= 0) ? __dmi : (__dmi - 11)) / 12; 
# 2441
__dmi = ((__dmi - (__dy * 12)) + 1); 
# 2442
return ((((__lhs.year()) + ((duration< int, ratio< 31556952L, 1L> > )(__dy)))) / ((month)(static_cast< unsigned>(__dmi)))); 
# 2443
} 
# 2446 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator+(const months &__lhs, const year_month &__rhs) noexcept 
# 2447
{ return (__rhs + __lhs); } 
# 2450 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator+(const year_month &__lhs, const years &__rhs) noexcept 
# 2451
{ return ((((__lhs.year()) + __rhs)) / (__lhs.month())); } 
# 2454 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator+(const years &__lhs, const year_month &__rhs) noexcept 
# 2455
{ return (__rhs + __lhs); } 
# 2458 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr months operator-(const year_month &__lhs, const year_month &__rhs) noexcept 
# 2459
{ return ((((__lhs.year()) - (__rhs.year()))) + ((duration< int, ratio< 2629746L, 1L> > )((static_cast< unsigned>(__lhs.month())) - (static_cast< unsigned>(__rhs.month()))))); } 
# 2462 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator-(const year_month &__lhs, const months &__rhs) noexcept 
# 2463
{ return (__lhs + ((-__rhs))); } 
# 2466 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month operator-(const year_month &__lhs, const years &__rhs) noexcept 
# 2467
{ return (__lhs + ((-__rhs))); } 
# 2469
class year_month_day_last; 
# 2471
class year_month_day { 
# 2473
chrono::year __y; 
# 2474
chrono::month __m; 
# 2475
chrono::day __d; 
# 2477
public: year_month_day() = default;
# 2479 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day(const chrono::year &
# 2480
__yval, const chrono::month &__mval, const chrono::day &__dval) noexcept : __y{__yval}, __m{__mval}, __d{__dval} 
# 2481
{ } 
# 2483 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day(const year_month_day_last & __ymdl) noexcept; 
# 2485 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day(const sys_days &__sysd) noexcept : year_month_day(__from_days(__sysd.time_since_epoch())) 
# 2486
{ } 
# 2488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit year_month_day(const local_days &__locd) noexcept : year_month_day(__from_days(__locd.time_since_epoch())) 
# 2489
{ } 
# 2492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &operator+=(const months & __dm) noexcept; 
# 2494 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &operator-=(const months & __dm) noexcept; 
# 2496 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &operator+=(const years & __dy) noexcept; 
# 2498 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &operator-=(const years & __dy) noexcept; 
# 2501 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::year year() const noexcept { return __y; } 
# 2503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2505 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::day day() const noexcept { return __d; } 
# 2507 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr operator sys_days() const noexcept { return sys_days{this->__to_days()}; } 
# 2509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator local_days() const noexcept { return local_days{this->__to_days()}; } 
# 2512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept; 
# 2515 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr year_month_day __from_days(days __d) noexcept; 
# 2517 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days __to_days() const noexcept; 
# 2518
}; 
# 2525 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day year_month_day::__from_days(days __d) noexcept 
# 2526
{ 
# 2527
static_assert((numeric_limits< unsigned> ::digits >= 18), "");
# 2528
static_assert((numeric_limits< int> ::digits >= 20), "");
# 2529
const int __z = __d.count() + 719468; 
# 2530
const int __era = ((__z >= 0) ? __z : (__z - 146096)) / 146097; 
# 2531
const unsigned __doe = static_cast< unsigned>(__z - (__era * 146097)); 
# 2532
const unsigned __yoe = (((__doe - (__doe / (1460))) + (__doe / (36524))) - (__doe / (146096))) / (365); 
# 2533
const int __yr = (static_cast< int>(__yoe)) + (__era * 400); 
# 2534
const unsigned __doy = __doe - ((((365) * __yoe) + (__yoe / (4))) - (__yoe / (100))); 
# 2535
const unsigned __mp = (((5) * __doy) + (2)) / (153); 
# 2536
const unsigned __dy = (__doy - ((((153) * __mp) + (2)) / (5))) + (1); 
# 2537
const unsigned __mth = __mp + ((__mp < (10)) ? 3 : (-9)); 
# 2538
return year_month_day{chrono::year{__yr + (__mth <= (2))}, chrono::month{__mth}, chrono::day{__dy}}; 
# 2539
} 
# 2543 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days year_month_day::__to_days() const noexcept 
# 2544
{ 
# 2545
static_assert((numeric_limits< unsigned> ::digits >= 18), "");
# 2546
static_assert((numeric_limits< int> ::digits >= 20), "");
# 2550
constexpr auto __Feb = (February); 
# 2551
const int __yr = (static_cast< int>((__y))) - (((__m) <= __Feb)); 
# 2552
const unsigned __mth = static_cast< unsigned>((__m)); 
# 2553
const unsigned __dy = static_cast< unsigned>((__d)); 
# 2555
const int __era = ((__yr >= 0) ? __yr : (__yr - 399)) / 400; 
# 2556
const unsigned __yoe = static_cast< unsigned>(__yr - (__era * 400)); 
# 2557
const unsigned __doy = (((((153) * (__mth + ((__mth > (2)) ? -3 : 9))) + (2)) / (5)) + __dy) - (1); 
# 2558
const unsigned __doe = (((__yoe * (365)) + (__yoe / (4))) - (__yoe / (100))) + __doy; 
# 2559
return days{((__era * 146097) + (static_cast< int>(__doe))) - 719468}; 
# 2560
} 
# 2564 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2565
{ return ((__lhs.year()) == (__rhs.year())) && ((__lhs.month()) == (__rhs.month())) && ((__lhs.day()) == (__rhs.day())); } 
# 2569 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2570
{ return !(__lhs == __rhs); } 
# 2574 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2575
{ 
# 2576
if (((__lhs.year()) < (__rhs.year()))) { return true; }  
# 2577
if (((__lhs.year()) > (__rhs.year()))) { return false; }  
# 2578
if (((__lhs.month()) < (__rhs.month()))) { return true; }  
# 2579
if (((__lhs.month()) > (__rhs.month()))) { return false; }  
# 2580
return ((__lhs.day()) < (__rhs.day())); 
# 2581
} 
# 2585 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2586
{ return (__rhs < __lhs); } 
# 2590 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2591
{ return !(__rhs < __lhs); } 
# 2595 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const year_month_day &__lhs, const year_month_day &__rhs) noexcept 
# 2596
{ return !(__lhs < __rhs); } 
# 2600 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(const year_month &__lhs, const day &__rhs) noexcept 
# 2601
{ return year_month_day{__lhs.year(), __lhs.month(), __rhs}; } 
# 2605 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(const year_month &__lhs, int __rhs) noexcept 
# 2606
{ return (__lhs / ((day)(__rhs))); } 
# 2610 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(const year &__lhs, const month_day &__rhs) noexcept 
# 2611
{ return (((__lhs / (__rhs.month()))) / (__rhs.day())); } 
# 2615 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(int __lhs, const month_day &__rhs) noexcept 
# 2616
{ return (((year)(__lhs)) / __rhs); } 
# 2620 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(const month_day &__lhs, const year &__rhs) noexcept 
# 2621
{ return (__rhs / __lhs); } 
# 2625 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator/(const month_day &__lhs, int __rhs) noexcept 
# 2626
{ return (((year)(__rhs)) / __lhs); } 
# 2631 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator+(const year_month_day &__lhs, const months &__rhs) noexcept 
# 2632
{ return ((((((__lhs.year()) / (__lhs.month()))) + __rhs)) / (__lhs.day())); } 
# 2636 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator+(const months &__lhs, const year_month_day &__rhs) noexcept 
# 2637
{ return (__rhs + __lhs); } 
# 2641 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator-(const year_month_day &__lhs, const months &__rhs) noexcept 
# 2642
{ return (__lhs + ((-__rhs))); } 
# 2646 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator+(const year_month_day &__lhs, const years &__rhs) noexcept 
# 2647
{ return ((((((__lhs.year()) + __rhs)) / (__lhs.month()))) / (__lhs.day())); } 
# 2651 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator+(const years &__lhs, const year_month_day &__rhs) noexcept 
# 2652
{ return (__rhs + __lhs); } 
# 2656 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day operator-(const year_month_day &__lhs, const years &__rhs) noexcept 
# 2657
{ return (__lhs + ((-__rhs))); } 
# 2660 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &year_month_day::operator+=(const months &__dm) noexcept { (*this) = ((*this) + __dm); return *this; } 
# 2662 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &year_month_day::operator-=(const months &__dm) noexcept { (*this) = ((*this) - __dm); return *this; } 
# 2664 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &year_month_day::operator+=(const years &__dy) noexcept { (*this) = ((*this) + __dy); return *this; } 
# 2666 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day &year_month_day::operator-=(const years &__dy) noexcept { (*this) = ((*this) - __dy); return *this; } 
# 2668
class year_month_day_last { 
# 2670
chrono::year __y; 
# 2671
chrono::month_day_last __mdl; 
# 2674 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr year_month_day_last(const chrono::year &__yval, const chrono::month_day_last &__mdlval) noexcept : __y{__yval}, __mdl{__mdlval} 
# 2675
{ } 
# 2678 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &operator+=(const months & __m) noexcept; 
# 2680 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &operator-=(const months & __m) noexcept; 
# 2682 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &operator+=(const years & __y) noexcept; 
# 2684 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &operator-=(const years & __y) noexcept; 
# 2687 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::year year() const noexcept { return __y; } 
# 2689 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return (__mdl).month(); } 
# 2691 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month_day_last month_day_last() const noexcept { return __mdl; } 
# 2693 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::day day() const noexcept; 
# 2695 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr operator sys_days() const noexcept { return sys_days{((((this->year()) / (this->month()))) / (this->day()))}; } 
# 2697 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator local_days() const noexcept { return local_days{((((this->year()) / (this->month()))) / (this->day()))}; } 
# 2699 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__y).ok() && (__mdl).ok(); } 
# 2700
}; 
# 2704 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr day year_month_day_last::day() const noexcept 
# 2705
{ 
# 2706
constexpr chrono::day __d[] = {((chrono::day)(31)), ((chrono::day)(28)), ((chrono::day)(31)), ((chrono::day)(30)), ((chrono::day)(31)), ((chrono::day)(30)), ((chrono::day)(31)), ((chrono::day)(31)), ((chrono::day)(30)), ((chrono::day)(31)), ((chrono::day)(30)), ((chrono::day)(31))}; 
# 2716
constexpr auto __Feb = (February); 
# 2717
return ((((this->month()) != __Feb) || (!(__y).is_leap())) ? __d[(static_cast< unsigned>(this->month())) - (1)] : chrono::day{29}); 
# 2719
} 
# 2723 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2724
{ return ((__lhs.year()) == (__rhs.year())) && ((__lhs.month_day_last()) == (__rhs.month_day_last())); } 
# 2728 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2729
{ return !(__lhs == __rhs); } 
# 2733 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2734
{ 
# 2735
if (((__lhs.year()) < (__rhs.year()))) { return true; }  
# 2736
if (((__lhs.year()) > (__rhs.year()))) { return false; }  
# 2737
return ((__lhs.month_day_last()) < (__rhs.month_day_last())); 
# 2738
} 
# 2742 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2743
{ return (__rhs < __lhs); } 
# 2747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator<=(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2748
{ return !(__rhs < __lhs); } 
# 2752 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator>=(const year_month_day_last &__lhs, const year_month_day_last &__rhs) noexcept 
# 2753
{ return !(__lhs < __rhs); } 
# 2756 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator/(const year_month &__lhs, last_spec) noexcept 
# 2757
{ return year_month_day_last{__lhs.year(), month_day_last{__lhs.month()}}; } 
# 2760 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator/(const year &__lhs, const month_day_last &__rhs) noexcept 
# 2761
{ return year_month_day_last{__lhs, __rhs}; } 
# 2764 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator/(int __lhs, const month_day_last &__rhs) noexcept 
# 2765
{ return year_month_day_last{year{__lhs}, __rhs}; } 
# 2768 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator/(const month_day_last &__lhs, const year &__rhs) noexcept 
# 2769
{ return (__rhs / __lhs); } 
# 2772 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator/(const month_day_last &__lhs, int __rhs) noexcept 
# 2773
{ return (year{__rhs} / __lhs); } 
# 2778 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator+(const year_month_day_last &__lhs, const months &__rhs) noexcept 
# 2779
{ return ((((((__lhs.year()) / (__lhs.month()))) + __rhs)) / last); } 
# 2783 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator+(const months &__lhs, const year_month_day_last &__rhs) noexcept 
# 2784
{ return (__rhs + __lhs); } 
# 2788 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator-(const year_month_day_last &__lhs, const months &__rhs) noexcept 
# 2789
{ return (__lhs + ((-__rhs))); } 
# 2793 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator+(const year_month_day_last &__lhs, const years &__rhs) noexcept 
# 2794
{ return year_month_day_last{((__lhs.year()) + __rhs), __lhs.month_day_last()}; } 
# 2798 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator+(const years &__lhs, const year_month_day_last &__rhs) noexcept 
# 2799
{ return (__rhs + __lhs); } 
# 2803 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last operator-(const year_month_day_last &__lhs, const years &__rhs) noexcept 
# 2804
{ return (__lhs + ((-__rhs))); } 
# 2807 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &year_month_day_last::operator+=(const months &__dm) noexcept { (*this) = ((*this) + __dm); return *this; } 
# 2809 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &year_month_day_last::operator-=(const months &__dm) noexcept { (*this) = ((*this) - __dm); return *this; } 
# 2811 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &year_month_day_last::operator+=(const years &__dy) noexcept { (*this) = ((*this) + __dy); return *this; } 
# 2813 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day_last &year_month_day_last::operator-=(const years &__dy) noexcept { (*this) = ((*this) - __dy); return *this; } 
# 2816 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_day::year_month_day(const year_month_day_last &__ymdl) noexcept : __y{__ymdl.year()}, __m{__ymdl.month()}, __d{__ymdl.day()} 
# 2817
{ } 
# 2820 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool year_month_day::ok() const noexcept 
# 2821
{ 
# 2822
if ((!(__y).ok()) || (!(__m).ok())) { return false; }  
# 2823
return (chrono::day{1} <= (__d)) && ((__d) <= (((((__y) / (__m))) / last).day())); 
# 2824
} 
# 2826
class year_month_weekday { 
# 2827
chrono::year __y; 
# 2828
chrono::month __m; 
# 2829
chrono::weekday_indexed __wdi; 
# 2831
public: year_month_weekday() = default;
# 2833 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday(const chrono::year &__yval, const chrono::month &__mval, const chrono::weekday_indexed &
# 2834
__wdival) noexcept : __y{__yval}, __m{__mval}, __wdi{__wdival} 
# 2835
{ } 
# 2837 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday(const sys_days &__sysd) noexcept : year_month_weekday(__from_days(__sysd.time_since_epoch())) 
# 2838
{ } 
# 2840 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit year_month_weekday(const local_days &__locd) noexcept : year_month_weekday(__from_days(__locd.time_since_epoch())) 
# 2841
{ } 
# 2843 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &operator+=(const months & m) noexcept; 
# 2845 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &operator-=(const months & m) noexcept; 
# 2847 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &operator+=(const years & y) noexcept; 
# 2849 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &operator-=(const years & y) noexcept; 
# 2852 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::year year() const noexcept { return __y; } 
# 2854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 2856 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday weekday() const noexcept { return (__wdi).weekday(); } 
# 2858 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr unsigned index() const noexcept { return (__wdi).index(); } 
# 2860 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday_indexed weekday_indexed() const noexcept { return __wdi; } 
# 2863 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr operator sys_days() const noexcept { return sys_days{this->__to_days()}; } 
# 2865 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator local_days() const noexcept { return local_days{this->__to_days()}; } 
# 2867 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept 
# 2868
{ 
# 2869
if (((!(__y).ok()) || (!(__m).ok())) || (!(__wdi).ok())) { return false; }  
# 2871
return true; 
# 2872
} 
# 2875 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr year_month_weekday __from_days(days __d) noexcept; 
# 2877 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days __to_days() const noexcept; 
# 2878
}; 
# 2882 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday year_month_weekday::__from_days(days __d) noexcept 
# 2883
{ 
# 2884
const sys_days __sysd{__d}; 
# 2885
const chrono::weekday __wd = ((chrono::weekday)(__sysd)); 
# 2886
const year_month_day __ymd = ((year_month_day)(__sysd)); 
# 2887
return year_month_weekday{__ymd.year(), __ymd.month(), __wd[(((static_cast< unsigned>(__ymd.day())) - (1)) / (7)) + (1)]}; 
# 2889
} 
# 2893 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days year_month_weekday::__to_days() const noexcept 
# 2894
{ 
# 2895
const sys_days __sysd = ((const sys_days)(((((__y) / (__m))) / (1)))); 
# 2896
return (__sysd + ((((((__wdi).weekday()) - ((chrono::weekday)(__sysd)))) + days{((__wdi).index() - (1)) * (7)}))).time_since_epoch(); 
# 2898
} 
# 2902 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year_month_weekday &__lhs, const year_month_weekday &__rhs) noexcept 
# 2903
{ return ((__lhs.year()) == (__rhs.year())) && ((__lhs.month()) == (__rhs.month())) && ((__lhs.weekday_indexed()) == (__rhs.weekday_indexed())); } 
# 2907 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year_month_weekday &__lhs, const year_month_weekday &__rhs) noexcept 
# 2908
{ return !(__lhs == __rhs); } 
# 2912 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator/(const year_month &__lhs, const weekday_indexed &__rhs) noexcept 
# 2913
{ return year_month_weekday{__lhs.year(), __lhs.month(), __rhs}; } 
# 2917 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator/(const year &__lhs, const month_weekday &__rhs) noexcept 
# 2918
{ return year_month_weekday{__lhs, __rhs.month(), __rhs.weekday_indexed()}; } 
# 2922 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator/(int __lhs, const month_weekday &__rhs) noexcept 
# 2923
{ return (((year)(__lhs)) / __rhs); } 
# 2927 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator/(const month_weekday &__lhs, const year &__rhs) noexcept 
# 2928
{ return (__rhs / __lhs); } 
# 2932 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator/(const month_weekday &__lhs, int __rhs) noexcept 
# 2933
{ return (((year)(__rhs)) / __lhs); } 
# 2938 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator+(const year_month_weekday &__lhs, const months &__rhs) noexcept 
# 2939
{ return ((((((__lhs.year()) / (__lhs.month()))) + __rhs)) / (__lhs.weekday_indexed())); } 
# 2943 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator+(const months &__lhs, const year_month_weekday &__rhs) noexcept 
# 2944
{ return (__rhs + __lhs); } 
# 2948 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator-(const year_month_weekday &__lhs, const months &__rhs) noexcept 
# 2949
{ return (__lhs + ((-__rhs))); } 
# 2953 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator+(const year_month_weekday &__lhs, const years &__rhs) noexcept 
# 2954
{ return year_month_weekday{((__lhs.year()) + __rhs), __lhs.month(), __lhs.weekday_indexed()}; } 
# 2958 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator+(const years &__lhs, const year_month_weekday &__rhs) noexcept 
# 2959
{ return (__rhs + __lhs); } 
# 2963 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday operator-(const year_month_weekday &__lhs, const years &__rhs) noexcept 
# 2964
{ return (__lhs + ((-__rhs))); } 
# 2968 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &year_month_weekday::operator+=(const months &__dm) noexcept { (*this) = ((*this) + __dm); return *this; } 
# 2970 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &year_month_weekday::operator-=(const months &__dm) noexcept { (*this) = ((*this) - __dm); return *this; } 
# 2972 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &year_month_weekday::operator+=(const years &__dy) noexcept { (*this) = ((*this) + __dy); return *this; } 
# 2974 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday &year_month_weekday::operator-=(const years &__dy) noexcept { (*this) = ((*this) - __dy); return *this; } 
# 2976
class year_month_weekday_last { 
# 2978
chrono::year __y; 
# 2979
chrono::month __m; 
# 2980
chrono::weekday_last __wdl; 
# 2983 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
public: constexpr year_month_weekday_last(const chrono::year &__yval, const chrono::month &__mval, const chrono::weekday_last &
# 2984
__wdlval) noexcept : __y{__yval}, __m{__mval}, __wdl{__wdlval} 
# 2985
{ } 
# 2987 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &operator+=(const months & __dm) noexcept; 
# 2989 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &operator-=(const months & __dm) noexcept; 
# 2991 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &operator+=(const years & __dy) noexcept; 
# 2993 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &operator-=(const years & __dy) noexcept; 
# 2996 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::year year() const noexcept { return __y; } 
# 2998 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::month month() const noexcept { return __m; } 
# 3000 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday weekday() const noexcept { return (__wdl).weekday(); } 
# 3002 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::weekday_last weekday_last() const noexcept { return __wdl; } 
# 3004 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr operator sys_days() const noexcept { return sys_days{this->__to_days()}; } 
# 3006 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator local_days() const noexcept { return local_days{this->__to_days()}; } 
# 3008 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool ok() const noexcept { return (__y).ok() && (__m).ok() && (__wdl).ok(); } 
# 3011 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days __to_days() const noexcept; 
# 3013
}; 
# 3017 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr days year_month_weekday_last::__to_days() const noexcept 
# 3018
{ 
# 3019
const sys_days __last = sys_days{((((__y) / (__m))) / last)}; 
# 3020
return (__last - ((chrono::weekday{__last} - ((__wdl).weekday())))).time_since_epoch(); 
# 3022
} 
# 3026 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator==(const year_month_weekday_last &__lhs, const year_month_weekday_last &__rhs) noexcept 
# 3027
{ return ((__lhs.year()) == (__rhs.year())) && ((__lhs.month()) == (__rhs.month())) && ((__lhs.weekday_last()) == (__rhs.weekday_last())); } 
# 3031 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool operator!=(const year_month_weekday_last &__lhs, const year_month_weekday_last &__rhs) noexcept 
# 3032
{ return !(__lhs == __rhs); } 
# 3037 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator/(const year_month &__lhs, const weekday_last &__rhs) noexcept 
# 3038
{ return year_month_weekday_last{__lhs.year(), __lhs.month(), __rhs}; } 
# 3042 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator/(const year &__lhs, const month_weekday_last &__rhs) noexcept 
# 3043
{ return year_month_weekday_last{__lhs, __rhs.month(), __rhs.weekday_last()}; } 
# 3047 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator/(int __lhs, const month_weekday_last &__rhs) noexcept 
# 3048
{ return (((year)(__lhs)) / __rhs); } 
# 3052 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator/(const month_weekday_last &__lhs, const year &__rhs) noexcept 
# 3053
{ return (__rhs / __lhs); } 
# 3057 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator/(const month_weekday_last &__lhs, int __rhs) noexcept 
# 3058
{ return (((year)(__rhs)) / __lhs); } 
# 3063 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator+(const year_month_weekday_last &__lhs, const months &__rhs) noexcept 
# 3064
{ return ((((((__lhs.year()) / (__lhs.month()))) + __rhs)) / (__lhs.weekday_last())); } 
# 3068 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator+(const months &__lhs, const year_month_weekday_last &__rhs) noexcept 
# 3069
{ return (__rhs + __lhs); } 
# 3073 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator-(const year_month_weekday_last &__lhs, const months &__rhs) noexcept 
# 3074
{ return (__lhs + ((-__rhs))); } 
# 3078 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator+(const year_month_weekday_last &__lhs, const years &__rhs) noexcept 
# 3079
{ return year_month_weekday_last{((__lhs.year()) + __rhs), __lhs.month(), __lhs.weekday_last()}; } 
# 3083 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator+(const years &__lhs, const year_month_weekday_last &__rhs) noexcept 
# 3084
{ return (__rhs + __lhs); } 
# 3088 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last operator-(const year_month_weekday_last &__lhs, const years &__rhs) noexcept 
# 3089
{ return (__lhs + ((-__rhs))); } 
# 3092 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &year_month_weekday_last::operator+=(const months &__dm) noexcept { (*this) = ((*this) + __dm); return *this; } 
# 3094 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &year_month_weekday_last::operator-=(const months &__dm) noexcept { (*this) = ((*this) - __dm); return *this; } 
# 3096 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &year_month_weekday_last::operator+=(const years &__dy) noexcept { (*this) = ((*this) + __dy); return *this; } 
# 3098 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr year_month_weekday_last &year_month_weekday_last::operator-=(const years &__dy) noexcept { (*this) = ((*this) - __dy); return *this; } 
# 3100
template< class _Duration> 
# 3101
class hh_mm_ss { 
# 3104
static_assert((__is_duration< _Duration> ::value), "template parameter of hh_mm_ss must be a std::chrono::duration");
# 3105
using __CommonType = typename common_type< _Duration, chrono::seconds> ::type; 
# 3108 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr uint64_t __pow10(unsigned __exp) 
# 3109
{ 
# 3110
uint64_t __ret = (1); 
# 3111
for (unsigned __i = (0); __i < __exp; ++__i) { 
# 3112
__ret *= (10U); }  
# 3113
return __ret; 
# 3114
} 
# 3117 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
static constexpr unsigned __width(uint64_t __n, uint64_t __d = 10, unsigned __w = 0) 
# 3118
{ 
# 3119
if ((__n >= (2)) && (__d != (0)) && (__w < (19))) { 
# 3120
return (1) + (__width)(__n, (__d % __n) * (10), __w + (1)); }  
# 3121
return 0; 
# 3122
} 
# 3125
public: static constexpr unsigned fractional_width = ((__width)(__CommonType::period::den) < (19)) ? (__width)(__CommonType::period::den) : 6U; 
# 3127
using precision = duration< typename common_type< _Duration, chrono::seconds> ::type::rep, ratio< 1L, (&hh_mm_ss< _Duration> ::__pow10)(fractional_width)> > ; 
# 3130 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr hh_mm_ss() noexcept : hh_mm_ss{_Duration::zero()} { } 
# 3133 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit hh_mm_ss(_Duration __d) noexcept : __is_neg(__d < ((_Duration)0)), __h(duration_cast< chrono::hours> (abs(__d))), __m(duration_cast< chrono::minutes> (abs(__d) - hours())), __s(duration_cast< chrono::seconds> ((abs(__d) - hours()) - minutes())), __f(duration_cast< precision> (((abs(__d) - hours()) - minutes()) - seconds())) 
# 3139
{ } 
# 3142 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool is_negative() const noexcept { return __is_neg; } 
# 3144 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::hours hours() const noexcept { return __h; } 
# 3146 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::minutes minutes() const noexcept { return __m; } 
# 3148 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::seconds seconds() const noexcept { return __s; } 
# 3150 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr precision subseconds() const noexcept { return __f; } 
# 3153 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr precision to_duration() const noexcept 
# 3154
{ 
# 3155
auto __dur = ((((__h) + (__m))) + (__s)) + (__f); 
# 3156
return (__is_neg) ? -__dur : __dur; 
# 3157
} 
# 3160 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr explicit operator precision() const noexcept { return to_duration(); } 
# 3163
private: bool __is_neg; 
# 3164
chrono::hours __h; 
# 3165
chrono::minutes __m; 
# 3166
chrono::seconds __s; 
# 3167
precision __f; 
# 3168
}; 
# 3171 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool is_am(const hours &__h) noexcept { return (__h >= ((duration< long, ratio< 3600L> > )(0))) && (__h < ((duration< long, ratio< 3600L> > )(12))); } 
# 3173 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr bool is_pm(const hours &__h) noexcept { return (__h >= ((duration< long, ratio< 3600L> > )(12))) && (__h < ((duration< long, ratio< 3600L> > )(24))); } 
# 3176 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr hours make12(const hours &__h) noexcept 
# 3177
{ 
# 3178
if ((__h == ((duration< long, ratio< 3600L> > )(0)))) { return ((duration< long, ratio< 3600L> > )(12)); } else { 
# 3179
if ((__h <= ((duration< long, ratio< 3600L> > )(12)))) { return __h; } else { 
# 3180
return (__h - ((duration< long, ratio< 3600L> > )(12))); }  }  
# 3181
} 
# 3184 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr hours make24(const hours &__h, bool __is_pm) noexcept 
# 3185
{ 
# 3186
if (__is_pm) { 
# 3187
return ((__h == ((duration< long, ratio< 3600L> > )(12))) ? __h : ((__h + ((duration< long, ratio< 3600L> > )(12))))); } else { 
# 3189
return ((__h == ((duration< long, ratio< 3600L> > )(12))) ? ((duration< long, ratio< 3600L> > )(0)) : __h); }  
# 3190
} 
# 3192
}
# 3204 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
inline namespace literals { 
# 3206
inline namespace chrono_literals { 
# 3210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::hours operator ""h(unsigned long long __h) 
# 3211
{ 
# 3212
return ((chrono::duration< long, ratio< 3600L> > )(static_cast< chrono::duration< long, ratio< 3600L> > ::rep>(__h))); 
# 3213
} 
# 3216 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double, ratio< 3600L> >  operator ""h(long double __h) 
# 3217
{ 
# 3218
return ((chrono::duration< double, ratio< 3600L> > )(__h)); 
# 3219
} 
# 3222 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::minutes operator ""min(unsigned long long __m) 
# 3223
{ 
# 3224
return ((chrono::duration< long, ratio< 60L> > )(static_cast< chrono::duration< long, ratio< 60L> > ::rep>(__m))); 
# 3225
} 
# 3228 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double, ratio< 60L> >  operator ""min(long double __m) 
# 3229
{ 
# 3230
return ((chrono::duration< double, ratio< 60L> > )(__m)); 
# 3231
} 
# 3234 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::seconds operator ""s(unsigned long long __s) 
# 3235
{ 
# 3236
return ((chrono::duration< long long> )(static_cast< chrono::duration< long long> ::rep>(__s))); 
# 3237
} 
# 3240 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double>  operator ""s(long double __s) 
# 3241
{ 
# 3242
return ((chrono::duration< double> )(__s)); 
# 3243
} 
# 3246 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::milliseconds operator ""ms(unsigned long long __ms) 
# 3247
{ 
# 3248
return ((chrono::duration< long long, ratio< 1L, 1000L> > )(static_cast< chrono::duration< long long, ratio< 1L, 1000L> > ::rep>(__ms))); 
# 3249
} 
# 3252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double, ratio< 1L, 1000L> >  operator ""ms(long double __ms) 
# 3253
{ 
# 3254
return ((chrono::duration< double, ratio< 1L, 1000L> > )(__ms)); 
# 3255
} 
# 3258 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::microseconds operator ""us(unsigned long long __us) 
# 3259
{ 
# 3260
return ((chrono::duration< long long, ratio< 1L, 1000000L> > )(static_cast< chrono::duration< long long, ratio< 1L, 1000000L> > ::rep>(__us))); 
# 3261
} 
# 3264 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double, ratio< 1L, 1000000L> >  operator ""us(long double __us) 
# 3265
{ 
# 3266
return ((chrono::duration< double, ratio< 1L, 1000000L> > )(__us)); 
# 3267
} 
# 3270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::nanoseconds operator ""ns(unsigned long long __ns) 
# 3271
{ 
# 3272
return ((chrono::duration< long long, ratio< 1L, 1000000000L> > )(static_cast< chrono::duration< long long, ratio< 1L, 1000000000L> > ::rep>(__ns))); 
# 3273
} 
# 3276 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
constexpr chrono::duration< double, ratio< 1L, 1000000000L> >  operator ""ns(long double __ns) 
# 3277
{ 
# 3278
return ((chrono::duration< double, ratio< 1L, 1000000000L> > )(__ns)); 
# 3279
} 
# 3294 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono" 3
}}
# 3296
namespace chrono { 
# 3297
using namespace literals::chrono_literals;
# 3298
}
# 3302 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../detail/libcxx/include/chrono"
}}}
# 44 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../chrono"
namespace cuda { namespace std { inline namespace __4 { 
# 46
namespace chrono { 
# 49
inline system_clock::time_point system_clock::now() noexcept 
# 50 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../chrono"
{ 
# 56
return ((chrono::time_point< system_clock> )(duration_cast< chrono::duration< long long, ratio< 1L, 1000000000L> > > (((chrono::duration< long long, ratio< 1L, 1000000000L> > )(::std::chrono::duration_cast< ::std::chrono::duration< signed long, ::std::ratio< 1L, 1000000000L> > > (::std::chrono::system_clock::now().time_since_epoch()).count()))))); 
# 62
} 
# 65
inline time_t system_clock::to_time_t(const time_point &__t) noexcept 
# 66 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../chrono"
{ 
# 67
return (time_t)duration_cast< chrono::duration< long long> > (__t.time_since_epoch()).count(); 
# 68
} 
# 71
inline system_clock::time_point system_clock::from_time_t(time_t __t) noexcept 
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/../chrono"
{ 
# 73
return ((chrono::time_point< system_clock> )(((chrono::duration< long long> )(__t)))); ; 
# 74
} 
# 75
}
# 77
}}}
# 40 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3
typedef 
# 37
union { 
# 38
char __size[32]; 
# 39
long __align; 
# 40
} sem_t; 
# 31 "/usr/include/semaphore.h" 3
extern "C" {
# 35
extern int sem_init(sem_t * __sem, int __pshared, unsigned __value) throw(); 
# 38
extern int sem_destroy(sem_t * __sem) throw(); 
# 41
extern sem_t *sem_open(const char * __name, int __oflag, ...) throw(); 
# 44
extern int sem_close(sem_t * __sem) throw(); 
# 47
extern int sem_unlink(const char * __name) throw(); 
# 53
extern int sem_wait(sem_t * __sem); 
# 60
extern int sem_timedwait(sem_t *__restrict__ __sem, const timespec *__restrict__ __abstime); 
# 65
extern int sem_trywait(sem_t * __sem) throw(); 
# 68
extern int sem_post(sem_t * __sem) throw(); 
# 71
extern int sem_getvalue(sem_t *__restrict__ __sem, int *__restrict__ __sval) throw(); 
# 75
}
# 27 "/usr/include/unistd.h" 3
extern "C" {
# 277 "/usr/include/unistd.h" 3
typedef __socklen_t socklen_t; 
# 290 "/usr/include/unistd.h" 3
extern int access(const char * __name, int __type) throw() __attribute((__nonnull__(1))); 
# 295
extern int euidaccess(const char * __name, int __type) throw()
# 296
 __attribute((__nonnull__(1))); 
# 299
extern int eaccess(const char * __name, int __type) throw()
# 300
 __attribute((__nonnull__(1))); 
# 307
extern int faccessat(int __fd, const char * __file, int __type, int __flag) throw()
# 308
 __attribute((__nonnull__(2))); 
# 337 "/usr/include/unistd.h" 3
extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw(); 
# 348 "/usr/include/unistd.h" 3
extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw(); 
# 356
extern int close(int __fd); 
# 363
extern ssize_t read(int __fd, void * __buf, ::size_t __nbytes); 
# 369
extern ssize_t write(int __fd, const void * __buf, ::size_t __n); 
# 379 "/usr/include/unistd.h" 3
extern ssize_t pread(int __fd, void * __buf, ::size_t __nbytes, __off_t __offset); 
# 387
extern ssize_t pwrite(int __fd, const void * __buf, ::size_t __n, __off_t __offset); 
# 407 "/usr/include/unistd.h" 3
extern ssize_t pread64(int __fd, void * __buf, ::size_t __nbytes, __off64_t __offset); 
# 411
extern ssize_t pwrite64(int __fd, const void * __buf, ::size_t __n, __off64_t __offset); 
# 420
extern int pipe(int  __pipedes[2]) throw(); 
# 425
extern int pipe2(int  __pipedes[2], int __flags) throw(); 
# 435 "/usr/include/unistd.h" 3
extern unsigned alarm(unsigned __seconds) throw(); 
# 447 "/usr/include/unistd.h" 3
extern unsigned sleep(unsigned __seconds); 
# 455
extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw(); 
# 463
extern int usleep(__useconds_t __useconds); 
# 472 "/usr/include/unistd.h" 3
extern int pause(); 
# 476
extern int chown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 477
 __attribute((__nonnull__(1))); 
# 481
extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw(); 
# 486
extern int lchown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 487
 __attribute((__nonnull__(1))); 
# 494
extern int fchownat(int __fd, const char * __file, __uid_t __owner, __gid_t __group, int __flag) throw()
# 496
 __attribute((__nonnull__(2))); 
# 500
extern int chdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 504
extern int fchdir(int __fd) throw(); 
# 514 "/usr/include/unistd.h" 3
extern char *getcwd(char * __buf, ::size_t __size) throw(); 
# 520
extern char *get_current_dir_name() throw(); 
# 528
extern char *getwd(char * __buf) throw()
# 529
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 534
extern int dup(int __fd) throw(); 
# 537
extern int dup2(int __fd, int __fd2) throw(); 
# 542
extern int dup3(int __fd, int __fd2, int __flags) throw(); 
# 546
extern char **__environ; 
# 548
extern char **environ; 
# 554
extern int execve(const char * __path, char *const  __argv[], char *const  __envp[]) throw()
# 555
 __attribute((__nonnull__(1, 2))); 
# 560
extern int fexecve(int __fd, char *const  __argv[], char *const  __envp[]) throw()
# 561
 __attribute((__nonnull__(2))); 
# 566
extern int execv(const char * __path, char *const  __argv[]) throw()
# 567
 __attribute((__nonnull__(1, 2))); 
# 571
extern int execle(const char * __path, const char * __arg, ...) throw()
# 572
 __attribute((__nonnull__(1, 2))); 
# 576
extern int execl(const char * __path, const char * __arg, ...) throw()
# 577
 __attribute((__nonnull__(1, 2))); 
# 581
extern int execvp(const char * __file, char *const  __argv[]) throw()
# 582
 __attribute((__nonnull__(1, 2))); 
# 587
extern int execlp(const char * __file, const char * __arg, ...) throw()
# 588
 __attribute((__nonnull__(1, 2))); 
# 593
extern int execvpe(const char * __file, char *const  __argv[], char *const  __envp[]) throw()
# 595
 __attribute((__nonnull__(1, 2))); 
# 601
extern int nice(int __inc) throw(); 
# 606
extern void _exit(int __status) __attribute((__noreturn__)); 
# 25 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3
enum { 
# 26
_PC_LINK_MAX, 
# 28
_PC_MAX_CANON, 
# 30
_PC_MAX_INPUT, 
# 32
_PC_NAME_MAX, 
# 34
_PC_PATH_MAX, 
# 36
_PC_PIPE_BUF, 
# 38
_PC_CHOWN_RESTRICTED, 
# 40
_PC_NO_TRUNC, 
# 42
_PC_VDISABLE, 
# 44
_PC_SYNC_IO, 
# 46
_PC_ASYNC_IO, 
# 48
_PC_PRIO_IO, 
# 50
_PC_SOCK_MAXBUF, 
# 52
_PC_FILESIZEBITS, 
# 54
_PC_REC_INCR_XFER_SIZE, 
# 56
_PC_REC_MAX_XFER_SIZE, 
# 58
_PC_REC_MIN_XFER_SIZE, 
# 60
_PC_REC_XFER_ALIGN, 
# 62
_PC_ALLOC_SIZE_MIN, 
# 64
_PC_SYMLINK_MAX, 
# 66
_PC_2_SYMLINKS
# 68
}; 
# 72
enum { 
# 73
_SC_ARG_MAX, 
# 75
_SC_CHILD_MAX, 
# 77
_SC_CLK_TCK, 
# 79
_SC_NGROUPS_MAX, 
# 81
_SC_OPEN_MAX, 
# 83
_SC_STREAM_MAX, 
# 85
_SC_TZNAME_MAX, 
# 87
_SC_JOB_CONTROL, 
# 89
_SC_SAVED_IDS, 
# 91
_SC_REALTIME_SIGNALS, 
# 93
_SC_PRIORITY_SCHEDULING, 
# 95
_SC_TIMERS, 
# 97
_SC_ASYNCHRONOUS_IO, 
# 99
_SC_PRIORITIZED_IO, 
# 101
_SC_SYNCHRONIZED_IO, 
# 103
_SC_FSYNC, 
# 105
_SC_MAPPED_FILES, 
# 107
_SC_MEMLOCK, 
# 109
_SC_MEMLOCK_RANGE, 
# 111
_SC_MEMORY_PROTECTION, 
# 113
_SC_MESSAGE_PASSING, 
# 115
_SC_SEMAPHORES, 
# 117
_SC_SHARED_MEMORY_OBJECTS, 
# 119
_SC_AIO_LISTIO_MAX, 
# 121
_SC_AIO_MAX, 
# 123
_SC_AIO_PRIO_DELTA_MAX, 
# 125
_SC_DELAYTIMER_MAX, 
# 127
_SC_MQ_OPEN_MAX, 
# 129
_SC_MQ_PRIO_MAX, 
# 131
_SC_VERSION, 
# 133
_SC_PAGESIZE, 
# 136
_SC_RTSIG_MAX, 
# 138
_SC_SEM_NSEMS_MAX, 
# 140
_SC_SEM_VALUE_MAX, 
# 142
_SC_SIGQUEUE_MAX, 
# 144
_SC_TIMER_MAX, 
# 149
_SC_BC_BASE_MAX, 
# 151
_SC_BC_DIM_MAX, 
# 153
_SC_BC_SCALE_MAX, 
# 155
_SC_BC_STRING_MAX, 
# 157
_SC_COLL_WEIGHTS_MAX, 
# 159
_SC_EQUIV_CLASS_MAX, 
# 161
_SC_EXPR_NEST_MAX, 
# 163
_SC_LINE_MAX, 
# 165
_SC_RE_DUP_MAX, 
# 167
_SC_CHARCLASS_NAME_MAX, 
# 170
_SC_2_VERSION, 
# 172
_SC_2_C_BIND, 
# 174
_SC_2_C_DEV, 
# 176
_SC_2_FORT_DEV, 
# 178
_SC_2_FORT_RUN, 
# 180
_SC_2_SW_DEV, 
# 182
_SC_2_LOCALEDEF, 
# 185
_SC_PII, 
# 187
_SC_PII_XTI, 
# 189
_SC_PII_SOCKET, 
# 191
_SC_PII_INTERNET, 
# 193
_SC_PII_OSI, 
# 195
_SC_POLL, 
# 197
_SC_SELECT, 
# 199
_SC_UIO_MAXIOV, 
# 201
_SC_IOV_MAX = _SC_UIO_MAXIOV, 
# 203
_SC_PII_INTERNET_STREAM, 
# 205
_SC_PII_INTERNET_DGRAM, 
# 207
_SC_PII_OSI_COTS, 
# 209
_SC_PII_OSI_CLTS, 
# 211
_SC_PII_OSI_M, 
# 213
_SC_T_IOV_MAX, 
# 217
_SC_THREADS, 
# 219
_SC_THREAD_SAFE_FUNCTIONS, 
# 221
_SC_GETGR_R_SIZE_MAX, 
# 223
_SC_GETPW_R_SIZE_MAX, 
# 225
_SC_LOGIN_NAME_MAX, 
# 227
_SC_TTY_NAME_MAX, 
# 229
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 231
_SC_THREAD_KEYS_MAX, 
# 233
_SC_THREAD_STACK_MIN, 
# 235
_SC_THREAD_THREADS_MAX, 
# 237
_SC_THREAD_ATTR_STACKADDR, 
# 239
_SC_THREAD_ATTR_STACKSIZE, 
# 241
_SC_THREAD_PRIORITY_SCHEDULING, 
# 243
_SC_THREAD_PRIO_INHERIT, 
# 245
_SC_THREAD_PRIO_PROTECT, 
# 247
_SC_THREAD_PROCESS_SHARED, 
# 250
_SC_NPROCESSORS_CONF, 
# 252
_SC_NPROCESSORS_ONLN, 
# 254
_SC_PHYS_PAGES, 
# 256
_SC_AVPHYS_PAGES, 
# 258
_SC_ATEXIT_MAX, 
# 260
_SC_PASS_MAX, 
# 263
_SC_XOPEN_VERSION, 
# 265
_SC_XOPEN_XCU_VERSION, 
# 267
_SC_XOPEN_UNIX, 
# 269
_SC_XOPEN_CRYPT, 
# 271
_SC_XOPEN_ENH_I18N, 
# 273
_SC_XOPEN_SHM, 
# 276
_SC_2_CHAR_TERM, 
# 278
_SC_2_C_VERSION, 
# 280
_SC_2_UPE, 
# 283
_SC_XOPEN_XPG2, 
# 285
_SC_XOPEN_XPG3, 
# 287
_SC_XOPEN_XPG4, 
# 290
_SC_CHAR_BIT, 
# 292
_SC_CHAR_MAX, 
# 294
_SC_CHAR_MIN, 
# 296
_SC_INT_MAX, 
# 298
_SC_INT_MIN, 
# 300
_SC_LONG_BIT, 
# 302
_SC_WORD_BIT, 
# 304
_SC_MB_LEN_MAX, 
# 306
_SC_NZERO, 
# 308
_SC_SSIZE_MAX, 
# 310
_SC_SCHAR_MAX, 
# 312
_SC_SCHAR_MIN, 
# 314
_SC_SHRT_MAX, 
# 316
_SC_SHRT_MIN, 
# 318
_SC_UCHAR_MAX, 
# 320
_SC_UINT_MAX, 
# 322
_SC_ULONG_MAX, 
# 324
_SC_USHRT_MAX, 
# 327
_SC_NL_ARGMAX, 
# 329
_SC_NL_LANGMAX, 
# 331
_SC_NL_MSGMAX, 
# 333
_SC_NL_NMAX, 
# 335
_SC_NL_SETMAX, 
# 337
_SC_NL_TEXTMAX, 
# 340
_SC_XBS5_ILP32_OFF32, 
# 342
_SC_XBS5_ILP32_OFFBIG, 
# 344
_SC_XBS5_LP64_OFF64, 
# 346
_SC_XBS5_LPBIG_OFFBIG, 
# 349
_SC_XOPEN_LEGACY, 
# 351
_SC_XOPEN_REALTIME, 
# 353
_SC_XOPEN_REALTIME_THREADS, 
# 356
_SC_ADVISORY_INFO, 
# 358
_SC_BARRIERS, 
# 360
_SC_BASE, 
# 362
_SC_C_LANG_SUPPORT, 
# 364
_SC_C_LANG_SUPPORT_R, 
# 366
_SC_CLOCK_SELECTION, 
# 368
_SC_CPUTIME, 
# 370
_SC_THREAD_CPUTIME, 
# 372
_SC_DEVICE_IO, 
# 374
_SC_DEVICE_SPECIFIC, 
# 376
_SC_DEVICE_SPECIFIC_R, 
# 378
_SC_FD_MGMT, 
# 380
_SC_FIFO, 
# 382
_SC_PIPE, 
# 384
_SC_FILE_ATTRIBUTES, 
# 386
_SC_FILE_LOCKING, 
# 388
_SC_FILE_SYSTEM, 
# 390
_SC_MONOTONIC_CLOCK, 
# 392
_SC_MULTI_PROCESS, 
# 394
_SC_SINGLE_PROCESS, 
# 396
_SC_NETWORKING, 
# 398
_SC_READER_WRITER_LOCKS, 
# 400
_SC_SPIN_LOCKS, 
# 402
_SC_REGEXP, 
# 404
_SC_REGEX_VERSION, 
# 406
_SC_SHELL, 
# 408
_SC_SIGNALS, 
# 410
_SC_SPAWN, 
# 412
_SC_SPORADIC_SERVER, 
# 414
_SC_THREAD_SPORADIC_SERVER, 
# 416
_SC_SYSTEM_DATABASE, 
# 418
_SC_SYSTEM_DATABASE_R, 
# 420
_SC_TIMEOUTS, 
# 422
_SC_TYPED_MEMORY_OBJECTS, 
# 424
_SC_USER_GROUPS, 
# 426
_SC_USER_GROUPS_R, 
# 428
_SC_2_PBS, 
# 430
_SC_2_PBS_ACCOUNTING, 
# 432
_SC_2_PBS_LOCATE, 
# 434
_SC_2_PBS_MESSAGE, 
# 436
_SC_2_PBS_TRACK, 
# 438
_SC_SYMLOOP_MAX, 
# 440
_SC_STREAMS, 
# 442
_SC_2_PBS_CHECKPOINT, 
# 445
_SC_V6_ILP32_OFF32, 
# 447
_SC_V6_ILP32_OFFBIG, 
# 449
_SC_V6_LP64_OFF64, 
# 451
_SC_V6_LPBIG_OFFBIG, 
# 454
_SC_HOST_NAME_MAX, 
# 456
_SC_TRACE, 
# 458
_SC_TRACE_EVENT_FILTER, 
# 460
_SC_TRACE_INHERIT, 
# 462
_SC_TRACE_LOG, 
# 465
_SC_LEVEL1_ICACHE_SIZE, 
# 467
_SC_LEVEL1_ICACHE_ASSOC, 
# 469
_SC_LEVEL1_ICACHE_LINESIZE, 
# 471
_SC_LEVEL1_DCACHE_SIZE, 
# 473
_SC_LEVEL1_DCACHE_ASSOC, 
# 475
_SC_LEVEL1_DCACHE_LINESIZE, 
# 477
_SC_LEVEL2_CACHE_SIZE, 
# 479
_SC_LEVEL2_CACHE_ASSOC, 
# 481
_SC_LEVEL2_CACHE_LINESIZE, 
# 483
_SC_LEVEL3_CACHE_SIZE, 
# 485
_SC_LEVEL3_CACHE_ASSOC, 
# 487
_SC_LEVEL3_CACHE_LINESIZE, 
# 489
_SC_LEVEL4_CACHE_SIZE, 
# 491
_SC_LEVEL4_CACHE_ASSOC, 
# 493
_SC_LEVEL4_CACHE_LINESIZE, 
# 497
_SC_IPV6 = (_SC_LEVEL1_ICACHE_SIZE + 50), 
# 499
_SC_RAW_SOCKETS, 
# 502
_SC_V7_ILP32_OFF32, 
# 504
_SC_V7_ILP32_OFFBIG, 
# 506
_SC_V7_LP64_OFF64, 
# 508
_SC_V7_LPBIG_OFFBIG, 
# 511
_SC_SS_REPL_MAX, 
# 514
_SC_TRACE_EVENT_NAME_MAX, 
# 516
_SC_TRACE_NAME_MAX, 
# 518
_SC_TRACE_SYS_MAX, 
# 520
_SC_TRACE_USER_EVENT_MAX, 
# 523
_SC_XOPEN_STREAMS, 
# 526
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 528
_SC_THREAD_ROBUST_PRIO_PROTECT
# 530
}; 
# 534
enum { 
# 535
_CS_PATH, 
# 538
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 542
_CS_GNU_LIBC_VERSION, 
# 544
_CS_GNU_LIBPTHREAD_VERSION, 
# 547
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 551
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 555
_CS_LFS_CFLAGS = 1000, 
# 557
_CS_LFS_LDFLAGS, 
# 559
_CS_LFS_LIBS, 
# 561
_CS_LFS_LINTFLAGS, 
# 563
_CS_LFS64_CFLAGS, 
# 565
_CS_LFS64_LDFLAGS, 
# 567
_CS_LFS64_LIBS, 
# 569
_CS_LFS64_LINTFLAGS, 
# 572
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 574
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 576
_CS_XBS5_ILP32_OFF32_LIBS, 
# 578
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 580
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 582
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 584
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 586
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 588
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 590
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 592
_CS_XBS5_LP64_OFF64_LIBS, 
# 594
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 596
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 598
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 600
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 602
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 605
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 607
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 609
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 611
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 613
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 615
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 617
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 619
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 621
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 623
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 625
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 627
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 629
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 631
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 633
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 635
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 638
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 640
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 642
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 644
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 646
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 648
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 650
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 652
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 654
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 656
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 658
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 660
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 662
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 664
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 666
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 668
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 671
_CS_V6_ENV, 
# 673
_CS_V7_ENV
# 675
}; 
# 615 "/usr/include/unistd.h" 3
extern long pathconf(const char * __path, int __name) throw()
# 616
 __attribute((__nonnull__(1))); 
# 619
extern long fpathconf(int __fd, int __name) throw(); 
# 622
extern long sysconf(int __name) throw(); 
# 626
extern ::size_t confstr(int __name, char * __buf, ::size_t __len) throw(); 
# 631
extern __pid_t getpid() throw(); 
# 634
extern __pid_t getppid() throw(); 
# 637
extern __pid_t getpgrp() throw(); 
# 640
extern __pid_t __getpgid(__pid_t __pid) throw(); 
# 642
extern __pid_t getpgid(__pid_t __pid) throw(); 
# 649
extern int setpgid(__pid_t __pid, __pid_t __pgid) throw(); 
# 663 "/usr/include/unistd.h" 3
extern int setpgrp() throw(); 
# 670
extern __pid_t setsid() throw(); 
# 674
extern __pid_t getsid(__pid_t __pid) throw(); 
# 678
extern __uid_t getuid() throw(); 
# 681
extern __uid_t geteuid() throw(); 
# 684
extern __gid_t getgid() throw(); 
# 687
extern __gid_t getegid() throw(); 
# 692
extern int getgroups(int __size, __gid_t  __list[]) throw(); 
# 696
extern int group_member(__gid_t __gid) throw(); 
# 703
extern int setuid(__uid_t __uid) throw(); 
# 708
extern int setreuid(__uid_t __ruid, __uid_t __euid) throw(); 
# 713
extern int seteuid(__uid_t __uid) throw(); 
# 720
extern int setgid(__gid_t __gid) throw(); 
# 725
extern int setregid(__gid_t __rgid, __gid_t __egid) throw(); 
# 730
extern int setegid(__gid_t __gid) throw(); 
# 736
extern int getresuid(__uid_t * __ruid, __uid_t * __euid, __uid_t * __suid) throw(); 
# 741
extern int getresgid(__gid_t * __rgid, __gid_t * __egid, __gid_t * __sgid) throw(); 
# 746
extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw(); 
# 751
extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw(); 
# 759
extern __pid_t fork() throw(); 
# 767
extern __pid_t vfork() throw(); 
# 773
extern char *ttyname(int __fd) throw(); 
# 777
extern int ttyname_r(int __fd, char * __buf, ::size_t __buflen) throw()
# 778
 __attribute((__nonnull__(2))); 
# 782
extern int isatty(int __fd) throw(); 
# 787
extern int ttyslot() throw(); 
# 792
extern int link(const char * __from, const char * __to) throw()
# 793
 __attribute((__nonnull__(1, 2))); 
# 798
extern int linkat(int __fromfd, const char * __from, int __tofd, const char * __to, int __flags) throw()
# 800
 __attribute((__nonnull__(2, 4))); 
# 805
extern int symlink(const char * __from, const char * __to) throw()
# 806
 __attribute((__nonnull__(1, 2))); 
# 811
extern ssize_t readlink(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw()
# 813
 __attribute((__nonnull__(1, 2))); 
# 818
extern int symlinkat(const char * __from, int __tofd, const char * __to) throw()
# 819
 __attribute((__nonnull__(1, 3))); 
# 822
extern ssize_t readlinkat(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw()
# 824
 __attribute((__nonnull__(2, 3))); 
# 828
extern int unlink(const char * __name) throw() __attribute((__nonnull__(1))); 
# 832
extern int unlinkat(int __fd, const char * __name, int __flag) throw()
# 833
 __attribute((__nonnull__(2))); 
# 837
extern int rmdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 841
extern __pid_t tcgetpgrp(int __fd) throw(); 
# 844
extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw(); 
# 851
extern char *getlogin(); 
# 859
extern int getlogin_r(char * __name, ::size_t __name_len) __attribute((__nonnull__(1))); 
# 864
extern int setlogin(const char * __name) throw() __attribute((__nonnull__(1))); 
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern "C" {
# 36
extern char *optarg; 
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern int optind; 
# 55
extern int opterr; 
# 59
extern int optopt; 
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern int getopt(int ___argc, char *const * ___argv, const char * __shortopts) throw()
# 92
 __attribute((__nonnull__(2, 3))); 
# 94
}
# 29 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3
extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3
}
# 880 "/usr/include/unistd.h" 3
extern int gethostname(char * __name, ::size_t __len) throw() __attribute((__nonnull__(1))); 
# 887
extern int sethostname(const char * __name, ::size_t __len) throw()
# 888
 __attribute((__nonnull__(1))); 
# 892
extern int sethostid(long __id) throw(); 
# 898
extern int getdomainname(char * __name, ::size_t __len) throw()
# 899
 __attribute((__nonnull__(1))); 
# 900
extern int setdomainname(const char * __name, ::size_t __len) throw()
# 901
 __attribute((__nonnull__(1))); 
# 907
extern int vhangup() throw(); 
# 910
extern int revoke(const char * __file) throw() __attribute((__nonnull__(1))); 
# 918
extern int profil(unsigned short * __sample_buffer, ::size_t __size, ::size_t __offset, unsigned __scale) throw()
# 920
 __attribute((__nonnull__(1))); 
# 926
extern int acct(const char * __name) throw(); 
# 930
extern char *getusershell() throw(); 
# 931
extern void endusershell() throw(); 
# 932
extern void setusershell() throw(); 
# 938
extern int daemon(int __nochdir, int __noclose) throw(); 
# 945
extern int chroot(const char * __path) throw() __attribute((__nonnull__(1))); 
# 949
extern char *getpass(const char * __prompt) __attribute((__nonnull__(1))); 
# 957
extern int fsync(int __fd); 
# 963
extern int syncfs(int __fd) throw(); 
# 970
extern long gethostid(); 
# 973
extern void sync() throw(); 
# 979
extern int getpagesize() throw() __attribute((const)); 
# 984
extern int getdtablesize() throw(); 
# 994 "/usr/include/unistd.h" 3
extern int truncate(const char * __file, __off_t __length) throw()
# 995
 __attribute((__nonnull__(1))); 
# 1006 "/usr/include/unistd.h" 3
extern int truncate64(const char * __file, __off64_t __length) throw()
# 1007
 __attribute((__nonnull__(1))); 
# 1017 "/usr/include/unistd.h" 3
extern int ftruncate(int __fd, __off_t __length) throw(); 
# 1027 "/usr/include/unistd.h" 3
extern int ftruncate64(int __fd, __off64_t __length) throw(); 
# 1038 "/usr/include/unistd.h" 3
extern int brk(void * __addr) throw(); 
# 1044
extern void *sbrk(intptr_t __delta) throw(); 
# 1059 "/usr/include/unistd.h" 3
extern long syscall(long __sysno, ...) throw(); 
# 1082 "/usr/include/unistd.h" 3
extern int lockf(int __fd, int __cmd, __off_t __len); 
# 1092 "/usr/include/unistd.h" 3
extern int lockf64(int __fd, int __cmd, __off64_t __len); 
# 1110 "/usr/include/unistd.h" 3
ssize_t copy_file_range(int __infd, __off64_t * __pinoff, int __outfd, __off64_t * __poutoff, ::size_t __length, unsigned __flags); 
# 1118
extern int fdatasync(int __fildes); 
# 1126
extern char *crypt(const char * __key, const char * __salt) throw()
# 1127
 __attribute((__nonnull__(1, 2))); 
# 1131
extern void encrypt(char * __glibc_block, int __edflag) throw()
# 1132
 __attribute((__nonnull__(1))); 
# 1139
extern void swab(const void *__restrict__ __from, void *__restrict__ __to, ssize_t __n) throw()
# 1140
 __attribute((__nonnull__(1, 2))); 
# 1167 "/usr/include/unistd.h" 3
int getentropy(void * __buffer, ::size_t __length); 
# 1175
}
# 20 "/usr/include/asm-generic/int-ll64.h" 3
typedef signed char __s8; 
# 21
typedef unsigned char __u8; 
# 23
typedef signed short __s16; 
# 24
typedef unsigned short __u16; 
# 26
typedef signed int __s32; 
# 27
typedef unsigned __u32; 
# 30
__extension__ typedef signed long long __s64; 
# 31
__extension__ typedef unsigned long long __u64; 
# 27 "/usr/include/linux/posix_types.h" 3
typedef 
# 25
struct { 
# 26
unsigned long fds_bits[(1024) / ((8) * sizeof(long))]; 
# 27
} __kernel_fd_set; 
# 30
typedef void (*__kernel_sighandler_t)(int); 
# 33
typedef int __kernel_key_t; 
# 34
typedef int __kernel_mqd_t; 
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3
typedef unsigned short __kernel_old_uid_t; 
# 12
typedef unsigned short __kernel_old_gid_t; 
# 15
typedef unsigned long __kernel_old_dev_t; 
# 15 "/usr/include/asm-generic/posix_types.h" 3
typedef long __kernel_long_t; 
# 16
typedef unsigned long __kernel_ulong_t; 
# 20
typedef __kernel_ulong_t __kernel_ino_t; 
# 24
typedef unsigned __kernel_mode_t; 
# 28
typedef int __kernel_pid_t; 
# 32
typedef int __kernel_ipc_pid_t; 
# 36
typedef unsigned __kernel_uid_t; 
# 37
typedef unsigned __kernel_gid_t; 
# 41
typedef __kernel_long_t __kernel_suseconds_t; 
# 45
typedef int __kernel_daddr_t; 
# 49
typedef unsigned __kernel_uid32_t; 
# 50
typedef unsigned __kernel_gid32_t; 
# 72 "/usr/include/asm-generic/posix_types.h" 3
typedef __kernel_ulong_t __kernel_size_t; 
# 73
typedef __kernel_long_t __kernel_ssize_t; 
# 74
typedef __kernel_long_t __kernel_ptrdiff_t; 
# 81
typedef 
# 79
struct { 
# 80
int val[2]; 
# 81
} __kernel_fsid_t; 
# 87
typedef __kernel_long_t __kernel_off_t; 
# 88
typedef long long __kernel_loff_t; 
# 89
typedef __kernel_long_t __kernel_time_t; 
# 90
typedef __kernel_long_t __kernel_clock_t; 
# 91
typedef int __kernel_timer_t; 
# 92
typedef int __kernel_clockid_t; 
# 93
typedef char *__kernel_caddr_t; 
# 94
typedef unsigned short __kernel_uid16_t; 
# 95
typedef unsigned short __kernel_gid16_t; 
# 24 "/usr/include/linux/types.h" 3
typedef __u16 __le16; 
# 25
typedef __u16 __be16; 
# 26
typedef __u32 __le32; 
# 27
typedef __u32 __be32; 
# 28
typedef __u64 __le64; 
# 29
typedef __u64 __be64; 
# 31
typedef __u16 __sum16; 
# 32
typedef __u32 __wsum; 
# 58 "/usr/include/linux/futex.h" 3
struct robust_list { 
# 59
robust_list *next; 
# 60
}; 
# 70 "/usr/include/linux/futex.h" 3
struct robust_list_head { 
# 74
robust_list list; 
# 82
long futex_offset; 
# 94 "/usr/include/linux/futex.h" 3
robust_list *list_op_pending; 
# 95
}; 
# 66 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
typedef timespec __libcpp_timespec_t; 
# 69 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support"
namespace cuda { namespace std { inline namespace __4 { 
# 76 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void __libcpp_thread_yield_processor() 
# 77
{ 
# 87 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
{ __asm__ volatile("pause" : :); } 
# 91
} 
# 94 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void __libcpp_thread_yield(); 
# 97 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void __libcpp_thread_sleep_for(chrono::nanoseconds __ns); 
# 99
template< class _Fn> inline bool __libcpp_thread_poll_with_backoff(_Fn && __f, chrono::nanoseconds __max = chrono::nanoseconds::zero()); 
# 105 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
typedef pthread_mutex_t __libcpp_mutex_t; 
# 108
typedef pthread_mutex_t __libcpp_recursive_mutex_t; 
# 111
typedef pthread_cond_t __libcpp_condvar_t; 
# 119
typedef sem_t __libcpp_semaphore_t; 
# 124
typedef pthread_once_t __libcpp_exec_once_flag; 
# 128
typedef pthread_t __libcpp_thread_id; 
# 133
typedef pthread_t __libcpp_thread_t; 
# 136
typedef pthread_key_t __libcpp_tls_key; 
# 180 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_timespec_t __libcpp_to_timespec(const chrono::nanoseconds & __ns); 
# 184 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_init(__libcpp_recursive_mutex_t * __m); 
# 187 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_lock(__libcpp_recursive_mutex_t * __m); 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_recursive_mutex_trylock(__libcpp_recursive_mutex_t * __m); 
# 193 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_unlock(__libcpp_recursive_mutex_t * __m); 
# 196 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_destroy(__libcpp_recursive_mutex_t * __m); 
# 199 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_lock(__libcpp_mutex_t * __m); 
# 202 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_mutex_trylock(__libcpp_mutex_t * __m); 
# 205 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_unlock(__libcpp_mutex_t * __m); 
# 208 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_destroy(__libcpp_mutex_t * __m); 
# 212 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_signal(__libcpp_condvar_t * __cv); 
# 215 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_broadcast(__libcpp_condvar_t * __cv); 
# 218 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_wait(__libcpp_condvar_t * __cv, __libcpp_mutex_t * __m); 
# 221 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_timedwait(__libcpp_condvar_t * __cv, __libcpp_mutex_t * __m, __libcpp_timespec_t * __ts); 
# 225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_destroy(__libcpp_condvar_t * __cv); 
# 229 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_init(__libcpp_semaphore_t * __sem, int __init); 
# 232 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_destroy(__libcpp_semaphore_t * __sem); 
# 235 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_post(__libcpp_semaphore_t * __sem); 
# 238 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_wait(__libcpp_semaphore_t * __sem); 
# 241 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_wait_timed(__libcpp_semaphore_t * __sem, const chrono::nanoseconds & __ns); 
# 245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_execute_once(__libcpp_exec_once_flag * flag, void (* init_routine)(void)); 
# 250 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_id_equal(__libcpp_thread_id t1, __libcpp_thread_id t2); 
# 253 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_id_less(__libcpp_thread_id t1, __libcpp_thread_id t2); 
# 257 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_isnull(const __libcpp_thread_t * __t); 
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_create(__libcpp_thread_t * __t, void *(* __func)(void *), void * __arg); 
# 264 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_thread_id __libcpp_thread_get_current_id(); 
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_thread_id __libcpp_thread_get_id(const __libcpp_thread_t * __t); 
# 270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_join(__libcpp_thread_t * __t); 
# 273 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_detach(__libcpp_thread_t * __t); 
# 277 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_tls_create(__libcpp_tls_key * __key, void (* __at_exit)(void *)); 
# 281 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void *__libcpp_tls_get(__libcpp_tls_key __key); 
# 284 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_tls_set(__libcpp_tls_key __key, void * __p); 
# 310 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_timespec_t __libcpp_to_timespec(const chrono::nanoseconds &__ns) 
# 311
{ 
# 312
using namespace chrono;
# 313
chrono::seconds __s = duration_cast< chrono::duration< long long> > (__ns); 
# 314
__libcpp_timespec_t __ts; 
# 315
typedef __decltype(__ts.tv_sec) ts_sec; 
# 316
constexpr ts_sec __ts_sec_max = numeric_limits< long> ::max(); 
# 318
if (__s.count() < __ts_sec_max) 
# 319
{ 
# 320
(__ts.tv_sec) = (static_cast< ts_sec>(__s.count())); 
# 321
(__ts.tv_nsec) = (static_cast< __decltype(__ts.tv_nsec)>((__ns - __s).count())); 
# 322
} else 
# 324
{ 
# 325
(__ts.tv_sec) = __ts_sec_max; 
# 326
(__ts.tv_nsec) = (999999999); 
# 327
}  
# 328
return __ts; 
# 329
} 
# 332 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_init(__libcpp_recursive_mutex_t *__m) 
# 333
{ 
# 334
pthread_mutexattr_t attr; 
# 335
int __ec = pthread_mutexattr_init(&attr); 
# 336
if (__ec) { 
# 337
return __ec; }  
# 338
__ec = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE); 
# 339
if (__ec) { 
# 340
pthread_mutexattr_destroy(&attr); 
# 341
return __ec; 
# 342
}  
# 343
__ec = pthread_mutex_init(__m, &attr); 
# 344
if (__ec) { 
# 345
pthread_mutexattr_destroy(&attr); 
# 346
return __ec; 
# 347
}  
# 348
__ec = pthread_mutexattr_destroy(&attr); 
# 349
if (__ec) { 
# 350
pthread_mutex_destroy(__m); 
# 351
return __ec; 
# 352
}  
# 353
return 0; 
# 354
} 
# 357 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_lock(__libcpp_recursive_mutex_t *__m) 
# 358
{ 
# 359
return pthread_mutex_lock(__m); 
# 360
} 
# 363 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_recursive_mutex_trylock(__libcpp_recursive_mutex_t *__m) 
# 364
{ 
# 365
return pthread_mutex_trylock(__m) == 0; 
# 366
} 
# 369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_unlock(__libcpp_mutex_t *__m) 
# 370
{ 
# 371
return pthread_mutex_unlock(__m); 
# 372
} 
# 375 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_recursive_mutex_destroy(__libcpp_recursive_mutex_t *__m) 
# 376
{ 
# 377
return pthread_mutex_destroy(__m); 
# 378
} 
# 381 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_lock(__libcpp_mutex_t *__m) 
# 382
{ 
# 383
return pthread_mutex_lock(__m); 
# 384
} 
# 387 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_mutex_trylock(__libcpp_mutex_t *__m) 
# 388
{ 
# 389
return pthread_mutex_trylock(__m) == 0; 
# 390
} 
# 393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_unlock(__libcpp_mutex_t *__m) 
# 394
{ 
# 395
return pthread_mutex_unlock(__m); 
# 396
} 
# 399 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_mutex_destroy(__libcpp_mutex_t *__m) 
# 400
{ 
# 401
return pthread_mutex_destroy(__m); 
# 402
} 
# 406 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_signal(__libcpp_condvar_t *__cv) 
# 407
{ 
# 408
return pthread_cond_signal(__cv); 
# 409
} 
# 412 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_broadcast(__libcpp_condvar_t *__cv) 
# 413
{ 
# 414
return pthread_cond_broadcast(__cv); 
# 415
} 
# 418 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_wait(__libcpp_condvar_t *__cv, __libcpp_mutex_t *__m) 
# 419
{ 
# 420
return pthread_cond_wait(__cv, __m); 
# 421
} 
# 424 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_timedwait(__libcpp_condvar_t *__cv, __libcpp_mutex_t *__m, __libcpp_timespec_t *
# 425
__ts) 
# 426
{ 
# 427
return pthread_cond_timedwait(__cv, __m, __ts); 
# 428
} 
# 431 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_condvar_destroy(__libcpp_condvar_t *__cv) 
# 432
{ 
# 433
return pthread_cond_destroy(__cv); 
# 434
} 
# 469 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_init(__libcpp_semaphore_t *__sem, int __init) 
# 470
{ 
# 471
return sem_init(__sem, 0, __init) == 0; 
# 472
} 
# 475 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_destroy(__libcpp_semaphore_t *__sem) 
# 476
{ 
# 477
return sem_destroy(__sem) == 0; 
# 478
} 
# 481 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_post(__libcpp_semaphore_t *__sem) 
# 482
{ 
# 483
return sem_post(__sem) == 0; 
# 484
} 
# 487 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_wait(__libcpp_semaphore_t *__sem) 
# 488
{ 
# 489
return sem_wait(__sem) == 0; 
# 490
} 
# 493 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_semaphore_wait_timed(__libcpp_semaphore_t *__sem, const chrono::nanoseconds &__ns) 
# 494
{ 
# 495
__libcpp_timespec_t __ts = __libcpp_to_timespec(__ns); 
# 496
return sem_timedwait(__sem, &__ts) == 0; 
# 497
} 
# 503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_execute_once(__libcpp_exec_once_flag *flag, void (*init_routine)(void)) 
# 504
{ 
# 505
return pthread_once(flag, init_routine); 
# 506
} 
# 511 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_id_equal(__libcpp_thread_id t1, __libcpp_thread_id t2) 
# 512
{ 
# 513
return pthread_equal(t1, t2) != 0; 
# 514
} 
# 518 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_id_less(__libcpp_thread_id t1, __libcpp_thread_id t2) 
# 519
{ 
# 520
return t1 < t2; 
# 521
} 
# 525 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline bool __libcpp_thread_isnull(const __libcpp_thread_t *__t) 
# 526
{ 
# 527
return (*__t) == (0); 
# 528
} 
# 531 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_create(__libcpp_thread_t *__t, void *(*__func)(void *), void *
# 532
__arg) 
# 533
{ 
# 534
return pthread_create(__t, 0, __func, __arg); 
# 535
} 
# 538 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_thread_id __libcpp_thread_get_current_id() 
# 539
{ 
# 540
return pthread_self(); 
# 541
} 
# 544 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline __libcpp_thread_id __libcpp_thread_get_id(const __libcpp_thread_t *__t) 
# 545
{ 
# 546
return *__t; 
# 547
} 
# 550 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_join(__libcpp_thread_t *__t) 
# 551
{ 
# 552
return pthread_join(*__t, 0); 
# 553
} 
# 556 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_thread_detach(__libcpp_thread_t *__t) 
# 557
{ 
# 558
return pthread_detach(*__t); 
# 559
} 
# 563 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_tls_create(__libcpp_tls_key *__key, void (*__at_exit)(void *)) 
# 564
{ 
# 565
return pthread_key_create(__key, __at_exit); 
# 566
} 
# 569 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void *__libcpp_tls_get(__libcpp_tls_key __key) 
# 570
{ 
# 571
return pthread_getspecific(__key); 
# 572
} 
# 575 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline int __libcpp_tls_set(__libcpp_tls_key __key, void *__p) 
# 576
{ 
# 577
return pthread_setspecific(__key, __p); 
# 578
} 
# 581 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void __libcpp_thread_yield() 
# 582
{ 
# 583
sched_yield(); 
# 584
} 
# 587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
inline void __libcpp_thread_sleep_for(chrono::nanoseconds __ns) 
# 588
{ 
# 589
__libcpp_timespec_t __ts = __libcpp_to_timespec(__ns); 
# 590
while ((nanosleep(&__ts, &__ts) == (-1)) && ((*__errno_location()) == 4)) { ; }  
# 591
} 
# 636 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
template< class _Fn> inline bool 
# 638 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support" 3
__libcpp_thread_poll_with_backoff(_Fn &&__f, chrono::nanoseconds __max) 
# 639
{ 
# 640
const chrono::system_clock::time_point __start = chrono::high_resolution_clock::now(); 
# 641
for (int __count = 0; ;) { 
# 642
if (__f()) { 
# 643
return true; }  
# 644
if (__count < 16) { 
# 645
if (__count > (16 >> 1)) { 
# 646
__libcpp_thread_yield_processor(); }  
# 647
__count += 1; 
# 648
continue; 
# 649
}  
# 650
const chrono::system_clock::duration __elapsed = ((chrono::high_resolution_clock::now()) - __start); 
# 651
if ((__max != (chrono::nanoseconds::zero())) && (__max < __elapsed)) { 
# 653
return false; }  
# 654
const chrono::nanoseconds __step = (__elapsed / (4)); 
# 655
if ((__step >= ((chrono::duration< long long, ratio< 1L, 1000L> > )(1)))) { 
# 656
__libcpp_thread_sleep_for(((chrono::duration< long long, ratio< 1L, 1000L> > )(1))); } else { 
# 657
if ((__step >= ((chrono::duration< long long, ratio< 1L, 1000000L> > )(10)))) { 
# 658
__libcpp_thread_sleep_for(__step); } else { 
# 660
__libcpp_thread_yield(); }  }  
# 661
}   
# 662
} 
# 781 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/__threading_support"
}}}
# 599 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
namespace cuda { namespace std { inline namespace __4 { 
# 604 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
enum __legacy_memory_order { 
# 605
__mo_relaxed, 
# 606
__mo_consume, 
# 607
__mo_acquire, 
# 608
__mo_release, 
# 609
__mo_acq_rel, 
# 610
__mo_seq_cst
# 611
}; 
# 613
typedef underlying_type< __legacy_memory_order> ::type __memory_order_underlying_t; 
# 642 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
typedef 
# 635
enum memory_order { 
# 636
memory_order_relaxed, 
# 637
memory_order_consume, 
# 638
memory_order_acquire, 
# 639
memory_order_release, 
# 640
memory_order_acq_rel, 
# 641
memory_order_seq_cst
# 642
} memory_order; 
# 646
template< class _Tp> bool 
# 647 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_nonatomic_compare_equal(const _Tp &__lhs, const _Tp &__rhs) { 
# 649
return __lhs == __rhs; 
# 653
} 
# 655
static_assert(integral_constant< bool, true> ::value, "unexpected underlying type for std::memory_order");
# 664
template< class _Tp, class _Tv> typename enable_if< is_assignable< _Tp &, _Tv> ::value> ::type 
# 666 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_assign_volatile(_Tp &__a_value, const _Tv &__val) { 
# 667
__a_value = __val; 
# 668
} 
# 669
template< class _Tp, class _Tv> typename enable_if< is_assignable< _Tp &, _Tv> ::value> ::type 
# 671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_assign_volatile(volatile _Tp &__a_value, const volatile _Tv &__val) { 
# 672
volatile char *__to = (reinterpret_cast< volatile char *>(&__a_value)); 
# 673
volatile char *__end = __to + sizeof(_Tp); 
# 674
const volatile char *__from = (reinterpret_cast< const volatile char *>(&__val)); 
# 675
while (__to != __end) { 
# 676
(*(__to++)) = (*(__from++)); }  
# 677
} 
# 682
namespace __detail { 
# 11 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_scopes.h" 3
enum thread_scope { 
# 12
thread_scope_system, 
# 13
thread_scope_device, 
# 14
thread_scope_block, 
# 15
thread_scope_thread = 10
# 16
}; 
# 21
struct __thread_scope_thread_tag { }; 
# 22
struct __thread_scope_block_tag { }; 
# 23
struct __thread_scope_device_tag { }; 
# 24
struct __thread_scope_system_tag { }; 
# 26
template< int _Scope> struct __scope_enum_to_tag { }; 
# 31
template<> struct __scope_enum_to_tag< 10>  { 
# 32
using type = __thread_scope_block_tag; }; 
# 33
template<> struct __scope_enum_to_tag< 2>  { 
# 34
using type = __thread_scope_block_tag; }; 
# 35
template<> struct __scope_enum_to_tag< 1>  { 
# 36
using type = __thread_scope_device_tag; }; 
# 37
template<> struct __scope_enum_to_tag< 0>  { 
# 38
using type = __thread_scope_system_tag; }; 
# 40
template< int _Scope> constexpr auto 
# 41 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_scopes.h" 3
__scope_tag()->typename __scope_enum_to_tag< _Scope> ::type 
# 42
{ 
# 43
return typename __scope_enum_to_tag< _Scope> ::type(); 
# 44
} 
# 36 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
inline int __stronger_order_cuda(int __a, int __b) { 
# 37
const int __max = (__a > __b) ? __a : __b; 
# 38
if (__max != 3) { 
# 39
return __max; }  
# 40
static const int __xform[] = {3, 4, 4, 3}; 
# 45
return __xform[(__a < __b) ? __a : __b]; 
# 46
} 
# 54
namespace __host { 
# 14 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
template< class _Tp, int _Sco> 
# 15
struct __cxx_atomic_base_impl { 
# 16
using __underlying_t = _Tp; 
# 17
using __temporary_t = __cxx_atomic_base_impl; 
# 18
using __wrap_t = __cxx_atomic_base_impl; 
# 20
static constexpr int __sco = _Sco; 
# 23
static_assert((is_trivially_copyable< _Tp> ::value), "std::atomic<Tp> requires that \'Tp\' be a trivially copyable type");
# 28
constexpr __cxx_atomic_base_impl() noexcept = default;
# 31 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
constexpr explicit __cxx_atomic_base_impl(_Tp value) noexcept : __a_value(value) { } 
# 33
__attribute((__aligned__(sizeof(_Tp)))) _Tp __a_value; 
# 34
}; 
# 36
template< class _Tp, int _Sco> constexpr _Tp *
# 38 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(__cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 39
return &(__a->__a_value); 
# 40
} 
# 41
template< class _Tp, int _Sco> constexpr volatile _Tp *
# 43 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(volatile __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 44
return &(__a->__a_value); 
# 45
} 
# 46
template< class _Tp, int _Sco> constexpr const _Tp *
# 48 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(const __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 49
return &(__a->__a_value); 
# 50
} 
# 51
template< class _Tp, int _Sco> constexpr const volatile _Tp *
# 53 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(const volatile __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 54
return &(__a->__a_value); 
# 55
} 
# 56
template< class _Tp, int _Sco> constexpr __cxx_atomic_base_impl< _Tp, _Sco>  *
# 58 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(__cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 59
return __a; 
# 60
} 
# 61
template< class _Tp, int _Sco> constexpr volatile __cxx_atomic_base_impl< _Tp, _Sco>  *
# 63 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(volatile __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 64
return __a; 
# 65
} 
# 66
template< class _Tp, int _Sco> constexpr const __cxx_atomic_base_impl< _Tp, _Sco>  *
# 68 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(const __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 69
return __a; 
# 70
} 
# 71
template< class _Tp, int _Sco> constexpr const volatile __cxx_atomic_base_impl< _Tp, _Sco>  *
# 73 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(const volatile __cxx_atomic_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 74
return __a; 
# 75
} 
# 77
template< class _Tp, int _Sco> 
# 78
struct __cxx_atomic_ref_base_impl { 
# 79
using __underlying_t = _Tp; 
# 80
using __temporary_t = _Tp; 
# 81
using __wrap_t = _Tp; 
# 83
static constexpr int __sco = _Sco; 
# 86
static_assert((is_trivially_copyable< _Tp> ::value), "std::atomic_ref<Tp> requires that \'Tp\' be a trivially copyable type");
# 91
constexpr __cxx_atomic_ref_base_impl() noexcept = delete;
# 94 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
constexpr explicit __cxx_atomic_ref_base_impl(_Tp &value) noexcept : __a_value((&value)) { } 
# 96
_Tp *__a_value; 
# 97
}; 
# 99
template< class _Tp, int _Sco> constexpr _Tp *
# 101 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(__cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 102
return __a->__a_value; 
# 103
} 
# 104
template< class _Tp, int _Sco> constexpr volatile _Tp *
# 106 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(volatile __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 107
return __a->__a_value; 
# 108
} 
# 109
template< class _Tp, int _Sco> constexpr const _Tp *
# 111 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(const __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 112
return __a->__a_value; 
# 113
} 
# 114
template< class _Tp, int _Sco> constexpr const volatile _Tp *
# 116 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(const volatile __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 117
return __a->__a_value; 
# 118
} 
# 119
template< class _Tp, int _Sco> constexpr _Tp *
# 121 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(__cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 122
return __cxx_get_underlying_atomic(__a); 
# 123
} 
# 124
template< class _Tp, int _Sco> constexpr volatile _Tp *
# 126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(volatile __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 127
return __cxx_get_underlying_atomic(__a); 
# 128
} 
# 129
template< class _Tp, int _Sco> constexpr const _Tp *
# 131 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(const __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 132
return __cxx_get_underlying_atomic(__a); 
# 133
} 
# 134
template< class _Tp, int _Sco> constexpr const volatile _Tp *
# 136 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_unwrap(const volatile __cxx_atomic_ref_base_impl< _Tp, _Sco>  *__a) noexcept { 
# 137
return __cxx_get_underlying_atomic(__a); 
# 138
} 
# 140
template< class _Tp> constexpr _Tp *
# 142 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_get_underlying_atomic(_Tp *__a) noexcept { 
# 143
return __a; 
# 144
} 
# 146
template< class _Tp, class _Up> constexpr auto 
# 148 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_wrap_to_base(_Tp *, _Up __val) noexcept->typename _Tp::__wrap_t { 
# 149
return (typename _Tp::__wrap_t)__val; 
# 150
} 
# 151
template< class _Tp> constexpr auto 
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/cxx_atomic.h" 3
__cxx_atomic_base_temporary(_Tp *) noexcept->typename _Tp::__temporary_t { 
# 154
return typename _Tp::__temporary_t(); 
# 155
} 
# 157
template< class _Tp> using __cxx_atomic_underlying_t = typename _Tp::__underlying_t; 
# 21 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_base.h" 3
constexpr int __cxx_atomic_order_to_int(memory_order __order) { 
# 23
return (__order == (memory_order_relaxed)) ? 0 : ((__order == (memory_order_acquire)) ? 2 : ((__order == (memory_order_release)) ? 3 : ((__order == (memory_order_seq_cst)) ? 5 : ((__order == (memory_order_acq_rel)) ? 4 : 1)))); 
# 29
} 
# 31 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_base.h" 3
constexpr int __cxx_atomic_failure_order_to_int(memory_order __order) { 
# 33
return (__order == (memory_order_relaxed)) ? 0 : ((__order == (memory_order_acquire)) ? 2 : ((__order == (memory_order_release)) ? 0 : ((__order == (memory_order_seq_cst)) ? 5 : ((__order == (memory_order_acq_rel)) ? 2 : 1)))); 
# 39
} 
# 41
template< class _Tp, class _Up> inline void 
# 42
__cxx_atomic_init(volatile _Tp *__a, _Up __val) { 
# 43
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 44
__cxx_atomic_assign_volatile(*__a_tmp, __val); 
# 45
} 
# 47
template< class _Tp, class _Up> inline void 
# 48
__cxx_atomic_init(_Tp *__a, _Up __val) { 
# 49
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 50
(*__a_tmp) = __val; 
# 51
} 
# 54
inline void __cxx_atomic_thread_fence(memory_order __order) { 
# 55
__atomic_thread_fence(__cxx_atomic_order_to_int(__order)); 
# 56
} 
# 59
inline void __cxx_atomic_signal_fence(memory_order __order) { 
# 60
__atomic_signal_fence(__cxx_atomic_order_to_int(__order)); 
# 61
} 
# 63
template< class _Tp, class _Up> inline void 
# 64
__cxx_atomic_store(_Tp *__a, _Up __val, memory_order 
# 65
__order) { 
# 66
auto __v_temp = __cxx_atomic_wrap_to_base(__a, __val); 
# 67
__atomic_store(__cxx_atomic_unwrap(__a), &__v_temp, __cxx_atomic_order_to_int(__order)); 
# 68
} 
# 70
template< class _Tp> inline auto 
# 71
__cxx_atomic_load(const _Tp *__a, memory_order 
# 72
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 73
auto __ret = __cxx_atomic_base_temporary(__a); 
# 74
__atomic_load(__cxx_atomic_unwrap(__a), &__ret, __cxx_atomic_order_to_int(__order)); 
# 75
return *__cxx_get_underlying_atomic(&__ret); 
# 76
} 
# 78
template< class _Tp, class _Up> inline auto 
# 79
__cxx_atomic_exchange(_Tp *__a, _Up __val, memory_order 
# 80
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 81
auto __v_temp = __cxx_atomic_wrap_to_base(__a, __val); 
# 82
auto __ret = __cxx_atomic_base_temporary(__a); 
# 83
__atomic_exchange(__cxx_atomic_unwrap(__a), &__v_temp, &__ret, __cxx_atomic_order_to_int(__order)); 
# 84
return *__cxx_get_underlying_atomic(&__ret); 
# 85
} 
# 87
template< class _Tp, class _Up> inline bool 
# 88
__cxx_atomic_compare_exchange_strong(_Tp *
# 89
__a, _Up *__expected, _Up __value, memory_order __success, memory_order 
# 90
__failure) { 
# 91
(void)__expected; 
# 92
return __atomic_compare_exchange(__cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)), __expected, &__value, false, __cxx_atomic_order_to_int(__success), __cxx_atomic_failure_order_to_int(__failure)); 
# 96
} 
# 98
template< class _Tp, class _Up> inline bool 
# 99
__cxx_atomic_compare_exchange_weak(_Tp *
# 100
__a, _Up *__expected, _Up __value, memory_order __success, memory_order 
# 101
__failure) { 
# 102
(void)__expected; 
# 103
return __atomic_compare_exchange(__cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)), __expected, &__value, true, __cxx_atomic_order_to_int(__success), __cxx_atomic_failure_order_to_int(__failure)); 
# 107
} 
# 109
template< class _Tp> 
# 110
struct __atomic_ptr_inc { enum { value = 1}; }; 
# 112
template< class _Tp> 
# 113
struct __atomic_ptr_inc< _Tp *>  { enum { value = sizeof(_Tp)}; }; 
# 117
template< class _Tp> 
# 118
struct __atomic_ptr_inc< _Tp []>  { }; 
# 119
template< class _Tp, int n> 
# 120
struct __atomic_ptr_inc< _Tp [n]>  { }; 
# 122
template< class _Tp, class _Td> inline auto 
# 123
__cxx_atomic_fetch_add(_Tp *__a, _Td __delta, memory_order 
# 124
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 125
constexpr auto __skip_v = (__atomic_ptr_inc< __cxx_atomic_underlying_t< _Tp> > ::value); 
# 126
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 127
return __atomic_fetch_add(__a_tmp, __delta * __skip_v, __cxx_atomic_order_to_int(__order)); 
# 129
} 
# 131
template< class _Tp, class _Td> inline auto 
# 132
__cxx_atomic_fetch_sub(_Tp *__a, _Td __delta, memory_order 
# 133
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 134
constexpr auto __skip_v = (__atomic_ptr_inc< __cxx_atomic_underlying_t< _Tp> > ::value); 
# 135
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 136
return __atomic_fetch_sub(__a_tmp, __delta * __skip_v, __cxx_atomic_order_to_int(__order)); 
# 138
} 
# 140
template< class _Tp, class _Td> inline auto 
# 141
__cxx_atomic_fetch_and(_Tp *__a, _Td __pattern, memory_order 
# 142
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 143
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 144
return __atomic_fetch_and(__a_tmp, __pattern, __cxx_atomic_order_to_int(__order)); 
# 146
} 
# 148
template< class _Tp, class _Td> inline auto 
# 149
__cxx_atomic_fetch_or(_Tp *__a, _Td __pattern, memory_order 
# 150
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 151
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 152
return __atomic_fetch_or(__a_tmp, __pattern, __cxx_atomic_order_to_int(__order)); 
# 154
} 
# 156
template< class _Tp, class _Td> inline auto 
# 157
__cxx_atomic_fetch_xor(_Tp *__a, _Td __pattern, memory_order 
# 158
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 159
auto __a_tmp = __cxx_get_underlying_atomic(__cxx_atomic_unwrap(__a)); 
# 160
return __atomic_fetch_xor(__a_tmp, __pattern, __cxx_atomic_order_to_int(__order)); 
# 162
} 
# 164
template< class _Tp, class _Td> inline auto 
# 165
__cxx_atomic_fetch_max(_Tp *__a, _Td __val, memory_order 
# 166
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 167
auto __expected = __cxx_atomic_load(__a, memory_order_relaxed); 
# 168
auto __desired = (__expected > __val) ? __expected : __val; 
# 170
while ((__desired == __val) && (!__cxx_atomic_compare_exchange_strong(__a, &__expected, __desired, __order, __order))) 
# 171
{ 
# 172
__desired = ((__expected > __val) ? __expected : __val); 
# 173
}  
# 175
return __expected; 
# 176
} 
# 178
template< class _Tp, class _Td> inline auto 
# 179
__cxx_atomic_fetch_min(_Tp *__a, _Td __val, memory_order 
# 180
__order)->__cxx_atomic_underlying_t< _Tp>  { 
# 181
auto __expected = __cxx_atomic_load(__a, memory_order_relaxed); 
# 182
auto __desired = (__expected < __val) ? __expected : __val; 
# 184
while ((__desired == __val) && (!__cxx_atomic_compare_exchange_strong(__a, &__expected, __desired, __order, __order))) 
# 185
{ 
# 186
__desired = ((__expected < __val) ? __expected : __val); 
# 187
}  
# 189
return __expected; 
# 190
} 
# 65 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
}
# 11 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_membar_block() {int volatile ___ = 1;::exit(___);}
#if 0
# 11
{ __asm__ volatile("membar.cta;" : : : "memory"); } 
#endif
# 12 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_acq_rel_block() {int volatile ___ = 1;::exit(___);}
#if 0
# 12
{ __asm__ volatile("fence.acq_rel.cta;" : : : "memory"); } 
#endif
# 13 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_sc_block() {int volatile ___ = 1;::exit(___);}
#if 0
# 13
{ __asm__ volatile("fence.sc.cta;" : : : "memory"); } 
#endif
# 14 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __atomic_thread_fence_cuda(int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__memorder;
# 39 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 14 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 15
{ } 
# 39 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 40 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 40 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 40
{ __asm__ volatile("ld.acquire.cta.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 41 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 41 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 41
{ __asm__ volatile("ld.relaxed.cta.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 42 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 42 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 42
{ __asm__ volatile("ld.volatile.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 43 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type 
# 43 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 44 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 67 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 44 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 45
uint32_t __tmp = (0); 
# 46
{ } 
# 66 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 67
} 
#endif
# 68 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 68 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 68
{ __asm__ volatile("ld.acquire.cta.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 69 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 69 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 69
{ __asm__ volatile("ld.relaxed.cta.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 70 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 70 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 70
{ __asm__ volatile("ld.volatile.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 71 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type 
# 71 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 95 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 73
uint64_t __tmp = (0); 
# 74
{ } 
# 94 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 95
} 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_32_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 96
{ __asm__ volatile("st.relaxed.cta.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 97 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 97 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_32_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 97
{ __asm__ volatile("st.release.cta.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 98 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 98 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_32_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 98
{ __asm__ volatile("st.volatile.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 99 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 121 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 101
uint32_t __tmp = (0); 
# 102
memcpy(&__tmp, __val, 4); 
# 103
{ } 
# 121 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 122 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 122 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_64_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 122
{ __asm__ volatile("st.relaxed.cta.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_64_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 123
{ __asm__ volatile("st.release.cta.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 124 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 124 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_64_block(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 124
{ __asm__ volatile("st.volatile.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 125 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 147 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 127
uint64_t __tmp = (0); 
# 128
memcpy(&__tmp, __val, 8); 
# 129
{ } 
# 147 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 148 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 148 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 148
{ __asm__ volatile("atom.cas.acq_rel.cta.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 149 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 149 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 149
{ __asm__ volatile("atom.cas.acquire.cta.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 150 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 150 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 150
{ __asm__ volatile("atom.cas.relaxed.cta.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 151 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 151 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 151
{ __asm__ volatile("atom.cas.release.cta.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 152 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 152 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 152
{ __asm__ volatile("atom.cas.cta.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) bool 
# 154 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 186 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 154 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 155
uint32_t __tmp = (0), __old = (0), __old_tmp; 
# 156
memcpy(&__tmp, __desired, 4); 
# 157
memcpy(&__old, __expected, 4); 
# 158
__old_tmp = __old; 
# 159
{ } 
# 183 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 184
memcpy(__expected, &__old, 4); 
# 185
return __ret; 
# 186
} 
#endif
# 187 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 187 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 187
{ __asm__ volatile("atom.exch.acq_rel.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 188 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 188
{ __asm__ volatile("atom.exch.acquire.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 189 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 189 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 189
{ __asm__ volatile("atom.exch.relaxed.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 190
{ __asm__ volatile("atom.exch.release.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 191
{ __asm__ volatile("atom.exch.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 192 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 193 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 221 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 193 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 194
uint32_t __tmp = (0); 
# 195
memcpy(&__tmp, __val, 4); 
# 196
{ } 
# 220 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 221
} 
#endif
# 222 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 222 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 222
{ __asm__ volatile("atom.add.acq_rel.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 223 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 223 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 223
{ __asm__ volatile("atom.add.acquire.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 224 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 224 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 224
{ __asm__ volatile("atom.add.relaxed.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 225 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 225
{ __asm__ volatile("atom.add.release.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 226 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 226 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 226
{ __asm__ volatile("atom.add.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 227 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 228 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 258 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 228 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 229
_Type __ret; 
# 230
uint32_t __tmp = (0); 
# 231
memcpy(&__tmp, &__val, 4); 
# 232
{ } 
# 256 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 257
return __ret; 
# 258
} 
#endif
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 259
{ __asm__ volatile("atom.and.acq_rel.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 260
{ __asm__ volatile("atom.and.acquire.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 261 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 261 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 261
{ __asm__ volatile("atom.and.relaxed.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 262 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 262 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 262
{ __asm__ volatile("atom.and.release.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 263 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 263 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 263
{ __asm__ volatile("atom.and.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 264 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 295 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 266
_Type __ret; 
# 267
uint32_t __tmp = (0); 
# 268
memcpy(&__tmp, &__val, 4); 
# 269
{ } 
# 293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 294
return __ret; 
# 295
} 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 296
{ __asm__ volatile("atom.max.acq_rel.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 297 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 297 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 297
{ __asm__ volatile("atom.max.acquire.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 298 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 298
{ __asm__ volatile("atom.max.relaxed.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 299 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 299 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 299
{ __asm__ volatile("atom.max.release.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 300 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 300 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 300
{ __asm__ volatile("atom.max.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 301 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 302 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 332 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 302 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 303
_Type __ret; 
# 304
uint32_t __tmp = (0); 
# 305
memcpy(&__tmp, &__val, 4); 
# 306
{ } 
# 330 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 331
return __ret; 
# 332
} 
#endif
# 333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 333
{ __asm__ volatile("atom.min.acq_rel.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 334 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 334 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 334
{ __asm__ volatile("atom.min.acquire.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 335
{ __asm__ volatile("atom.min.relaxed.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 336 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 336 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 336
{ __asm__ volatile("atom.min.release.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 337 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 337 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 337
{ __asm__ volatile("atom.min.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 338 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 339 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 339 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 340
_Type __ret; 
# 341
uint32_t __tmp = (0); 
# 342
memcpy(&__tmp, &__val, 4); 
# 343
{ } 
# 367 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 368
return __ret; 
# 369
} 
#endif
# 370 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 370 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 370
{ __asm__ volatile("atom.or.acq_rel.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 371
{ __asm__ volatile("atom.or.acquire.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 372 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 372 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 372
{ __asm__ volatile("atom.or.relaxed.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 373 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 373 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 373
{ __asm__ volatile("atom.or.release.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 374 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 374 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 374
{ __asm__ volatile("atom.or.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 376 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 406 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 376 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 377
_Type __ret; 
# 378
uint32_t __tmp = (0); 
# 379
memcpy(&__tmp, &__val, 4); 
# 380
{ } 
# 404 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 405
return __ret; 
# 406
} 
#endif
# 407 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 407 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 408
::exit(___);}
#if 0
# 407
{ __op = (-__op); 
# 408
__asm__ volatile("atom.add.acq_rel.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 409 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 409 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 410
::exit(___);}
#if 0
# 409
{ __op = (-__op); 
# 410
__asm__ volatile("atom.add.acquire.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 411 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 411 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 412
::exit(___);}
#if 0
# 411
{ __op = (-__op); 
# 412
__asm__ volatile("atom.add.relaxed.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 413 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 413 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 414
::exit(___);}
#if 0
# 413
{ __op = (-__op); 
# 414
__asm__ volatile("atom.add.release.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 415 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 415 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 416
::exit(___);}
#if 0
# 415
{ __op = (-__op); 
# 416
__asm__ volatile("atom.add.cta.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 418 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 448 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 418 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 419
_Type __ret; 
# 420
uint32_t __tmp = (0); 
# 421
memcpy(&__tmp, &__val, 4); 
# 422
{ } 
# 446 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 447
return __ret; 
# 448
} 
#endif
# 449 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 449 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 449
{ __asm__ volatile("atom.xor.acq_rel.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 450 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 450 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 450
{ __asm__ volatile("atom.xor.acquire.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 451 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 451 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 451
{ __asm__ volatile("atom.xor.relaxed.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 452 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 452 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 452
{ __asm__ volatile("atom.xor.release.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 453 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 453 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_32_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 453
{ __asm__ volatile("atom.xor.cta.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 454 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 455 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 485 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 455 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 456
_Type __ret; 
# 457
uint32_t __tmp = (0); 
# 458
memcpy(&__tmp, &__val, 4); 
# 459
{ } 
# 483 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 484
return __ret; 
# 485
} 
#endif
# 486 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 486 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 486
{ __asm__ volatile("atom.cas.acq_rel.cta.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 487 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 487 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 487
{ __asm__ volatile("atom.cas.acquire.cta.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 488
{ __asm__ volatile("atom.cas.relaxed.cta.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 489 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 489 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 489
{ __asm__ volatile("atom.cas.release.cta.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 490 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 490 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 490
{ __asm__ volatile("atom.cas.cta.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 491 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) bool 
# 492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 524 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 493
uint64_t __tmp = (0), __old = (0), __old_tmp; 
# 494
memcpy(&__tmp, __desired, 8); 
# 495
memcpy(&__old, __expected, 8); 
# 496
__old_tmp = __old; 
# 497
{ } 
# 521 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 522
memcpy(__expected, &__old, 8); 
# 523
return __ret; 
# 524
} 
#endif
# 525 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 525 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 525
{ __asm__ volatile("atom.exch.acq_rel.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 526 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 526 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 526
{ __asm__ volatile("atom.exch.acquire.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 527 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 527 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 527
{ __asm__ volatile("atom.exch.relaxed.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 528 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 528 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 528
{ __asm__ volatile("atom.exch.release.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 529 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 529 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 529
{ __asm__ volatile("atom.exch.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 530 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 531 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 559 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 531 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 532
uint64_t __tmp = (0); 
# 533
memcpy(&__tmp, __val, 8); 
# 534
{ } 
# 558 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 559
} 
#endif
# 560 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 560 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 560
{ __asm__ volatile("atom.add.acq_rel.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 561 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 561 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 561
{ __asm__ volatile("atom.add.acquire.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 562 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 562 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 562
{ __asm__ volatile("atom.add.relaxed.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 563 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 563 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 563
{ __asm__ volatile("atom.add.release.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 564 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 564 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 564
{ __asm__ volatile("atom.add.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 565 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 566 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 596 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 566 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 567
_Type __ret; 
# 568
uint64_t __tmp = (0); 
# 569
memcpy(&__tmp, &__val, 8); 
# 570
{ } 
# 594 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 595
return __ret; 
# 596
} 
#endif
# 597 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 597 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 597
{ __asm__ volatile("atom.and.acq_rel.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 598 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 598 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 598
{ __asm__ volatile("atom.and.acquire.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 599 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 599 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 599
{ __asm__ volatile("atom.and.relaxed.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 600 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 600 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 600
{ __asm__ volatile("atom.and.release.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 601 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 601 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 601
{ __asm__ volatile("atom.and.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 602 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 603 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 633 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 603 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 604
_Type __ret; 
# 605
uint64_t __tmp = (0); 
# 606
memcpy(&__tmp, &__val, 8); 
# 607
{ } 
# 631 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 632
return __ret; 
# 633
} 
#endif
# 634 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 634 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 634
{ __asm__ volatile("atom.max.acq_rel.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 635 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 635 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 635
{ __asm__ volatile("atom.max.acquire.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 636 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 636 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 636
{ __asm__ volatile("atom.max.relaxed.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 637 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 637 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 637
{ __asm__ volatile("atom.max.release.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 638 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 638 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 638
{ __asm__ volatile("atom.max.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 639 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 640 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 670 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 640 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 641
_Type __ret; 
# 642
uint64_t __tmp = (0); 
# 643
memcpy(&__tmp, &__val, 8); 
# 644
{ } 
# 668 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 669
return __ret; 
# 670
} 
#endif
# 671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 671
{ __asm__ volatile("atom.min.acq_rel.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 672 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 672 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 672
{ __asm__ volatile("atom.min.acquire.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 673 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 673 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 673
{ __asm__ volatile("atom.min.relaxed.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 674 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 674 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 674
{ __asm__ volatile("atom.min.release.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 675 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 675 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 675
{ __asm__ volatile("atom.min.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 676 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 677 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 707 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 677 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 678
_Type __ret; 
# 679
uint64_t __tmp = (0); 
# 680
memcpy(&__tmp, &__val, 8); 
# 681
{ } 
# 705 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 706
return __ret; 
# 707
} 
#endif
# 708 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 708 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 708
{ __asm__ volatile("atom.or.acq_rel.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 709 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 709 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 709
{ __asm__ volatile("atom.or.acquire.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 710 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 710 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 710
{ __asm__ volatile("atom.or.relaxed.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 711 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 711 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 711
{ __asm__ volatile("atom.or.release.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 712 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 712 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 712
{ __asm__ volatile("atom.or.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 713 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 714 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 744 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 714 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 715
_Type __ret; 
# 716
uint64_t __tmp = (0); 
# 717
memcpy(&__tmp, &__val, 8); 
# 718
{ } 
# 742 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 743
return __ret; 
# 744
} 
#endif
# 745 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 745 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 746
::exit(___);}
#if 0
# 745
{ __op = (-__op); 
# 746
__asm__ volatile("atom.add.acq_rel.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 748
::exit(___);}
#if 0
# 747
{ __op = (-__op); 
# 748
__asm__ volatile("atom.add.acquire.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 749 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 749 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 750
::exit(___);}
#if 0
# 749
{ __op = (-__op); 
# 750
__asm__ volatile("atom.add.relaxed.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 751 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 751 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 752
::exit(___);}
#if 0
# 751
{ __op = (-__op); 
# 752
__asm__ volatile("atom.add.release.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 753 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 753 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 754
::exit(___);}
#if 0
# 753
{ __op = (-__op); 
# 754
__asm__ volatile("atom.add.cta.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 755 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 756 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 786 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 756 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 757
_Type __ret; 
# 758
uint64_t __tmp = (0); 
# 759
memcpy(&__tmp, &__val, 8); 
# 760
{ } 
# 784 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 785
return __ret; 
# 786
} 
#endif
# 787 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 787 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 787
{ __asm__ volatile("atom.xor.acq_rel.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 788 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 788 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 788
{ __asm__ volatile("atom.xor.acquire.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 789 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 789 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 789
{ __asm__ volatile("atom.xor.relaxed.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 790 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 790 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 790
{ __asm__ volatile("atom.xor.release.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 791 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 791 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_64_block(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 791
{ __asm__ volatile("atom.xor.cta.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 792 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 793 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 823 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 793 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 794
_Type __ret; 
# 795
uint64_t __tmp = (0); 
# 796
memcpy(&__tmp, &__val, 8); 
# 797
{ } 
# 821 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 822
return __ret; 
# 823
} 
#endif
# 824 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 825 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 855 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 825 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 826
_Type *__ret; 
# 827
uint64_t __tmp = (0); 
# 828
memcpy(&__tmp, &__val, 8); 
# 829
__tmp *= sizeof(_Type); 
# 830
{ } 
# 853 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 854
return __ret; 
# 855
} 
#endif
# 856 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 857 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_block_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 888 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 857 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 858
_Type *__ret; 
# 859
uint64_t __tmp = (0); 
# 860
memcpy(&__tmp, &__val, 8); 
# 861
__tmp = (-__tmp); 
# 862
__tmp *= sizeof(_Type); 
# 863
{ } 
# 886 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 887
return __ret; 
# 888
} 
#endif
# 889 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_membar_device() {int volatile ___ = 1;::exit(___);}
#if 0
# 889
{ __asm__ volatile("membar.gl;" : : : "memory"); } 
#endif
# 890 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_acq_rel_device() {int volatile ___ = 1;::exit(___);}
#if 0
# 890
{ __asm__ volatile("fence.acq_rel.gpu;" : : : "memory"); } 
#endif
# 891 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_sc_device() {int volatile ___ = 1;::exit(___);}
#if 0
# 891
{ __asm__ volatile("fence.sc.gpu;" : : : "memory"); } 
#endif
# 892 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __atomic_thread_fence_cuda(int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__memorder;
# 917 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 892 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 893
{ } 
# 917 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 918 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 918 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 918
{ __asm__ volatile("ld.acquire.gpu.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 919 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 919 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 919
{ __asm__ volatile("ld.relaxed.gpu.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 920 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 920 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 920
{ __asm__ volatile("ld.volatile.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 921 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type 
# 921 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 922 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 945 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 922 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 923
uint32_t __tmp = (0); 
# 924
{ } 
# 944 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 945
} 
#endif
# 946 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 946 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 946
{ __asm__ volatile("ld.acquire.gpu.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 947 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 947 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 947
{ __asm__ volatile("ld.relaxed.gpu.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 948 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 948 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 948
{ __asm__ volatile("ld.volatile.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 949 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type 
# 949 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 950 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 973 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 950 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 951
uint64_t __tmp = (0); 
# 952
{ } 
# 972 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 973
} 
#endif
# 974 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 974 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_32_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 974
{ __asm__ volatile("st.relaxed.gpu.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 975 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 975 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_32_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 975
{ __asm__ volatile("st.release.gpu.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 976 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 976 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_32_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 976
{ __asm__ volatile("st.volatile.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 977 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 978 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 999 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 978 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 979
uint32_t __tmp = (0); 
# 980
memcpy(&__tmp, __val, 4); 
# 981
{ } 
# 999 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 1000 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1000 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_64_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1000
{ __asm__ volatile("st.relaxed.gpu.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1001 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1001 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_64_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1001
{ __asm__ volatile("st.release.gpu.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1002 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1002 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_64_device(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1002
{ __asm__ volatile("st.volatile.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1003 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 1004 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1025 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1004 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1005
uint64_t __tmp = (0); 
# 1006
memcpy(&__tmp, __val, 8); 
# 1007
{ } 
# 1025 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 1026 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1026 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1026
{ __asm__ volatile("atom.cas.acq_rel.gpu.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1027 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1027 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1027
{ __asm__ volatile("atom.cas.acquire.gpu.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1028 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1028 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1028
{ __asm__ volatile("atom.cas.relaxed.gpu.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1029 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1029 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1029
{ __asm__ volatile("atom.cas.release.gpu.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1030 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1030 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1030
{ __asm__ volatile("atom.cas.gpu.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1031 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) bool 
# 1032 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 1064 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1032 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1033
uint32_t __tmp = (0), __old = (0), __old_tmp; 
# 1034
memcpy(&__tmp, __desired, 4); 
# 1035
memcpy(&__old, __expected, 4); 
# 1036
__old_tmp = __old; 
# 1037
{ } 
# 1061 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 1062
memcpy(__expected, &__old, 4); 
# 1063
return __ret; 
# 1064
} 
#endif
# 1065 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1065 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1065
{ __asm__ volatile("atom.exch.acq_rel.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1066 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1066 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1066
{ __asm__ volatile("atom.exch.acquire.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1067 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1067 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1067
{ __asm__ volatile("atom.exch.relaxed.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1068 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1068 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1068
{ __asm__ volatile("atom.exch.release.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1069 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1069 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1069
{ __asm__ volatile("atom.exch.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1070 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 1071 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 1099 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1071 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1072
uint32_t __tmp = (0); 
# 1073
memcpy(&__tmp, __val, 4); 
# 1074
{ } 
# 1098 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 1099
} 
#endif
# 1100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1100
{ __asm__ volatile("atom.add.acq_rel.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1101 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1101 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1101
{ __asm__ volatile("atom.add.acquire.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1102 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1102 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1102
{ __asm__ volatile("atom.add.relaxed.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1103 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1103 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1103
{ __asm__ volatile("atom.add.release.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1104 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1104 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1104
{ __asm__ volatile("atom.add.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1105 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1106 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1136 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1106 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1107
_Type __ret; 
# 1108
uint32_t __tmp = (0); 
# 1109
memcpy(&__tmp, &__val, 4); 
# 1110
{ } 
# 1134 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1135
return __ret; 
# 1136
} 
#endif
# 1137 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1137 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1137
{ __asm__ volatile("atom.and.acq_rel.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1138 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1138 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1138
{ __asm__ volatile("atom.and.acquire.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1139 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1139 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1139
{ __asm__ volatile("atom.and.relaxed.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1140 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1140 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1140
{ __asm__ volatile("atom.and.release.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1141 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1141 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1141
{ __asm__ volatile("atom.and.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1142 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1143 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1173 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1143 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1144
_Type __ret; 
# 1145
uint32_t __tmp = (0); 
# 1146
memcpy(&__tmp, &__val, 4); 
# 1147
{ } 
# 1171 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1172
return __ret; 
# 1173
} 
#endif
# 1174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1174
{ __asm__ volatile("atom.max.acq_rel.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1175 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1175 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1175
{ __asm__ volatile("atom.max.acquire.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1176 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1176 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1176
{ __asm__ volatile("atom.max.relaxed.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1177 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1177 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1177
{ __asm__ volatile("atom.max.release.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1178 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1178 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1178
{ __asm__ volatile("atom.max.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1179 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1180 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1180 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1181
_Type __ret; 
# 1182
uint32_t __tmp = (0); 
# 1183
memcpy(&__tmp, &__val, 4); 
# 1184
{ } 
# 1208 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1209
return __ret; 
# 1210
} 
#endif
# 1211 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1211 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1211
{ __asm__ volatile("atom.min.acq_rel.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1212 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1212 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1212
{ __asm__ volatile("atom.min.acquire.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1213 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1213 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1213
{ __asm__ volatile("atom.min.relaxed.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1214 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1214 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1214
{ __asm__ volatile("atom.min.release.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1215 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1215 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1215
{ __asm__ volatile("atom.min.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1216 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1217 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1247 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1217 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1218
_Type __ret; 
# 1219
uint32_t __tmp = (0); 
# 1220
memcpy(&__tmp, &__val, 4); 
# 1221
{ } 
# 1245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1246
return __ret; 
# 1247
} 
#endif
# 1248 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1248 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1248
{ __asm__ volatile("atom.or.acq_rel.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1249 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1249 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1249
{ __asm__ volatile("atom.or.acquire.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1250 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1250 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1250
{ __asm__ volatile("atom.or.relaxed.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1251 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1251 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1251
{ __asm__ volatile("atom.or.release.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1252
{ __asm__ volatile("atom.or.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1253 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1254 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1284 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1254 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1255
_Type __ret; 
# 1256
uint32_t __tmp = (0); 
# 1257
memcpy(&__tmp, &__val, 4); 
# 1258
{ } 
# 1282 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1283
return __ret; 
# 1284
} 
#endif
# 1285 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1285 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1286
::exit(___);}
#if 0
# 1285
{ __op = (-__op); 
# 1286
__asm__ volatile("atom.add.acq_rel.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1288
::exit(___);}
#if 0
# 1287
{ __op = (-__op); 
# 1288
__asm__ volatile("atom.add.acquire.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1289 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1289 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1290
::exit(___);}
#if 0
# 1289
{ __op = (-__op); 
# 1290
__asm__ volatile("atom.add.relaxed.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1291 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1291 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1292
::exit(___);}
#if 0
# 1291
{ __op = (-__op); 
# 1292
__asm__ volatile("atom.add.release.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1294
::exit(___);}
#if 0
# 1293
{ __op = (-__op); 
# 1294
__asm__ volatile("atom.add.gpu.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1295 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1326 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1297
_Type __ret; 
# 1298
uint32_t __tmp = (0); 
# 1299
memcpy(&__tmp, &__val, 4); 
# 1300
{ } 
# 1324 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1325
return __ret; 
# 1326
} 
#endif
# 1327 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1327 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1327
{ __asm__ volatile("atom.xor.acq_rel.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1328 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1328 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1328
{ __asm__ volatile("atom.xor.acquire.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1329 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1329 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1329
{ __asm__ volatile("atom.xor.relaxed.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1330 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1330 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1330
{ __asm__ volatile("atom.xor.release.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1331 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1331 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_32_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1331
{ __asm__ volatile("atom.xor.gpu.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1332 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1363 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1334
_Type __ret; 
# 1335
uint32_t __tmp = (0); 
# 1336
memcpy(&__tmp, &__val, 4); 
# 1337
{ } 
# 1361 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 1362
return __ret; 
# 1363
} 
#endif
# 1364 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1364 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1364
{ __asm__ volatile("atom.cas.acq_rel.gpu.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 1365 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1365 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1365
{ __asm__ volatile("atom.cas.acquire.gpu.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 1366 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1366 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1366
{ __asm__ volatile("atom.cas.relaxed.gpu.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 1367 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1367 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1367
{ __asm__ volatile("atom.cas.release.gpu.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 1368 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1368 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1368
{ __asm__ volatile("atom.cas.gpu.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 1369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) bool 
# 1370 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 1402 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1370 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1371
uint64_t __tmp = (0), __old = (0), __old_tmp; 
# 1372
memcpy(&__tmp, __desired, 8); 
# 1373
memcpy(&__old, __expected, 8); 
# 1374
__old_tmp = __old; 
# 1375
{ } 
# 1399 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 1400
memcpy(__expected, &__old, 8); 
# 1401
return __ret; 
# 1402
} 
#endif
# 1403 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1403 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1403
{ __asm__ volatile("atom.exch.acq_rel.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1404 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1404 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1404
{ __asm__ volatile("atom.exch.acquire.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1405 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1405 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1405
{ __asm__ volatile("atom.exch.relaxed.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1406 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1406 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1406
{ __asm__ volatile("atom.exch.release.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1407 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1407 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1407
{ __asm__ volatile("atom.exch.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1408 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 1409 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 1437 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1409 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1410
uint64_t __tmp = (0); 
# 1411
memcpy(&__tmp, __val, 8); 
# 1412
{ } 
# 1436 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 1437
} 
#endif
# 1438 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1438 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1438
{ __asm__ volatile("atom.add.acq_rel.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1439 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1439 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1439
{ __asm__ volatile("atom.add.acquire.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1440 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1440 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1440
{ __asm__ volatile("atom.add.relaxed.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1441 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1441 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1441
{ __asm__ volatile("atom.add.release.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1442 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1442 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1442
{ __asm__ volatile("atom.add.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1443 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1444 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1474 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1444 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1445
_Type __ret; 
# 1446
uint64_t __tmp = (0); 
# 1447
memcpy(&__tmp, &__val, 8); 
# 1448
{ } 
# 1472 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1473
return __ret; 
# 1474
} 
#endif
# 1475 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1475 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1475
{ __asm__ volatile("atom.and.acq_rel.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1476 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1476 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1476
{ __asm__ volatile("atom.and.acquire.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1477 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1477 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1477
{ __asm__ volatile("atom.and.relaxed.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1478
{ __asm__ volatile("atom.and.release.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1479 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1479 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1479
{ __asm__ volatile("atom.and.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1480 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1481 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1511 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1481 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1482
_Type __ret; 
# 1483
uint64_t __tmp = (0); 
# 1484
memcpy(&__tmp, &__val, 8); 
# 1485
{ } 
# 1509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1510
return __ret; 
# 1511
} 
#endif
# 1512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1512
{ __asm__ volatile("atom.max.acq_rel.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1513 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1513 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1513
{ __asm__ volatile("atom.max.acquire.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1514 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1514 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1514
{ __asm__ volatile("atom.max.relaxed.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1515 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1515 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1515
{ __asm__ volatile("atom.max.release.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1516 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1516 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1516
{ __asm__ volatile("atom.max.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1517 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1518 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1548 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1518 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1519
_Type __ret; 
# 1520
uint64_t __tmp = (0); 
# 1521
memcpy(&__tmp, &__val, 8); 
# 1522
{ } 
# 1546 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1547
return __ret; 
# 1548
} 
#endif
# 1549 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1549 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1549
{ __asm__ volatile("atom.min.acq_rel.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1550 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1550 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1550
{ __asm__ volatile("atom.min.acquire.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1551 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1551 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1551
{ __asm__ volatile("atom.min.relaxed.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1552 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1552 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1552
{ __asm__ volatile("atom.min.release.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1553 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1553 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1553
{ __asm__ volatile("atom.min.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1554 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1555 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1585 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1555 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1556
_Type __ret; 
# 1557
uint64_t __tmp = (0); 
# 1558
memcpy(&__tmp, &__val, 8); 
# 1559
{ } 
# 1583 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1584
return __ret; 
# 1585
} 
#endif
# 1586 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1586 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1586
{ __asm__ volatile("atom.or.acq_rel.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1587
{ __asm__ volatile("atom.or.acquire.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1588 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1588 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1588
{ __asm__ volatile("atom.or.relaxed.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1589 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1589 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1589
{ __asm__ volatile("atom.or.release.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1590 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1590 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1590
{ __asm__ volatile("atom.or.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1591 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1592 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1622 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1592 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1593
_Type __ret; 
# 1594
uint64_t __tmp = (0); 
# 1595
memcpy(&__tmp, &__val, 8); 
# 1596
{ } 
# 1620 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1621
return __ret; 
# 1622
} 
#endif
# 1623 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1623 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1624
::exit(___);}
#if 0
# 1623
{ __op = (-__op); 
# 1624
__asm__ volatile("atom.add.acq_rel.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1625 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1625 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1626
::exit(___);}
#if 0
# 1625
{ __op = (-__op); 
# 1626
__asm__ volatile("atom.add.acquire.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1627 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1627 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1628
::exit(___);}
#if 0
# 1627
{ __op = (-__op); 
# 1628
__asm__ volatile("atom.add.relaxed.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1629 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1629 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1630
::exit(___);}
#if 0
# 1629
{ __op = (-__op); 
# 1630
__asm__ volatile("atom.add.release.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1631 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1631 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 1632
::exit(___);}
#if 0
# 1631
{ __op = (-__op); 
# 1632
__asm__ volatile("atom.add.gpu.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1633 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1634 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1664 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1634 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1635
_Type __ret; 
# 1636
uint64_t __tmp = (0); 
# 1637
memcpy(&__tmp, &__val, 8); 
# 1638
{ } 
# 1662 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1663
return __ret; 
# 1664
} 
#endif
# 1665 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1665 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1665
{ __asm__ volatile("atom.xor.acq_rel.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1666 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1666 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1666
{ __asm__ volatile("atom.xor.acquire.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1667 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1667 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1667
{ __asm__ volatile("atom.xor.relaxed.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1668 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1668 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1668
{ __asm__ volatile("atom.xor.release.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1669 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1669 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_64_device(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1669
{ __asm__ volatile("atom.xor.gpu.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 1670 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 1671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1701 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1671 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1672
_Type __ret; 
# 1673
uint64_t __tmp = (0); 
# 1674
memcpy(&__tmp, &__val, 8); 
# 1675
{ } 
# 1699 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1700
return __ret; 
# 1701
} 
#endif
# 1702 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 1703 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1733 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1703 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1704
_Type *__ret; 
# 1705
uint64_t __tmp = (0); 
# 1706
memcpy(&__tmp, &__val, 8); 
# 1707
__tmp *= sizeof(_Type); 
# 1708
{ } 
# 1731 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1732
return __ret; 
# 1733
} 
#endif
# 1734 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 1735 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_device_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1766 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1735 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1736
_Type *__ret; 
# 1737
uint64_t __tmp = (0); 
# 1738
memcpy(&__tmp, &__val, 8); 
# 1739
__tmp = (-__tmp); 
# 1740
__tmp *= sizeof(_Type); 
# 1741
{ } 
# 1764 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 1765
return __ret; 
# 1766
} 
#endif
# 1767 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_membar_system() {int volatile ___ = 1;::exit(___);}
#if 0
# 1767
{ __asm__ volatile("membar.sys;" : : : "memory"); } 
#endif
# 1768 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_acq_rel_system() {int volatile ___ = 1;::exit(___);}
#if 0
# 1768
{ __asm__ volatile("fence.acq_rel.sys;" : : : "memory"); } 
#endif
# 1769 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __cuda_fence_sc_system() {int volatile ___ = 1;::exit(___);}
#if 0
# 1769
{ __asm__ volatile("fence.sc.sys;" : : : "memory"); } 
#endif
# 1770 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__attribute__((unused)) static inline void __atomic_thread_fence_cuda(int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__memorder;
# 1795 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1770 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1771
{ } 
# 1795 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 1796 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1796 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1796
{ __asm__ volatile("ld.acquire.sys.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1797 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1797 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1797
{ __asm__ volatile("ld.relaxed.sys.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1798 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1798 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1798
{ __asm__ volatile("ld.volatile.b32 %0,[%1];" : "=r" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1799 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type 
# 1799 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 1800 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 1823 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1800 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1801
uint32_t __tmp = (0); 
# 1802
{ } 
# 1822 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 1823
} 
#endif
# 1824 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1824 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1824
{ __asm__ volatile("ld.acquire.sys.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1825 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1825 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1825
{ __asm__ volatile("ld.relaxed.sys.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1826 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1826 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_load_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst) {int volatile ___ = 1;(void)__ptr;(void)__dst;::exit(___);}
#if 0
# 1826
{ __asm__ volatile("ld.volatile.b64 %0,[%1];" : "=l" (__dst) : "l" (__ptr) : "memory"); } 
#endif
# 1827 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type 
# 1827 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
 = 0> __attribute__((unused)) void 
# 1828 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_load_cuda(const volatile _Type *__ptr, _Type *__ret, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__ret;(void)__memorder;
# 1851 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1828 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1829
uint64_t __tmp = (0); 
# 1830
{ } 
# 1850 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 1851
} 
#endif
# 1852 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1852 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_32_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1852
{ __asm__ volatile("st.relaxed.sys.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 1853 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1853 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_32_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1853
{ __asm__ volatile("st.release.sys.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 1854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1854 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_32_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1854
{ __asm__ volatile("st.volatile.b32 [%0], %1;" : : "l" (__ptr), "r" (__src) : "memory"); } 
#endif
# 1855 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 1856 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1877 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1856 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1857
uint32_t __tmp = (0); 
# 1858
memcpy(&__tmp, __val, 4); 
# 1859
{ } 
# 1877 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 1878 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1878 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_relaxed_64_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1878
{ __asm__ volatile("st.relaxed.sys.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1879 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1879 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_release_64_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1879
{ __asm__ volatile("st.release.sys.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1880 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B> __attribute__((unused)) static inline void 
# 1880 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_store_volatile_64_system(_CUDA_A __ptr, _CUDA_B __src) {int volatile ___ = 1;(void)__ptr;(void)__src;::exit(___);}
#if 0
# 1880
{ __asm__ volatile("st.volatile.b64 [%0], %1;" : : "l" (__ptr), "l" (__src) : "memory"); } 
#endif
# 1881 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 1882 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_store_cuda(volatile _Type *__ptr, _Type *__val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 1903 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1882 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1883
uint64_t __tmp = (0); 
# 1884
memcpy(&__tmp, __val, 8); 
# 1885
{ } 
# 1903 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
} 
#endif
# 1904 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1904 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1904
{ __asm__ volatile("atom.cas.acq_rel.sys.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1905 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1905 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1905
{ __asm__ volatile("atom.cas.acquire.sys.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1906 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1906 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1906
{ __asm__ volatile("atom.cas.relaxed.sys.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1907 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1907 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1907
{ __asm__ volatile("atom.cas.release.sys.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1908 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 1908 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 1908
{ __asm__ volatile("atom.cas.sys.b32 %0,[%1],%2,%3;" : "=r" (__dst) : "l" (__ptr), "r" (__cmp), "r" (__op) : "memory"); } 
#endif
# 1909 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) bool 
# 1910 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 1942 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1910 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1911
uint32_t __tmp = (0), __old = (0), __old_tmp; 
# 1912
memcpy(&__tmp, __desired, 4); 
# 1913
memcpy(&__old, __expected, 4); 
# 1914
__old_tmp = __old; 
# 1915
{ } 
# 1939 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 1940
memcpy(__expected, &__old, 4); 
# 1941
return __ret; 
# 1942
} 
#endif
# 1943 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1943 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1943
{ __asm__ volatile("atom.exch.acq_rel.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1944 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1944 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1944
{ __asm__ volatile("atom.exch.acquire.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1945 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1945 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1945
{ __asm__ volatile("atom.exch.relaxed.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1946 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1946 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1946
{ __asm__ volatile("atom.exch.release.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1947 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1947 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1947
{ __asm__ volatile("atom.exch.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1948 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) void 
# 1949 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 1977 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1949 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1950
uint32_t __tmp = (0); 
# 1951
memcpy(&__tmp, __val, 4); 
# 1952
{ } 
# 1976 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 4); 
# 1977
} 
#endif
# 1978 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1978 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1978
{ __asm__ volatile("atom.add.acq_rel.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1979 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1979 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1979
{ __asm__ volatile("atom.add.acquire.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1980 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1980 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1980
{ __asm__ volatile("atom.add.relaxed.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1981 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1981 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1981
{ __asm__ volatile("atom.add.release.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1982 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 1982 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 1982
{ __asm__ volatile("atom.add.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 1983 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 1984 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2014 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 1984 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 1985
_Type __ret; 
# 1986
uint32_t __tmp = (0); 
# 1987
memcpy(&__tmp, &__val, 4); 
# 1988
{ } 
# 2012 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2013
return __ret; 
# 2014
} 
#endif
# 2015 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2015 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2015
{ __asm__ volatile("atom.and.acq_rel.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2016 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2016 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2016
{ __asm__ volatile("atom.and.acquire.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2017 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2017 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2017
{ __asm__ volatile("atom.and.relaxed.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2018 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2018 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2018
{ __asm__ volatile("atom.and.release.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2019 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2019 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2019
{ __asm__ volatile("atom.and.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2020 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2021 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2051 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2021 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2022
_Type __ret; 
# 2023
uint32_t __tmp = (0); 
# 2024
memcpy(&__tmp, &__val, 4); 
# 2025
{ } 
# 2049 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2050
return __ret; 
# 2051
} 
#endif
# 2052 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2052 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2052
{ __asm__ volatile("atom.max.acq_rel.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2053 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2053 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2053
{ __asm__ volatile("atom.max.acquire.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2054 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2054 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2054
{ __asm__ volatile("atom.max.relaxed.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2055 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2055 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2055
{ __asm__ volatile("atom.max.release.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2056 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2056 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2056
{ __asm__ volatile("atom.max.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2057 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2058 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2088 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2058 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2059
_Type __ret; 
# 2060
uint32_t __tmp = (0); 
# 2061
memcpy(&__tmp, &__val, 4); 
# 2062
{ } 
# 2086 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2087
return __ret; 
# 2088
} 
#endif
# 2089 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2089 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2089
{ __asm__ volatile("atom.min.acq_rel.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2090 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2090 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2090
{ __asm__ volatile("atom.min.acquire.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2091 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2091 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2091
{ __asm__ volatile("atom.min.relaxed.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2092 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2092 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2092
{ __asm__ volatile("atom.min.release.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2093 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2093 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2093
{ __asm__ volatile("atom.min.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2094 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2095 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2125 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2095 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2096
_Type __ret; 
# 2097
uint32_t __tmp = (0); 
# 2098
memcpy(&__tmp, &__val, 4); 
# 2099
{ } 
# 2123 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2124
return __ret; 
# 2125
} 
#endif
# 2126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2126
{ __asm__ volatile("atom.or.acq_rel.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2127 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2127 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2127
{ __asm__ volatile("atom.or.acquire.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2128 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2128 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2128
{ __asm__ volatile("atom.or.relaxed.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2129
{ __asm__ volatile("atom.or.release.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2130 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2130 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2130
{ __asm__ volatile("atom.or.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2131 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2132 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2162 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2132 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2133
_Type __ret; 
# 2134
uint32_t __tmp = (0); 
# 2135
memcpy(&__tmp, &__val, 4); 
# 2136
{ } 
# 2160 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2161
return __ret; 
# 2162
} 
#endif
# 2163 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2163 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2164
::exit(___);}
#if 0
# 2163
{ __op = (-__op); 
# 2164
__asm__ volatile("atom.add.acq_rel.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2165 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2165 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2166
::exit(___);}
#if 0
# 2165
{ __op = (-__op); 
# 2166
__asm__ volatile("atom.add.acquire.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2167 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2167 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2168
::exit(___);}
#if 0
# 2167
{ __op = (-__op); 
# 2168
__asm__ volatile("atom.add.relaxed.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2169 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2169 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2170
::exit(___);}
#if 0
# 2169
{ __op = (-__op); 
# 2170
__asm__ volatile("atom.add.release.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2171 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2171 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2172
::exit(___);}
#if 0
# 2171
{ __op = (-__op); 
# 2172
__asm__ volatile("atom.add.sys.u32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2173 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2204 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2175
_Type __ret; 
# 2176
uint32_t __tmp = (0); 
# 2177
memcpy(&__tmp, &__val, 4); 
# 2178
{ } 
# 2202 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2203
return __ret; 
# 2204
} 
#endif
# 2205 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2205 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2205
{ __asm__ volatile("atom.xor.acq_rel.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2206 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2206 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2206
{ __asm__ volatile("atom.xor.acquire.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2207 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2207 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2207
{ __asm__ volatile("atom.xor.relaxed.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2208 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2208 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2208
{ __asm__ volatile("atom.xor.release.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2209 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2209 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_32_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2209
{ __asm__ volatile("atom.xor.sys.b32 %0,[%1],%2;" : "=r" (__dst) : "l" (__ptr), "r" (__op) : "memory"); } 
#endif
# 2210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (4), int> ::type  = 0> __attribute__((unused)) _Type 
# 2211 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2241 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2211 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2212
_Type __ret; 
# 2213
uint32_t __tmp = (0); 
# 2214
memcpy(&__tmp, &__val, 4); 
# 2215
{ } 
# 2239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 4); 
# 2240
return __ret; 
# 2241
} 
#endif
# 2242 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 2242 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 2242
{ __asm__ volatile("atom.cas.acq_rel.sys.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 2243 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 2243 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 2243
{ __asm__ volatile("atom.cas.acquire.sys.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 2244 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 2244 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 2244
{ __asm__ volatile("atom.cas.relaxed.sys.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 2245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 2245 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 2245
{ __asm__ volatile("atom.cas.release.sys.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 2246 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C, class _CUDA_D> __attribute__((unused)) static inline void 
# 2246 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_compare_exchange_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __cmp, _CUDA_D __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__cmp;(void)__op;::exit(___);}
#if 0
# 2246
{ __asm__ volatile("atom.cas.sys.b64 %0,[%1],%2,%3;" : "=l" (__dst) : "l" (__ptr), "l" (__cmp), "l" (__op) : "memory"); } 
#endif
# 2247 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) bool 
# 2248 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;
# 2280 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2248 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2249
uint64_t __tmp = (0), __old = (0), __old_tmp; 
# 2250
memcpy(&__tmp, __desired, 8); 
# 2251
memcpy(&__old, __expected, 8); 
# 2252
__old_tmp = __old; 
# 2253
{ } 
# 2277 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
const bool __ret = __old == __old_tmp; 
# 2278
memcpy(__expected, &__old, 8); 
# 2279
return __ret; 
# 2280
} 
#endif
# 2281 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2281 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2281
{ __asm__ volatile("atom.exch.acq_rel.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2282 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2282 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2282
{ __asm__ volatile("atom.exch.acquire.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2283 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2283 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2283
{ __asm__ volatile("atom.exch.relaxed.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2284 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2284 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2284
{ __asm__ volatile("atom.exch.release.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2285 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2285 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_exchange_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2285
{ __asm__ volatile("atom.exch.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2286 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) void 
# 2287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;
# 2315 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2288
uint64_t __tmp = (0); 
# 2289
memcpy(&__tmp, __val, 8); 
# 2290
{ } 
# 2314 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(__ret, &__tmp, 8); 
# 2315
} 
#endif
# 2316 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2316 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2316
{ __asm__ volatile("atom.add.acq_rel.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2317 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2317 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2317
{ __asm__ volatile("atom.add.acquire.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2318 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2318 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2318
{ __asm__ volatile("atom.add.relaxed.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2319 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2319 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2319
{ __asm__ volatile("atom.add.release.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2320 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2320 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_add_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2320
{ __asm__ volatile("atom.add.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2321 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2322 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2352 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2322 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2323
_Type __ret; 
# 2324
uint64_t __tmp = (0); 
# 2325
memcpy(&__tmp, &__val, 8); 
# 2326
{ } 
# 2350 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2351
return __ret; 
# 2352
} 
#endif
# 2353 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2353 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2353
{ __asm__ volatile("atom.and.acq_rel.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2354 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2354 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2354
{ __asm__ volatile("atom.and.acquire.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2355 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2355 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2355
{ __asm__ volatile("atom.and.relaxed.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2356 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2356 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2356
{ __asm__ volatile("atom.and.release.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2357 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2357 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_and_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2357
{ __asm__ volatile("atom.and.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2358 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2359 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2389 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2359 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2360
_Type __ret; 
# 2361
uint64_t __tmp = (0); 
# 2362
memcpy(&__tmp, &__val, 8); 
# 2363
{ } 
# 2387 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2388
return __ret; 
# 2389
} 
#endif
# 2390 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2390 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2390
{ __asm__ volatile("atom.max.acq_rel.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2391 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2391 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2391
{ __asm__ volatile("atom.max.acquire.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2392 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2392 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2392
{ __asm__ volatile("atom.max.relaxed.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2393 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2393
{ __asm__ volatile("atom.max.release.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2394 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2394 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_max_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2394
{ __asm__ volatile("atom.max.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2395 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2426 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2397
_Type __ret; 
# 2398
uint64_t __tmp = (0); 
# 2399
memcpy(&__tmp, &__val, 8); 
# 2400
{ } 
# 2424 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2425
return __ret; 
# 2426
} 
#endif
# 2427 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2427 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2427
{ __asm__ volatile("atom.min.acq_rel.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2428 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2428 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2428
{ __asm__ volatile("atom.min.acquire.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2429 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2429 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2429
{ __asm__ volatile("atom.min.relaxed.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2430 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2430 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2430
{ __asm__ volatile("atom.min.release.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2431 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2431 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_min_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2431
{ __asm__ volatile("atom.min.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2432 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2433 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2463 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2433 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2434
_Type __ret; 
# 2435
uint64_t __tmp = (0); 
# 2436
memcpy(&__tmp, &__val, 8); 
# 2437
{ } 
# 2461 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2462
return __ret; 
# 2463
} 
#endif
# 2464 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2464 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2464
{ __asm__ volatile("atom.or.acq_rel.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2465 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2465 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2465
{ __asm__ volatile("atom.or.acquire.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2466 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2466 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2466
{ __asm__ volatile("atom.or.relaxed.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2467 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2467 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2467
{ __asm__ volatile("atom.or.release.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_or_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2468
{ __asm__ volatile("atom.or.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2469 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2470 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2500 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2470 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2471
_Type __ret; 
# 2472
uint64_t __tmp = (0); 
# 2473
memcpy(&__tmp, &__val, 8); 
# 2474
{ } 
# 2498 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2499
return __ret; 
# 2500
} 
#endif
# 2501 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2501 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2502
::exit(___);}
#if 0
# 2501
{ __op = (-__op); 
# 2502
__asm__ volatile("atom.add.acq_rel.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2504
::exit(___);}
#if 0
# 2503
{ __op = (-__op); 
# 2504
__asm__ volatile("atom.add.acquire.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2505 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2505 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2506
::exit(___);}
#if 0
# 2505
{ __op = (-__op); 
# 2506
__asm__ volatile("atom.add.relaxed.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2507 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2507 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2508
::exit(___);}
#if 0
# 2507
{ __op = (-__op); 
# 2508
__asm__ volatile("atom.add.release.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_sub_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;
# 2510
::exit(___);}
#if 0
# 2509
{ __op = (-__op); 
# 2510
__asm__ volatile("atom.add.sys.u64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2511 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2542 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2513
_Type __ret; 
# 2514
uint64_t __tmp = (0); 
# 2515
memcpy(&__tmp, &__val, 8); 
# 2516
{ } 
# 2540 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2541
return __ret; 
# 2542
} 
#endif
# 2543 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2543 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acq_rel_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2543
{ __asm__ volatile("atom.xor.acq_rel.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2544 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2544 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_acquire_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2544
{ __asm__ volatile("atom.xor.acquire.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2545 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2545 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_relaxed_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2545
{ __asm__ volatile("atom.xor.relaxed.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2546 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2546 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_release_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2546
{ __asm__ volatile("atom.xor.release.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2547 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _CUDA_A, class _CUDA_B, class _CUDA_C> __attribute__((unused)) static inline void 
# 2547 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__cuda_fetch_xor_volatile_64_system(_CUDA_A __ptr, _CUDA_B &__dst, _CUDA_C __op) {int volatile ___ = 1;(void)__ptr;(void)__dst;(void)__op;::exit(___);}
#if 0
# 2547
{ __asm__ volatile("atom.xor.sys.b64 %0,[%1],%2;" : "=l" (__dst) : "l" (__ptr), "l" (__op) : "memory"); } 
#endif
# 2548 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type, typename enable_if< sizeof(_Type) == (8), int> ::type  = 0> __attribute__((unused)) _Type 
# 2549 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Type __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2579 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2549 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2550
_Type __ret; 
# 2551
uint64_t __tmp = (0); 
# 2552
memcpy(&__tmp, &__val, 8); 
# 2553
{ } 
# 2577 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2578
return __ret; 
# 2579
} 
#endif
# 2580 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 2581 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_add_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2611 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2581 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2582
_Type *__ret; 
# 2583
uint64_t __tmp = (0); 
# 2584
memcpy(&__tmp, &__val, 8); 
# 2585
__tmp *= sizeof(_Type); 
# 2586
{ } 
# 2609 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2610
return __ret; 
# 2611
} 
#endif
# 2612 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
template< class _Type> __attribute__((unused)) _Type *
# 2613 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
__atomic_fetch_sub_cuda(_Type *volatile *__ptr, ::ptrdiff_t __val, int __memorder, __thread_scope_system_tag) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;
# 2644 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
::exit(___);}
#if 0
# 2613 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
{ 
# 2614
_Type *__ret; 
# 2615
uint64_t __tmp = (0); 
# 2616
memcpy(&__tmp, &__val, 8); 
# 2617
__tmp = (-__tmp); 
# 2618
__tmp *= sizeof(_Type); 
# 2619
{ } 
# 2642 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_generated.h" 3
memcpy(&__ret, &__tmp, 8); 
# 2643
return __ret; 
# 2644
} 
#endif
# 10 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 10 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) bool 
# 11 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_compare_exchange_cuda(volatile _Type *__ptr, _Type *__expected, const _Type *__desired, bool, int __success_memorder, int __failure_memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__success_memorder;(void)__failure_memorder;(void)__s;
# 29
::exit(___);}
#if 0
# 11
{ 
# 13
const auto __aligned = (uint32_t *)(((intptr_t)__ptr) & (~(sizeof(uint32_t) - (1)))); 
# 14
const auto __offset = ((uint32_t)(((intptr_t)__ptr) & (sizeof(uint32_t) - (1)))) * (8); 
# 15
const auto __mask = (((1 << (sizeof(_Type) * (8))) - 1) << __offset); 
# 17
uint32_t __old = (*__expected) << __offset; 
# 18
uint32_t __old_value; 
# 19
while (1) { 
# 20
__old_value = ((__old & __mask) >> __offset); 
# 21
if (__old_value != (*__expected)) { 
# 22
break; }  
# 23
const uint32_t __attempt = (__old & (~__mask)) | ((*__desired) << __offset); 
# 24
if (__atomic_compare_exchange_cuda(__aligned, &__old, &__attempt, true, __success_memorder, __failure_memorder, __s)) { 
# 25
return true; }  
# 26
}  
# 27
(*__expected) = __old_value; 
# 28
return false; 
# 29
} 
#endif
# 31 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 31 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) void 
# 32 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_exchange_cuda(volatile _Type *__ptr, _Type *__val, _Type *__ret, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__ret;(void)__memorder;(void)__s;
# 38
::exit(___);}
#if 0
# 32
{ 
# 34
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 35
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, __val, true, __memorder, __memorder, __s)) { 
# 36
; }  
# 37
(*__ret) = __expected; 
# 38
} 
#endif
# 40 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 40 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) _Type 
# 41 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_add_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 48
::exit(___);}
#if 0
# 41
{ 
# 43
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 44
_Type __desired = __expected + __val; 
# 45
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s)) { 
# 46
__desired = (__expected + __val); }  
# 47
return __expected; 
# 48
} 
#endif
# 50 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 50 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> _Type 
# 51 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_max_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) { 
# 52
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 53
_Type __desired = (__expected > __val) ? __expected : __val; 
# 55
while ((__desired == __val) && (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s))) 
# 56
{ 
# 57
__desired = ((__expected > __val) ? __expected : __val); 
# 58
}  
# 60
return __expected; 
# 61
} 
# 63
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 63 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> _Type 
# 64 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_min_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) { 
# 65
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 66
_Type __desired = (__expected < __val) ? __expected : __val; 
# 68
while ((__desired != __val) && (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s))) 
# 69
{ 
# 70
__desired = ((__expected < __val) ? __expected : __val); 
# 71
}  
# 73
return __expected; 
# 74
} 
# 76
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 76 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) _Type 
# 77 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_sub_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 84
::exit(___);}
#if 0
# 77
{ 
# 79
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 80
_Type __desired = __expected - __val; 
# 81
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s)) { 
# 82
__desired = (__expected - __val); }  
# 83
return __expected; 
# 84
} 
#endif
# 86 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 86 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) _Type 
# 87 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_and_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 94
::exit(___);}
#if 0
# 87
{ 
# 89
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 90
_Type __desired = __expected & __val; 
# 91
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s)) { 
# 92
__desired = (__expected & __val); }  
# 93
return __expected; 
# 94
} 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) _Type 
# 97 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_xor_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 104
::exit(___);}
#if 0
# 97
{ 
# 99
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 100
_Type __desired = __expected ^ __val; 
# 101
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s)) { 
# 102
__desired = (__expected ^ __val); }  
# 103
return __expected; 
# 104
} 
#endif
# 106 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Delta, class _Scope, typename enable_if< sizeof(_Type) <= (2), int> ::type 
# 106 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
 = 0> __attribute__((unused)) _Type 
# 107 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_fetch_or_cuda(volatile _Type *__ptr, _Delta __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 114
::exit(___);}
#if 0
# 107
{ 
# 109
_Type __expected = __atomic_load_n_cuda(__ptr, 0, __s); 
# 110
_Type __desired = __expected | __val; 
# 111
while (!__atomic_compare_exchange_cuda(__ptr, &__expected, &__desired, true, __memorder, __memorder, __s)) { 
# 112
__desired = (__expected | __val); }  
# 113
return __expected; 
# 114
} 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope> __attribute__((unused)) _Type 
# 117 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_load_n_cuda(const volatile _Type *__ptr, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__memorder;(void)__s;
# 121
::exit(___);}
#if 0
# 117
{ 
# 118
_Type __ret; 
# 119
__atomic_load_cuda(__ptr, &__ret, __memorder, __s); 
# 120
return __ret; 
# 121
} 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope> __attribute__((unused)) void 
# 124 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_store_n_cuda(volatile _Type *__ptr, _Type __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
__atomic_store_cuda(__ptr, &__val, __memorder, __s); 
# 126
} 
#endif
# 128 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope> __attribute__((unused)) bool 
# 129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_compare_exchange_n_cuda(volatile _Type *__ptr, _Type *__expected, _Type __desired, bool __weak, int __success_memorder, int __failure_memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__expected;(void)__desired;(void)__weak;(void)__success_memorder;(void)__failure_memorder;(void)__s;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
return __atomic_compare_exchange_cuda(__ptr, __expected, &__desired, __weak, __success_memorder, __failure_memorder, __s); 
# 131
} 
#endif
# 133 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
template< class _Type, class _Scope> __attribute__((unused)) _Type 
# 134 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__atomic_exchange_n_cuda(volatile _Type *__ptr, _Type __val, int __memorder, _Scope __s) {int volatile ___ = 1;(void)__ptr;(void)__val;(void)__memorder;(void)__s;
# 138
::exit(___);}
#if 0
# 134
{ 
# 135
_Type __ret; 
# 136
__atomic_exchange_cuda(__ptr, &__val, &__ret, __memorder, __s); 
# 137
return __ret; 
# 138
} 
#endif
# 140 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda_derived.h" 3
__attribute__((unused)) static inline void __atomic_signal_fence_cuda(int) {int volatile ___ = 1;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__asm__ volatile("" : : : "memory"); 
# 142
} 
#endif
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
inline void __cxx_atomic_thread_fence(memory_order __order) { 
# 73
{ __host::__cxx_atomic_thread_fence(__order); } 
# 81
} 
# 85 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
inline void __cxx_atomic_signal_fence(memory_order __order) { 
# 86
{ __host::__cxx_atomic_signal_fence(__order); } 
# 94
} 
# 96
template< class _Tp, int _Sco, bool _Ref = false> 
# 97
struct __cxx_atomic_base_heterogeneous_impl { 
# 98
__cxx_atomic_base_heterogeneous_impl() noexcept = default;
# 101 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
constexpr explicit __cxx_atomic_base_heterogeneous_impl(_Tp __value) : __a_value(__value) { 
# 102
} 
# 104
__host::__cxx_atomic_base_impl< _Tp, _Sco>  __a_value; 
# 105
}; 
# 107
template< class _Tp, int _Sco> 
# 108
struct __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, true>  { 
# 109
__cxx_atomic_base_heterogeneous_impl() noexcept = default;
# 111
static_assert((sizeof(_Tp) >= (4)), "atomic_ref does not support 1 or 2 byte types");
# 112
static_assert((sizeof(_Tp) <= (8)), "atomic_ref does not support types larger than 8 bytes");
# 115 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
constexpr explicit __cxx_atomic_base_heterogeneous_impl(_Tp &__value) : __a_value(__value) { 
# 116
} 
# 118
__host::__cxx_atomic_ref_base_impl< _Tp, _Sco>  __a_value; 
# 119
}; 
# 121
template< class _Tp, int _Sco, bool _Ref> constexpr _Tp *
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_get_underlying_device_atomic(__cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a) noexcept { 
# 124
return __cxx_get_underlying_atomic(&(__a->__a_value)); 
# 125
} 
# 127
template< class _Tp, int _Sco, bool _Ref> constexpr volatile _Tp *
# 129 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_get_underlying_device_atomic(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a) noexcept { 
# 130
return __cxx_get_underlying_atomic(&(__a->__a_value)); 
# 131
} 
# 133
template< class _Tp, int _Sco, bool _Ref> constexpr const _Tp *
# 135 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_get_underlying_device_atomic(const __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a) noexcept { 
# 136
return __cxx_get_underlying_atomic(&(__a->__a_value)); 
# 137
} 
# 139
template< class _Tp, int _Sco, bool _Ref> constexpr const volatile _Tp *
# 141 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_get_underlying_device_atomic(const volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a) noexcept { 
# 142
return __cxx_get_underlying_atomic(&(__a->__a_value)); 
# 143
} 
# 145
template< class _Tp, int _Sco> 
# 146
struct __cxx_atomic_base_small_impl { 
# 147
__cxx_atomic_base_small_impl() noexcept = default;
# 149 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
constexpr explicit __cxx_atomic_base_small_impl(_Tp __value) : __a_value(__value) { 
# 150
} 
# 152
__cxx_atomic_base_heterogeneous_impl< uint32_t, _Sco, false>  __a_value; 
# 153
}; 
# 155
template< class _Tp> using __cxx_small_proxy = typename conditional< sizeof(_Tp) == (1), unsigned char, typename conditional< sizeof(_Tp) == (2), unsigned short, void> ::type> ::type; 
# 162
template< class _Tp, int _Sco> using __cxx_atomic_base_impl = typename conditional< sizeof(_Tp) < (4), __cxx_atomic_base_small_impl< _Tp, _Sco> , __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco> > ::type; 
# 168
template< class _Tp, int _Sco> using __cxx_atomic_ref_base_impl = __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, true> ; 
# 171
template< class _Tp, int _Sco, bool _Ref> void 
# 173 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_init(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __val) { 
# 174
alignas(_Tp) auto __tmp = __val; 
# 175
__cxx_atomic_assign_volatile(*__cxx_get_underlying_device_atomic(__a), __tmp); 
# 176
} 
# 178
template< class _Tp, int _Sco, bool _Ref> void 
# 180 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_store(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __val, memory_order __order) { 
# 181
alignas(_Tp) auto __tmp = __val; 
# 182
{ __host::__cxx_atomic_store(&(__a->__a_value), __tmp, __order); } 
# 190
} 
# 192
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 194 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_load(const volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, memory_order __order) { 
# 195
{ return __host::__cxx_atomic_load(&(__a->__a_value), __order); } 
# 203
} 
# 205
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 207 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_exchange(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __val, memory_order __order) { 
# 208
alignas(_Tp) auto __tmp = __val; 
# 209
{ return __host::__cxx_atomic_exchange(&(__a->__a_value), __tmp, __order); } 
# 217
} 
# 219
template< class _Tp, int _Sco, bool _Ref> bool 
# 221 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_compare_exchange_strong(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp *__expected, _Tp __val, memory_order __success, memory_order __failure) { 
# 222
alignas(_Tp) auto __tmp = *__expected; 
# 223
bool __result = false; 
# 224
{ __result = __host::__cxx_atomic_compare_exchange_strong(&(__a->__a_value), &__tmp, __val, __success, __failure); } 
# 233 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
(*__expected) = __tmp; 
# 234
return __result; 
# 235
} 
# 237
template< class _Tp, int _Sco, bool _Ref> bool 
# 239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_compare_exchange_weak(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp *__expected, _Tp __val, memory_order __success, memory_order __failure) { 
# 240
alignas(_Tp) auto __tmp = *__expected; 
# 241
bool __result = false; 
# 242
{ __result = __host::__cxx_atomic_compare_exchange_weak(&(__a->__a_value), &__tmp, __val, __success, __failure); } 
# 251 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
(*__expected) = __tmp; 
# 252
return __result; 
# 253
} 
# 255
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 257 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_add(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __delta, memory_order __order) { 
# 258
{ return __host::__cxx_atomic_fetch_add(&(__a->__a_value), __delta, __order); } 
# 266
} 
# 268
template< class _Tp, int _Sco, bool _Ref> _Tp *
# 270 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_add(volatile __cxx_atomic_base_heterogeneous_impl< _Tp *, _Sco, _Ref>  *__a, ::ptrdiff_t __delta, memory_order __order) { 
# 271
{ return __host::__cxx_atomic_fetch_add(&(__a->__a_value), __delta, __order); } 
# 279
} 
# 281
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 283 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_sub(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __delta, memory_order __order) { 
# 284
{ return __host::__cxx_atomic_fetch_sub(&(__a->__a_value), __delta, __order); } 
# 292
} 
# 294
template< class _Tp, int _Sco, bool _Ref> _Tp *
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_sub(volatile __cxx_atomic_base_heterogeneous_impl< _Tp *, _Sco, _Ref>  *__a, ::ptrdiff_t __delta, memory_order __order) { 
# 297
{ return __host::__cxx_atomic_fetch_sub(&(__a->__a_value), __delta, __order); } 
# 305
} 
# 307
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 309 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_and(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __pattern, memory_order __order) { 
# 310
{ return __host::__cxx_atomic_fetch_and(&(__a->__a_value), __pattern, __order); } 
# 318
} 
# 320
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 322 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_or(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __pattern, memory_order __order) { 
# 323
{ return __host::__cxx_atomic_fetch_or(&(__a->__a_value), __pattern, __order); } 
# 331
} 
# 333
template< class _Tp, int _Sco, bool _Ref> _Tp 
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_xor(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Tp __pattern, memory_order __order) { 
# 336
{ return __host::__cxx_atomic_fetch_xor(&(__a->__a_value), __pattern, __order); } 
# 344
} 
# 346
template< class _Tp, class _Delta, int _Sco, bool _Ref> _Tp 
# 348 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_max(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Delta __val, memory_order __order) { 
# 349
{ return __host::__cxx_atomic_fetch_max(&(__a->__a_value), __val, __order); } 
# 356
} 
# 358
template< class _Tp, class _Delta, int _Sco, bool _Ref> _Tp 
# 360 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_min(volatile __cxx_atomic_base_heterogeneous_impl< _Tp, _Sco, _Ref>  *__a, _Delta __val, memory_order __order) { 
# 361
{ return __host::__cxx_atomic_fetch_min(&(__a->__a_value), __val, __order); } 
# 368
} 
# 370
template< class _Tp> inline uint32_t 
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_small_to_32(_Tp __val) { 
# 372
__cxx_small_proxy< _Tp>  __temp = (0); 
# 373
memcpy(&__temp, &__val, sizeof(_Tp)); 
# 374
return __temp; 
# 375
} 
# 377
template< class _Tp> inline _Tp 
# 378 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_small_from_32(uint32_t __val) { 
# 379
__cxx_small_proxy< _Tp>  __temp = static_cast< __cxx_small_proxy< _Tp> >(__val); 
# 380
_Tp __result; 
# 381
memcpy(&__result, &__temp, sizeof(_Tp)); 
# 382
return __result; 
# 383
} 
# 385
template< class _Tp, int _Sco> inline void 
# 386 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_init(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __val) { 
# 387
__cxx_atomic_init(&(__a->__a_value), __cxx_small_to_32(__val)); 
# 388
} 
# 390
template< class _Tp, int _Sco> inline void 
# 391 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_store(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __val, memory_order __order) { 
# 392
__cxx_atomic_store(&(__a->__a_value), __cxx_small_to_32(__val), __order); 
# 393
} 
# 395
template< class _Tp, int _Sco> inline _Tp 
# 396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_load(const volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, memory_order __order) { 
# 397
return __cxx_small_from_32< _Tp> (__cxx_atomic_load(&(__a->__a_value), __order)); 
# 398
} 
# 400
template< class _Tp, int _Sco> inline _Tp 
# 401 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_exchange(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __value, memory_order __order) { 
# 402
return __cxx_small_from_32< _Tp> (__cxx_atomic_exchange(&(__a->__a_value), __cxx_small_to_32(__value), __order)); 
# 403
} 
# 405 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
inline int __cuda_memcmp(const void *__lhs, const void *__rhs, ::size_t __count) { 
# 406
{ return memcmp(__lhs, __rhs, __count); } 
# 422 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
} 
# 424
template< class _Tp, int _Sco> inline bool 
# 425 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_compare_exchange_weak(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp *__expected, _Tp __value, memory_order __success, memory_order __failure) { 
# 426
auto __temp = __cxx_small_to_32(*__expected); 
# 427
const auto __ret = __cxx_atomic_compare_exchange_weak(&(__a->__a_value), &__temp, __cxx_small_to_32(__value), __success, __failure); 
# 428
const auto __actual = __cxx_small_from_32< _Tp> (__temp); 
# 429
if (!__ret) { 
# 430
if (0 == __cuda_memcmp(&__actual, __expected, sizeof(_Tp))) { 
# 431
__cxx_atomic_fetch_and(&(__a->__a_value), (1U << ((8) * sizeof(_Tp))) - (1), memory_order::memory_order_relaxed); } else { 
# 433
(*__expected) = __actual; }  
# 434
}  
# 435
return __ret; 
# 436
} 
# 438
template< class _Tp, int _Sco> inline bool 
# 439 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_compare_exchange_strong(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp *__expected, _Tp __value, memory_order __success, memory_order __failure) { 
# 440
const auto __old = *__expected; 
# 441
while (1) { 
# 442
if (__cxx_atomic_compare_exchange_weak(__a, __expected, __value, __success, __failure)) { 
# 443
return true; }  
# 444
if (0 != __cuda_memcmp(&__old, __expected, sizeof(_Tp))) { 
# 445
return false; }  
# 446
}  
# 447
} 
# 449
template< class _Tp, int _Sco> inline _Tp 
# 450 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_add(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __delta, memory_order __order) { 
# 451
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_add(&(__a->__a_value), __cxx_small_to_32(__delta), __order)); 
# 452
} 
# 454
template< class _Tp, int _Sco> inline _Tp 
# 455 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_sub(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __delta, memory_order __order) { 
# 456
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_sub(&(__a->__a_value), __cxx_small_to_32(__delta), __order)); 
# 457
} 
# 459
template< class _Tp, int _Sco> inline _Tp 
# 460 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_and(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __pattern, memory_order __order) { 
# 461
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_and(&(__a->__a_value), __cxx_small_to_32(__pattern), __order)); 
# 462
} 
# 464
template< class _Tp, int _Sco> inline _Tp 
# 465 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_or(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __pattern, memory_order __order) { 
# 466
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_or(&(__a->__a_value), __cxx_small_to_32(__pattern), __order)); 
# 467
} 
# 469
template< class _Tp, int _Sco> inline _Tp 
# 470 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_xor(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Tp __pattern, memory_order __order) { 
# 471
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_xor(&(__a->__a_value), __cxx_small_to_32(__pattern), __order)); 
# 472
} 
# 474
template< class _Tp, class _Delta, int _Sco> inline _Tp 
# 475 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_max(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Delta __val, memory_order __order) { 
# 476
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_max(&(__a->__a_value), __cxx_small_to_32(__val), __order)); 
# 477
} 
# 479
template< class _Tp, class _Delta, int _Sco> inline _Tp 
# 480 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/support/atomic/atomic_cuda.h" 3
__cxx_atomic_fetch_min(volatile __cxx_atomic_base_small_impl< _Tp, _Sco>  *__a, _Delta __val, memory_order __order) { 
# 481
return __cxx_small_from_32< _Tp> (__cxx_atomic_fetch_min(&(__a->__a_value), __cxx_small_to_32(__val), __order)); 
# 482
} 
# 697 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
}
# 699
using __detail::__cxx_atomic_base_impl;
# 700
using __detail::__cxx_atomic_ref_base_impl;
# 701
using __detail::__cxx_atomic_thread_fence;
# 702
using __detail::__cxx_atomic_signal_fence;
# 703
using __detail::__cxx_atomic_load;
# 704
using __detail::__cxx_atomic_store;
# 705
using __detail::__cxx_atomic_exchange;
# 706
using __detail::__cxx_atomic_compare_exchange_weak;
# 707
using __detail::__cxx_atomic_compare_exchange_strong;
# 708
using __detail::__cxx_atomic_fetch_add;
# 709
using __detail::__cxx_atomic_fetch_sub;
# 710
using __detail::__cxx_atomic_fetch_or;
# 711
using __detail::__cxx_atomic_fetch_and;
# 712
using __detail::__cxx_atomic_fetch_xor;
# 714
template< class _Tp> _Tp 
# 716 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
kill_dependency(_Tp __y) noexcept 
# 717
{ 
# 718
return __y; 
# 719
} 
# 747 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
template< class _Tp, int _Sco> 
# 748
struct __cxx_atomic_lock_impl { 
# 751 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_lock_impl() noexcept : __a_value(), __a_lock(0) 
# 752
{ } 
# 754 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr explicit __cxx_atomic_lock_impl(_Tp value) noexcept : __a_value(value), __a_lock(0) 
# 755
{ } 
# 757
__cxx_atomic_lock_impl(const __cxx_atomic_lock_impl &) noexcept = default;
# 759
_Tp __a_value; 
# 760 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
mutable __detail::__cxx_atomic_base_impl< int, _Sco>  __a_lock; 
# 762 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void __lock() const volatile { 
# 763
while (1 == __cxx_atomic_exchange(&(__a_lock), (int)true, memory_order_acquire)) { 
# 764 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
; }  
# 765
} 
# 766 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void __lock() const { 
# 767
while (1 == __cxx_atomic_exchange(&(__a_lock), (int)true, memory_order_acquire)) { 
# 768 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
; }  
# 769
} 
# 770 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void __unlock() const volatile { 
# 771
__cxx_atomic_store(&(__a_lock), (int)false, memory_order_release); 
# 772 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 773 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void __unlock() const { 
# 774
__cxx_atomic_store(&(__a_lock), (int)false, memory_order_release); 
# 775 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 776 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp __read() const volatile { 
# 777
__lock(); 
# 778
_Tp __old; 
# 779
__cxx_atomic_assign_volatile(__old, __a_value); 
# 780
__unlock(); 
# 781
return __old; 
# 782
} 
# 783 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp __read() const { 
# 784
__lock(); 
# 785
_Tp __old = __a_value; 
# 786
__unlock(); 
# 787
return __old; 
# 788
} 
# 789
}; 
# 791
template< class _Tp, int _Sco> void 
# 793 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_init(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __val) { 
# 794
__cxx_atomic_assign_volatile((__a->__a_value), __val); 
# 795
} 
# 796
template< class _Tp, int _Sco> void 
# 798 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_init(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __val) { 
# 799
(__a->__a_value) = __val; 
# 800
} 
# 802
template< class _Tp, int _Sco> void 
# 804 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_store(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __val, memory_order) { 
# 805
__a->__lock(); 
# 806
__cxx_atomic_assign_volatile((__a->__a_value), __val); 
# 807
__a->__unlock(); 
# 808
} 
# 809
template< class _Tp, int _Sco> void 
# 811 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_store(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __val, memory_order) { 
# 812
__a->__lock(); 
# 813
(__a->__a_value) = __val; 
# 814
__a->__unlock(); 
# 815
} 
# 817
template< class _Tp, int _Sco> _Tp 
# 819 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_load(const volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, memory_order) { 
# 820
return __a->__read(); 
# 821
} 
# 822
template< class _Tp, int _Sco> _Tp 
# 824 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_load(const __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, memory_order) { 
# 825
return __a->__read(); 
# 826
} 
# 828
template< class _Tp, int _Sco> _Tp 
# 830 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_exchange(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __value, memory_order) { 
# 831
__a->__lock(); 
# 832
_Tp __old; 
# 833
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 834
__cxx_atomic_assign_volatile((__a->__a_value), __value); 
# 835
__a->__unlock(); 
# 836
return __old; 
# 837
} 
# 838
template< class _Tp, int _Sco> _Tp 
# 840 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_exchange(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp __value, memory_order) { 
# 841
__a->__lock(); 
# 842
_Tp __old = ((__a->__a_value)); 
# 843
(__a->__a_value) = __value; 
# 844
__a->__unlock(); 
# 845
return __old; 
# 846
} 
# 848
template< class _Tp, int _Sco> bool 
# 850 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_compare_exchange_strong(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp *
# 851
__expected, _Tp __value, memory_order, memory_order) { 
# 852
__a->__lock(); 
# 853
_Tp __temp; 
# 854
__cxx_atomic_assign_volatile(__temp, (__a->__a_value)); 
# 855
bool __ret = __temp == (*__expected); 
# 856
if (__ret) { 
# 857
__cxx_atomic_assign_volatile((__a->__a_value), __value); } else { 
# 859
__cxx_atomic_assign_volatile(*__expected, (__a->__a_value)); }  
# 860
__a->__unlock(); 
# 861
return __ret; 
# 862
} 
# 863
template< class _Tp, int _Sco> bool 
# 865 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_compare_exchange_strong(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp *
# 866
__expected, _Tp __value, memory_order, memory_order) { 
# 867
__a->__lock(); 
# 868
bool __ret = (__a->__a_value) == (*__expected); 
# 869
if (__ret) { 
# 870
(__a->__a_value) = __value; } else { 
# 872
(*__expected) = (__a->__a_value); }  
# 873
__a->__unlock(); 
# 874
return __ret; 
# 875
} 
# 877
template< class _Tp, int _Sco> bool 
# 879 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_compare_exchange_weak(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp *
# 880
__expected, _Tp __value, memory_order, memory_order) { 
# 881
__a->__lock(); 
# 882
_Tp __temp; 
# 883
__cxx_atomic_assign_volatile(__temp, (__a->__a_value)); 
# 884
bool __ret = __temp == (*__expected); 
# 885
if (__ret) { 
# 886
__cxx_atomic_assign_volatile((__a->__a_value), __value); } else { 
# 888
__cxx_atomic_assign_volatile(*__expected, (__a->__a_value)); }  
# 889
__a->__unlock(); 
# 890
return __ret; 
# 891
} 
# 892
template< class _Tp, int _Sco> bool 
# 894 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_compare_exchange_weak(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp *
# 895
__expected, _Tp __value, memory_order, memory_order) { 
# 896
__a->__lock(); 
# 897
bool __ret = (__a->__a_value) == (*__expected); 
# 898
if (__ret) { 
# 899
(__a->__a_value) = __value; } else { 
# 901
(*__expected) = (__a->__a_value); }  
# 902
__a->__unlock(); 
# 903
return __ret; 
# 904
} 
# 906
template< class _Tp, class _Td, int _Sco> _Tp 
# 908 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_add(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Td 
# 909
__delta, memory_order) { 
# 910
__a->__lock(); 
# 911
_Tp __old; 
# 912
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 913
__cxx_atomic_assign_volatile((__a->__a_value), (_Tp)(__old + __delta)); 
# 914
__a->__unlock(); 
# 915
return __old; 
# 916
} 
# 917
template< class _Tp, class _Td, int _Sco> _Tp 
# 919 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_add(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Td 
# 920
__delta, memory_order) { 
# 921
__a->__lock(); 
# 922
_Tp __old = ((__a->__a_value)); 
# 923
(__a->__a_value) += __delta; 
# 924
__a->__unlock(); 
# 925
return __old; 
# 926
} 
# 928
template< class _Tp, class _Td, int _Sco> _Tp *
# 930 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_add(volatile __cxx_atomic_lock_impl< _Tp *, _Sco>  *__a, ::ptrdiff_t 
# 931
__delta, memory_order) { 
# 932
__a->__lock(); 
# 933
_Tp *__old; 
# 934
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 935
__cxx_atomic_assign_volatile((__a->__a_value), __old + __delta); 
# 936
__a->__unlock(); 
# 937
return __old; 
# 938
} 
# 939
template< class _Tp, class _Td, int _Sco> _Tp *
# 941 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_add(__cxx_atomic_lock_impl< _Tp *, _Sco>  *__a, ::ptrdiff_t 
# 942
__delta, memory_order) { 
# 943
__a->__lock(); 
# 944
_Tp *__old = ((__a->__a_value)); 
# 945
(__a->__a_value) += __delta; 
# 946
__a->__unlock(); 
# 947
return __old; 
# 948
} 
# 950
template< class _Tp, class _Td, int _Sco> _Tp 
# 952 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_sub(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Td 
# 953
__delta, memory_order) { 
# 954
__a->__lock(); 
# 955
_Tp __old; 
# 956
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 957
__cxx_atomic_assign_volatile((__a->__a_value), (_Tp)(__old - __delta)); 
# 958
__a->__unlock(); 
# 959
return __old; 
# 960
} 
# 961
template< class _Tp, class _Td, int _Sco> _Tp 
# 963 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_sub(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Td 
# 964
__delta, memory_order) { 
# 965
__a->__lock(); 
# 966
_Tp __old = ((__a->__a_value)); 
# 967
(__a->__a_value) -= __delta; 
# 968
__a->__unlock(); 
# 969
return __old; 
# 970
} 
# 972
template< class _Tp, int _Sco> _Tp 
# 974 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_and(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 975
__pattern, memory_order) { 
# 976
__a->__lock(); 
# 977
_Tp __old; 
# 978
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 979
__cxx_atomic_assign_volatile((__a->__a_value), (_Tp)(__old & __pattern)); 
# 980
__a->__unlock(); 
# 981
return __old; 
# 982
} 
# 983
template< class _Tp, int _Sco> _Tp 
# 985 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_and(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 986
__pattern, memory_order) { 
# 987
__a->__lock(); 
# 988
_Tp __old = ((__a->__a_value)); 
# 989
(__a->__a_value) &= __pattern; 
# 990
__a->__unlock(); 
# 991
return __old; 
# 992
} 
# 994
template< class _Tp, int _Sco> _Tp 
# 996 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_or(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 997
__pattern, memory_order) { 
# 998
__a->__lock(); 
# 999
_Tp __old; 
# 1000
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 1001
__cxx_atomic_assign_volatile((__a->__a_value), (_Tp)(__old | __pattern)); 
# 1002
__a->__unlock(); 
# 1003
return __old; 
# 1004
} 
# 1005
template< class _Tp, int _Sco> _Tp 
# 1007 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_or(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 1008
__pattern, memory_order) { 
# 1009
__a->__lock(); 
# 1010
_Tp __old = ((__a->__a_value)); 
# 1011
(__a->__a_value) |= __pattern; 
# 1012
__a->__unlock(); 
# 1013
return __old; 
# 1014
} 
# 1016
template< class _Tp, int _Sco> _Tp 
# 1018 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_xor(volatile __cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 1019
__pattern, memory_order) { 
# 1020
__a->__lock(); 
# 1021
_Tp __old; 
# 1022
__cxx_atomic_assign_volatile(__old, (__a->__a_value)); 
# 1023
__cxx_atomic_assign_volatile((__a->__a_value), (_Tp)(__old ^ __pattern)); 
# 1024
__a->__unlock(); 
# 1025
return __old; 
# 1026
} 
# 1027
template< class _Tp, int _Sco> _Tp 
# 1029 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_fetch_xor(__cxx_atomic_lock_impl< _Tp, _Sco>  *__a, _Tp 
# 1030
__pattern, memory_order) { 
# 1031
__a->__lock(); 
# 1032
_Tp __old = ((__a->__a_value)); 
# 1033
(__a->__a_value) ^= __pattern; 
# 1034
__a->__unlock(); 
# 1035
return __old; 
# 1036
} 
# 1040
template< class _Tp> struct __cxx_is_always_lock_free { 
# 1041
enum { __value = sizeof(_Tp) <= (8)
# 1041 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
}; }; 
# 1050 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
template< class _Tp, int _Sco, class 
# 1051
_Base = typename conditional< __cxx_is_always_lock_free< _Tp> ::__value, __detail::__cxx_atomic_base_impl< _Tp, _Sco> , __cxx_atomic_lock_impl< _Tp, _Sco> > ::type> 
# 1058
struct __cxx_atomic_impl : public _Base { 
# 1059
__cxx_atomic_impl() noexcept = default;
# 1060 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr explicit __cxx_atomic_impl(_Tp value) noexcept : _Base(value) 
# 1061
{ } 
# 1062
}; 
# 1065
template< int _Sco, class _Tp = int> __cxx_atomic_impl< _Tp, _Sco>  *
# 1067 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_rebind(_Tp *__inst) { 
# 1068
static_assert((sizeof(__cxx_atomic_impl< _Tp, _Sco> ) == sizeof(_Tp)), "");
# 1069
static_assert((__alignof__(__cxx_atomic_impl< _Tp, _Sco> ) == __alignof__(_Tp)), "");
# 1070
return (__cxx_atomic_impl< _Tp, _Sco>  *)__inst; 
# 1071
} 
# 1073
template< class _Tp, int _Sco> using __cxx_atomic_ref_impl = __detail::__cxx_atomic_ref_base_impl< _Tp, _Sco> ; 
# 1078
template< class _Tp, int _Sco> 
# 1079
struct __cxx_atomic_poll_tester { 
# 1080
const volatile __cxx_atomic_impl< _Tp, _Sco>  *__a; 
# 1081
_Tp __val; 
# 1082
memory_order __order; 
# 1084 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_poll_tester(const volatile __cxx_atomic_impl< _Tp, _Sco>  *__a_, _Tp __val_, memory_order __order_) : __a(__a_), __val(__val_), __order(__order_) 
# 1088
{ } 
# 1090 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool operator()() const { 
# 1091
return !(__cxx_atomic_load(__a, __order) == (__val)); 
# 1092
} 
# 1093
}; 
# 1095
template< class _Tp, int _Sco> void 
# 1096 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_try_wait_slow_fallback(const volatile __cxx_atomic_impl< _Tp, _Sco>  *__a, _Tp __val, memory_order __order) { 
# 1097
__libcpp_thread_poll_with_backoff(__cxx_atomic_poll_tester< _Tp, _Sco> (__a, __val, __order)); 
# 1098
} 
# 1200 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
template< class T> 
# 1201
struct __atomic_wait_and_notify_supported : public true_type { 
# 1207
}; 
# 1209
template< class _Tp, int _Sco> void 
# 1210 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_try_wait_slow(const volatile __cxx_atomic_impl< _Tp, _Sco>  *__a, _Tp __val, memory_order __order) { 
# 1211
static_assert((__atomic_wait_and_notify_supported< _Tp> ::value), "atomic wait operations are unsupported on Pascal");
# 1212
__cxx_atomic_try_wait_slow_fallback(__a, __val, __order); 
# 1213
} 
# 1215
template< class _Tp, int _Sco> void 
# 1216 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_notify_one(const volatile __cxx_atomic_impl< _Tp, _Sco>  *) { 
# 1217
static_assert((__atomic_wait_and_notify_supported< _Tp> ::value), "atomic notify-one operations are unsupported on Pascal");
# 1218
} 
# 1220
template< class _Tp, int _Sco> void 
# 1221 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_notify_all(const volatile __cxx_atomic_impl< _Tp, _Sco>  *) { 
# 1222
static_assert((__atomic_wait_and_notify_supported< _Tp> ::value), "atomic notify-all operations are unsupported on Pascal");
# 1223
} 
# 1227
template< class _Tp, int _Sco> void 
# 1228 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_wait(const volatile __cxx_atomic_impl< _Tp, _Sco>  *__a, const _Tp __val, memory_order __order) { 
# 1229
for (int __i = 0; __i < 16; ++__i) { 
# 1230
if (!__cxx_nonatomic_compare_equal(__cxx_atomic_load(__a, __order), __val)) { 
# 1231
return; }  
# 1232
if (__i < 12) { 
# 1233
__libcpp_thread_yield_processor(); } else { 
# 1235
__libcpp_thread_yield(); }  
# 1236
}  
# 1237
while (__cxx_nonatomic_compare_equal(__cxx_atomic_load(__a, __order), __val)) { 
# 1238
__cxx_atomic_try_wait_slow(__a, __val, __order); }  
# 1239
} 
# 1242
template< class _Tp, int _Sco = 0, bool  = is_integral< _Tp> () && (!is_same< _Tp, bool> ())> 
# 1243
struct __atomic_base { 
# 1244
mutable __cxx_atomic_impl< _Tp, _Sco>  __a_; 
# 1246
__atomic_base() = default;
# 1247
__atomic_base(const __atomic_base &) = delete;
# 1248
__atomic_base(__atomic_base &&) = delete;
# 1250
__atomic_base &operator=(const __atomic_base &) = delete;
# 1251
__atomic_base &operator=(__atomic_base &&) = delete;
# 1254 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr __atomic_base(const _Tp &__a) noexcept : __a_(__a) { } 
# 1257
static constexpr bool is_always_lock_free = (sizeof(__decltype(__a_)) <= (8)); 
# 1261 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool is_lock_free() const volatile noexcept 
# 1262
{ return sizeof(_Tp) <= (8); 
# 1262 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 1264 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool is_lock_free() const noexcept 
# 1265
{ return (static_cast< const volatile __atomic_base *>(this))->is_lock_free(); } 
# 1267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void store(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1269
{ __cxx_atomic_store(&(__a_), __d, __m); } 
# 1271 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void store(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept 
# 1273
{ __cxx_atomic_store(&(__a_), __d, __m); } 
# 1275 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1277
{ return __cxx_atomic_load(&(__a_), __m); } 
# 1279 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp load(memory_order __m = memory_order_seq_cst) const noexcept 
# 1281
{ return __cxx_atomic_load(&(__a_), __m); } 
# 1283 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
operator _Tp() const volatile noexcept { return load(); } 
# 1285 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
operator _Tp() const noexcept { return load(); } 
# 1287 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1288
{ return __cxx_atomic_exchange(&(__a_), __d, __m); } 
# 1290 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept 
# 1291
{ return __cxx_atomic_exchange(&(__a_), __d, __m); } 
# 1293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1294
__s, memory_order __f) volatile noexcept 
# 1296
{ return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __s, __f); } 
# 1298 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1299
__s, memory_order __f) noexcept 
# 1301
{ return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __s, __f); } 
# 1303 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1304
__s, memory_order __f) volatile noexcept 
# 1306
{ return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __s, __f); } 
# 1308 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1309
__s, memory_order __f) noexcept 
# 1311
{ return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __s, __f); } 
# 1313 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1314
__m = memory_order_seq_cst) volatile noexcept { 
# 1315
if ((memory_order_acq_rel) == __m) { 
# 1316
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1317
if ((memory_order_release) == __m) { 
# 1318
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1320
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, __m); }  }  
# 1321
} 
# 1323 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1324
__m = memory_order_seq_cst) noexcept { 
# 1325
if ((memory_order_acq_rel) == __m) { 
# 1326
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1327
if ((memory_order_release) == __m) { 
# 1328
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1330
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, __m); }  }  
# 1331
} 
# 1333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1334
__m = memory_order_seq_cst) volatile noexcept { 
# 1335
if ((memory_order_acq_rel) == __m) { 
# 1336
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1337
if ((memory_order_release) == __m) { 
# 1338
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1340
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, __m); }  }  
# 1341
} 
# 1343 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1344
__m = memory_order_seq_cst) noexcept { 
# 1345
if ((memory_order_acq_rel) == __m) { 
# 1346
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1347
if ((memory_order_release) == __m) { 
# 1348
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1350
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, __m); }  }  
# 1351
} 
# 1353 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1354
{ __cxx_atomic_wait(&(__a_), __v, __m); } 
# 1355 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const noexcept 
# 1356
{ __cxx_atomic_wait(&(__a_), __v, __m); } 
# 1357 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() volatile noexcept 
# 1358
{ __cxx_atomic_notify_one(&(__a_)); } 
# 1359 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() noexcept 
# 1360
{ __cxx_atomic_notify_one(&(__a_)); } 
# 1361 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() volatile noexcept 
# 1362
{ __cxx_atomic_notify_all(&(__a_)); } 
# 1363 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() noexcept 
# 1364
{ __cxx_atomic_notify_all(&(__a_)); } 
# 1365
}; 
# 1367
template< class _Tp, int _Sco = 0, bool  = is_integral< _Tp> () && (!is_same< _Tp, bool> ())> 
# 1368
struct __atomic_base_ref { 
# 1369
mutable __cxx_atomic_ref_impl< _Tp, _Sco>  __a_; 
# 1371
__atomic_base_ref() = default;
# 1372
__atomic_base_ref(const __atomic_base_ref &) = default;
# 1373
__atomic_base_ref(__atomic_base_ref &&) = default;
# 1375
__atomic_base_ref &operator=(const __atomic_base_ref &) = delete;
# 1376
__atomic_base_ref &operator=(__atomic_base_ref &&) = delete;
# 1379 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr __atomic_base_ref(_Tp &__a) noexcept : __a_(__a) { } 
# 1382
static constexpr bool is_always_lock_free = (sizeof(__decltype(__a_)) <= (8)); 
# 1386 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool is_lock_free() const volatile noexcept 
# 1387
{ return sizeof(_Tp) <= (8); 
# 1387 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 1389 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool is_lock_free() const noexcept 
# 1390
{ return (static_cast< const volatile __atomic_base_ref *>(this))->is_lock_free(); } 
# 1392 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void store(_Tp __d, memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1394
{ __cxx_atomic_store(&(__a_), __d, __m); } 
# 1396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void store(_Tp __d, memory_order __m = memory_order_seq_cst) const noexcept 
# 1398
{ __cxx_atomic_store(&(__a_), __d, __m); } 
# 1400 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1402
{ return __cxx_atomic_load(&(__a_), __m); } 
# 1404 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp load(memory_order __m = memory_order_seq_cst) const noexcept 
# 1406
{ return __cxx_atomic_load(&(__a_), __m); } 
# 1408 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
operator _Tp() const volatile noexcept { return load(); } 
# 1410 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
operator _Tp() const noexcept { return load(); } 
# 1412 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1413
{ return __cxx_atomic_exchange(&(__a_), __d, __m); } 
# 1415 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) const noexcept 
# 1416
{ return __cxx_atomic_exchange(&(__a_), __d, __m); } 
# 1418 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1419
__s, memory_order __f) const volatile noexcept 
# 1421
{ return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __s, __f); } 
# 1423 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1424
__s, memory_order __f) const noexcept 
# 1426
{ return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __s, __f); } 
# 1428 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1429
__s, memory_order __f) const volatile noexcept 
# 1431
{ return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __s, __f); } 
# 1433 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1434
__s, memory_order __f) const noexcept 
# 1436
{ return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __s, __f); } 
# 1438 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1439
__m = memory_order_seq_cst) const volatile noexcept { 
# 1440
if ((memory_order_acq_rel) == __m) { 
# 1441
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1442
if ((memory_order_release) == __m) { 
# 1443
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1445
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, __m); }  }  
# 1446
} 
# 1448 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_weak(_Tp &__e, _Tp __d, memory_order 
# 1449
__m = memory_order_seq_cst) const noexcept { 
# 1450
if ((memory_order_acq_rel) == __m) { 
# 1451
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1452
if ((memory_order_release) == __m) { 
# 1453
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1455
return __cxx_atomic_compare_exchange_weak(&(__a_), &__e, __d, __m, __m); }  }  
# 1456
} 
# 1458 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1459
__m = memory_order_seq_cst) const volatile noexcept { 
# 1460
if ((memory_order_acq_rel) == __m) { 
# 1461
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1462
if ((memory_order_release) == __m) { 
# 1463
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1465
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, __m); }  }  
# 1466
} 
# 1468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool compare_exchange_strong(_Tp &__e, _Tp __d, memory_order 
# 1469
__m = memory_order_seq_cst) const noexcept { 
# 1470
if ((memory_order_acq_rel) == __m) { 
# 1471
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_acquire); } else { 
# 1472
if ((memory_order_release) == __m) { 
# 1473
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, memory_order_relaxed); } else { 
# 1475
return __cxx_atomic_compare_exchange_strong(&(__a_), &__e, __d, __m, __m); }  }  
# 1476
} 
# 1478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1479
{ __cxx_atomic_wait(&(__a_), __v, __m); } 
# 1480 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const noexcept 
# 1481
{ __cxx_atomic_wait(&(__a_), __v, __m); } 
# 1482 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() const volatile noexcept 
# 1483
{ __cxx_atomic_notify_one(&(__a_)); } 
# 1484 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() const noexcept 
# 1485
{ __cxx_atomic_notify_one(&(__a_)); } 
# 1486 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() const volatile noexcept 
# 1487
{ __cxx_atomic_notify_all(&(__a_)); } 
# 1488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() const noexcept 
# 1489
{ __cxx_atomic_notify_all(&(__a_)); } 
# 1490
}; 
# 1493
template< class _Tp, int _Sco> 
# 1494
struct __atomic_base< _Tp, _Sco, true>  : public __4::__atomic_base< _Tp, _Sco, false>  { 
# 1495
__atomic_base() = default;
# 1496
__atomic_base(const __4::__atomic_base< _Tp, _Sco, true>  &) = delete;
# 1497
__atomic_base(__4::__atomic_base< _Tp, _Sco, true>  &&) = delete;
# 1499
__4::__atomic_base< _Tp, _Sco, true>  &operator=(const __4::__atomic_base< _Tp, _Sco, true>  &) = delete;
# 1500
__4::__atomic_base< _Tp, _Sco, true>  &operator=(__4::__atomic_base< _Tp, _Sco, true>  &&) = delete;
# 1503 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr __atomic_base(const _Tp &__a) noexcept : __4::__atomic_base< _Tp, _Sco, false> (__a) { } 
# 1506 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_add(_Tp __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1507
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1509 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_add(_Tp __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1510
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1512 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_sub(_Tp __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1513
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1515 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_sub(_Tp __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1516
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1518 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_and(_Tp __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1519
{ return __cxx_atomic_fetch_and(&(this->__a_), __op, __m); } 
# 1521 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_and(_Tp __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1522
{ return __cxx_atomic_fetch_and(&(this->__a_), __op, __m); } 
# 1524 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_or(_Tp __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1525
{ return __cxx_atomic_fetch_or(&(this->__a_), __op, __m); } 
# 1527 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_or(_Tp __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1528
{ return __cxx_atomic_fetch_or(&(this->__a_), __op, __m); } 
# 1530 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_xor(_Tp __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1531
{ return __cxx_atomic_fetch_xor(&(this->__a_), __op, __m); } 
# 1533 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_xor(_Tp __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1534
{ return __cxx_atomic_fetch_xor(&(this->__a_), __op, __m); } 
# 1537 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++(int) volatile noexcept { return fetch_add((_Tp)1); } 
# 1539 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++(int) noexcept { return fetch_add((_Tp)1); } 
# 1541 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--(int) volatile noexcept { return fetch_sub((_Tp)1); } 
# 1543 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--(int) noexcept { return fetch_sub((_Tp)1); } 
# 1545 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++() volatile noexcept { return fetch_add((_Tp)1) + ((_Tp)1); } 
# 1547 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++() noexcept { return fetch_add((_Tp)1) + ((_Tp)1); } 
# 1549 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--() volatile noexcept { return fetch_sub((_Tp)1) - ((_Tp)1); } 
# 1551 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--() noexcept { return fetch_sub((_Tp)1) - ((_Tp)1); } 
# 1553 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator+=(_Tp __op) volatile noexcept { return fetch_add(__op) + __op; } 
# 1555 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator+=(_Tp __op) noexcept { return fetch_add(__op) + __op; } 
# 1557 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator-=(_Tp __op) volatile noexcept { return fetch_sub(__op) - __op; } 
# 1559 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator-=(_Tp __op) noexcept { return fetch_sub(__op) - __op; } 
# 1561 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator&=(_Tp __op) volatile noexcept { return fetch_and(__op) & __op; } 
# 1563 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator&=(_Tp __op) noexcept { return fetch_and(__op) & __op; } 
# 1565 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator|=(_Tp __op) volatile noexcept { return fetch_or(__op) | __op; } 
# 1567 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator|=(_Tp __op) noexcept { return fetch_or(__op) | __op; } 
# 1569 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator^=(_Tp __op) volatile noexcept { return fetch_xor(__op) ^ __op; } 
# 1571 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator^=(_Tp __op) noexcept { return fetch_xor(__op) ^ __op; } 
# 1572
}; 
# 1574
template< class _Tp, int _Sco> 
# 1575
struct __atomic_base_ref< _Tp, _Sco, true>  : public __4::__atomic_base_ref< _Tp, _Sco, false>  { 
# 1576
__atomic_base_ref() = default;
# 1577
__atomic_base_ref(const __4::__atomic_base_ref< _Tp, _Sco, true>  &) = default;
# 1578
__atomic_base_ref(__4::__atomic_base_ref< _Tp, _Sco, true>  &&) = default;
# 1580
__4::__atomic_base_ref< _Tp, _Sco, true>  &operator=(const __4::__atomic_base_ref< _Tp, _Sco, true>  &) = delete;
# 1581
__4::__atomic_base_ref< _Tp, _Sco, true>  &operator=(__4::__atomic_base_ref< _Tp, _Sco, true>  &&) = delete;
# 1584 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr __atomic_base_ref(_Tp &__a) noexcept : __4::__atomic_base_ref< _Tp, _Sco, false> (__a) { } 
# 1587 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_add(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1588
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1590 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_add(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1591
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1593 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_sub(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1594
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1596 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_sub(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1597
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1599 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_and(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1600
{ return __cxx_atomic_fetch_and(&(this->__a_), __op, __m); } 
# 1602 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_and(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1603
{ return __cxx_atomic_fetch_and(&(this->__a_), __op, __m); } 
# 1605 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_or(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1606
{ return __cxx_atomic_fetch_or(&(this->__a_), __op, __m); } 
# 1608 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_or(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1609
{ return __cxx_atomic_fetch_or(&(this->__a_), __op, __m); } 
# 1611 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_xor(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1612
{ return __cxx_atomic_fetch_xor(&(this->__a_), __op, __m); } 
# 1614 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp fetch_xor(_Tp __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1615
{ return __cxx_atomic_fetch_xor(&(this->__a_), __op, __m); } 
# 1618 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++(int) const volatile noexcept { return fetch_add((_Tp)1); } 
# 1620 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++(int) const noexcept { return fetch_add((_Tp)1); } 
# 1622 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--(int) const volatile noexcept { return fetch_sub((_Tp)1); } 
# 1624 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--(int) const noexcept { return fetch_sub((_Tp)1); } 
# 1626 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++() const volatile noexcept { return fetch_add((_Tp)1) + ((_Tp)1); } 
# 1628 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator++() const noexcept { return fetch_add((_Tp)1) + ((_Tp)1); } 
# 1630 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--() const volatile noexcept { return fetch_sub((_Tp)1) - ((_Tp)1); } 
# 1632 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator--() const noexcept { return fetch_sub((_Tp)1) - ((_Tp)1); } 
# 1634 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator+=(_Tp __op) const volatile noexcept { return fetch_add(__op) + __op; } 
# 1636 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator+=(_Tp __op) const noexcept { return fetch_add(__op) + __op; } 
# 1638 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator-=(_Tp __op) const volatile noexcept { return fetch_sub(__op) - __op; } 
# 1640 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator-=(_Tp __op) const noexcept { return fetch_sub(__op) - __op; } 
# 1642 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator&=(_Tp __op) const volatile noexcept { return fetch_and(__op) & __op; } 
# 1644 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator&=(_Tp __op) const noexcept { return fetch_and(__op) & __op; } 
# 1646 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator|=(_Tp __op) const volatile noexcept { return fetch_or(__op) | __op; } 
# 1648 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator|=(_Tp __op) const noexcept { return fetch_or(__op) | __op; } 
# 1650 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator^=(_Tp __op) const volatile noexcept { return fetch_xor(__op) ^ __op; } 
# 1652 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator^=(_Tp __op) const noexcept { return fetch_xor(__op) ^ __op; } 
# 1653
}; 
# 1656
template< class _Tp, int _Sco, bool _Integral> constexpr bool __atomic_base< _Tp, _Sco, _Integral> ::is_always_lock_free; 
# 1659
template< class _Tp, int _Sco, bool _Integral> constexpr bool __atomic_base_ref< _Tp, _Sco, _Integral> ::is_always_lock_free; 
# 1665
template< class _Tp> 
# 1666
struct atomic : public __atomic_base< _Tp>  { 
# 1669
typedef __atomic_base< _Tp>  __base; 
# 1670
using value_type = _Tp; 
# 1674
atomic() noexcept = default;
# 1676 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr atomic(_Tp __d) noexcept : __base(__d) { } 
# 1679 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator=(_Tp __d) volatile noexcept 
# 1680
{ __base::store(__d); return __d; } 
# 1682 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator=(_Tp __d) noexcept 
# 1683
{ __base::store(__d); return __d; } 
# 1684
}; 
# 1688
template< class _Tp> 
# 1689
struct atomic< _Tp *>  : public __atomic_base< _Tp *>  { 
# 1692
typedef __atomic_base< _Tp *>  __base; 
# 1693
using value_type = _Tp *; 
# 1697
atomic() noexcept = default;
# 1699 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr atomic(_Tp *__d) noexcept : __base(__d) { } 
# 1702 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator=(_Tp *__d) volatile noexcept 
# 1703
{ __base::store(__d); return __d; } 
# 1705 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator=(_Tp *__d) noexcept 
# 1706
{ __base::store(__d); return __d; } 
# 1709 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1711
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1713 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1715
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1717 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 1719
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1721 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 1723
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1726 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++(int) volatile noexcept { return fetch_add(1); } 
# 1728 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++(int) noexcept { return fetch_add(1); } 
# 1730 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--(int) volatile noexcept { return fetch_sub(1); } 
# 1732 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--(int) noexcept { return fetch_sub(1); } 
# 1734 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++() volatile noexcept { return fetch_add(1) + 1; } 
# 1736 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++() noexcept { return fetch_add(1) + 1; } 
# 1738 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--() volatile noexcept { return fetch_sub(1) - 1; } 
# 1740 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--() noexcept { return fetch_sub(1) - 1; } 
# 1742 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator+=(::ptrdiff_t __op) volatile noexcept { return fetch_add(__op) + __op; } 
# 1744 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator+=(::ptrdiff_t __op) noexcept { return fetch_add(__op) + __op; } 
# 1746 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator-=(::ptrdiff_t __op) volatile noexcept { return fetch_sub(__op) - __op; } 
# 1748 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator-=(::ptrdiff_t __op) noexcept { return fetch_sub(__op) - __op; } 
# 1749
}; 
# 1753
template< class _Tp> 
# 1754
struct atomic_ref : public __atomic_base_ref< _Tp>  { 
# 1757
typedef __atomic_base_ref< _Tp>  __base; 
# 1758
using value_type = _Tp; 
# 1760
static constexpr ::size_t required_alignment = sizeof(_Tp); 
# 1762
static constexpr bool is_always_lock_free = (sizeof(_Tp) <= (8)); 
# 1765 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
explicit atomic_ref(_Tp &__ref) : __base(__ref) { } 
# 1768 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator=(_Tp __v) const noexcept { __base::store(__v); return __v; } 
# 1770 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp operator=(_Tp __v) const volatile noexcept { __base::store(__v); return __v; } 
# 1771
}; 
# 1775
template< class _Tp> 
# 1776
struct atomic_ref< _Tp *>  : public __atomic_base_ref< _Tp *>  { 
# 1779
typedef __atomic_base_ref< _Tp *>  __base; 
# 1780
using value_type = _Tp *; 
# 1782
static constexpr ::size_t required_alignment = sizeof(_Tp *); 
# 1784
static constexpr bool is_always_lock_free = (sizeof(_Tp *) <= (8)); 
# 1787 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
explicit atomic_ref(_Tp *&__ref) : __base(__ref) { } 
# 1790 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator=(_Tp *__v) const noexcept { __base::store(__v); return __v; } 
# 1792 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator=(_Tp *__v) const volatile noexcept { __base::store(__v); return __v; } 
# 1795 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1797
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1799 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1801
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 1803 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 1805
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1807 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) const noexcept 
# 1809
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 1812 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++(int) const volatile noexcept { return fetch_add(1); } 
# 1814 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++(int) const noexcept { return fetch_add(1); } 
# 1816 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--(int) const volatile noexcept { return fetch_sub(1); } 
# 1818 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--(int) const noexcept { return fetch_sub(1); } 
# 1820 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++() const volatile noexcept { return fetch_add(1) + 1; } 
# 1822 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator++() const noexcept { return fetch_add(1) + 1; } 
# 1824 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--() const volatile noexcept { return fetch_sub(1) - 1; } 
# 1826 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator--() const noexcept { return fetch_sub(1) - 1; } 
# 1828 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator+=(::ptrdiff_t __op) const volatile noexcept { return fetch_add(__op) + __op; } 
# 1830 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator+=(::ptrdiff_t __op) const noexcept { return fetch_add(__op) + __op; } 
# 1832 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator-=(::ptrdiff_t __op) const volatile noexcept { return fetch_sub(__op) - __op; } 
# 1834 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
_Tp *operator-=(::ptrdiff_t __op) const noexcept { return fetch_sub(__op) - __op; } 
# 1835
}; 
# 1839
template< class _Tp> bool 
# 1842 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_is_lock_free(const volatile atomic< _Tp>  *__o) noexcept 
# 1843
{ 
# 1844
return __o->is_lock_free(); 
# 1845
} 
# 1847
template< class _Tp> bool 
# 1850 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_is_lock_free(const atomic< _Tp>  *__o) noexcept 
# 1851
{ 
# 1852
return __o->is_lock_free(); 
# 1853
} 
# 1857
template< class _Tp> void 
# 1860 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_init(volatile atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1861
{ 
# 1862
__cxx_atomic_init(&(__o->__a_), __d); 
# 1863
} 
# 1865
template< class _Tp> void 
# 1868 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_init(atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1869
{ 
# 1870
__cxx_atomic_init(&(__o->__a_), __d); 
# 1871
} 
# 1875
template< class _Tp> void 
# 1878 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_store(volatile atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1879
{ 
# 1880
__o->store(__d); 
# 1881
} 
# 1883
template< class _Tp> void 
# 1886 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_store(atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1887
{ 
# 1888
__o->store(__d); 
# 1889
} 
# 1893
template< class _Tp> void 
# 1896 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_store_explicit(volatile atomic< _Tp>  *__o, _Tp __d, memory_order __m) noexcept 
# 1898
{ 
# 1899
__o->store(__d, __m); 
# 1900
} 
# 1902
template< class _Tp> void 
# 1905 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_store_explicit(atomic< _Tp>  *__o, _Tp __d, memory_order __m) noexcept 
# 1907
{ 
# 1908
__o->store(__d, __m); 
# 1909
} 
# 1913
template< class _Tp> _Tp 
# 1916 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_load(const volatile atomic< _Tp>  *__o) noexcept 
# 1917
{ 
# 1918
return __o->load(); 
# 1919
} 
# 1921
template< class _Tp> _Tp 
# 1924 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_load(const atomic< _Tp>  *__o) noexcept 
# 1925
{ 
# 1926
return __o->load(); 
# 1927
} 
# 1931
template< class _Tp> _Tp 
# 1934 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_load_explicit(const volatile atomic< _Tp>  *__o, memory_order __m) noexcept 
# 1936
{ 
# 1937
return __o->load(__m); 
# 1938
} 
# 1940
template< class _Tp> _Tp 
# 1943 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_load_explicit(const atomic< _Tp>  *__o, memory_order __m) noexcept 
# 1945
{ 
# 1946
return __o->load(__m); 
# 1947
} 
# 1951
template< class _Tp> _Tp 
# 1954 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_exchange(volatile atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1955
{ 
# 1956
return __o->exchange(__d); 
# 1957
} 
# 1959
template< class _Tp> _Tp 
# 1962 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_exchange(atomic< _Tp>  *__o, _Tp __d) noexcept 
# 1963
{ 
# 1964
return __o->exchange(__d); 
# 1965
} 
# 1969
template< class _Tp> _Tp 
# 1972 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_exchange_explicit(volatile atomic< _Tp>  *__o, _Tp __d, memory_order __m) noexcept 
# 1973
{ 
# 1974
return __o->exchange(__d, __m); 
# 1975
} 
# 1977
template< class _Tp> _Tp 
# 1980 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_exchange_explicit(atomic< _Tp>  *__o, _Tp __d, memory_order __m) noexcept 
# 1981
{ 
# 1982
return __o->exchange(__d, __m); 
# 1983
} 
# 1987
template< class _Tp> bool 
# 1990 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_weak(volatile atomic< _Tp>  *__o, _Tp *__e, _Tp __d) noexcept 
# 1991
{ 
# 1992
return __o->compare_exchange_weak(*__e, __d); 
# 1993
} 
# 1995
template< class _Tp> bool 
# 1998 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_weak(atomic< _Tp>  *__o, _Tp *__e, _Tp __d) noexcept 
# 1999
{ 
# 2000
return __o->compare_exchange_weak(*__e, __d); 
# 2001
} 
# 2005
template< class _Tp> bool 
# 2008 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_strong(volatile atomic< _Tp>  *__o, _Tp *__e, _Tp __d) noexcept 
# 2009
{ 
# 2010
return __o->compare_exchange_strong(*__e, __d); 
# 2011
} 
# 2013
template< class _Tp> bool 
# 2016 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_strong(atomic< _Tp>  *__o, _Tp *__e, _Tp __d) noexcept 
# 2017
{ 
# 2018
return __o->compare_exchange_strong(*__e, __d); 
# 2019
} 
# 2023
template< class _Tp> bool 
# 2026 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_weak_explicit(volatile atomic< _Tp>  *__o, _Tp *__e, _Tp 
# 2027
__d, memory_order 
# 2028
__s, memory_order __f) noexcept 
# 2030
{ 
# 2031
return __o->compare_exchange_weak(*__e, __d, __s, __f); 
# 2032
} 
# 2034
template< class _Tp> bool 
# 2037 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_weak_explicit(atomic< _Tp>  *__o, _Tp *__e, _Tp __d, memory_order 
# 2038
__s, memory_order __f) noexcept 
# 2040
{ 
# 2041
return __o->compare_exchange_weak(*__e, __d, __s, __f); 
# 2042
} 
# 2046
template< class _Tp> bool 
# 2049 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_strong_explicit(volatile atomic< _Tp>  *__o, _Tp *
# 2050
__e, _Tp __d, memory_order 
# 2051
__s, memory_order __f) noexcept 
# 2053
{ 
# 2054
return __o->compare_exchange_strong(*__e, __d, __s, __f); 
# 2055
} 
# 2057
template< class _Tp> bool 
# 2060 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_compare_exchange_strong_explicit(atomic< _Tp>  *__o, _Tp *__e, _Tp 
# 2061
__d, memory_order 
# 2062
__s, memory_order __f) noexcept 
# 2064
{ 
# 2065
return __o->compare_exchange_strong(*__e, __d, __s, __f); 
# 2066
} 
# 2070
template< class _Tp> void 
# 2072 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_wait(const volatile atomic< _Tp>  *__o, typename atomic< _Tp> ::value_type 
# 2073
__v) noexcept 
# 2074
{ 
# 2075
return __o->wait(__v); 
# 2076
} 
# 2078
template< class _Tp> void 
# 2080 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_wait(const atomic< _Tp>  *__o, typename atomic< _Tp> ::value_type 
# 2081
__v) noexcept 
# 2082
{ 
# 2083
return __o->wait(__v); 
# 2084
} 
# 2088
template< class _Tp> void 
# 2090 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_wait_explicit(const volatile atomic< _Tp>  *__o, typename atomic< _Tp> ::value_type 
# 2091
__v, memory_order 
# 2092
__m) noexcept 
# 2094
{ 
# 2095
return __o->wait(__v, __m); 
# 2096
} 
# 2098
template< class _Tp> void 
# 2100 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_wait_explicit(const atomic< _Tp>  *__o, typename atomic< _Tp> ::value_type 
# 2101
__v, memory_order 
# 2102
__m) noexcept 
# 2104
{ 
# 2105
return __o->wait(__v, __m); 
# 2106
} 
# 2110
template< class _Tp> void 
# 2112 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_notify_one(volatile atomic< _Tp>  *__o) noexcept 
# 2113
{ 
# 2114
__o->notify_one(); 
# 2115
} 
# 2116
template< class _Tp> void 
# 2118 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_notify_one(atomic< _Tp>  *__o) noexcept 
# 2119
{ 
# 2120
__o->notify_one(); 
# 2121
} 
# 2125
template< class _Tp> void 
# 2127 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_notify_all(volatile atomic< _Tp>  *__o) noexcept 
# 2128
{ 
# 2129
__o->notify_all(); 
# 2130
} 
# 2131
template< class _Tp> void 
# 2133 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_notify_all(atomic< _Tp>  *__o) noexcept 
# 2134
{ 
# 2135
__o->notify_all(); 
# 2136
} 
# 2140
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2147 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add(volatile atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2148
{ 
# 2149
return __o->fetch_add(__op); 
# 2150
} 
# 2152
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2159 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add(atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2160
{ 
# 2161
return __o->fetch_add(__op); 
# 2162
} 
# 2164
template< class _Tp> _Tp *
# 2167 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add(volatile atomic< _Tp *>  *__o, ::ptrdiff_t __op) noexcept 
# 2168
{ 
# 2169
return __o->fetch_add(__op); 
# 2170
} 
# 2172
template< class _Tp> _Tp *
# 2175 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add(atomic< _Tp *>  *__o, ::ptrdiff_t __op) noexcept 
# 2176
{ 
# 2177
return __o->fetch_add(__op); 
# 2178
} 
# 2182
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2189 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add_explicit(volatile atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2190
{ 
# 2191
return __o->fetch_add(__op, __m); 
# 2192
} 
# 2194
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2201 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add_explicit(atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2202
{ 
# 2203
return __o->fetch_add(__op, __m); 
# 2204
} 
# 2206
template< class _Tp> _Tp *
# 2209 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add_explicit(volatile atomic< _Tp *>  *__o, ::ptrdiff_t __op, memory_order 
# 2210
__m) noexcept 
# 2211
{ 
# 2212
return __o->fetch_add(__op, __m); 
# 2213
} 
# 2215
template< class _Tp> _Tp *
# 2218 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_add_explicit(atomic< _Tp *>  *__o, ::ptrdiff_t __op, memory_order __m) noexcept 
# 2219
{ 
# 2220
return __o->fetch_add(__op, __m); 
# 2221
} 
# 2225
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2232 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub(volatile atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2233
{ 
# 2234
return __o->fetch_sub(__op); 
# 2235
} 
# 2237
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2244 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub(atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2245
{ 
# 2246
return __o->fetch_sub(__op); 
# 2247
} 
# 2249
template< class _Tp> _Tp *
# 2252 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub(volatile atomic< _Tp *>  *__o, ::ptrdiff_t __op) noexcept 
# 2253
{ 
# 2254
return __o->fetch_sub(__op); 
# 2255
} 
# 2257
template< class _Tp> _Tp *
# 2260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub(atomic< _Tp *>  *__o, ::ptrdiff_t __op) noexcept 
# 2261
{ 
# 2262
return __o->fetch_sub(__op); 
# 2263
} 
# 2267
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2274 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub_explicit(volatile atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2275
{ 
# 2276
return __o->fetch_sub(__op, __m); 
# 2277
} 
# 2279
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2286 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub_explicit(atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2287
{ 
# 2288
return __o->fetch_sub(__op, __m); 
# 2289
} 
# 2291
template< class _Tp> _Tp *
# 2294 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub_explicit(volatile atomic< _Tp *>  *__o, ::ptrdiff_t __op, memory_order 
# 2295
__m) noexcept 
# 2296
{ 
# 2297
return __o->fetch_sub(__op, __m); 
# 2298
} 
# 2300
template< class _Tp> _Tp *
# 2303 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_sub_explicit(atomic< _Tp *>  *__o, ::ptrdiff_t __op, memory_order __m) noexcept 
# 2304
{ 
# 2305
return __o->fetch_sub(__op, __m); 
# 2306
} 
# 2310
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2317 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_and(volatile atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2318
{ 
# 2319
return __o->fetch_and(__op); 
# 2320
} 
# 2322
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2329 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_and(atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2330
{ 
# 2331
return __o->fetch_and(__op); 
# 2332
} 
# 2336
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2343 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_and_explicit(volatile atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2344
{ 
# 2345
return __o->fetch_and(__op, __m); 
# 2346
} 
# 2348
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2355 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_and_explicit(atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2356
{ 
# 2357
return __o->fetch_and(__op, __m); 
# 2358
} 
# 2362
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2369 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_or(volatile atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2370
{ 
# 2371
return __o->fetch_or(__op); 
# 2372
} 
# 2374
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2381 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_or(atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2382
{ 
# 2383
return __o->fetch_or(__op); 
# 2384
} 
# 2388
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2395 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_or_explicit(volatile atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2396
{ 
# 2397
return __o->fetch_or(__op, __m); 
# 2398
} 
# 2400
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2407 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_or_explicit(atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2408
{ 
# 2409
return __o->fetch_or(__op, __m); 
# 2410
} 
# 2414
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2421 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_xor(volatile atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2422
{ 
# 2423
return __o->fetch_xor(__op); 
# 2424
} 
# 2426
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2433 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_xor(atomic< _Tp>  *__o, _Tp __op) noexcept 
# 2434
{ 
# 2435
return __o->fetch_xor(__op); 
# 2436
} 
# 2440
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2447 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_xor_explicit(volatile atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2448
{ 
# 2449
return __o->fetch_xor(__op, __m); 
# 2450
} 
# 2452
template< class _Tp> typename enable_if< is_integral< _Tp> ::value && (!is_same< _Tp, bool> ::value), _Tp> ::type 
# 2459 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
atomic_fetch_xor_explicit(atomic< _Tp>  *__o, _Tp __op, memory_order __m) noexcept 
# 2460
{ 
# 2461
return __o->fetch_xor(__op, __m); 
# 2462
} 
# 2532 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
typedef 
# 2466 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
struct atomic_flag { 
# 2468 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
__cxx_atomic_impl< int, 0>  __a_; 
# 2471 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool test(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 2472
{ return ((int)true) == __cxx_atomic_load(&(__a_), __m); 
# 2472 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2474 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool test(memory_order __m = memory_order_seq_cst) const noexcept 
# 2475
{ return ((int)true) == __cxx_atomic_load(&(__a_), __m); 
# 2475 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2478 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 2479
{ return __cxx_atomic_exchange(&(__a_), (int)true, __m); 
# 2479 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2481 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
bool test_and_set(memory_order __m = memory_order_seq_cst) noexcept 
# 2482
{ return __cxx_atomic_exchange(&(__a_), (int)true, __m); 
# 2482 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2484 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void clear(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 2485
{ __cxx_atomic_store(&(__a_), (int)false, __m); 
# 2485 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2487 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void clear(memory_order __m = memory_order_seq_cst) noexcept 
# 2488
{ __cxx_atomic_store(&(__a_), (int)false, __m); 
# 2488 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2492 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(bool __v, memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 2493
{ __cxx_atomic_wait(&(__a_), (int)__v, __m); 
# 2493 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2495 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void wait(bool __v, memory_order __m = memory_order_seq_cst) const noexcept 
# 2496
{ __cxx_atomic_wait(&(__a_), (int)__v, __m); 
# 2496 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} 
# 2498 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() volatile noexcept 
# 2499
{ __cxx_atomic_notify_one(&(__a_)); } 
# 2501 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_one() noexcept 
# 2502
{ __cxx_atomic_notify_one(&(__a_)); } 
# 2504 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() volatile noexcept 
# 2505
{ __cxx_atomic_notify_all(&(__a_)); } 
# 2507 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
void notify_all() noexcept 
# 2508
{ __cxx_atomic_notify_all(&(__a_)); } 
# 2514
atomic_flag() noexcept = default;
# 2517 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
constexpr atomic_flag(bool __b) noexcept : __a_(__b) { } 
# 2520
atomic_flag(const atomic_flag &) = delete;
# 2521
atomic_flag &operator=(const atomic_flag &) = delete;
# 2522
atomic_flag &operator=(const atomic_flag &) volatile = delete;
# 2532 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
} atomic_flag; 
# 2537 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test(const volatile atomic_flag *__o) noexcept 
# 2538
{ 
# 2539
return __o->test(); 
# 2540
} 
# 2544 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test(const atomic_flag *__o) noexcept 
# 2545
{ 
# 2546
return __o->test(); 
# 2547
} 
# 2551 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_explicit(const volatile atomic_flag *__o, memory_order __m) noexcept 
# 2552
{ 
# 2553
return __o->test(__m); 
# 2554
} 
# 2558 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_explicit(const atomic_flag *__o, memory_order __m) noexcept 
# 2559
{ 
# 2560
return __o->test(__m); 
# 2561
} 
# 2565 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_and_set(volatile atomic_flag *__o) noexcept 
# 2566
{ 
# 2567
return __o->test_and_set(); 
# 2568
} 
# 2572 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_and_set(atomic_flag *__o) noexcept 
# 2573
{ 
# 2574
return __o->test_and_set(); 
# 2575
} 
# 2579 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *__o, memory_order __m) noexcept 
# 2580
{ 
# 2581
return __o->test_and_set(__m); 
# 2582
} 
# 2586 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline bool atomic_flag_test_and_set_explicit(atomic_flag *__o, memory_order __m) noexcept 
# 2587
{ 
# 2588
return __o->test_and_set(__m); 
# 2589
} 
# 2593 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_clear(volatile atomic_flag *__o) noexcept 
# 2594
{ 
# 2595
__o->clear(); 
# 2596
} 
# 2600 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_clear(atomic_flag *__o) noexcept 
# 2601
{ 
# 2602
__o->clear(); 
# 2603
} 
# 2607 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_clear_explicit(volatile atomic_flag *__o, memory_order __m) noexcept 
# 2608
{ 
# 2609
__o->clear(__m); 
# 2610
} 
# 2614 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_clear_explicit(atomic_flag *__o, memory_order __m) noexcept 
# 2615
{ 
# 2616
__o->clear(__m); 
# 2617
} 
# 2623 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_wait(const volatile atomic_flag *__o, bool __v) noexcept 
# 2624
{ 
# 2625
__o->wait(__v); 
# 2626
} 
# 2630 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_wait(const atomic_flag *__o, bool __v) noexcept 
# 2631
{ 
# 2632
__o->wait(__v); 
# 2633
} 
# 2637 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_wait_explicit(const volatile atomic_flag *__o, bool 
# 2638
__v, memory_order __m) noexcept 
# 2639
{ 
# 2640
__o->wait(__v, __m); 
# 2641
} 
# 2645 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_wait_explicit(const atomic_flag *__o, bool 
# 2646
__v, memory_order __m) noexcept 
# 2647
{ 
# 2648
__o->wait(__v, __m); 
# 2649
} 
# 2653 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_notify_one(volatile atomic_flag *__o) noexcept 
# 2654
{ 
# 2655
__o->notify_one(); 
# 2656
} 
# 2660 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_notify_one(atomic_flag *__o) noexcept 
# 2661
{ 
# 2662
__o->notify_one(); 
# 2663
} 
# 2667 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_notify_all(volatile atomic_flag *__o) noexcept 
# 2668
{ 
# 2669
__o->notify_all(); 
# 2670
} 
# 2674 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_flag_notify_all(atomic_flag *__o) noexcept 
# 2675
{ 
# 2676
__o->notify_all(); 
# 2677
} 
# 2685 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_thread_fence(memory_order __m) noexcept 
# 2686
{ 
# 2687
__cxx_atomic_thread_fence(__m); 
# 2688
} 
# 2692 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic" 3
inline void atomic_signal_fence(memory_order __m) noexcept 
# 2693
{ 
# 2694
__cxx_atomic_signal_fence(__m); 
# 2695
} 
# 2699
typedef atomic< bool>  atomic_bool; 
# 2700
typedef atomic< char>  atomic_char; 
# 2701
typedef atomic< signed char>  atomic_schar; 
# 2702
typedef atomic< unsigned char>  atomic_uchar; 
# 2703
typedef atomic< short>  atomic_short; 
# 2704
typedef atomic< unsigned short>  atomic_ushort; 
# 2705
typedef atomic< int>  atomic_int; 
# 2706
typedef atomic< unsigned>  atomic_uint; 
# 2707
typedef atomic< long>  atomic_long; 
# 2708
typedef atomic< unsigned long>  atomic_ulong; 
# 2709
typedef atomic< long long>  atomic_llong; 
# 2710
typedef atomic< unsigned long long>  atomic_ullong; 
# 2711
typedef atomic< char16_t>  atomic_char16_t; 
# 2712
typedef atomic< char32_t>  atomic_char32_t; 
# 2713
typedef atomic< wchar_t>  atomic_wchar_t; 
# 2715
typedef atomic< signed char>  atomic_int_least8_t; 
# 2716
typedef atomic< unsigned char>  atomic_uint_least8_t; 
# 2717
typedef atomic< short>  atomic_int_least16_t; 
# 2718
typedef atomic< unsigned short>  atomic_uint_least16_t; 
# 2719
typedef atomic< int>  atomic_int_least32_t; 
# 2720
typedef atomic< unsigned>  atomic_uint_least32_t; 
# 2721
typedef atomic< long>  atomic_int_least64_t; 
# 2722
typedef atomic< unsigned long>  atomic_uint_least64_t; 
# 2724
typedef atomic< signed char>  atomic_int_fast8_t; 
# 2725
typedef atomic< unsigned char>  atomic_uint_fast8_t; 
# 2726
typedef atomic< long>  atomic_int_fast16_t; 
# 2727
typedef atomic< unsigned long>  atomic_uint_fast16_t; 
# 2728
typedef atomic< long>  atomic_int_fast32_t; 
# 2729
typedef atomic< unsigned long>  atomic_uint_fast32_t; 
# 2730
typedef atomic< long>  atomic_int_fast64_t; 
# 2731
typedef atomic< unsigned long>  atomic_uint_fast64_t; 
# 2733
typedef atomic< signed char>  atomic_int8_t; 
# 2734
typedef atomic< unsigned char>  atomic_uint8_t; 
# 2735
typedef atomic< short>  atomic_int16_t; 
# 2736
typedef atomic< unsigned short>  atomic_uint16_t; 
# 2737
typedef atomic< int>  atomic_int32_t; 
# 2738
typedef atomic< unsigned>  atomic_uint32_t; 
# 2739
typedef atomic< long>  atomic_int64_t; 
# 2740
typedef atomic< unsigned long>  atomic_uint64_t; 
# 2742
typedef atomic< long>  atomic_intptr_t; 
# 2743
typedef atomic< unsigned long>  atomic_uintptr_t; 
# 2744
typedef atomic< unsigned long>  atomic_size_t; 
# 2745
typedef atomic< long>  atomic_ptrdiff_t; 
# 2746
typedef atomic< long>  atomic_intmax_t; 
# 2747
typedef atomic< unsigned long>  atomic_uintmax_t; 
# 2749
static_assert((2), "This library assumes atomic<int> is lock-free.");
# 2751
typedef atomic< int>  atomic_signed_lock_free; 
# 2752
typedef atomic< unsigned>  atomic_unsigned_lock_free; 
# 2757 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/atomic"
}}}
# 59 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic"
namespace cuda { inline namespace __4 { 
# 61
using std::__4::__detail::thread_scope;
# 62
using std::__4::__detail::thread_scope_system;
# 63
using std::__4::__detail::thread_scope_device;
# 64
using std::__4::__detail::thread_scope_block;
# 65
using std::__4::__detail::thread_scope_thread;
# 67
namespace __detail { 
# 68
using std::__4::__detail::__thread_scope_block_tag;
# 69
using std::__4::__detail::__thread_scope_device_tag;
# 70
using std::__4::__detail::__thread_scope_system_tag;
# 71
}
# 73
using memory_order = std::__4::memory_order; 
# 75
constexpr memory_order memory_order_relaxed = std::memory_order_relaxed; 
# 76
constexpr memory_order memory_order_consume = std::memory_order_consume; 
# 77
constexpr memory_order memory_order_acquire = std::memory_order_acquire; 
# 78
constexpr memory_order memory_order_release = std::memory_order_release; 
# 79
constexpr memory_order memory_order_acq_rel = std::memory_order_acq_rel; 
# 80
constexpr memory_order memory_order_seq_cst = std::memory_order_seq_cst; 
# 84
template< class _Tp, std::__4::__detail::thread_scope _Sco = std::__4::__detail::thread_scope_system> 
# 85
struct atomic : public std::__4::__atomic_base< _Tp, _Sco>  { 
# 88
typedef std::__4::__atomic_base< _Tp, _Sco>  __base; 
# 90
constexpr atomic() noexcept = default;
# 92
constexpr atomic(_Tp __d) noexcept : __base(__d) { } 
# 95
_Tp operator=(_Tp __d) volatile noexcept 
# 96
{ __base::store(__d); return __d; } 
# 98
_Tp operator=(_Tp __d) noexcept 
# 99
{ __base::store(__d); return __d; } 
# 102
_Tp fetch_max(const _Tp &__op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 103
{ 
# 104
return std::__4::__detail::__cxx_atomic_fetch_max(&(this->__a_), __op, __m); 
# 105
} 
# 108
_Tp fetch_min(const _Tp &__op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 109
{ 
# 110
return std::__4::__detail::__cxx_atomic_fetch_min(&(this->__a_), __op, __m); 
# 111
} 
# 112
}; 
# 116
template< class _Tp, std::__4::__detail::thread_scope _Sco> 
# 117
struct atomic< _Tp *, _Sco>  : public std::__4::__atomic_base< _Tp *, _Sco>  { 
# 120
typedef std::__4::__atomic_base< _Tp *, _Sco>  __base; 
# 122
constexpr atomic() noexcept = default;
# 124
constexpr atomic(_Tp *__d) noexcept : __base(__d) { } 
# 127
_Tp *operator=(_Tp *__d) volatile noexcept 
# 128
{ __base::store(__d); return __d; } 
# 130
_Tp *operator=(_Tp *__d) noexcept 
# 131
{ __base::store(__d); return __d; } 
# 134
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 136
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 138
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 139
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 141
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) volatile noexcept 
# 143
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 145
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order __m = memory_order_seq_cst) noexcept 
# 146
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 149
_Tp *operator++(int) volatile noexcept { return fetch_add(1); } 
# 151
_Tp *operator++(int) noexcept { return fetch_add(1); } 
# 153
_Tp *operator--(int) volatile noexcept { return fetch_sub(1); } 
# 155
_Tp *operator--(int) noexcept { return fetch_sub(1); } 
# 157
_Tp *operator++() volatile noexcept { return fetch_add(1) + 1; } 
# 159
_Tp *operator++() noexcept { return fetch_add(1) + 1; } 
# 161
_Tp *operator--() volatile noexcept { return fetch_sub(1) - 1; } 
# 163
_Tp *operator--() noexcept { return fetch_sub(1) - 1; } 
# 165
_Tp *operator+=(::ptrdiff_t __op) volatile noexcept { return fetch_add(__op) + __op; } 
# 167
_Tp *operator+=(::ptrdiff_t __op) noexcept { return fetch_add(__op) + __op; } 
# 169
_Tp *operator-=(::ptrdiff_t __op) volatile noexcept { return fetch_sub(__op) - __op; } 
# 171
_Tp *operator-=(::ptrdiff_t __op) noexcept { return fetch_sub(__op) - __op; } 
# 172
}; 
# 176
template< class _Tp, std::__4::__detail::thread_scope _Sco = std::__4::__detail::thread_scope_system> 
# 177
struct atomic_ref : public std::__4::__atomic_base_ref< _Tp, _Sco>  { 
# 180
typedef std::__4::__atomic_base_ref< _Tp, _Sco>  __base; 
# 183
constexpr atomic_ref(_Tp &__d) noexcept : __base(__d) { } 
# 186
_Tp operator=(_Tp __d) const volatile noexcept 
# 187
{ __base::store(__d); return __d; } 
# 189
_Tp operator=(_Tp __d) const noexcept 
# 190
{ __base::store(__d); return __d; } 
# 193
_Tp fetch_max(const _Tp &__op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 194
{ 
# 195
return std::__4::__detail::__cxx_atomic_fetch_max(&(this->__a_), __op, __m); 
# 196
} 
# 199
_Tp fetch_min(const _Tp &__op, __4::memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 200
{ 
# 201
return std::__4::__detail::__cxx_atomic_fetch_min(&(this->__a_), __op, __m); 
# 202
} 
# 203
}; 
# 207
template< class _Tp, std::__4::__detail::thread_scope _Sco> 
# 208
struct atomic_ref< _Tp *, _Sco>  : public std::__4::__atomic_base_ref< _Tp *, _Sco>  { 
# 211
typedef std::__4::__atomic_base_ref< _Tp *, _Sco>  __base; 
# 214
constexpr atomic_ref(_Tp *&__d) noexcept : __base(__d) { } 
# 217
_Tp *operator=(_Tp *__d) const volatile noexcept 
# 218
{ __base::store(__d); return __d; } 
# 220
_Tp *operator=(_Tp *__d) const noexcept 
# 221
{ __base::store(__d); return __d; } 
# 224
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order 
# 225
__m = memory_order_seq_cst) const volatile noexcept 
# 226
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 228
_Tp *fetch_add(::ptrdiff_t __op, __4::memory_order 
# 229
__m = memory_order_seq_cst) const noexcept 
# 230
{ return __cxx_atomic_fetch_add(&(this->__a_), __op, __m); } 
# 232
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order 
# 233
__m = memory_order_seq_cst) const volatile noexcept 
# 234
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 236
_Tp *fetch_sub(::ptrdiff_t __op, __4::memory_order 
# 237
__m = memory_order_seq_cst) const noexcept 
# 238
{ return __cxx_atomic_fetch_sub(&(this->__a_), __op, __m); } 
# 241
_Tp *operator++(int) const volatile noexcept { return fetch_add(1); } 
# 243
_Tp *operator++(int) const noexcept { return fetch_add(1); } 
# 245
_Tp *operator--(int) const volatile noexcept { return fetch_sub(1); } 
# 247
_Tp *operator--(int) const noexcept { return fetch_sub(1); } 
# 249
_Tp *operator++() const volatile noexcept { return fetch_add(1) + 1; } 
# 251
_Tp *operator++() const noexcept { return fetch_add(1) + 1; } 
# 253
_Tp *operator--() const volatile noexcept { return fetch_sub(1) - 1; } 
# 255
_Tp *operator--() const noexcept { return fetch_sub(1) - 1; } 
# 257
_Tp *operator+=(::ptrdiff_t __op) const volatile noexcept { return fetch_add(__op) + __op; } 
# 259
_Tp *operator+=(::ptrdiff_t __op) const noexcept { return fetch_add(__op) + __op; } 
# 261
_Tp *operator-=(::ptrdiff_t __op) const volatile noexcept { return fetch_sub(__op) - __op; } 
# 263
_Tp *operator-=(::ptrdiff_t __op) const noexcept { return fetch_sub(__op) - __op; } 
# 264
}; 
# 266
inline void atomic_thread_fence(memory_order __m, std::__4::__detail::thread_scope _Scope = thread_scope::thread_scope_system) { 
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic" 3
{ 
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic"
(void)_Scope; std::atomic_thread_fence(__m); 
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic" 3
} 
# 286 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/atomic"
} 
# 288
inline void atomic_signal_fence(memory_order __m) { 
# 289
std::atomic_signal_fence(__m); 
# 290
} 
# 292
}}
# 70 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
namespace cuda { namespace std { inline namespace __4 { 
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
struct __empty_completion { 
# 75 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void operator()() noexcept { } 
# 76
}; 
# 206 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
template< class _CompletionF, int _Sco = 0> 
# 207
class __barrier_base { 
# 209
__atomic_base< ::ptrdiff_t, _Sco>  __expected, __arrived; 
# 210
_CompletionF __completion; 
# 211
__atomic_base< bool, _Sco>  __phase; 
# 213
public: using arrival_token = bool; 
# 215
__barrier_base() = default;
# 218 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
__barrier_base(::ptrdiff_t __expected, _CompletionF __completion = _CompletionF()) : __expected(__expected), __arrived(__expected), __completion(__completion), __phase(false) 
# 220
{ 
# 221
} 
# 223
~__barrier_base() = default;
# 225
__barrier_base(const __barrier_base &) = delete;
# 226
__barrier_base &operator=(const __barrier_base &) = delete;
# 228
[[nodiscard]] arrival_token 
# 229 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
arrive(::ptrdiff_t __update = 1) 
# 230
{ 
# 231
const auto __old_phase = (__phase).load(memory_order_relaxed); 
# 232
const auto __result = (__arrived).fetch_sub(__update, memory_order_acq_rel) - __update; 
# 233
(static_cast< bool>(__result >= 0)) ? (void)0 : __assert_fail("__result >= 0", "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier", 233, __extension__ __PRETTY_FUNCTION__); 
# 234
const auto __new_expected = (__expected).load(memory_order_relaxed); 
# 235
if (0 == __result) { 
# 236
(__completion)(); 
# 237
(__arrived).store(__new_expected, memory_order_relaxed); 
# 238
(__phase).store(!__old_phase, memory_order_release); 
# 239
__cxx_atomic_notify_all(&((__phase).__a_)); 
# 240
}  
# 241
return __old_phase; 
# 242
} 
# 244 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
bool __try_wait(arrival_token __old_phase) const 
# 245
{ 
# 246
return (__phase) != __old_phase; 
# 247
} 
# 250 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void wait(arrival_token &&__old_phase) const 
# 251
{ 
# 252
(__phase).wait(__old_phase, memory_order_acquire); 
# 253
} 
# 255 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void arrive_and_wait() 
# 256
{ 
# 257
wait(arrive()); 
# 258
} 
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void arrive_and_drop() 
# 261
{ 
# 262
(__expected).fetch_sub(1, memory_order_relaxed); 
# 263
(void)arrive(); 
# 264
} 
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
static constexpr ::ptrdiff_t max() noexcept 
# 268
{ 
# 269
return numeric_limits< __time_t> ::max(); 
# 270
} 
# 271
}; 
# 273
template< int _Sco> 
# 274
class __barrier_base< __empty_completion, _Sco>  { 
# 276
static constexpr uint64_t __expected_unit = (1ULL); 
# 277
static constexpr uint64_t __arrived_unit = (1ULL << 32); 
# 278
static constexpr uint64_t __expected_mask = (__arrived_unit - (1)); 
# 279
static constexpr uint64_t __phase_bit = (1ULL << 63); 
# 280
static constexpr uint64_t __arrived_mask = ((__phase_bit - (1)) & (~__expected_mask)); 
# 282
__atomic_base< uint64_t, _Sco>  __phase_arrived_expected; 
# 285
public: using arrival_token = uint64_t; 
# 288
private: struct __poll_tester { 
# 289
const __4::__barrier_base< __empty_completion, _Sco>  *__this; 
# 290
arrival_token __phase; 
# 293 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
__poll_tester(const __4::__barrier_base< __empty_completion, _Sco>  *__this_, arrival_token &&__phase_) : __this(__this_), __phase(cuda::std::__4::move(__phase_)) 
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
{ } 
# 299 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
bool operator()() const 
# 300
{ 
# 301
return (__this)->__try_wait(__phase); 
# 302
} 
# 303
}; 
# 306 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
static constexpr uint64_t __init(::ptrdiff_t __count) noexcept 
# 307
{ 
# 308
return (((1U << 31) - __count) << 32) | ((1U << 31) - __count); 
# 310
} 
# 313
public: __barrier_base() = default;
# 316 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
constexpr __barrier_base(::ptrdiff_t __count, __empty_completion = __empty_completion()) : __phase_arrived_expected((__init)(__count)) 
# 317
{ 
# 318
} 
# 320
~__barrier_base() = default;
# 322
__barrier_base(const __4::__barrier_base< __empty_completion, _Sco>  &) = delete;
# 323
__4::__barrier_base< __empty_completion, _Sco>  &operator=(const __4::__barrier_base< __empty_completion, _Sco>  &) = delete;
# 326 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
bool __try_wait(arrival_token __phase) const 
# 327
{ 
# 328
const uint64_t __current = (__phase_arrived_expected).load(memory_order_acquire); 
# 329
return (__current & __phase_bit) != __phase; 
# 330
} 
# 332
[[nodiscard]] arrival_token 
# 333 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
arrive(::ptrdiff_t __update = 1) 
# 334
{ 
# 335
const auto __inc = __arrived_unit * __update; 
# 336
const auto __old = (__phase_arrived_expected).fetch_add(__inc, memory_order_acq_rel); 
# 337
if ((__old ^ (__old + __inc)) & __phase_bit) { 
# 338
(__phase_arrived_expected).fetch_add((__old & __expected_mask) << 32, memory_order_relaxed); 
# 339
(__phase_arrived_expected).notify_all(); 
# 340
}  
# 341
return __old & __phase_bit; 
# 342
} 
# 344 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void wait(arrival_token &&__phase) const 
# 345
{ 
# 346
__libcpp_thread_poll_with_backoff(__poll_tester(this, cuda::std::__4::move(__phase))); 
# 347 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
} 
# 349 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void arrive_and_wait() 
# 350
{ 
# 351
wait(arrive()); 
# 352
} 
# 354 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
void arrive_and_drop() 
# 355
{ 
# 356
(__phase_arrived_expected).fetch_add(__expected_unit, memory_order_relaxed); 
# 357
(void)arrive(); 
# 358
} 
# 361 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
static constexpr ::ptrdiff_t max() noexcept 
# 362
{ 
# 363
return numeric_limits< int> ::max(); 
# 364
} 
# 365
}; 
# 369
template< class _CompletionF = __empty_completion> 
# 370
class barrier : public __barrier_base< _CompletionF>  { 
# 373 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier" 3
public: constexpr barrier(::ptrdiff_t __count, _CompletionF __completion = _CompletionF()) : __barrier_base< _CompletionF> (__count, __completion) 
# 374
{ 
# 375
} 
# 376
}; 
# 378 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/detail/libcxx/include/barrier"
}}}
# 26 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
namespace cuda { inline namespace __4 { 
# 28
template< ::size_t _Alignment> 
# 29
struct aligned_size_t { 
# 30
static constexpr ::size_t align = _Alignment; 
# 31
::size_t value; 
# 33
explicit aligned_size_t(::size_t __s) : value(__s) { } 
# 35
operator ::size_t() const { return value; } 
# 36
}; 
# 38
template< std::__4::__detail::thread_scope _Sco, class _CompletionF = std::__4::__empty_completion> 
# 39
class barrier : public std::__4::__barrier_base< _CompletionF, _Sco>  { 
# 40
template< std::__4::__detail::thread_scope > friend class pipeline; 
# 43
using std::__4::__barrier_base< _CompletionF, _Sco> ::__try_wait;
# 46
public: barrier() = default;
# 48
barrier(const barrier &) = delete;
# 49
barrier &operator=(const barrier &) = delete;
# 52 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
constexpr barrier(::ptrdiff_t __expected, _CompletionF __completion = _CompletionF()) : std::__4::__barrier_base< _CompletionF, _Sco> (__expected, __completion) 
# 53
{ 
# 54
} 
# 57
friend inline void init(barrier< _Sco, _CompletionF>  *__b, ::ptrdiff_t __expected) { 
# 58
new (__b) barrier(__expected); 
# 59
} 
# 62
friend inline void init(barrier< _Sco, _CompletionF>  *__b, ::ptrdiff_t __expected, _CompletionF __completion) { 
# 63
new (__b) barrier(__expected, __completion); 
# 64
} 
# 65
}; 
# 67
struct __block_scope_barrier_base { }; 
# 69
}}
# 71
namespace cuda { namespace device { inline namespace __4 { 
# 74
__attribute__((unused)) inline uint64_t *barrier_native_handle(cuda::__4::barrier< std::__4::__detail::thread_scope_block>  & b); 
# 76
}}}
# 78
namespace cuda { inline namespace __4 { 
# 81
template<> class barrier< std::__4::__detail::thread_scope_block>  : public __block_scope_barrier_base { 
# 82
using __barrier_base = std::__4::__barrier_base< std::__4::__empty_completion, 2> ; 
# 83
__barrier_base __barrier; 
# 86
friend __attribute__((unused)) inline uint64_t *device::__4::barrier_native_handle(cuda::__4::barrier< cuda::std::__4::__detail::thread_scope_block>  & b); 
# 89
public: using arrival_token = std::__4::__barrier_base< std::__4::__empty_completion, 2> ::arrival_token; 
# 92
private: struct __poll_tester { 
# 93
const __4::barrier< std::__4::__detail::thread_scope_block>  *__this; 
# 94
arrival_token __phase; 
# 97
__poll_tester(const __4::barrier< std::__4::__detail::thread_scope_block>  *__this_, arrival_token &&__phase_) : __this(__this_), __phase(cuda::std::__4::move(__phase_)) 
# 100
{ } 
# 103
bool operator()() const 
# 104
{ 
# 105
return (__this)->__try_wait(__phase); 
# 106
} 
# 107
}; 
# 110
bool __try_wait(arrival_token __phase) const { 
# 126 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
{ 
# 127
return (__barrier).__try_wait(std::move(__phase)); 
# 128
} 
# 129
} 
# 131
template< std::__4::__detail::thread_scope > friend class pipeline; 
# 135
public: barrier() = default;
# 137
barrier(const __4::barrier< std::__4::__detail::thread_scope_block>  &) = delete;
# 138
__4::barrier< std::__4::__detail::thread_scope_block>  &operator=(const __4::barrier< std::__4::__detail::thread_scope_block>  &) = delete;
# 141
barrier(::ptrdiff_t __expected, std::__4::__empty_completion __completion = std::__4::__empty_completion()) { 
# 142
static_assert((!(__builtin_offsetof(__4::barrier< std::__4::__detail::thread_scope_block> , __barrier))), "fatal error: bad barrier layout");
# 143 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
init(this, __expected, __completion); 
# 144
} 
# 147
~barrier() { 
# 155
} 
# 158
friend inline void init(cuda::__4::barrier< cuda::std::__4::__detail::thread_scope_block>  *__b, ::ptrdiff_t __expected, cuda::std::__4::__empty_completion __completion = cuda::std::__4::__empty_completion()) { 
# 168 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
{ 
# 169
new (&(__b->__barrier)) __barrier_base(__expected); 
# 170
} 
# 171
} 
# 173 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier" 3
[[nodiscard]] arrival_token 
# 174 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
arrive(::ptrdiff_t __update = 1) 
# 175
{ 
# 211 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
{ 
# 212
return (__barrier).arrive(__update); 
# 213
} 
# 214
} 
# 217
void wait(arrival_token &&__phase) const 
# 218
{ 
# 219
cuda::std::__4::__libcpp_thread_poll_with_backoff(__poll_tester(this, cuda::std::__4::move(__phase))); 
# 220
} 
# 223
void arrive_and_wait() 
# 224
{ 
# 225
this->wait(this->arrive()); 
# 226
} 
# 229
void arrive_and_drop() 
# 230
{ 
# 239 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
{ 
# 240
(__barrier).arrive_and_drop(); 
# 241
} 
# 242
} 
# 245
static constexpr ::ptrdiff_t max() noexcept 
# 246
{ 
# 247
return (1 << 20) - 1; 
# 248
} 
# 249
}; 
# 251
}}
# 253
namespace cuda { namespace device { inline namespace __4 { 
# 256
__attribute__((unused)) inline uint64_t *barrier_native_handle(cuda::__4::barrier< std::__4::__detail::thread_scope_block>  &b) {int volatile ___ = 1;(void)b;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
return reinterpret_cast< uint64_t *>(&(b.__barrier)); 
# 258
} 
#endif
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
}}}
# 262
namespace cuda { inline namespace __4 { 
# 265
template<> class barrier< std::__4::__detail::thread_scope_thread, std::__4::__empty_completion>  : private __4::barrier< std::__4::__detail::thread_scope_block>  { 
# 266
using __base = __4::barrier< std::__4::__detail::thread_scope_block> ; 
# 269
public: using __4::barrier< std::__4::__detail::thread_scope_block> ::barrier;
# 272
friend inline void init(cuda::__4::barrier< cuda::std::__4::__detail::thread_scope_thread, cuda::std::__4::__empty_completion>  *__b, ::ptrdiff_t __expected, cuda::std::__4::__empty_completion __completion = cuda::std::__4::__empty_completion()) { 
# 273
init(static_cast< __4::barrier< std::__4::__detail::thread_scope_block>  *>(__b), __expected, __completion); 
# 274
} 
# 276
using __4::barrier< std::__4::__detail::thread_scope_block> ::arrive;
# 277
using __4::barrier< std::__4::__detail::thread_scope_block> ::wait;
# 278
using __4::barrier< std::__4::__detail::thread_scope_block> ::arrive_and_wait;
# 279
using __4::barrier< std::__4::__detail::thread_scope_block> ::arrive_and_drop;
# 280
using __4::barrier< std::__4::__detail::thread_scope_block> ::max;
# 281
}; 
# 283
template< ::size_t _Alignment> inline void 
# 285
__strided_memcpy(char *__destination, const char *__source, ::size_t __total_size, ::size_t __rank, ::size_t __stride = 1) { 
# 286
if (__stride == (1)) { 
# 287
memcpy(__destination, __source, __total_size); 
# 288
} else 
# 289
{ 
# 290
for (::size_t __offset = __rank * _Alignment; __offset < __total_size; __offset += (__stride * _Alignment)) { 
# 291
memcpy(__destination + __offset, __source + __offset, _Alignment); 
# 292
}  
# 293
}  
# 294
} 
# 348 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
template< std::__4::__detail::thread_scope _Sco, class _CompF, bool _Is_mbarrier = ((_Sco) >= (thread_scope_block)) && std::template is_same< _CompF, std::__4::__empty_completion> ::value> inline void 
# 350
__memcpy_async_synchronize(barrier< _Sco, _CompF>  &__barrier, bool __is_async) { 
# 364 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
} 
# 366
template< ::size_t _Native_alignment, class _Group, class _Sync> inline void 
# 368
__memcpy_async(const _Group &__group, char *__destination, const char *__source, ::size_t __size, _Sync &__sync) { 
# 369
bool __is_async = false; 
# 396 "/home/poweruser/junda.feng/anaconda3/include/cuda/std/barrier"
{ 
# 397
__strided_memcpy< _Native_alignment> (__destination, __source, __size, __group.thread_rank(), __group.size()); 
# 398
} 
# 400
__memcpy_async_synchronize(__sync, __is_async); 
# 401
} 
# 403
struct __single_thread_group { 
# 405
void sync() const { } 
# 407
constexpr ::size_t size() const { return 1; } 
# 409
constexpr ::size_t thread_rank() const { return 0; } 
# 410
}; 
# 412
template< class _Group, class _Tp, std::__4::__detail::thread_scope _Sco, class _CompF> void 
# 414
memcpy_async(const _Group &__group, _Tp *__destination, const _Tp *__source, ::size_t __size, barrier< _Sco, _CompF>  &__barrier) { 
# 420
static_assert((std::template is_trivially_copyable< _Tp> ::value), "memcpy_async requires a trivially copyable type");
# 423
__memcpy_async< __alignof__(_Tp)> (__group, reinterpret_cast< char *>(__destination), reinterpret_cast< const char *>(__source), __size, __barrier); 
# 424
} 
# 426
template< class _Group, class _Tp, ::size_t _Alignment, std::__4::__detail::thread_scope _Sco, class _CompF, ::size_t _Larger_alignment = ((__alignof__(_Tp) > _Alignment) ? __alignof__(_Tp) : _Alignment)> void 
# 428
memcpy_async(const _Group &__group, _Tp *__destination, const _Tp *__source, aligned_size_t< _Alignment>  __size, barrier< _Sco, _CompF>  &__barrier) { 
# 434
static_assert((std::template is_trivially_copyable< _Tp> ::value), "memcpy_async requires a trivially copyable type");
# 437
__memcpy_async< _Larger_alignment> (__group, reinterpret_cast< char *>(__destination), reinterpret_cast< const char *>(__source), __size, __barrier); 
# 438
} 
# 440
template< class _Tp, class _Size, std::__4::__detail::thread_scope _Sco, class _CompF> void 
# 442
memcpy_async(_Tp *__destination, const _Tp *__source, _Size __size, barrier< _Sco, _CompF>  &__barrier) { 
# 443
memcpy_async(__single_thread_group{}, __destination, __source, __size, __barrier); 
# 444
} 
# 446
template< class _Group, std::__4::__detail::thread_scope _Sco, class _CompF> void 
# 448
memcpy_async(const _Group &__group, void *__destination, const void *__source, ::size_t __size, barrier< _Sco, _CompF>  &__barrier) { 
# 449
__memcpy_async< 1> (__group, reinterpret_cast< char *>(__destination), reinterpret_cast< const char *>(__source), __size, __barrier); 
# 450
} 
# 452
template< class _Group, ::size_t _Alignment, std::__4::__detail::thread_scope _Sco, class _CompF> void 
# 454
memcpy_async(const _Group &__group, void *__destination, const void *__source, aligned_size_t< _Alignment>  __size, barrier< _Sco, _CompF>  &__barrier) { 
# 455
__memcpy_async< _Alignment> (__group, reinterpret_cast< char *>(__destination), reinterpret_cast< const char *>(__source), __size, __barrier); 
# 456
} 
# 458
template< class _Size, std::__4::__detail::thread_scope _Sco, class _CompF> void 
# 460
memcpy_async(void *__destination, const void *__source, _Size __size, barrier< _Sco, _CompF>  &__barrier) { 
# 461
memcpy_async(__single_thread_group{}, __destination, __source, __size, __barrier); 
# 462
} 
# 464
}}
# 186 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/info.h"
namespace cooperative_groups { namespace __v1 { 
# 188
namespace details { 
# 189
namespace templates { 
# 194
template< class Ty, Ty Val> 
# 195
struct integral_constant { 
# 196
static constexpr Ty value = (Val); 
# 197
typedef Ty type; 
# 199
__attribute((always_inline)) constexpr operator type() const noexcept { return value; } 
# 200
__attribute((always_inline)) constexpr type operator()() const noexcept { return value; } 
# 201
}; 
# 203
typedef integral_constant< bool, true>  true_type; 
# 204
typedef integral_constant< bool, false>  false_type; 
# 209
template< class Ty> struct is_lvalue_reference : public false_type { }; 
# 210
template< class Ty> struct is_lvalue_reference< Ty &>  : public true_type { }; 
# 212
template< class Ty> struct remove_reference { typedef Ty type; }; 
# 213
template< class Ty> struct remove_reference< Ty &>  { typedef Ty type; }; 
# 214
template< class Ty> struct remove_reference< Ty &&>  { typedef Ty type; }; 
# 216
template< class Ty> using remove_reference_t = typename remove_reference< Ty> ::type; 
# 219
template< class Ty> struct remove_const { typedef Ty type; }; 
# 220
template< class Ty> struct remove_const< const Ty>  { typedef Ty type; }; 
# 222
template< class Ty> struct remove_volatile { typedef Ty type; }; 
# 223
template< class Ty> struct remove_volatile< volatile Ty>  { typedef Ty type; }; 
# 225
template< class Ty> struct remove_cv { typedef typename remove_volatile< typename remove_const< Ty> ::type> ::type type; }; 
# 227
template< class Ty> using remove_cv_t = typename remove_cv< Ty> ::type; 
# 230
template< class Ty> 
# 231
__attribute((always_inline)) __attribute__((unused)) inline Ty &&forward(remove_reference_t< Ty>  &t) noexcept {int volatile ___ = 1;(void)t;
# 233
::exit(___);}
#if 0
# 231
{ 
# 232
return static_cast< Ty &&>(t); 
# 233
} 
#endif
# 235 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/info.h"
template< class Ty> 
# 236
__attribute((always_inline)) __attribute__((unused)) inline Ty &&forward(remove_reference_t< Ty>  &&t) noexcept {int volatile ___ = 1;(void)t;
# 239
::exit(___);}
#if 0
# 236
{ 
# 237
static_assert((!details::templates::template is_lvalue_reference< Ty> ::value), "Forwarding an rvalue as an lvalue is not allowed.");
# 238
return static_cast< Ty &&>(t); 
# 239
} 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/info.h"
template< class Ty> struct _is_integral : public false_type { }; 
# 245
template<> struct _is_integral< bool>  : public true_type { }; 
# 246
template<> struct _is_integral< char>  : public true_type { }; 
# 247
template<> struct _is_integral< unsigned char>  : public true_type { }; 
# 248
template<> struct _is_integral< short>  : public true_type { }; 
# 249
template<> struct _is_integral< unsigned short>  : public true_type { }; 
# 250
template<> struct _is_integral< int>  : public true_type { }; 
# 251
template<> struct _is_integral< unsigned>  : public true_type { }; 
# 252
template<> struct _is_integral< long>  : public true_type { }; 
# 253
template<> struct _is_integral< long long>  : public true_type { }; 
# 254
template<> struct _is_integral< unsigned long>  : public true_type { }; 
# 255
template<> struct _is_integral< unsigned long long>  : public true_type { }; 
# 258
template< class Ty> 
# 259
struct is_integral : public _is_integral< typename remove_cv< Ty> ::type>  { }; 
# 264
template< class Ty> struct _is_floating_point : public false_type { }; 
# 265
template<> struct _is_floating_point< float>  : public true_type { }; 
# 266
template<> struct _is_floating_point< double>  : public true_type { }; 
# 267
template<> struct _is_floating_point< long double>  : public true_type { }; 
# 274
template< class Ty> 
# 275
struct is_floating_point : public _is_floating_point< typename remove_cv< Ty> ::type>  { }; 
# 277
template< class T> 
# 278
struct is_arithmetic : public integral_constant< bool, is_integral< T> ::value || is_floating_point< T> ::value>  { 
# 281
}; 
# 283
template< class Ty, bool  = details::templates::template is_arithmetic< Ty> ::value> 
# 284
struct _is_unsigned : public integral_constant< bool, ((Ty)0) < ((Ty)(-1))>  { }; 
# 286
template< class Ty> 
# 287
struct _is_unsigned< Ty, false>  : public false_type { }; 
# 289
template< class Ty> 
# 290
struct is_unsigned : public _is_unsigned< typename remove_cv< Ty> ::type>  { }; 
# 295
template< bool B, class Ty = void> 
# 296
struct enable_if { }; 
# 298
template< class Ty> 
# 299
struct enable_if< true, Ty>  { typedef Ty type; }; 
# 301
template< bool Cond, class Ty = void> using enable_if_t = typename enable_if< Cond, Ty> ::type; 
# 304
template< class Ty1, class Ty2> 
# 305
struct is_same : public false_type { }; 
# 307
template< class Ty> 
# 308
struct is_same< Ty, Ty>  : public true_type { }; 
# 310
}
# 311
}
# 312
}using namespace __v1;}
# 54 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
namespace cooperative_groups { namespace __v1 { 
# 56
namespace details { 
# 57
template< unsigned RegId> 
# 58
__attribute((always_inline)) __attribute__((unused)) inline unsigned load_env_reg() {int volatile ___ = 1;
# 62
::exit(___);}
#if 0
# 58
{ 
# 60
__trap(); ; 
# 61
return 0; 
# 62
} 
#endif
# 64 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
template< unsigned HiReg, unsigned LoReg> 
# 65
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long load_env_reg64() {int volatile ___ = 1;
# 70
::exit(___);}
#if 0
# 65
{ 
# 66
unsigned long long registerLo = load_env_reg< LoReg> (); 
# 67
unsigned long long registerHi = load_env_reg< HiReg> (); 
# 69
return (registerHi << 32) | registerLo; 
# 70
} 
#endif
# 81 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
template<> 
# 58 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) 
# 81 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) __attribute__((unused)) inline unsigned load_env_reg< 0U> () {int volatile ___ = 1;::exit(___);}
#if 0
# 81
{ unsigned r; __asm__("mov.u32 %0, %%envreg0;" : "=r" (r) :); return r; } 
#endif
# 82 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
template<> 
# 58 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) 
# 82 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) __attribute__((unused)) inline unsigned load_env_reg< 1U> () {int volatile ___ = 1;::exit(___);}
#if 0
# 82
{ unsigned r; __asm__("mov.u32 %0, %%envreg1;" : "=r" (r) :); return r; } 
#endif
# 83 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
template<> 
# 58 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) 
# 83 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
__attribute((always_inline)) __attribute__((unused)) inline unsigned load_env_reg< 2U> () {int volatile ___ = 1;::exit(___);}
#if 0
# 83
{ unsigned r; __asm__("mov.u32 %0, %%envreg2;" : "=r" (r) :); return r; } 
#endif
# 86 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
struct grid_workspace { 
# 87
unsigned wsSize; 
# 88
unsigned barrier; 
# 89
}; 
# 91
__attribute((always_inline)) __attribute__((unused)) inline grid_workspace *get_grid_workspace() {int volatile ___ = 1;
# 95
::exit(___);}
#if 0
# 91
{ 
# 92
unsigned long long gridWsAbiAddress = load_env_reg64< 1U, 2U> (); 
# 94
return (reinterpret_cast< grid_workspace *>(gridWsAbiAddress)); 
# 95
} 
#endif
# 96 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/driver_abi.h"
}
# 97
}using namespace __v1;}
# 54 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
namespace cooperative_groups { namespace __v1 { 
# 56
namespace details { 
# 59
typedef unsigned barrier_t; 
# 61
__attribute((always_inline)) __attribute__((unused)) static inline bool bar_has_flipped(unsigned old_arrive, unsigned current_arrive) {int volatile ___ = 1;(void)old_arrive;(void)current_arrive;
# 63
::exit(___);}
#if 0
# 61
{ 
# 62
return (((old_arrive ^ current_arrive) & 2147483648U) != (0)); 
# 63
} 
#endif
# 65 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void bar_flush(volatile unsigned *addr) {int volatile ___ = 1;(void)addr;
# 74
::exit(___);}
#if 0
# 65
{ 
# 67
__threadfence(); 
# 74
} 
#endif
# 76 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned atomic_add(volatile unsigned *addr, unsigned val) {int volatile ___ = 1;(void)addr;(void)val;
# 84
::exit(___);}
#if 0
# 76
{ 
# 77
unsigned old; 
# 79
old = atomicAdd((unsigned *)addr, val); 
# 83
return old; 
# 84
} 
#endif
# 86 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_grids(unsigned expected, volatile barrier_t *arrived) {int volatile ___ = 1;(void)expected;(void)arrived;
# 110
::exit(___);}
#if 0
# 86
{ 
# 87
bool cta_master = (((__device_builtin_variable_threadIdx.x) + (__device_builtin_variable_threadIdx.y)) + (__device_builtin_variable_threadIdx.z)) == (0); 
# 88
bool gpu_master = (((__device_builtin_variable_blockIdx.x) + (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_blockIdx.z)) == (0); 
# 90
__syncthreads(); 
# 92
if (cta_master) { 
# 93
unsigned nb = (1); 
# 94
if (gpu_master) { 
# 95
nb = (2147483648U - (expected - (1))); 
# 96
}  
# 98
__threadfence(); 
# 100
unsigned oldArrive; 
# 101
oldArrive = atomic_add(arrived, nb); 
# 103
while (!bar_has_flipped(oldArrive, *arrived)) { ; }  
# 106
bar_flush((unsigned *)arrived); 
# 107
}  
# 109
__syncthreads(); 
# 110
} 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned get_group_mask(unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)thread_rank;(void)num_warps;
# 119
::exit(___);}
#if 0
# 117
{ 
# 118
return (num_warps == (32)) ? ~0 : (((1 << num_warps) - 1) << (num_warps * (thread_rank / (num_warps * (32))))); 
# 119
} 
#endif
# 122 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps(volatile barrier_t *arrived, unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)arrived;(void)thread_rank;(void)num_warps;
# 141
::exit(___);}
#if 0
# 122
{ 
# 123
unsigned warp_id = thread_rank / (32); 
# 124
bool warp_master = (thread_rank % (32)) == (0); 
# 125
unsigned warp_bit = 1 << warp_id; 
# 126
unsigned group_mask = get_group_mask(thread_rank, num_warps); 
# 128
__syncwarp(4294967295U); 
# 130
if (warp_master) { 
# 131
unsigned old = atomicOr((unsigned *)arrived, warp_bit); 
# 132
if (((old | warp_bit) & group_mask) == group_mask) { 
# 133
atomicAnd((unsigned *)arrived, ~group_mask); 
# 134
} else 
# 135
{ 
# 136
while ((*arrived) & warp_bit) { ; }  
# 137
}  
# 138
}  
# 140
__syncwarp(4294967295U); 
# 141
} 
#endif
# 145 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline bool sync_warps_last_releases(volatile barrier_t *arrived, unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)arrived;(void)thread_rank;(void)num_warps;
# 164
::exit(___);}
#if 0
# 145
{ 
# 146
unsigned warp_id = thread_rank / (32); 
# 147
bool warp_master = (thread_rank % (32)) == (0); 
# 148
unsigned warp_bit = 1 << warp_id; 
# 149
unsigned group_mask = get_group_mask(thread_rank, num_warps); 
# 151
__syncwarp(4294967295U); 
# 153
unsigned old = (0); 
# 154
if (warp_master) { 
# 155
old = atomicOr((unsigned *)arrived, warp_bit); 
# 156
}  
# 157
old = __shfl_sync(4294967295U, old, 0); 
# 158
if (((old | warp_bit) & group_mask) == group_mask) { 
# 159
return true; 
# 160
}  
# 161
while ((*arrived) & warp_bit) { ; }  
# 163
return false; 
# 164
} 
#endif
# 167 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps_release(volatile barrier_t *arrived, bool is_master, unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)arrived;(void)is_master;(void)thread_rank;(void)num_warps;
# 172
::exit(___);}
#if 0
# 167
{ 
# 168
unsigned group_mask = get_group_mask(thread_rank, num_warps); 
# 169
if (is_master) { 
# 170
atomicAnd((unsigned *)arrived, ~group_mask); 
# 171
}  
# 172
} 
#endif
# 176 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps_arrive(volatile barrier_t *arrived, unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)arrived;(void)thread_rank;(void)num_warps;
# 188
::exit(___);}
#if 0
# 176
{ 
# 177
unsigned warp_id = thread_rank / (32); 
# 178
bool warp_master = (thread_rank % (32)) == (0); 
# 179
unsigned warp_bit = 1 << warp_id; 
# 180
unsigned group_mask = get_group_mask(thread_rank, num_warps); 
# 182
__syncwarp(4294967295U); 
# 184
if (warp_master) { 
# 185
unsigned old = atomicOr((unsigned *)arrived, warp_bit); 
# 186
}  
# 187
__syncwarp(4294967295U); 
# 188
} 
#endif
# 191 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps_arrive_release(volatile barrier_t *arrived, unsigned thread_rank, unsigned num_warps) {int volatile ___ = 1;(void)arrived;(void)thread_rank;(void)num_warps;
# 206
::exit(___);}
#if 0
# 191
{ 
# 192
unsigned warp_id = thread_rank / (32); 
# 193
bool warp_master = (thread_rank % (32)) == (0); 
# 194
unsigned warp_bit = 1 << warp_id; 
# 195
unsigned group_mask = get_group_mask(thread_rank, num_warps); 
# 197
__syncwarp(4294967295U); 
# 199
if (warp_master) { 
# 200
unsigned old = atomicOr((unsigned *)arrived, warp_bit); 
# 201
if (((old | warp_bit) & group_mask) == group_mask) { 
# 202
atomicAnd((unsigned *)arrived, ~group_mask); 
# 203
}  
# 204
}  
# 205
__syncwarp(4294967295U); 
# 206
} 
#endif
# 209 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps_wait(volatile barrier_t *arrived, unsigned thread_rank) {int volatile ___ = 1;(void)arrived;(void)thread_rank;
# 215
::exit(___);}
#if 0
# 209
{ 
# 210
unsigned warp_id = thread_rank / (32); 
# 211
unsigned warp_bit = 1 << warp_id; 
# 213
while ((*arrived) & warp_bit) { ; }  
# 214
__syncwarp(4294967295U); 
# 215
} 
#endif
# 219 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync_warps_wait_for_release(volatile barrier_t *
# 220
arrived, bool 
# 221
is_master, unsigned 
# 222
thread_rank, unsigned 
# 223
num_warps) {int volatile ___ = 1;(void)arrived;(void)is_master;(void)thread_rank;(void)num_warps;
# 236
::exit(___);}
#if 0
# 223
{ 
# 225
unsigned warp_id = thread_rank / (32); 
# 226
unsigned warp_bit = 1 << warp_id; 
# 228
__syncwarp(4294967295U); 
# 230
if (is_master) { 
# 231
atomicOr((unsigned *)arrived, warp_bit); 
# 232
while ((*arrived) & warp_bit) { ; }  
# 233
}  
# 235
__syncwarp(4294967295U); 
# 236
} 
#endif
# 238 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
enum wait_for_warps_kind { 
# 239
wait_for_all_other_warps, 
# 240
wait_for_specific_warp
# 241
}; 
# 245
template< wait_for_warps_kind Kind> 
# 246
__attribute((always_inline)) __attribute__((unused)) inline void 
# 245
sync_warps_wait_for_warps(unsigned wait_warp_id, volatile barrier_t * arrived, unsigned thread_rank, unsigned num_warps); 
# 250
template<> __attribute((always_inline)) __attribute__((unused)) inline void sync_warps_wait_for_warps< wait_for_all_other_warps> (unsigned 
# 251
wait_warp_id, volatile barrier_t *
# 252
arrived, unsigned 
# 253
thread_rank, unsigned 
# 254
num_warps) {int volatile ___ = 1;(void)wait_warp_id;(void)arrived;(void)thread_rank;(void)num_warps;
# 259
::exit(___);}
#if 0
# 254
{ 
# 256
unsigned wait_mask = get_group_mask(thread_rank, num_warps); 
# 257
wait_mask &= (~(1 << wait_warp_id)); 
# 258
while (((*arrived) & wait_mask) != wait_mask) { ; }  
# 259
} 
#endif
# 262 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
template<> __attribute((always_inline)) __attribute__((unused)) inline void sync_warps_wait_for_warps< wait_for_specific_warp> (unsigned 
# 263
wait_warp_id, volatile barrier_t *
# 264
arrived, unsigned 
# 265
thread_rank, unsigned 
# 266
num_warps) {int volatile ___ = 1;(void)wait_warp_id;(void)arrived;(void)thread_rank;(void)num_warps;
# 270
::exit(___);}
#if 0
# 266
{ 
# 268
unsigned wait_mask = 1 << wait_warp_id; 
# 269
while (((*arrived) & wait_mask) != wait_mask) { ; }  
# 270
} 
#endif
# 272 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/sync.h"
}
# 274
}using namespace __v1;}
# 55 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
namespace cooperative_groups { namespace __v1 { 
# 57
namespace details { 
# 59
template< class Ty> struct _is_float_or_half : public templates::is_floating_point< Ty>  { }; 
# 64
template< class Ty> using is_float_or_half = _is_float_or_half< typename templates::remove_cv< Ty> ::type> ; 
# 68
template< class Ty> using remove_qual = typename templates::remove_cv< typename templates::remove_reference< Ty> ::type> ::type; 
# 71
template< class TyLhs, class TyRhs> using is_op_type_same = templates::is_same< remove_qual< TyLhs> , remove_qual< TyRhs> > ; 
# 76
template< class TyTrunc> 
# 77
__attribute((always_inline)) __attribute__((unused)) static inline TyTrunc vec3_to_linear(dim3 index, dim3 nIndex) {int volatile ___ = 1;(void)index;(void)nIndex;
# 81
::exit(___);}
#if 0
# 77
{ 
# 78
return (((((TyTrunc)(index.z)) * (nIndex.y)) * (nIndex.x)) + (((TyTrunc)(index.y)) * (nIndex.x))) + ((TyTrunc)(index.x)); 
# 81
} 
#endif
# 83 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
namespace cta { 
# 85
__attribute((always_inline)) __attribute__((unused)) static inline void sync() 
# 86
{int volatile ___ = 1;
# 88
::exit(___);}
#if 0
# 86
{ 
# 87
__barrier_sync(0); 
# 88
} 
#endif
# 90 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned num_threads() 
# 91
{int volatile ___ = 1;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return static_cast< unsigned>(((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockDim.y)) * (__device_builtin_variable_blockDim.z)); 
# 93
} 
#endif
# 95 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned thread_rank() 
# 96
{int volatile ___ = 1;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return vec3_to_linear< unsigned> (__device_builtin_variable_threadIdx, __device_builtin_variable_blockDim); 
# 98
} 
#endif
# 100 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 group_index() 
# 101
{int volatile ___ = 1;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return dim3(__device_builtin_variable_blockIdx.x, __device_builtin_variable_blockIdx.y, __device_builtin_variable_blockIdx.z); 
# 103
} 
#endif
# 105 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 thread_index() 
# 106
{int volatile ___ = 1;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return dim3(__device_builtin_variable_threadIdx.x, __device_builtin_variable_threadIdx.y, __device_builtin_variable_threadIdx.z); 
# 108
} 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 dim_threads() 
# 111
{int volatile ___ = 1;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return dim3(__device_builtin_variable_blockDim.x, __device_builtin_variable_blockDim.y, __device_builtin_variable_blockDim.z); 
# 113
} 
#endif
# 116 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned size() 
# 117
{int volatile ___ = 1;
# 119
::exit(___);}
#if 0
# 117
{ 
# 118
return num_threads(); 
# 119
} 
#endif
# 121 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 block_dim() 
# 122
{int volatile ___ = 1;
# 124
::exit(___);}
#if 0
# 122
{ 
# 123
return dim_threads(); 
# 124
} 
#endif
# 126 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}
# 128
class _coalesced_group_data_access { 
# 132
public: 
# 131
template< class TyGroup> 
# 132
__attribute((always_inline)) static unsigned get_mask(const TyGroup &group) {int volatile ___ = 1;(void)group;
# 134
::exit(___);}
#if 0
# 132
{ 
# 133
return group.get_mask(); 
# 134
} 
#endif
# 137 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< template< class , class >  class TyGroup, class Sz, class Parent> 
# 138
__attribute((always_inline)) static unsigned get_mask(const TyGroup< Sz, Parent>  &group) {int volatile ___ = 1;(void)group;
# 140
::exit(___);}
#if 0
# 138
{ 
# 139
return group.build_maks(); 
# 140
} 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyGroup> 
# 143
__attribute((always_inline)) static TyGroup construct_from_mask(unsigned mask) {int volatile ___ = 1;(void)mask;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
return (TyGroup)mask; 
# 145
} 
#endif
# 147 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyGroup> 
# 148
__attribute((always_inline)) static void modify_meta_group(TyGroup &group, unsigned mgRank, unsigned mgSize) {int volatile ___ = 1;(void)group;(void)mgRank;(void)mgSize;
# 151
::exit(___);}
#if 0
# 148
{ 
# 149
(((group._data).coalesced).metaGroupRank) = mgRank; 
# 150
(((group._data).coalesced).metaGroupSize) = mgSize; 
# 151
} 
#endif
# 152 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 154
namespace tile { 
# 155
template< unsigned TileCount, unsigned TileMask, unsigned LaneMask, unsigned ShiftCount> 
# 156
struct _tile_helpers { 
# 157
static constexpr unsigned tileCount = TileCount; 
# 158
static constexpr unsigned tileMask = TileMask; 
# 159
static constexpr unsigned laneMask = LaneMask; 
# 160
static constexpr unsigned shiftCount = ShiftCount; 
# 161
}; 
# 163
template< unsigned > struct tile_helpers; 
# 164
template<> struct tile_helpers< 32U>  : public _tile_helpers< 1U, 4294967295U, 31U, 5U>  { }; 
# 165
template<> struct tile_helpers< 16U>  : public _tile_helpers< 2U, 65535U, 15U, 4U>  { }; 
# 166
template<> struct tile_helpers< 8U>  : public _tile_helpers< 4U, 255U, 7U, 3U>  { }; 
# 167
template<> struct tile_helpers< 4U>  : public _tile_helpers< 8U, 15U, 3U, 2U>  { }; 
# 168
template<> struct tile_helpers< 2U>  : public _tile_helpers< 16U, 3U, 1U, 1U>  { }; 
# 169
template<> struct tile_helpers< 1U>  : public _tile_helpers< 32U, 1U, 0U, 0U>  { }; 
# 172
namespace shfl { 
# 183 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< unsigned count, bool intSized = (count) <= sizeof(int)> struct recursive_sliced_shuffle_helper; 
# 186
template< unsigned count> 
# 187
struct recursive_sliced_shuffle_helper< count, true>  { 
# 188
int val; 
# 190
template< class TyFn> 
# 191
__attribute((always_inline)) void invoke_shuffle(const TyFn &shfl) {int volatile ___ = 1;(void)shfl;
# 193
::exit(___);}
#if 0
# 191
{ 
# 192
(val) = shfl(val); 
# 193
} 
#endif
# 194 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 196
template< unsigned count> 
# 197
struct recursive_sliced_shuffle_helper< count, false>  { 
# 198
int val; 
# 199
shfl::recursive_sliced_shuffle_helper< (count) - sizeof(int)>  next; 
# 201
template< class TyFn> 
# 202
__attribute((always_inline)) void invoke_shuffle(const TyFn &shfl) {int volatile ___ = 1;(void)shfl;
# 205
::exit(___);}
#if 0
# 202
{ 
# 203
(val) = shfl(val); 
# 204
(next).invoke_shuffle(shfl); 
# 205
} 
#endif
# 206 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 207
}
# 209
struct _memory_shuffle { 
# 210
template< class TyElem, class TyShflFn> 
# 211
__attribute((always_inline)) static TyElem _shfl_internal(TyElem elem, const TyShflFn &fn) {int volatile ___ = 1;(void)elem;(void)fn;
# 214
::exit(___);}
#if 0
# 211
{ 
# 212
static_assert((sizeof(TyElem) > (0)), "in memory shuffle is not yet implemented");
# 213
return TyElem{}; 
# 214
} 
#endif
# 216 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 217
__attribute((always_inline)) static TyRet shfl(TyElem &&elem, unsigned gMask, unsigned srcRank, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)srcRank;(void)threads;
# 223
::exit(___);}
#if 0
# 217
{ 
# 218
auto shfl = [=](int val)->int 
{ }
#if 0
# 218
{ 
# 219
return 0; 
# 220
} 
#endif
; 
# 222 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 223
} 
#endif
# 225 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 226
__attribute((always_inline)) static TyRet shfl_down(TyElem &&elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 232
::exit(___);}
#if 0
# 226
{ 
# 227
auto shfl = [=](int val)->int 
{ }
#if 0
# 227
{ 
# 228
return 0; 
# 229
} 
#endif
; 
# 231 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 232
} 
#endif
# 234 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 235
__attribute((always_inline)) static TyRet shfl_up(TyElem &&elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 241
::exit(___);}
#if 0
# 235
{ 
# 236
auto shfl = [=](int val)->int 
{ }
#if 0
# 236
{ 
# 237
return 0; 
# 238
} 
#endif
; 
# 240 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 241
} 
#endif
# 243 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 244
__attribute((always_inline)) static TyRet shfl_xor(TyElem &&elem, unsigned gMask, unsigned lMask, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)lMask;(void)threads;
# 250
::exit(___);}
#if 0
# 244
{ 
# 245
auto shfl = [=](int val)->int 
{ }
#if 0
# 245
{ 
# 246
return 0; 
# 247
} 
#endif
; 
# 249 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 250
} 
#endif
# 251 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 266 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
struct _intrinsic_compat_shuffle { 
# 267
template< unsigned count> using shfl_helper = tile::shfl::recursive_sliced_shuffle_helper< count> ; 
# 270
template< class TyElem, class TyShflFn> 
# 271
__attribute((always_inline)) static TyElem _shfl_internal(TyElem elem, const TyShflFn &fn) {int volatile ___ = 1;(void)elem;(void)fn;
# 278
::exit(___);}
#if 0
# 271
{ 
# 272
static_assert(__is_trivially_copyable(TyElem), "Type is not compatible with device shuffle");
# 273
shfl_helper< sizeof(TyElem)>  helper; 
# 274
memcpy(&helper, &elem, sizeof(TyElem)); 
# 275
helper.invoke_shuffle(fn); 
# 276
memcpy(&elem, &helper, sizeof(TyElem)); 
# 277
return elem; 
# 278
} 
#endif
# 280 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 281
__attribute((always_inline)) static TyRet shfl(TyElem &&elem, unsigned gMask, unsigned srcRank, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)srcRank;(void)threads;
# 287
::exit(___);}
#if 0
# 281
{ 
# 282
auto shfl = [=](int val)->int 
{ }
#if 0
# 282
{ 
# 283
return __shfl_sync(gMask, val, srcRank, threads); 
# 284
} 
#endif
; 
# 286 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 287
} 
#endif
# 289 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 290
__attribute((always_inline)) static TyRet shfl_down(TyElem &&elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 296
::exit(___);}
#if 0
# 290
{ 
# 291
auto shfl = [=](int val)->int 
{ }
#if 0
# 291
{ 
# 292
return __shfl_down_sync(gMask, val, delta, threads); 
# 293
} 
#endif
; 
# 295 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 296
} 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 299
__attribute((always_inline)) static TyRet shfl_up(TyElem &&elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 305
::exit(___);}
#if 0
# 299
{ 
# 300
auto shfl = [=](int val)->int 
{ }
#if 0
# 300
{ 
# 301
return __shfl_up_sync(gMask, val, delta, threads); 
# 302
} 
#endif
; 
# 304 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 305
} 
#endif
# 307 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem, class TyRet = remove_qual< TyElem> > 
# 308
__attribute((always_inline)) static TyRet shfl_xor(TyElem &&elem, unsigned gMask, unsigned lMask, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)lMask;(void)threads;
# 314
::exit(___);}
#if 0
# 308
{ 
# 309
auto shfl = [=](int val)->int 
{ }
#if 0
# 309
{ 
# 310
return __shfl_xor_sync(gMask, val, lMask, threads); 
# 311
} 
#endif
; 
# 313 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return _shfl_internal< TyRet> (templates::forward< TyElem> (elem), shfl); 
# 314
} 
#endif
# 315 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 317
struct _native_shuffle { 
# 318
template< class TyElem> 
# 319
__attribute((always_inline)) static TyElem shfl(TyElem 
# 320
elem, unsigned gMask, unsigned srcRank, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)srcRank;(void)threads;
# 322
::exit(___);}
#if 0
# 320
{ 
# 321
return static_cast< TyElem>(__shfl_sync(gMask, elem, srcRank, threads)); 
# 322
} 
#endif
# 324 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem> 
# 325
__attribute((always_inline)) static TyElem shfl_down(TyElem 
# 326
elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 328
::exit(___);}
#if 0
# 326
{ 
# 327
return static_cast< TyElem>(__shfl_down_sync(gMask, elem, delta, threads)); 
# 328
} 
#endif
# 330 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem> 
# 331
__attribute((always_inline)) static TyElem shfl_up(TyElem 
# 332
elem, unsigned gMask, unsigned delta, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)delta;(void)threads;
# 334
::exit(___);}
#if 0
# 332
{ 
# 333
return static_cast< TyElem>(__shfl_up_sync(gMask, elem, delta, threads)); 
# 334
} 
#endif
# 336 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class TyElem> 
# 337
__attribute((always_inline)) static TyElem shfl_xor(TyElem 
# 338
elem, unsigned gMask, unsigned lMask, unsigned threads) {int volatile ___ = 1;(void)elem;(void)gMask;(void)lMask;(void)threads;
# 340
::exit(___);}
#if 0
# 338
{ 
# 339
return static_cast< TyElem>(__shfl_xor_sync(gMask, elem, lMask, threads)); 
# 340
} 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}; 
# 345
template< class TyElem> using use_native_shuffle = templates::integral_constant< bool, templates::is_integral< remove_qual< TyElem> > ::value || _is_float_or_half< typename templates::remove_cv< remove_qual< TyElem> > ::type> ::value> ; 
# 354
constexpr unsigned long long _MemoryShuffleCutoff = (32); 
# 356
template< class TyElem, bool 
# 357
IsNative = use_native_shuffle< TyElem> ::value, bool 
# 358
InMem = ((sizeof(TyElem)) > _MemoryShuffleCutoff)> struct shuffle_dispatch; 
# 361
template< class TyElem> 
# 362
struct shuffle_dispatch< TyElem, true, false>  : public _native_shuffle { }; 
# 364
template< class TyElem> 
# 365
struct shuffle_dispatch< TyElem, false, false>  : public _intrinsic_compat_shuffle { }; 
# 367
template< class TyElem> 
# 368
struct shuffle_dispatch< TyElem, false, true>  : public _memory_shuffle { }; 
# 371
}
# 373
namespace multi_grid { 
# 374
struct multi_grid_functions; 
# 375
}
# 377
namespace grid { 
# 378
__attribute((always_inline)) __attribute__((unused)) static inline void sync(unsigned *bar) {int volatile ___ = 1;(void)bar;
# 382
::exit(___);}
#if 0
# 378
{ 
# 379
unsigned expected = ((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_gridDim.z); 
# 381
details::sync_grids(expected, bar); 
# 382
} 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long num_blocks() 
# 385
{int volatile ___ = 1;
# 389
::exit(___);}
#if 0
# 385
{ 
# 388
return ((unsigned long long)(__device_builtin_variable_gridDim.x)) * ((__device_builtin_variable_gridDim.y) * (__device_builtin_variable_gridDim.z)); 
# 389
} 
#endif
# 391 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long num_threads() 
# 392
{int volatile ___ = 1;
# 394
::exit(___);}
#if 0
# 392
{ 
# 393
return num_blocks() * (cta::num_threads()); 
# 394
} 
#endif
# 396 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long block_rank() 
# 397
{int volatile ___ = 1;
# 399
::exit(___);}
#if 0
# 397
{ 
# 398
return vec3_to_linear< unsigned long long> (__device_builtin_variable_blockIdx, __device_builtin_variable_gridDim); 
# 399
} 
#endif
# 401 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long thread_rank() 
# 402
{int volatile ___ = 1;
# 404
::exit(___);}
#if 0
# 402
{ 
# 403
return (block_rank() * (cta::num_threads())) + (cta::thread_rank()); 
# 404
} 
#endif
# 406 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 dim_blocks() 
# 407
{int volatile ___ = 1;
# 409
::exit(___);}
#if 0
# 407
{ 
# 408
return dim3(__device_builtin_variable_gridDim.x, __device_builtin_variable_gridDim.y, __device_builtin_variable_gridDim.z); 
# 409
} 
#endif
# 411 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 block_index() 
# 412
{int volatile ___ = 1;
# 414
::exit(___);}
#if 0
# 412
{ 
# 413
return dim3(__device_builtin_variable_blockIdx.x, __device_builtin_variable_blockIdx.y, __device_builtin_variable_blockIdx.z); 
# 414
} 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long size() 
# 418
{int volatile ___ = 1;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
return num_threads(); 
# 420
} 
#endif
# 422 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline dim3 grid_dim() 
# 423
{int volatile ___ = 1;
# 425
::exit(___);}
#if 0
# 423
{ 
# 424
return dim_blocks(); 
# 425
} 
#endif
# 426 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}
# 431
namespace multi_grid { 
# 432
__attribute((always_inline)) __attribute__((unused)) static inline unsigned long long get_intrinsic_handle() 
# 433
{int volatile ___ = 1;
# 435
::exit(___);}
#if 0
# 433
{ 
# 434
return cudaCGGetIntrinsicHandle(cudaCGScopeMultiGrid); 
# 435
} 
#endif
# 437 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline void sync(const unsigned long long handle) 
# 438
{int volatile ___ = 1;(void)handle;
# 440
::exit(___);}
#if 0
# 438
{ 
# 439
cudaError_t err = cudaCGSynchronize(handle, 0); 
# 440
} 
#endif
# 442 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned size(const unsigned long long handle) 
# 443
{int volatile ___ = 1;(void)handle;
# 447 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
::exit(___);}
#if 0
# 443 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
{ 
# 444
unsigned numThreads = (0); 
# 445
cudaCGGetSize(&numThreads, __null, handle); 
# 446 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return numThreads; 
# 447
} 
#endif
# 449 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned thread_rank(const unsigned long long handle) 
# 450
{int volatile ___ = 1;(void)handle;
# 454 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
::exit(___);}
#if 0
# 450 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
{ 
# 451
unsigned threadRank = (0); 
# 452
cudaCGGetRank(&threadRank, __null, handle); 
# 453 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return threadRank; 
# 454
} 
#endif
# 456 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned grid_rank(const unsigned long long handle) 
# 457
{int volatile ___ = 1;(void)handle;
# 461 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
::exit(___);}
#if 0
# 457 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
{ 
# 458
unsigned gridRank = (0); 
# 459
cudaCGGetRank(__null, &gridRank, handle); 
# 460 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return gridRank; 
# 461
} 
#endif
# 463 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned num_grids(const unsigned long long handle) 
# 464
{int volatile ___ = 1;(void)handle;
# 468 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
::exit(___);}
#if 0
# 464 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
{ 
# 465
unsigned numGrids = (0); 
# 466
cudaCGGetSize(__null, &numGrids, handle); 
# 467 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
return numGrids; 
# 468
} 
#endif
# 471 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
struct multi_grid_functions { 
# 472
__decltype(multi_grid::get_intrinsic_handle) *get_intrinsic_handle; 
# 473
__decltype(multi_grid::sync) *sync; 
# 474
__decltype(multi_grid::size) *size; 
# 475
__decltype(multi_grid::thread_rank) *thread_rank; 
# 476
__decltype(multi_grid::grid_rank) *grid_rank; 
# 477
__decltype(multi_grid::num_grids) *num_grids; 
# 478
}; 
# 480
template< class  = void> 
# 481
__attribute((always_inline)) __attribute__((unused)) static inline const multi_grid_functions *load_grid_intrinsics() {int volatile ___ = 1;
# 492
::exit(___);}
#if 0
# 481
{ 
# 482
static const multi_grid_functions mgf{(&multi_grid::get_intrinsic_handle), (&multi_grid::sync), (&multi_grid::size), (&multi_grid::thread_rank), (&multi_grid::grid_rank), (&multi_grid::num_grids)}; 
# 491
return &mgf; 
# 492
} 
#endif
# 494 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}
# 604 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned laneid() 
# 605
{int volatile ___ = 1;
# 609
::exit(___);}
#if 0
# 605
{ 
# 606
unsigned laneid; 
# 607
__asm__("mov.u32 %0, %%laneid;" : "=r" (laneid) :); 
# 608
return laneid; 
# 609
} 
#endif
# 611 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned lanemask32_eq() 
# 612
{int volatile ___ = 1;
# 616
::exit(___);}
#if 0
# 612
{ 
# 613
unsigned lanemask32_eq; 
# 614
__asm__("mov.u32 %0, %%lanemask_eq;" : "=r" (lanemask32_eq) :); 
# 615
return lanemask32_eq; 
# 616
} 
#endif
# 618 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned lanemask32_lt() 
# 619
{int volatile ___ = 1;
# 623
::exit(___);}
#if 0
# 619
{ 
# 620
unsigned lanemask32_lt; 
# 621
__asm__("mov.u32 %0, %%lanemask_lt;" : "=r" (lanemask32_lt) :); 
# 622
return lanemask32_lt; 
# 623
} 
#endif
# 625 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
__attribute((always_inline)) __attribute__((unused)) static inline void abort() 
# 626
{int volatile ___ = 1;
# 628
::exit(___);}
#if 0
# 626
{ 
# 627
__trap(); ; 
# 628
} 
#endif
# 630 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
template< class Ty> 
# 631
__attribute((always_inline)) __attribute__((unused)) inline void assert_if_not_arithmetic() {int volatile ___ = 1;
# 639
::exit(___);}
#if 0
# 631
{ 
# 633
static_assert((cooperative_groups::details::templates::template is_integral< Ty> ::value || details::is_float_or_half< Ty> ::value), "Error: Ty is neither integer or float");
# 639
} 
#endif
# 714 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/helpers.h"
}
# 716
}using namespace __v1;}
# 66 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
namespace cooperative_groups { namespace __v1 { 
# 68
namespace details { 
# 69
constexpr unsigned coalesced_group_id = (1); 
# 70
constexpr unsigned multi_grid_group_id = (2); 
# 71
constexpr unsigned grid_group_id = (3); 
# 72
constexpr unsigned thread_block_id = (4); 
# 73
constexpr unsigned multi_tile_group_id = (5); 
# 77
}
# 87 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
class thread_group { 
# 90
protected: struct group_data { 
# 91
unsigned _unused:1; 
# 92
unsigned type:7; unsigned:0; 
# 93
}; 
# 95
struct gg_data { 
# 96
details::grid_workspace *gridWs; 
# 97
}; 
# 108 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
struct tg_data { 
# 109
unsigned is_tiled:1; 
# 110
unsigned type:7; 
# 111
unsigned size:24; 
# 113
unsigned metaGroupSize:16; 
# 114
unsigned metaGroupRank:16; 
# 116
unsigned mask; 
# 118
unsigned _res; 
# 119
}; 
# 121
__attribute((always_inline)) friend __attribute__((unused)) inline thread_group tiled_partition(const thread_group & parent, unsigned tilesz); 
# 122
friend class thread_block; 
# 124
union __attribute((aligned(8))) { 
# 125
group_data group; 
# 126
tg_data coalesced; 
# 127
gg_data grid; 
# 131
} _data; 
# 133
__attribute((always_inline)) inline thread_group operator=(const thread_group & src); 
# 135
__attribute((always_inline)) thread_group(unsigned type) {int *volatile ___ = 0;(void)type;
# 138
::free(___);}
#if 0
# 135
{ 
# 136
(((_data).group).type) = type; 
# 137
(((_data).group)._unused) = (false); 
# 138
} 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
static_assert((sizeof(tg_data) <= (16)), "Failed size check");
# 142
static_assert((sizeof(gg_data) <= (16)), "Failed size check");
# 151
public: __attribute((always_inline)) inline unsigned long long size() const; 
# 152
__attribute((always_inline)) inline unsigned long long num_threads() const; 
# 153
__attribute((always_inline)) inline unsigned long long thread_rank() const; 
# 154
__attribute((always_inline)) inline void sync() const; 
# 155
__attribute((always_inline)) unsigned get_type() const {int volatile ___ = 1;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return ((_data).group).type; 
# 157
} 
#endif
# 159 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 161
template< unsigned TyId> 
# 162
struct thread_group_base : public thread_group { 
# 163
__attribute((always_inline)) thread_group_base() : thread_group(TyId) {int *volatile ___ = 0;::free(___);}
#if 0
# 163
{ } 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
static constexpr unsigned id = TyId; 
# 165
}; 
# 239 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
class multi_grid_group { 
# 242
unsigned long long _handle; 
# 243
unsigned _size; 
# 244
unsigned _rank; 
# 246
__attribute((always_inline)) friend __attribute__((unused)) inline multi_grid_group this_multi_grid(); 
# 248
__attribute((always_inline)) multi_grid_group() {int *volatile ___ = 0;
# 252
::free(___);}
#if 0
# 248
{ 
# 249
(_handle) = details::multi_grid::get_intrinsic_handle(); 
# 250
(_size) = details::multi_grid::size(_handle); 
# 251
(_rank) = details::multi_grid::thread_rank(_handle); 
# 252
} 
#endif
# 257 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: __attribute((always_inline)) __attribute((deprecated)) bool is_valid() const {int volatile ___ = 1;
# 259
::exit(___);}
#if 0
# 257
{ 
# 258
return ((_handle) != (0)); 
# 259
} 
#endif
# 261 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) void sync() const {int volatile ___ = 1;
# 266
::exit(___);}
#if 0
# 261
{ 
# 262
if (!this->is_valid()) { 
# 263
__trap(); ; 
# 264
}  
# 265
details::multi_grid::sync(_handle); 
# 266
} 
#endif
# 268 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) unsigned long long num_threads() const {int volatile ___ = 1;
# 271
::exit(___);}
#if 0
# 268
{ 
# 269
; 
# 270
return _size; 
# 271
} 
#endif
# 273 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) unsigned long long size() const {int volatile ___ = 1;
# 275
::exit(___);}
#if 0
# 273
{ 
# 274
return this->num_threads(); 
# 275
} 
#endif
# 277 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) unsigned long long thread_rank() const {int volatile ___ = 1;
# 280
::exit(___);}
#if 0
# 277
{ 
# 278
; 
# 279
return _rank; 
# 280
} 
#endif
# 282 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) unsigned grid_rank() const {int volatile ___ = 1;
# 285
::exit(___);}
#if 0
# 282
{ 
# 283
; 
# 284
return details::multi_grid::grid_rank(_handle); 
# 285
} 
#endif
# 287 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute((deprecated)) unsigned num_grids() const {int volatile ___ = 1;
# 290
::exit(___);}
#if 0
# 287
{ 
# 288
; 
# 289
return details::multi_grid::num_grids(_handle); 
# 290
} 
#endif
# 291 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 303 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) 
# 305
__attribute((deprecated)) __attribute__((unused)) inline multi_grid_group 
# 306
this_multi_grid() 
# 307
{int volatile ___ = 1;
# 309
::exit(___);}
#if 0
# 307
{ 
# 308
return multi_grid_group(); 
# 309
} 
#endif
# 322 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
class grid_group : public thread_group_base< details::grid_group_id>  { 
# 324
static constexpr unsigned _group_id = details::grid_group_id; 
# 325
__attribute((always_inline)) friend __attribute__((unused)) inline grid_group this_grid(); 
# 328
__attribute((always_inline)) grid_group(details::grid_workspace *gridWs) {int *volatile ___ = 0;(void)gridWs;
# 330
::free(___);}
#if 0
# 328
{ 
# 329
(((_data).grid).gridWs) = gridWs; 
# 330
} 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: __attribute((always_inline)) bool is_valid() const {int volatile ___ = 1;
# 337 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
::exit(___);}
#if 0
# 335 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
{ 
# 336
return ((((_data).grid).gridWs) != (__null)); 
# 337 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
} 
#endif
# 339 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) void sync() const {int volatile ___ = 1;
# 344
::exit(___);}
#if 0
# 339
{ 
# 340
if (!this->is_valid()) { 
# 341
__trap(); ; 
# 342
}  
# 343
details::grid::sync(&((((_data).grid).gridWs)->barrier)); 
# 344
} 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned long long size() {int volatile ___ = 1;
# 348
::exit(___);}
#if 0
# 346
{ 
# 347
return details::grid::size(); 
# 348
} 
#endif
# 350 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned long long thread_rank() {int volatile ___ = 1;
# 352
::exit(___);}
#if 0
# 350
{ 
# 351
return details::grid::thread_rank(); 
# 352
} 
#endif
# 354 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 group_dim() {int volatile ___ = 1;
# 356
::exit(___);}
#if 0
# 354
{ 
# 355
return details::grid::grid_dim(); 
# 356
} 
#endif
# 358 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned long long num_threads() {int volatile ___ = 1;
# 360
::exit(___);}
#if 0
# 358
{ 
# 359
return details::grid::num_threads(); 
# 360
} 
#endif
# 362 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 dim_blocks() {int volatile ___ = 1;
# 364
::exit(___);}
#if 0
# 362
{ 
# 363
return details::grid::dim_blocks(); 
# 364
} 
#endif
# 366 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned long long num_blocks() {int volatile ___ = 1;
# 368
::exit(___);}
#if 0
# 366
{ 
# 367
return details::grid::num_blocks(); 
# 368
} 
#endif
# 370 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 block_index() {int volatile ___ = 1;
# 372
::exit(___);}
#if 0
# 370
{ 
# 371
return details::grid::block_index(); 
# 372
} 
#endif
# 374 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned long long block_rank() {int volatile ___ = 1;
# 376
::exit(___);}
#if 0
# 374
{ 
# 375
return details::grid::block_rank(); 
# 376
} 
#endif
# 377 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 379
__attribute((always_inline)) __attribute__((unused)) inline grid_group this_grid() {int volatile ___ = 1;
# 387
::exit(___);}
#if 0
# 379
{ 
# 381
grid_group gg(details::get_grid_workspace()); 
# 386
return gg; 
# 387
} 
#endif
# 573 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
class thread_block : public thread_group_base< details::thread_block_id>  { 
# 576
__attribute((always_inline)) friend __attribute__((unused)) inline thread_block this_thread_block(); 
# 577
__attribute((always_inline)) friend __attribute__((unused)) inline thread_group tiled_partition(const cooperative_groups::__v1::thread_group & parent, unsigned tilesz); 
# 578
__attribute((always_inline)) friend __attribute__((unused)) inline thread_group tiled_partition(const thread_block & parent, unsigned tilesz); 
# 605 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) thread_block() 
# 609
{int *volatile ___ = 0;::free(___);}
#if 0
# 609
{ } 
#endif
# 612 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) thread_group _get_tiled_threads(unsigned tilesz) const {int volatile ___ = 1;(void)tilesz;
# 634
::exit(___);}
#if 0
# 612
{ 
# 613
const bool pow2_tilesz = (tilesz & (tilesz - (1))) == (0); 
# 616
if (((tilesz == (0)) || (tilesz > (32))) || (!pow2_tilesz)) { 
# 617
details::abort(); 
# 618
return (thread_block()); 
# 619
}  
# 621
unsigned mask; 
# 622
unsigned base_offset = thread_rank() & (~(tilesz - (1))); 
# 623
unsigned masklength = min(((unsigned)size()) - base_offset, tilesz); 
# 625
mask = (((unsigned)(-1)) >> ((32) - masklength)); 
# 626
mask <<= (details::laneid() & (~(tilesz - (1)))); 
# 627
thread_group tile = ((thread_group)(details::coalesced_group_id)); 
# 628
(((tile._data).coalesced).mask) = mask; 
# 629
(((tile._data).coalesced).size) = (__popc(mask)); 
# 630
(((tile._data).coalesced).metaGroupSize) = (((details::cta::size() + tilesz) - (1)) / tilesz); 
# 631
(((tile._data).coalesced).metaGroupRank) = (details::cta::thread_rank() / tilesz); 
# 632
(((tile._data).coalesced).is_tiled) = (true); 
# 633
return tile; 
# 634
} 
#endif
# 637 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: static constexpr unsigned _group_id = details::thread_block_id; 
# 640
__attribute((always_inline)) static void sync() {int volatile ___ = 1;
# 642
::exit(___);}
#if 0
# 640
{ 
# 641
details::cta::sync(); 
# 642
} 
#endif
# 644 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned size() {int volatile ___ = 1;
# 646
::exit(___);}
#if 0
# 644
{ 
# 645
return details::cta::size(); 
# 646
} 
#endif
# 648 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned thread_rank() {int volatile ___ = 1;
# 650
::exit(___);}
#if 0
# 648
{ 
# 649
return details::cta::thread_rank(); 
# 650
} 
#endif
# 653 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 group_index() {int volatile ___ = 1;
# 655
::exit(___);}
#if 0
# 653
{ 
# 654
return details::cta::group_index(); 
# 655
} 
#endif
# 657 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 thread_index() {int volatile ___ = 1;
# 659
::exit(___);}
#if 0
# 657
{ 
# 658
return details::cta::thread_index(); 
# 659
} 
#endif
# 661 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 group_dim() {int volatile ___ = 1;
# 663
::exit(___);}
#if 0
# 661
{ 
# 662
return details::cta::block_dim(); 
# 663
} 
#endif
# 665 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static dim3 dim_threads() {int volatile ___ = 1;
# 667
::exit(___);}
#if 0
# 665
{ 
# 666
return details::cta::dim_threads(); 
# 667
} 
#endif
# 669 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned num_threads() {int volatile ___ = 1;
# 671
::exit(___);}
#if 0
# 669
{ 
# 670
return details::cta::num_threads(); 
# 671
} 
#endif
# 673 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 680
__attribute((always_inline)) __attribute__((unused)) inline thread_block this_thread_block() 
# 681
{int volatile ___ = 1;
# 683
::exit(___);}
#if 0
# 681
{ 
# 682
return thread_block(); 
# 683
} 
#endif
# 704 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
class coalesced_group : public thread_group_base< details::coalesced_group_id>  { 
# 707
__attribute((always_inline)) friend __attribute__((unused)) inline coalesced_group coalesced_threads(); 
# 708
__attribute((always_inline)) friend __attribute__((unused)) inline thread_group tiled_partition(const cooperative_groups::__v1::thread_group & parent, unsigned tilesz); 
# 709
__attribute((always_inline)) friend __attribute__((unused)) inline coalesced_group tiled_partition(const coalesced_group & parent, unsigned tilesz); 
# 710
friend class details::_coalesced_group_data_access; 
# 712
__attribute((always_inline)) unsigned _packLanes(unsigned laneMask) const {int volatile ___ = 1;(void)laneMask;
# 724
::exit(___);}
#if 0
# 712
{ 
# 713
unsigned member_pack = (0); 
# 714
unsigned member_rank = (0); 
# 715
for (int bit_idx = 0; bit_idx < 32; bit_idx++) { 
# 716
unsigned lane_bit = (((_data).coalesced).mask) & (1 << bit_idx); 
# 717
if (lane_bit) { 
# 718
if (laneMask & lane_bit) { 
# 719
member_pack |= (1 << member_rank); }  
# 720
member_rank++; 
# 721
}  
# 722
}  
# 723
return member_pack; 
# 724
} 
#endif
# 727 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) coalesced_group _get_tiled_threads(unsigned tilesz) const {int volatile ___ = 1;(void)tilesz;
# 777
::exit(___);}
#if 0
# 727
{ 
# 728
const bool pow2_tilesz = (tilesz & (tilesz - (1))) == (0); 
# 731
if (((tilesz == (0)) || (tilesz > (32))) || (!pow2_tilesz)) { 
# 732
details::abort(); 
# 733
return ((coalesced_group)(0)); 
# 734
}  
# 735
if (this->size() <= tilesz) { 
# 736
return *this; 
# 737
}  
# 739
if (((((_data).coalesced).is_tiled) == (true)) && pow2_tilesz) { 
# 740
unsigned base_offset = this->thread_rank() & (~(tilesz - (1))); 
# 741
unsigned masklength = min(((unsigned)this->size()) - base_offset, tilesz); 
# 742
unsigned mask = ((unsigned)(-1)) >> ((32) - masklength); 
# 744
mask <<= (details::laneid() & (~(tilesz - (1)))); 
# 745
coalesced_group coalesced_tile = ((coalesced_group)(mask)); 
# 746
(((coalesced_tile._data).coalesced).metaGroupSize) = (this->size() / tilesz); 
# 747
(((coalesced_tile._data).coalesced).metaGroupRank) = (this->thread_rank() / tilesz); 
# 748
(((coalesced_tile._data).coalesced).is_tiled) = (true); 
# 749
return coalesced_tile; 
# 750
} else { 
# 751
if (((((_data).coalesced).is_tiled) == (false)) && pow2_tilesz) { 
# 752
unsigned mask = (0); 
# 753
unsigned member_rank = (0); 
# 754
int seen_lanes = (this->thread_rank() / tilesz) * tilesz; 
# 755
for (unsigned bit_idx = (0); bit_idx < (32); bit_idx++) { 
# 756
unsigned lane_bit = (((_data).coalesced).mask) & (1 << bit_idx); 
# 757
if (lane_bit) { 
# 758
if ((seen_lanes <= 0) && (member_rank < tilesz)) { 
# 759
mask |= lane_bit; 
# 760
member_rank++; 
# 761
}  
# 762
seen_lanes--; 
# 763
}  
# 764
}  
# 765
coalesced_group coalesced_tile = ((coalesced_group)(mask)); 
# 767
(((coalesced_tile._data).coalesced).metaGroupSize) = (((this->size() + tilesz) - (1)) / tilesz); 
# 768
(((coalesced_tile._data).coalesced).metaGroupRank) = (this->thread_rank() / tilesz); 
# 769
return coalesced_tile; 
# 770
} else 
# 771
{ 
# 773
details::abort(); 
# 774
}  }  
# 776
return ((coalesced_group)(0)); 
# 777
} 
#endif
# 780 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
protected: __attribute((always_inline)) coalesced_group(unsigned mask) {int *volatile ___ = 0;(void)mask;
# 786
::free(___);}
#if 0
# 780
{ 
# 781
(((_data).coalesced).mask) = mask; 
# 782
(((_data).coalesced).size) = (__popc(mask)); 
# 783
(((_data).coalesced).metaGroupRank) = (0); 
# 784
(((_data).coalesced).metaGroupSize) = (1); 
# 785
(((_data).coalesced).is_tiled) = (false); 
# 786
} 
#endif
# 788 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned get_mask() const {int volatile ___ = 1;
# 790
::exit(___);}
#if 0
# 788
{ 
# 789
return (((_data).coalesced).mask); 
# 790
} 
#endif
# 793 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: static constexpr unsigned _group_id = details::coalesced_group_id; 
# 796
__attribute((always_inline)) unsigned num_threads() const {int volatile ___ = 1;
# 798
::exit(___);}
#if 0
# 796
{ 
# 797
return ((_data).coalesced).size; 
# 798
} 
#endif
# 800 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned size() const {int volatile ___ = 1;
# 802
::exit(___);}
#if 0
# 800
{ 
# 801
return this->num_threads(); 
# 802
} 
#endif
# 804 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned thread_rank() const {int volatile ___ = 1;
# 806
::exit(___);}
#if 0
# 804
{ 
# 805
return (__popc((((_data).coalesced).mask) & details::lanemask32_lt())); 
# 806
} 
#endif
# 809 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned meta_group_rank() const {int volatile ___ = 1;
# 811
::exit(___);}
#if 0
# 809
{ 
# 810
return ((_data).coalesced).metaGroupRank; 
# 811
} 
#endif
# 814 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned meta_group_size() const {int volatile ___ = 1;
# 816
::exit(___);}
#if 0
# 814
{ 
# 815
return ((_data).coalesced).metaGroupSize; 
# 816
} 
#endif
# 818 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) void sync() const {int volatile ___ = 1;
# 820
::exit(___);}
#if 0
# 818
{ 
# 819
__syncwarp(((_data).coalesced).mask); 
# 820
} 
#endif
# 823 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 824
__attribute((always_inline)) TyRet shfl(TyElem &&elem, int srcRank) const {int volatile ___ = 1;(void)elem;(void)srcRank;
# 830
::exit(___);}
#if 0
# 824
{ 
# 825
unsigned lane = (srcRank == 0) ? __ffs(((_data).coalesced).mask) - 1 : ((this->size() == (32)) ? srcRank : __fns(((_data).coalesced).mask, 0, srcRank + 1)); 
# 828
return details::tile::template shuffle_dispatch< TyElem> ::shfl(details::templates::forward< TyElem> (elem), ((_data).coalesced).mask, lane, 32); 
# 830
} 
#endif
# 832 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 833
__attribute((always_inline)) TyRet shfl_down(TyElem &&elem, unsigned delta) const {int volatile ___ = 1;(void)elem;(void)delta;
# 846
::exit(___);}
#if 0
# 833
{ 
# 834
if (this->size() == (32)) { 
# 835
return details::tile::template shuffle_dispatch< TyElem> ::shfl_down(details::templates::forward< TyElem> (elem), 4294967295U, delta, 32); 
# 837
}  
# 839
unsigned lane = __fns(((_data).coalesced).mask, details::laneid(), delta + (1)); 
# 841
if (lane >= (32)) { 
# 842
lane = details::laneid(); }  
# 844
return details::tile::template shuffle_dispatch< TyElem> ::shfl(details::templates::forward< TyElem> (elem), ((_data).coalesced).mask, lane, 32); 
# 846
} 
#endif
# 848 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 849
__attribute((always_inline)) TyRet shfl_up(TyElem &&elem, int delta) const {int volatile ___ = 1;(void)elem;(void)delta;
# 861
::exit(___);}
#if 0
# 849
{ 
# 850
if (this->size() == (32)) { 
# 851
return details::tile::template shuffle_dispatch< TyElem> ::shfl_up(details::templates::forward< TyElem> (elem), 4294967295U, delta, 32); 
# 853
}  
# 855
unsigned lane = __fns(((_data).coalesced).mask, details::laneid(), -(delta + 1)); 
# 856
if (lane >= (32)) { 
# 857
lane = details::laneid(); }  
# 859
return details::tile::template shuffle_dispatch< TyElem> ::shfl(details::templates::forward< TyElem> (elem), ((_data).coalesced).mask, lane, 32); 
# 861
} 
#endif
# 894 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) int any(int predicate) const {int volatile ___ = 1;(void)predicate;
# 896
::exit(___);}
#if 0
# 894
{ 
# 895
return (__ballot_sync(((_data).coalesced).mask, predicate) != (0)); 
# 896
} 
#endif
# 897 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) int all(int predicate) const {int volatile ___ = 1;(void)predicate;
# 899
::exit(___);}
#if 0
# 897
{ 
# 898
return (__ballot_sync(((_data).coalesced).mask, predicate) == (((_data).coalesced).mask)); 
# 899
} 
#endif
# 900 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned ballot(int predicate) const {int volatile ___ = 1;(void)predicate;
# 906
::exit(___);}
#if 0
# 900
{ 
# 901
if (this->size() == (32)) { 
# 902
return __ballot_sync(4294967295U, predicate); 
# 903
}  
# 904
unsigned lane_ballot = __ballot_sync(((_data).coalesced).mask, predicate); 
# 905
return this->_packLanes(lane_ballot); 
# 906
} 
#endif
# 910 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyIntegral> 
# 911
__attribute((always_inline)) unsigned match_any(TyIntegral val) const {int volatile ___ = 1;(void)val;
# 918
::exit(___);}
#if 0
# 911
{ 
# 912
details::assert_if_not_arithmetic< TyIntegral> (); 
# 913
if (this->size() == (32)) { 
# 914
return __match_any_sync(4294967295U, val); 
# 915
}  
# 916
unsigned lane_match = __match_any_sync(((_data).coalesced).mask, val); 
# 917
return this->_packLanes(lane_match); 
# 918
} 
#endif
# 920 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyIntegral> 
# 921
__attribute((always_inline)) unsigned match_all(TyIntegral val, int &pred) const {int volatile ___ = 1;(void)val;(void)pred;
# 928
::exit(___);}
#if 0
# 921
{ 
# 922
details::assert_if_not_arithmetic< TyIntegral> (); 
# 923
if (this->size() == (32)) { 
# 924
return __match_all_sync(4294967295U, val, &pred); 
# 925
}  
# 926
unsigned lane_match = __match_all_sync(((_data).coalesced).mask, val, &pred); 
# 927
return this->_packLanes(lane_match); 
# 928
} 
#endif
# 932 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 934
__attribute((always_inline)) __attribute__((unused)) inline coalesced_group coalesced_threads() 
# 935
{int volatile ___ = 1;
# 937
::exit(___);}
#if 0
# 935
{ 
# 936
return ((coalesced_group)(__activemask())); 
# 937
} 
#endif
# 939 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
namespace details { 
# 940
template< unsigned Size> struct verify_thread_block_tile_size; 
# 941
template<> struct verify_thread_block_tile_size< 32U>  { typedef void OK; }; 
# 942
template<> struct verify_thread_block_tile_size< 16U>  { typedef void OK; }; 
# 943
template<> struct verify_thread_block_tile_size< 8U>  { typedef void OK; }; 
# 944
template<> struct verify_thread_block_tile_size< 4U>  { typedef void OK; }; 
# 945
template<> struct verify_thread_block_tile_size< 2U>  { typedef void OK; }; 
# 946
template<> struct verify_thread_block_tile_size< 1U>  { typedef void OK; }; 
# 949
template< unsigned Size> using _is_power_of_2 = templates::integral_constant< bool, (Size & (Size - (1))) == (0)> ; 
# 952
template< unsigned Size> using _is_single_warp = templates::integral_constant< bool, Size <= (32)> ; 
# 954
template< unsigned Size> using _is_multi_warp = templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ; 
# 958
template< unsigned Size> using _is_valid_single_warp_tile = templates::integral_constant< bool, templates::integral_constant< bool, (Size & (Size - (1))) == (0)> ::value && templates::integral_constant< bool, Size <= (32)> ::value> ; 
# 961
template< unsigned Size> using _is_valid_multi_warp_tile = templates::integral_constant< bool, templates::integral_constant< bool, (Size & (Size - (1))) == (0)> ::value && templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value> ; 
# 970
}
# 972
template< unsigned Size> 
# 973
class __static_size_tile_base { 
# 976
protected: static constexpr unsigned numThreads = Size; 
# 982
public: __attribute((always_inline)) static unsigned thread_rank() {int volatile ___ = 1;
# 984
::exit(___);}
#if 0
# 982
{ 
# 983
return details::cta::thread_rank() & (numThreads - (1)); 
# 984
} 
#endif
# 987 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static constexpr unsigned num_threads() { 
# 988
return numThreads; 
# 989
} 
# 991
__attribute((always_inline)) static constexpr unsigned size() { 
# 992
return (num_threads)(); 
# 993
} 
# 994
}; 
# 996
template< unsigned Size> 
# 997
class __static_size_thread_block_tile_base : public __static_size_tile_base< Size>  { 
# 999
friend class details::_coalesced_group_data_access; 
# 1000
typedef details::tile::tile_helpers< Size>  th; 
# 1003
static_assert((details::_is_valid_single_warp_tile< Size> ::value), "Size must be one of 1/2/4/8/16/32");
# 1007
using __static_size_tile_base< Size> ::numThreads;
# 1008
static constexpr unsigned fullMask = 4294967295U; 
# 1011
protected: __attribute((always_inline)) static unsigned build_mask() {int volatile ___ = 1;
# 1020
::exit(___);}
#if 0
# 1011
{ 
# 1012
unsigned mask = fullMask; 
# 1013
if (numThreads != 32) { 
# 1015
unsigned laneId = details::laneid(); 
# 1017
mask = (th::tileMask << (laneId & (~th::laneMask))); 
# 1018
}  
# 1019
return mask; 
# 1020
} 
#endif
# 1023 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: static constexpr unsigned _group_id = details::coalesced_group_id; 
# 1025
__attribute((always_inline)) static void sync() {int volatile ___ = 1;
# 1027
::exit(___);}
#if 0
# 1025
{ 
# 1026
__syncwarp((build_mask)()); 
# 1027
} 
#endif
# 1031 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 1032
__attribute((always_inline)) TyRet shfl(TyElem &&elem, int srcRank) const {int volatile ___ = 1;(void)elem;(void)srcRank;
# 1035
::exit(___);}
#if 0
# 1032
{ 
# 1033
return details::tile::template shuffle_dispatch< TyElem> ::shfl(details::templates::forward< TyElem> (elem), (build_mask)(), srcRank, numThreads); 
# 1035
} 
#endif
# 1037 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 1038
__attribute((always_inline)) TyRet shfl_down(TyElem &&elem, unsigned delta) const {int volatile ___ = 1;(void)elem;(void)delta;
# 1041
::exit(___);}
#if 0
# 1038
{ 
# 1039
return details::tile::template shuffle_dispatch< TyElem> ::shfl_down(details::templates::forward< TyElem> (elem), (build_mask)(), delta, numThreads); 
# 1041
} 
#endif
# 1043 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 1044
__attribute((always_inline)) TyRet shfl_up(TyElem &&elem, unsigned delta) const {int volatile ___ = 1;(void)elem;(void)delta;
# 1047
::exit(___);}
#if 0
# 1044
{ 
# 1045
return details::tile::template shuffle_dispatch< TyElem> ::shfl_up(details::templates::forward< TyElem> (elem), (build_mask)(), delta, numThreads); 
# 1047
} 
#endif
# 1049 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyElem, class TyRet = details::remove_qual< TyElem> > 
# 1050
__attribute((always_inline)) TyRet shfl_xor(TyElem &&elem, unsigned laneMask) const {int volatile ___ = 1;(void)elem;(void)laneMask;
# 1053
::exit(___);}
#if 0
# 1050
{ 
# 1051
return details::tile::template shuffle_dispatch< TyElem> ::shfl_xor(details::templates::forward< TyElem> (elem), (build_mask)(), laneMask, numThreads); 
# 1053
} 
#endif
# 1080 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) int any(int predicate) const {int volatile ___ = 1;(void)predicate;
# 1083
::exit(___);}
#if 0
# 1080
{ 
# 1081
unsigned lane_ballot = __ballot_sync((build_mask)(), predicate); 
# 1082
return (lane_ballot != (0)); 
# 1083
} 
#endif
# 1084 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) int all(int predicate) const {int volatile ___ = 1;(void)predicate;
# 1087
::exit(___);}
#if 0
# 1084
{ 
# 1085
unsigned lane_ballot = __ballot_sync((build_mask)(), predicate); 
# 1086
return (lane_ballot == (build_mask)()); 
# 1087
} 
#endif
# 1088 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned ballot(int predicate) const {int volatile ___ = 1;(void)predicate;
# 1091
::exit(___);}
#if 0
# 1088
{ 
# 1089
unsigned lane_ballot = __ballot_sync((build_mask)(), predicate); 
# 1090
return (lane_ballot >> (details::laneid() & (~th::laneMask))); 
# 1091
} 
#endif
# 1094 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyIntegral> 
# 1095
__attribute((always_inline)) unsigned match_any(TyIntegral val) const {int volatile ___ = 1;(void)val;
# 1099
::exit(___);}
#if 0
# 1095
{ 
# 1096
details::assert_if_not_arithmetic< TyIntegral> (); 
# 1097
unsigned lane_match = __match_any_sync((build_mask)(), val); 
# 1098
return (lane_match >> (details::laneid() & (~th::laneMask))); 
# 1099
} 
#endif
# 1101 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyIntegral> 
# 1102
__attribute((always_inline)) unsigned match_all(TyIntegral val, int &pred) const {int volatile ___ = 1;(void)val;(void)pred;
# 1106
::exit(___);}
#if 0
# 1102
{ 
# 1103
details::assert_if_not_arithmetic< TyIntegral> (); 
# 1104
unsigned lane_match = __match_all_sync((build_mask)(), val, &pred); 
# 1105
return (lane_match >> (details::laneid() & (~th::laneMask))); 
# 1106
} 
#endif
# 1109 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1111
template< unsigned Size, class ParentT> 
# 1112
class __static_parent_thread_block_tile_base { 
# 1116
public: __attribute((always_inline)) static unsigned meta_group_rank() {int volatile ___ = 1;
# 1118
::exit(___);}
#if 0
# 1116
{ 
# 1117
return ParentT::thread_rank() / Size; 
# 1118
} 
#endif
# 1121 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned meta_group_size() {int volatile ___ = 1;
# 1123
::exit(___);}
#if 0
# 1121
{ 
# 1122
return ((ParentT::size() + Size) - 1) / Size; 
# 1123
} 
#endif
# 1124 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1137 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< unsigned Size, class ParentT = void> 
# 1138
class __single_warp_thread_block_tile : public __static_size_thread_block_tile_base< Size> , public __static_parent_thread_block_tile_base< Size, ParentT>  { 
# 1142
typedef __static_parent_thread_block_tile_base< Size, ParentT>  staticParentBaseT; 
# 1143
friend class details::_coalesced_group_data_access; 
# 1146
protected: __attribute((always_inline)) __single_warp_thread_block_tile() {int *volatile ___ = 0;::free(___);}
#if 0
# 1146
{ } 
#endif
# 1147 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __single_warp_thread_block_tile(unsigned, unsigned) {int *volatile ___ = 0;::free(___);}
#if 0
# 1147
{ } 
#endif
# 1149 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) static unsigned get_mask() {int volatile ___ = 1;
# 1151
::exit(___);}
#if 0
# 1149
{ 
# 1150
return __static_size_thread_block_tile_base< Size> ::build_mask(); 
# 1151
} 
#endif
# 1152 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1154
template< unsigned Size> 
# 1155
class __single_warp_thread_block_tile< Size, void>  : public __static_size_thread_block_tile_base< Size> , public thread_group_base< 1U>  { 
# 1159
static constexpr unsigned numThreads = Size; 
# 1161
template< unsigned , class ParentT> friend class __single_warp_thread_block_tile; 
# 1162
friend class details::_coalesced_group_data_access; 
# 1164
typedef __static_size_thread_block_tile_base< numThreads>  staticSizeBaseT; 
# 1167
protected: __attribute((always_inline)) __single_warp_thread_block_tile(unsigned meta_group_rank, unsigned meta_group_size) {int *volatile ___ = 0;(void)meta_group_rank;(void)meta_group_size;
# 1173
::free(___);}
#if 0
# 1167
{ 
# 1168
(((_data).coalesced).mask) = staticSizeBaseT::build_mask(); 
# 1169
(((_data).coalesced).size) = numThreads; 
# 1170
(((_data).coalesced).metaGroupRank) = meta_group_rank; 
# 1171
(((_data).coalesced).metaGroupSize) = meta_group_size; 
# 1172
(((_data).coalesced).is_tiled) = (true); 
# 1173
} 
#endif
# 1175 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned get_mask() const {int volatile ___ = 1;
# 1177
::exit(___);}
#if 0
# 1175
{ 
# 1176
return (((_data).coalesced).mask); 
# 1177
} 
#endif
# 1180 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: using __static_size_thread_block_tile_base< numThreads> ::sync;
# 1181
using __static_size_thread_block_tile_base< numThreads> ::size;
# 1182
using __static_size_thread_block_tile_base< numThreads> ::num_threads;
# 1183
using __static_size_thread_block_tile_base< numThreads> ::thread_rank;
# 1185
__attribute((always_inline)) unsigned meta_group_rank() const {int volatile ___ = 1;
# 1187
::exit(___);}
#if 0
# 1185
{ 
# 1186
return ((_data).coalesced).metaGroupRank; 
# 1187
} 
#endif
# 1189 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) unsigned meta_group_size() const {int volatile ___ = 1;
# 1191
::exit(___);}
#if 0
# 1189
{ 
# 1190
return ((_data).coalesced).metaGroupSize; 
# 1191
} 
#endif
# 1192 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1200
template< class GroupT> 
# 1201
__attribute((always_inline)) __attribute__((unused)) inline void sync(const GroupT &g) 
# 1202
{int volatile ___ = 1;(void)g;
# 1204
::exit(___);}
#if 0
# 1202
{ 
# 1203
g.sync(); 
# 1204
} 
#endif
# 1209 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class GroupT> 
# 1210
__attribute((always_inline)) __attribute__((unused)) inline auto thread_rank(const GroupT &g)->__decltype((g.thread_rank())) {int volatile ___ = 1;(void)g;
# 1212
::exit(___);}
#if 0
# 1210
{ 
# 1211
return g.thread_rank(); 
# 1212
} 
#endif
# 1215 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class GroupT> 
# 1216
__attribute((always_inline)) __attribute__((unused)) inline auto group_size(const GroupT &g)->__decltype((g.num_threads())) {int volatile ___ = 1;(void)g;
# 1218
::exit(___);}
#if 0
# 1216
{ 
# 1217
return g.num_threads(); 
# 1218
} 
#endif
# 1250 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute__((unused)) inline thread_group tiled_partition(const thread_group &parent, unsigned tilesz) 
# 1251
{int volatile ___ = 1;(void)parent;(void)tilesz;
# 1260
::exit(___);}
#if 0
# 1251
{ 
# 1252
if (parent.get_type() == details::coalesced_group_id) { 
# 1253
const coalesced_group *_cg = static_cast< const coalesced_group *>(&parent); 
# 1254
return _cg->_get_tiled_threads(tilesz); 
# 1255
} else 
# 1256
{ 
# 1257
const thread_block *_tb = static_cast< const thread_block *>(&parent); 
# 1258
return _tb->_get_tiled_threads(tilesz); 
# 1259
}  
# 1260
} 
#endif
# 1263 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute__((unused)) inline thread_group tiled_partition(const thread_block &parent, unsigned tilesz) 
# 1264
{int volatile ___ = 1;(void)parent;(void)tilesz;
# 1266
::exit(___);}
#if 0
# 1264
{ 
# 1265
return parent._get_tiled_threads(tilesz); 
# 1266
} 
#endif
# 1269 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute__((unused)) inline coalesced_group tiled_partition(const coalesced_group &parent, unsigned tilesz) 
# 1270
{int volatile ___ = 1;(void)parent;(void)tilesz;
# 1272
::exit(___);}
#if 0
# 1270
{ 
# 1271
return parent._get_tiled_threads(tilesz); 
# 1272
} 
#endif
# 1274 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
namespace details { 
# 1275
template< unsigned Size, class ParentT> 
# 1276
class internal_thread_block_tile : public __single_warp_thread_block_tile< Size, ParentT>  { }; 
# 1278
template< unsigned Size, class ParentT> 
# 1279
__attribute((always_inline)) __attribute__((unused)) inline internal_thread_block_tile< Size, ParentT>  tiled_partition_internal() {int volatile ___ = 1;
# 1281
::exit(___);}
#if 0
# 1279
{ 
# 1280
return internal_thread_block_tile< Size, ParentT> (); 
# 1281
} 
#endif
# 1283 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< class TyVal, class GroupT, class WarpLambda, class InterWarpLambda> 
# 1284
__attribute((always_inline)) __attribute__((unused)) inline TyVal 
# 1283
multi_warp_collectives_helper(const GroupT & group, WarpLambda warp_lambda, InterWarpLambda inter_warp_lambda); 
# 1288
}
# 1562 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< unsigned Size, class ParentT = void> class thread_block_tile; 
# 1565
namespace details { 
# 1566
template< unsigned Size, class ParentT, bool IsMultiWarp> class thread_block_tile_impl; 
# 1569
template< unsigned Size, class ParentT> 
# 1570
class thread_block_tile_impl< Size, ParentT, false>  : public __single_warp_thread_block_tile< Size, ParentT>  { 
# 1574
protected: 
# 1573
template< unsigned OtherSize, class OtherParentT, bool OtherIsMultiWarp> 
# 1574
__attribute((always_inline)) thread_block_tile_impl(const details::thread_block_tile_impl< OtherSize, OtherParentT, OtherIsMultiWarp>  &g) : __single_warp_thread_block_tile< Size, ParentT> (g.meta_group_rank(), g.meta_group_size()) 
# 1575
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1575
{ } 
#endif
# 1577 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) thread_block_tile_impl(const __v1::thread_block &g) : __single_warp_thread_block_tile< Size, ParentT> () 
# 1578
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1578
{ } 
#endif
# 1579 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1591 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< unsigned Size, class ParentT> 
# 1592
class thread_block_tile_impl< Size, ParentT, true>  { 
# 1596
protected: 
# 1595
template< class GroupT> 
# 1596
__attribute((always_inline)) thread_block_tile_impl(const GroupT &g) {int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1596
{ } 
#endif
# 1597 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1599
}
# 1601
template< unsigned Size, class ParentT> 
# 1602
class thread_block_tile : public details::thread_block_tile_impl< Size, ParentT, details::templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value>  { 
# 1604
friend __attribute__((unused)) __v1::thread_block_tile< 1U, void>  this_thread(); 
# 1607
protected: __attribute((always_inline)) thread_block_tile(const ParentT &g) : details::thread_block_tile_impl< Size, ParentT, details::templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value> (g) 
# 1608
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1608
{ } 
#endif
# 1611 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: __attribute((always_inline)) operator thread_block_tile< Size, void> () const {int volatile ___ = 1;
# 1613
::exit(___);}
#if 0
# 1611
{ 
# 1612
return ((thread_block_tile< Size, void> )(*this)); 
# 1613
} 
#endif
# 1614 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1616
template< unsigned Size> 
# 1617
class thread_block_tile< Size, void>  : public details::thread_block_tile_impl< Size, void, details::templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value>  { 
# 1619
template< unsigned , class ParentT> friend class thread_block_tile; 
# 1624
protected: 
# 1623
template< unsigned OtherSize, class OtherParentT> 
# 1624
__attribute((always_inline)) thread_block_tile(const __v1::thread_block_tile< OtherSize, OtherParentT>  &g) : details::thread_block_tile_impl< Size, void, details::templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value> (g) 
# 1625
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1625
{ } 
#endif
# 1629 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
public: 
# 1628
template< class ParentT> 
# 1629
__attribute((always_inline)) thread_block_tile(const __v1::thread_block_tile< Size, ParentT>  &g) : details::thread_block_tile_impl< Size, void, details::templates::integral_constant< bool, ((Size > (32)) && (Size <= (1024)))> ::value> (g) 
# 1630
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1630
{ } 
#endif
# 1631 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1633
namespace details { 
# 1634
template< class TyVal, class GroupT, class WarpLambda, class InterWarpLambda> 
# 1635
__attribute((always_inline)) __attribute__((unused)) inline TyVal multi_warp_collectives_helper(const GroupT &
# 1636
group, WarpLambda 
# 1637
warp_lambda, InterWarpLambda 
# 1638
inter_warp_lambda) {int volatile ___ = 1;(void)group;(void)warp_lambda;(void)inter_warp_lambda;
# 1640
::exit(___);}
#if 0
# 1638
{ 
# 1639
return group.template collectives_scheme< TyVal> (warp_lambda, inter_warp_lambda); 
# 1640
} 
#endif
# 1642 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
template< unsigned Size, class ParentT> struct tiled_partition_impl; 
# 1645
template< unsigned Size> 
# 1646
struct tiled_partition_impl< Size, thread_block>  : public thread_block_tile< Size, __v1::thread_block>  { 
# 1647
__attribute((always_inline)) tiled_partition_impl(const __v1::thread_block &g) : thread_block_tile< Size, __v1::thread_block> (g) 
# 1648
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1648
{ } 
#endif
# 1649 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1652
template< unsigned Size, unsigned ParentSize, class GrandParent> 
# 1653
struct tiled_partition_impl< Size, thread_block_tile< ParentSize, GrandParent> >  : public thread_block_tile< Size, thread_block_tile< ParentSize, GrandParent> >  { 
# 1656
static_assert((Size < ParentSize), "Tile size bigger or equal to the parent group size");
# 1658
__attribute((always_inline)) tiled_partition_impl(const thread_block_tile< ParentSize, GrandParent>  &g) : thread_block_tile< Size, thread_block_tile< ParentSize, GrandParent> > (g) 
# 1659
{int *volatile ___ = 0;(void)g;::free(___);}
#if 0
# 1659
{ } 
#endif
# 1660 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}; 
# 1662
}
# 1664
namespace experimental { 
# 1665
template< unsigned Size, class ParentT> 
# 1666
__attribute((always_inline)) __attribute__((unused)) inline thread_block_tile< Size, ParentT>  tiled_partition(const ParentT &g) 
# 1667
{int volatile ___ = 1;(void)g;
# 1673
::exit(___);}
#if 0
# 1667
{ 
# 1669
static_assert((details::_is_single_warp< Size> ::value), "_CG_ABI_EXPERIMENTAL needs to be defined before cooperative_groups header is included to enable experimental features");
# 1672
return ((details::tiled_partition_impl< Size, ParentT> )(g)); 
# 1673
} 
#endif
# 1675 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}
# 1677
template< unsigned Size, class ParentT> 
# 1678
__attribute((always_inline)) __attribute__((unused)) inline thread_block_tile< Size, ParentT>  tiled_partition(const ParentT &g) 
# 1679
{int volatile ___ = 1;(void)g;
# 1685
::exit(___);}
#if 0
# 1679
{ 
# 1681
static_assert((details::_is_single_warp< Size> ::value), "Tiled partition with Size > 32 is supported only by cooperative_groups::experimental::tiled_partition available with experimenta" "l features enabled");
# 1684
return ((details::tiled_partition_impl< Size, ParentT> )(g)); 
# 1685
} 
#endif
# 1692 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) __attribute__((unused)) inline thread_block_tile< 1U, void>  this_thread() 
# 1693
{int volatile ___ = 1;
# 1697
::exit(___);}
#if 0
# 1693
{ 
# 1696
return ((thread_block_tile< 1, thread_block_tile< 1, thread_block> > )(this_thread_block())); 
# 1697
} 
#endif
# 1707 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) inline void thread_group::sync() const 
# 1708
{int volatile ___ = 1;
# 1734 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
::exit(___);}
#if 0
# 1708 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
{ 
# 1709
switch (((_data).group).type) { 
# 1710
case details::coalesced_group_id:  
# 1711
cooperative_groups::sync(*(static_cast< const coalesced_group *>(this))); 
# 1712
break; 
# 1713
case details::thread_block_id:  
# 1714
cooperative_groups::sync(*(static_cast< const thread_block *>(this))); 
# 1715
break; 
# 1716
case details::grid_group_id:  
# 1717
cooperative_groups::sync(*(static_cast< const grid_group *>(this))); 
# 1718
break; 
# 1731 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
default:  
# 1732
break; 
# 1733
}  
# 1734
} 
#endif
# 1741 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) inline unsigned long long thread_group::size() const 
# 1742
{int volatile ___ = 1;
# 1770 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
::exit(___);}
#if 0
# 1742 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
{ 
# 1743
unsigned long long size = (0); 
# 1744
switch (((_data).group).type) { 
# 1745
case details::coalesced_group_id:  
# 1746
size = (cooperative_groups::group_size(*(static_cast< const coalesced_group *>(this)))); 
# 1747
break; 
# 1748
case details::thread_block_id:  
# 1749
size = (cooperative_groups::group_size(*(static_cast< const thread_block *>(this)))); 
# 1750
break; 
# 1751
case details::grid_group_id:  
# 1752
size = cooperative_groups::group_size(*(static_cast< const grid_group *>(this))); 
# 1753
break; 
# 1766 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
default:  
# 1767
break; 
# 1768
}  
# 1769
return size; 
# 1770
} 
#endif
# 1777 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
__attribute((always_inline)) inline unsigned long long thread_group::thread_rank() const 
# 1778
{int volatile ___ = 1;
# 1806 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
::exit(___);}
#if 0
# 1778 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
{ 
# 1779
unsigned long long rank = (0); 
# 1780
switch (((_data).group).type) { 
# 1781
case details::coalesced_group_id:  
# 1782
rank = (cooperative_groups::thread_rank(*(static_cast< const coalesced_group *>(this)))); 
# 1783
break; 
# 1784
case details::thread_block_id:  
# 1785
rank = (cooperative_groups::thread_rank(*(static_cast< const thread_block *>(this)))); 
# 1786
break; 
# 1787
case details::grid_group_id:  
# 1788
rank = cooperative_groups::thread_rank(*(static_cast< const grid_group *>(this))); 
# 1789
break; 
# 1802 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
default:  
# 1803
break; 
# 1804
}  
# 1805
return rank; 
# 1806
} 
#endif
# 1808 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups.h"
}using namespace __v1;}
# 56 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
namespace cooperative_groups { namespace __v1 { 
# 58
namespace details { 
# 60
template< class TyGroup> 
# 61
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group _binary_partition(const TyGroup &tile, bool pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 79
::exit(___);}
#if 0
# 61
{ 
# 62
const unsigned fullMask = (~0U); 
# 64
unsigned thisMask = _coalesced_group_data_access::get_mask(tile); 
# 65
unsigned predMask = pred ? 0 : fullMask; 
# 66
unsigned setMask = __ballot_sync(thisMask, pred); 
# 68
if ((setMask == thisMask) || (setMask == (0))) { 
# 69
coalesced_group subTile = _coalesced_group_data_access::construct_from_mask< coalesced_group> (thisMask); 
# 70
_coalesced_group_data_access::modify_meta_group(subTile, 0, 1); 
# 71
return subTile; 
# 72
} else 
# 73
{ 
# 74
unsigned subMask = thisMask & (setMask ^ predMask); 
# 75
coalesced_group subTile = _coalesced_group_data_access::construct_from_mask< coalesced_group> (subMask); 
# 76
_coalesced_group_data_access::modify_meta_group(subTile, pred, 2); 
# 77
return subTile; 
# 78
}  
# 79
} 
#endif
# 82 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
template< class TyGroup, class TyPredicate> 
# 83
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group _labeled_partition(const TyGroup &tile, TyPredicate pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 99
::exit(___);}
#if 0
# 83
{ 
# 84
unsigned thisMask = _coalesced_group_data_access::get_mask(tile); 
# 85
unsigned thisBias = __ffs(thisMask) - 1; 
# 86
unsigned subMask = __match_any_sync(thisMask, pred); 
# 88
coalesced_group subTile = _coalesced_group_data_access::construct_from_mask< coalesced_group> (subMask); 
# 90
int leaderLaneId = subTile.shfl(details::laneid(), 0); 
# 92
bool isLeader = !(subTile.thread_rank()); 
# 93
unsigned leaderMask = __ballot_sync(thisMask, isLeader); 
# 94
unsigned tileRank = __fns(leaderMask, leaderLaneId, 0) - thisBias; 
# 96
_coalesced_group_data_access::modify_meta_group(subTile, tileRank, __popc(leaderMask)); 
# 98
return subTile; 
# 99
} 
#endif
# 101 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
}
# 103
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group binary_partition(const coalesced_group &tile, bool pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 105
::exit(___);}
#if 0
# 103
{ 
# 104
return details::_binary_partition(tile, pred); 
# 105
} 
#endif
# 107 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
template< unsigned Size, class ParentT> 
# 108
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group binary_partition(const thread_block_tile< Size, ParentT>  &tile, bool pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 113
::exit(___);}
#if 0
# 108
{ 
# 110
static_assert((Size <= (32)), "Binary partition is available only for tiles of size smaller or equal to 32");
# 112
return details::_binary_partition(tile, pred); 
# 113
} 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
template< class TyPredicate> 
# 118
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group labeled_partition(const coalesced_group &tile, TyPredicate pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 121
::exit(___);}
#if 0
# 118
{ 
# 119
static_assert((cooperative_groups::details::templates::template is_integral< TyPredicate> ::value), "labeled_partition predicate must be an integral type");
# 120
return details::_labeled_partition(tile, pred); 
# 121
} 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
template< class TyPredicate, unsigned Size, class ParentT> 
# 124
__attribute((always_inline)) __attribute__((unused)) static inline coalesced_group labeled_partition(const thread_block_tile< Size, ParentT>  &tile, TyPredicate pred) {int volatile ___ = 1;(void)tile;(void)pred;
# 128
::exit(___);}
#if 0
# 124
{ 
# 125
static_assert((cooperative_groups::details::templates::template is_integral< TyPredicate> ::value), "labeled_partition predicate must be an integral type");
# 126
static_assert((Size <= (32)), "Labeled partition is available only for tiles of size smaller or equal to 32");
# 127
return details::_labeled_partition(tile, pred); 
# 128
} 
#endif
# 131 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/partitioning.h"
}using namespace __v1;}
# 125 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
namespace nvcuda { namespace experimental { namespace __pipeline_internal { 
# 127
static_assert((sizeof(short) == (2)), "Size mismatch for type \'short\'");
# 128
static_assert((sizeof(int) == (4)), "Size mismatch for type \'int\'");
# 129
static_assert((sizeof(int2) == (8)), "Size mismatch for type \'int2\'");
# 130
static_assert((sizeof(int4) == (16)), "Size mismatch for type \'int4\'");
# 132
extern "C" __attribute__((unused)) uint32_t __nvvm_get_smem_pointer(void *); 
# 134
template< ::size_t CopySize, ::size_t SourceSize> __attribute__((unused)) inline void 
# 136
pipeline_memcpy_sync(void *__restrict__ dst, const void *__restrict__ src) 
# 137
{int volatile ___ = 1;(void)dst;(void)src;
# 176 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 137 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 138
static_assert((((CopySize == (4)) || (CopySize == (8))) || (CopySize == (16))), "Unsupported copy size.");
# 139
static_assert((SourceSize <= CopySize), "Source size must be less than or equal to copy size");
# 140 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 140, __extension__ __PRETTY_FUNCTION__); 
# 140 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 141 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 141, __extension__ __PRETTY_FUNCTION__); 
# 141 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 143
char *const d = reinterpret_cast< char *>(dst); 
# 144
const char *const s = reinterpret_cast< const char *>(src); 
# 146
::size_t copy_step_size; 
# 147
if (SourceSize == (0)) { 
# 148
copy_step_size = CopySize; 
# 149
} else { if ((((SourceSize == (2)) || (SourceSize == (4))) || (SourceSize == (8))) || (SourceSize == (16))) { 
# 150
copy_step_size = SourceSize; 
# 151
} else { 
# 152
copy_step_size = (1); 
# 153
}  }  
# 155
for (::size_t i = (0); i < CopySize; i += copy_step_size) { 
# 156
const bool copy_source = (SourceSize) && (i < SourceSize); 
# 158
switch (copy_step_size) { 
# 159
case 1:  
# 160
(d[i]) = (copy_source ? s[i] : ((char)0)); 
# 161
break; 
# 162
case 2:  
# 163
(*(reinterpret_cast< short *>(d + i))) = (copy_source ? *(reinterpret_cast< const short *>(s + i)) : ((short)0)); 
# 164
break; 
# 165
case 4:  
# 166
(*(reinterpret_cast< int *>(d + i))) = (copy_source ? *(reinterpret_cast< const int *>(s + i)) : ((int)0)); 
# 167
break; 
# 168
case 8:  
# 169
(*(reinterpret_cast< int2 *>(d + i))) = ((copy_source ? *(reinterpret_cast< const int2 *>(s + i)) : int2())); 
# 170
break; 
# 171
case 16:  
# 172
(*(reinterpret_cast< int4 *>(d + i))) = ((copy_source ? *(reinterpret_cast< const int4 *>(s + i)) : int4())); 
# 173
break; 
# 174
}  
# 175
}  
# 176
} 
#endif
# 178 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< bool UseHwAsyncCopy> struct ImplementationChooser; 
# 182
template<> struct ImplementationChooser< true>  { 
# 183
template< ::size_t CopySize, ::size_t SourceSize> 
# 184
struct CpAsyncChooser { 
# 186
static void cp_async(void *__restrict__ dst, const void *__restrict__ src) 
# 187
{int volatile ___ = 1;(void)dst;(void)src;
# 193
::exit(___);}
#if 0
# 187
{ 
# 188
__asm__ volatile("cp.async.ca.shared.global [%0], [%1], %2, %3;" : : "r" (__nvvm_get_smem_pointer(dst)), "l" (src), "n" (CopySize), "n" (SourceSize) : "memory"); 
# 193
} 
#endif
# 194 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
}; 
# 196
template< ::size_t SourceSize> 
# 197
struct CpAsyncChooser< 16, SourceSize>  { 
# 199
static void cp_async(void *__restrict__ dst, const void *__restrict__ src) 
# 200
{int volatile ___ = 1;(void)dst;(void)src;
# 205
::exit(___);}
#if 0
# 200
{ 
# 201
__asm__ volatile("cp.async.cg.shared.global [%0], [%1], %2, %3;" : : "r" (__nvvm_get_smem_pointer(dst)), "l" (src), "n" (16), "n" (SourceSize) : "memory"); 
# 205
} 
#endif
# 206 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
}; 
# 208
template< ::size_t CopySize, ::size_t SourceSize> static void 
# 210
pipeline_memcpy_async(void *__restrict__ dst, const void *__restrict__ src) 
# 211
{int volatile ___ = 1;(void)dst;(void)src;
# 220 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 211 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 212
static_assert((((CopySize == (4)) || (CopySize == (8))) || (CopySize == (16))), "Unsupported copy size.");
# 213
static_assert((SourceSize <= CopySize), "Source size must be less than or equal to copy size");
# 214 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isShared(dst))) ? (void)0 : __assert_fail("(__isShared(dst))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 214, __extension__ __PRETTY_FUNCTION__); 
# 214 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 215 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isGlobal(src))) ? (void)0 : __assert_fail("(__isGlobal(src))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 215, __extension__ __PRETTY_FUNCTION__); 
# 215 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 216 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 216, __extension__ __PRETTY_FUNCTION__); 
# 216 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 217 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 217, __extension__ __PRETTY_FUNCTION__); 
# 217 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 219
CpAsyncChooser< CopySize, SourceSize> ::cp_async(dst, src); 
# 220
} 
#endif
# 223 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
static void pipeline_commit() 
# 224
{int volatile ___ = 1;
# 226
::exit(___);}
#if 0
# 224
{ 
# 225
__asm__ volatile("cp.async.commit_group;"); 
# 226
} 
#endif
# 228 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< unsigned N> static void 
# 230
pipeline_wait_prior() 
# 231
{int volatile ___ = 1;
# 235
::exit(___);}
#if 0
# 231
{ 
# 232
__asm__ volatile("cp.async.wait_group %0;" : : "n" ((N < (8)) ? N : (8))); 
# 235
} 
#endif
# 238 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
static void pipeline_arrive_on(uint64_t *barrier) 
# 239
{int volatile ___ = 1;(void)barrier;
# 245 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 239 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 240 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 240, __extension__ __PRETTY_FUNCTION__); 
# 240 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 242
__asm__ volatile("cp.async.mbarrier.arrive.shared.b64 [%0];" : : "r" (__nvvm_get_smem_pointer(barrier))); 
# 245
} 
#endif
# 246 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
}; 
# 249
template<> struct ImplementationChooser< false>  { 
# 250
template< ::size_t CopySize, ::size_t SourceSize> static void 
# 252
pipeline_memcpy_async(void *__restrict__ dst, const void *__restrict__ src) 
# 253
{int volatile ___ = 1;(void)dst;(void)src;
# 262 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 253 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 254
static_assert((((CopySize == (4)) || (CopySize == (8))) || (CopySize == (16))), "Unsupported copy size.");
# 255
static_assert((SourceSize <= CopySize), "Source size must be less than or equal to copy size");
# 256 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isShared(dst))) ? (void)0 : __assert_fail("(__isShared(dst))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 256, __extension__ __PRETTY_FUNCTION__); 
# 256 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 257 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isGlobal(src))) ? (void)0 : __assert_fail("(__isGlobal(src))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 257, __extension__ __PRETTY_FUNCTION__); 
# 257 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 258 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 258, __extension__ __PRETTY_FUNCTION__); 
# 258 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 259, __extension__ __PRETTY_FUNCTION__); 
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 261
pipeline_memcpy_sync< CopySize, SourceSize> (dst, src); 
# 262
} 
#endif
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
static void pipeline_commit() 
# 266
{int volatile ___ = 1;
# 267
::exit(___);}
#if 0
# 266
{ 
# 267
} 
#endif
# 269 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< unsigned N> static void 
# 271
pipeline_wait_prior() 
# 272
{int volatile ___ = 1;
# 273
::exit(___);}
#if 0
# 272
{ 
# 273
} 
#endif
# 276 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
static void pipeline_arrive_on(uint64_t *barrier) 
# 277
{int volatile ___ = 1;(void)barrier;
# 278
::exit(___);}
#if 0
# 277
{ 
# 278
} 
#endif
# 279 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
}; 
# 281
template< ::size_t CopySize, ::size_t SourceSize> __attribute__((unused)) inline void 
# 283
pipeline_memcpy_async(void *__restrict__ dst, const void *__restrict__ src) 
# 284
{int volatile ___ = 1;(void)dst;(void)src;
# 293 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 284 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 285
static_assert((((CopySize == (4)) || (CopySize == (8))) || (CopySize == (16))), "Unsupported copy size.");
# 286
static_assert((SourceSize <= CopySize), "Source size must be less than or equal to copy size");
# 287 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isShared(dst))) ? (void)0 : __assert_fail("(__isShared(dst))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 287, __extension__ __PRETTY_FUNCTION__); 
# 287 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 288 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(__isGlobal(src))) ? (void)0 : __assert_fail("(__isGlobal(src))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 288, __extension__ __PRETTY_FUNCTION__); 
# 288 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 289 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 289, __extension__ __PRETTY_FUNCTION__); 
# 289 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 290 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 290, __extension__ __PRETTY_FUNCTION__); 
# 290 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 292
ImplementationChooser< false> ::template pipeline_memcpy_async< CopySize, SourceSize> (dst, src); 
# 293
} 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
__attribute__((unused)) inline void pipeline_commit() 
# 297
{int volatile ___ = 1;
# 299
::exit(___);}
#if 0
# 297
{ 
# 298
ImplementationChooser< false> ::pipeline_commit(); 
# 299
} 
#endif
# 301 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< unsigned N> __attribute__((unused)) inline void 
# 303
pipeline_wait_prior() 
# 304
{int volatile ___ = 1;
# 306
::exit(___);}
#if 0
# 304
{ 
# 305
ImplementationChooser< false> ::template pipeline_wait_prior< N> (); 
# 306
} 
#endif
# 309 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
__attribute__((unused)) inline void pipeline_arrive_on(uint64_t *barrier) 
# 310
{int volatile ___ = 1;(void)barrier;
# 312
::exit(___);}
#if 0
# 310
{ 
# 311
ImplementationChooser< false> ::pipeline_arrive_on(barrier); 
# 312
} 
#endif
# 314 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< ::size_t CopySize, ::size_t SourceSize> __attribute__((unused)) inline void 
# 316
pipeline_copy_strict(void *__restrict__ dst, const void *__restrict__ src) 
# 317
{int volatile ___ = 1;(void)dst;(void)src;
# 328 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 317 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 318
static_assert((((CopySize == (4)) || (CopySize == (8))) || (CopySize == (16))), "Unsupported copy size.");
# 319
static_assert((SourceSize <= CopySize), "Source size must be less than or equal to copy size.");
# 320 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 320, __extension__ __PRETTY_FUNCTION__); 
# 320 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 321 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (CopySize - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (CopySize - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 321, __extension__ __PRETTY_FUNCTION__); 
# 321 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 323
if ((__isGlobal(src)) && (__isShared(dst))) { 
# 324
pipeline_memcpy_async< CopySize, SourceSize> (dst, src); 
# 325
} else { 
# 326
pipeline_memcpy_sync< CopySize, SourceSize> (dst, src); 
# 327
}  
# 328
} 
#endif
# 330 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
template< ::size_t CopySize, ::size_t Align> __attribute__((unused)) inline void 
# 332
pipeline_copy_relaxed(void *__restrict__ dst, const void *__restrict__ src) 
# 333
{int volatile ___ = 1;(void)dst;(void)src;
# 369 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
::exit(___);}
#if 0
# 333 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
{ 
# 334 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (Align - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (Align - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 334, __extension__ __PRETTY_FUNCTION__); 
# 334 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (Align - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (Align - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h", 335, __extension__ __PRETTY_FUNCTION__); 
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
; 
# 337
const char *s = reinterpret_cast< const char *>(src); 
# 338
char *d = reinterpret_cast< char *>(dst); 
# 339
::size_t remaining = CopySize; 
# 341
while (remaining) { 
# 342
if ((Align >= (16)) && (remaining >= (16))) { 
# 343
pipeline_copy_strict< 16UL, 16UL> (dst, src); 
# 344
d += 16; 
# 345
s += 16; 
# 346
remaining -= (16); 
# 347
} else { if ((Align >= (8)) && (remaining >= (8))) { 
# 348
pipeline_copy_strict< 8UL, 8UL> (dst, src); 
# 349
d += 8; 
# 350
s += 8; 
# 351
remaining -= (8); 
# 352
} else { if ((Align >= (4)) && (remaining >= (4))) { 
# 353
pipeline_copy_strict< 4UL, 4UL> (dst, src); 
# 354
d += 4; 
# 355
s += 4; 
# 356
remaining -= (4); 
# 357
} else { if ((Align >= (2)) && (remaining >= (2))) { 
# 358
(*(reinterpret_cast< short *>(d))) = (*(reinterpret_cast< const short *>(s))); 
# 359
d += 2; 
# 360
s += 2; 
# 361
remaining -= (2); 
# 362
} else { 
# 363
(*d) = (*s); 
# 364
d += 1; 
# 365
s += 1; 
# 366
remaining -= (1); 
# 367
}  }  }  }  
# 368
}  
# 369
} 
#endif
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_helpers.h"
}}}
# 56 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
__attribute__((unused)) static inline void __pipeline_memcpy_async(void *__restrict__ dst_shared, const void *__restrict__ src_global, ::size_t size_and_align, ::size_t 
# 57
zfill = 0) 
# 58
{int volatile ___ = 1;(void)dst_shared;(void)src_global;(void)size_and_align;(void)zfill;
# 114 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
::exit(___);}
#if 0
# 58 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
{ 
# 59 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(((size_and_align == (4)) || (size_and_align == (8))) || (size_and_align == (16)))) ? (void)0 : __assert_fail("(size_and_align == 4 || size_and_align == 8 || size_and_align == 16)", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 59, __extension__ __PRETTY_FUNCTION__); 
# 59 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 60 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(zfill <= size_and_align)) ? (void)0 : __assert_fail("(zfill <= size_and_align)", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 60, __extension__ __PRETTY_FUNCTION__); 
# 60 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 61 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(__isShared(dst_shared))) ? (void)0 : __assert_fail("(__isShared(dst_shared))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 61, __extension__ __PRETTY_FUNCTION__); 
# 61 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 62 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(__isGlobal(src_global))) ? (void)0 : __assert_fail("(__isGlobal(src_global))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 62, __extension__ __PRETTY_FUNCTION__); 
# 62 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 63 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst_shared)) & (size_and_align - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst_shared) & (size_and_align - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 63, __extension__ __PRETTY_FUNCTION__); 
# 63 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 64 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src_global)) & (size_and_align - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src_global) & (size_and_align - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 64, __extension__ __PRETTY_FUNCTION__); 
# 64 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 66
switch (size_and_align) { 
# 67
case 16:  
# 68
switch (zfill) { 
# 69
case 0:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 16UL> (dst_shared, src_global); return; 
# 70
case 1:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 15UL> (dst_shared, src_global); return; 
# 71
case 2:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 14UL> (dst_shared, src_global); return; 
# 72
case 3:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 13UL> (dst_shared, src_global); return; 
# 73
case 4:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 12UL> (dst_shared, src_global); return; 
# 74
case 5:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 11UL> (dst_shared, src_global); return; 
# 75
case 6:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 10UL> (dst_shared, src_global); return; 
# 76
case 7:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 9UL> (dst_shared, src_global); return; 
# 77
case 8:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 8UL> (dst_shared, src_global); return; 
# 78
case 9:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 7UL> (dst_shared, src_global); return; 
# 79
case 10:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 6UL> (dst_shared, src_global); return; 
# 80
case 11:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 5UL> (dst_shared, src_global); return; 
# 81
case 12:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 4UL> (dst_shared, src_global); return; 
# 82
case 13:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 3UL> (dst_shared, src_global); return; 
# 83
case 14:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 2UL> (dst_shared, src_global); return; 
# 84
case 15:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 1UL> (dst_shared, src_global); return; 
# 85
case 16:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 16UL, 0UL> (dst_shared, src_global); return; 
# 86
default:  
# 86 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 86, __extension__ __PRETTY_FUNCTION__); 
# 86 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; return; 
# 87
}  
# 88
case 8:  
# 89
switch (zfill) { 
# 90
case 0:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 8UL> (dst_shared, src_global); return; 
# 91
case 1:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 7UL> (dst_shared, src_global); return; 
# 92
case 2:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 6UL> (dst_shared, src_global); return; 
# 93
case 3:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 5UL> (dst_shared, src_global); return; 
# 94
case 4:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 4UL> (dst_shared, src_global); return; 
# 95
case 5:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 3UL> (dst_shared, src_global); return; 
# 96
case 6:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 2UL> (dst_shared, src_global); return; 
# 97
case 7:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 1UL> (dst_shared, src_global); return; 
# 98
case 8:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 8UL, 0UL> (dst_shared, src_global); return; 
# 99
default:  
# 99 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 99, __extension__ __PRETTY_FUNCTION__); 
# 99 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; return; 
# 100
}  
# 101
case 4:  
# 102
switch (zfill) { 
# 103
case 0:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 4UL, 4UL> (dst_shared, src_global); return; 
# 104
case 1:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 4UL, 3UL> (dst_shared, src_global); return; 
# 105
case 2:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 4UL, 2UL> (dst_shared, src_global); return; 
# 106
case 3:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 4UL, 1UL> (dst_shared, src_global); return; 
# 107
case 4:  nvcuda::experimental::__pipeline_internal::pipeline_memcpy_async< 4UL, 0UL> (dst_shared, src_global); return; 
# 108
default:  
# 108 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 108, __extension__ __PRETTY_FUNCTION__); 
# 108 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; return; 
# 109
}  
# 110
default:  
# 111 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h", 111, __extension__ __PRETTY_FUNCTION__); 
# 111 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
; 
# 112
return; 
# 113
}  
# 114
} 
#endif
# 117 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
__attribute__((unused)) static inline void __pipeline_commit() 
# 118
{int volatile ___ = 1;
# 120
::exit(___);}
#if 0
# 118
{ 
# 119
nvcuda::experimental::__pipeline_internal::pipeline_commit(); 
# 120
} 
#endif
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
__attribute__((unused)) static inline void __pipeline_wait_prior(::size_t prior) 
# 124
{int volatile ___ = 1;(void)prior;
# 136
::exit(___);}
#if 0
# 124
{ 
# 125
switch (prior) { 
# 126
case 0:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 0U> (); return; 
# 127
case 1:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 1U> (); return; 
# 128
case 2:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 2U> (); return; 
# 129
case 3:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 3U> (); return; 
# 130
case 4:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 4U> (); return; 
# 131
case 5:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 5U> (); return; 
# 132
case 6:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 6U> (); return; 
# 133
case 7:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 7U> (); return; 
# 134
default:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 8U> (); return; 
# 135
}  
# 136
} 
#endif
# 121 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
namespace nvcuda { namespace experimental { namespace __awbarrier_internal { 
# 123
extern "C" __attribute__((unused)) uint32_t __nvvm_get_smem_pointer(void *); 
# 125
template< bool UseHWAtomicArrive> struct ImplementationChooser; 
# 129
template<> struct ImplementationChooser< true>  { 
# 131
static void awbarrier_init(uint64_t *barrier, uint32_t expected_count) 
# 132
{int volatile ___ = 1;(void)barrier;(void)expected_count;
# 140 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 132 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 133 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 133, __extension__ __PRETTY_FUNCTION__); 
# 133 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 134 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>((expected_count > (0)) && (expected_count < (1 << 29)))) ? (void)0 : __assert_fail("(expected_count > 0 && expected_count < (1 << 29))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 134, __extension__ __PRETTY_FUNCTION__); 
# 134 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 136
__asm__ volatile("mbarrier.init.shared.b64 [%0], %1;" : : "r" (__nvvm_get_smem_pointer(barrier)), "r" (expected_count) : "memory"); 
# 140
} 
#endif
# 143 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static void awbarrier_inval(uint64_t *barrier) 
# 144
{int volatile ___ = 1;(void)barrier;
# 151 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 144 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 145 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 145, __extension__ __PRETTY_FUNCTION__); 
# 145 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 147
__asm__ volatile("mbarrier.inval.shared.b64 [%0];" : : "r" (__nvvm_get_smem_pointer(barrier)) : "memory"); 
# 151
} 
#endif
# 154 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static uint32_t awbarrier_token_pending_count(uint64_t token) 
# 155
{int volatile ___ = 1;(void)token;
# 162
::exit(___);}
#if 0
# 155
{ 
# 156
uint32_t pending_count; 
# 158
__asm__("mbarrier.pending_count.b64 %0, %1;" : "=r" (pending_count) : "l" (token)); 
# 161
return pending_count; 
# 162
} 
#endif
# 164 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> static uint64_t 
# 166
awbarrier_arrive_drop(uint64_t *barrier) 
# 167
{int volatile ___ = 1;(void)barrier;
# 185 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 167 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 168 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 168, __extension__ __PRETTY_FUNCTION__); 
# 168 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 170
uint64_t token; 
# 172
if (Drop) { 
# 173
__asm__ volatile("mbarrier.arrive_drop.shared.b64 %0, [%1];" : "=l" (token) : "r" (__nvvm_get_smem_pointer(barrier)) : "memory"); 
# 177
} else { 
# 178
__asm__ volatile("mbarrier.arrive.shared.b64 %0, [%1];" : "=l" (token) : "r" (__nvvm_get_smem_pointer(barrier)) : "memory"); 
# 182
}  
# 184
return token; 
# 185
} 
#endif
# 187 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> static uint64_t 
# 189
awbarrier_arrive_drop_no_complete(uint64_t *barrier, uint32_t count) 
# 190
{int volatile ___ = 1;(void)barrier;(void)count;
# 209 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 191, __extension__ __PRETTY_FUNCTION__); 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 192 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>((count > (0)) && (count < (1 << 29)))) ? (void)0 : __assert_fail("(count > 0 && count < (1 << 29))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 192, __extension__ __PRETTY_FUNCTION__); 
# 192 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 194
uint64_t token; 
# 196
if (Drop) { 
# 197
__asm__ volatile("mbarrier.arrive_drop.noComplete.shared.b64 %0, [%1], %2;" : "=l" (token) : "r" (__nvvm_get_smem_pointer(barrier)), "r" (count) : "memory"); 
# 201
} else { 
# 202
__asm__ volatile("mbarrier.arrive.noComplete.shared.b64 %0, [%1], %2;" : "=l" (token) : "r" (__nvvm_get_smem_pointer(barrier)), "r" (count) : "memory"); 
# 206
}  
# 208
return token; 
# 209
} 
#endif
# 212 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static bool awbarrier_test_wait(uint64_t *barrier, uint64_t token) 
# 213
{int volatile ___ = 1;(void)barrier;(void)token;
# 227 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 213 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 214 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 214, __extension__ __PRETTY_FUNCTION__); 
# 214 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 216
uint16_t wait_complete; 
# 218
__asm__ volatile("{    .reg .pred %%p;    mbarrier.test_wait.shared.b64 %%p, [%1], %2;    selp.u16 %0, 1, 0, %%p;}" : "=h" (wait_complete) : "r" (__nvvm_get_smem_pointer(barrier)), "l" (token) : "memory"); 
# 226
return (bool)wait_complete; 
# 227
} 
#endif
# 228 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
}; 
# 231
template<> struct ImplementationChooser< false>  { 
# 232
union AWBarrier { 
# 233
struct { 
# 234
uint32_t expected; 
# 235
uint32_t pending; 
# 236
} split; 
# 237
uint64_t raw; 
# 238
}; 
# 241
static void awbarrier_init(uint64_t *barrier, uint32_t expected_count) 
# 242
{int volatile ___ = 1;(void)barrier;(void)expected_count;
# 250 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 242 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 243 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 243, __extension__ __PRETTY_FUNCTION__); 
# 243 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 244 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>((expected_count > (0)) && (expected_count < (1 << 29)))) ? (void)0 : __assert_fail("(expected_count > 0 && expected_count < (1 << 29))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 244, __extension__ __PRETTY_FUNCTION__); 
# 244 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 246
AWBarrier *awbarrier = reinterpret_cast< AWBarrier *>(barrier); 
# 248
((awbarrier->split).expected) = ((1073741824) - expected_count); 
# 249
((awbarrier->split).pending) = (2147483648U - expected_count); 
# 250
} 
#endif
# 253 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static void awbarrier_inval(uint64_t *barrier) 
# 254
{int volatile ___ = 1;(void)barrier;
# 256 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 254 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 255 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 255, __extension__ __PRETTY_FUNCTION__); 
# 255 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 256
} 
#endif
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static uint32_t awbarrier_token_pending_count(uint64_t token) 
# 260
{int volatile ___ = 1;(void)token;
# 263
::exit(___);}
#if 0
# 260
{ 
# 261
const uint32_t pending = token >> 32; 
# 262
return 2147483648U - (pending & (2147483647)); 
# 263
} 
#endif
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> static uint64_t 
# 267
awbarrier_arrive_drop(uint64_t *barrier) 
# 268
{int volatile ___ = 1;(void)barrier;
# 297 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 268 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 269 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 269, __extension__ __PRETTY_FUNCTION__); 
# 269 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 271
AWBarrier *awbarrier = reinterpret_cast< AWBarrier *>(barrier); 
# 273
while (((*(reinterpret_cast< volatile uint32_t *>(&((awbarrier->split).pending)))) & (2147483647)) == (0)) { ; }  
# 275
if (Drop) { 
# 276
(void)atomicAdd_block(&((awbarrier->split).expected), 1); 
# 277
}  
# 279
__threadfence_block(); 
# 281
const uint32_t old_pending = atomicAdd_block(&((awbarrier->split).pending), 1); 
# 282
const uint32_t new_pending = old_pending + (1); 
# 283
const bool reset = (old_pending ^ new_pending) & 2147483648U; 
# 285
if (reset) { 
# 286
__threadfence_block(); 
# 288
uint32_t new_expected = *(reinterpret_cast< volatile uint32_t *>(&((awbarrier->split).expected))); 
# 289
new_expected &= (~1073741824); 
# 290
if (new_expected & (536870912)) { 
# 291
new_expected |= (1073741824); 
# 292
}  
# 293
atomicAdd_block(&((awbarrier->split).pending), new_expected); 
# 294
}  
# 296
return (static_cast< uint64_t>(old_pending)) << 32; 
# 297
} 
#endif
# 299 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> static uint64_t 
# 301
awbarrier_arrive_drop_no_complete(uint64_t *barrier, uint32_t count) 
# 302
{int volatile ___ = 1;(void)barrier;(void)count;
# 315 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 302 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 303 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 303, __extension__ __PRETTY_FUNCTION__); 
# 303 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 304 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>((count > (0)) && (count < (1 << 29)))) ? (void)0 : __assert_fail("(count > 0 && count < (1 << 29))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 304, __extension__ __PRETTY_FUNCTION__); 
# 304 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 306
AWBarrier *awbarrier = reinterpret_cast< AWBarrier *>(barrier); 
# 308
while (((*(reinterpret_cast< volatile uint32_t *>(&((awbarrier->split).pending)))) & (2147483647)) == (0)) { ; }  
# 310
if (Drop) { 
# 311
(void)atomicAdd_block(&((awbarrier->split).expected), count); 
# 312
}  
# 314
return (static_cast< uint64_t>(atomicAdd_block(&((awbarrier->split).pending), count))) << 32; 
# 315
} 
#endif
# 318 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
static bool awbarrier_test_wait(uint64_t *barrier, uint64_t token) 
# 319
{int volatile ___ = 1;(void)barrier;(void)token;
# 325 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
::exit(___);}
#if 0
# 319 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
{ 
# 320 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h", 320, __extension__ __PRETTY_FUNCTION__); 
# 320 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
; 
# 322
volatile AWBarrier *awbarrier = reinterpret_cast< volatile AWBarrier *>(barrier); 
# 324
return ((token >> 32) ^ ((awbarrier->split).pending)) & (2147483648U); 
# 325
} 
#endif
# 326 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
}; 
# 329
__attribute__((unused)) inline void awbarrier_init(uint64_t *barrier, uint32_t expected_count) 
# 330
{int volatile ___ = 1;(void)barrier;(void)expected_count;
# 332
::exit(___);}
#if 0
# 330
{ 
# 331
ImplementationChooser< false> ::awbarrier_init(barrier, expected_count); 
# 332
} 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
__attribute__((unused)) inline void awbarrier_inval(uint64_t *barrier) 
# 336
{int volatile ___ = 1;(void)barrier;
# 338
::exit(___);}
#if 0
# 336
{ 
# 337
ImplementationChooser< false> ::awbarrier_inval(barrier); 
# 338
} 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
__attribute__((unused)) inline uint32_t awbarrier_token_pending_count(uint64_t token) 
# 342
{int volatile ___ = 1;(void)token;
# 344
::exit(___);}
#if 0
# 342
{ 
# 343
return ImplementationChooser< false> ::awbarrier_token_pending_count(token); 
# 344
} 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> __attribute__((unused)) inline uint64_t 
# 348
awbarrier_arrive_drop_no_complete(uint64_t *barrier, uint32_t arrive_count) 
# 349
{int volatile ___ = 1;(void)barrier;(void)arrive_count;
# 351
::exit(___);}
#if 0
# 349
{ 
# 350
return ImplementationChooser< false> ::template awbarrier_arrive_drop_no_complete< Drop> (barrier, arrive_count); 
# 351
} 
#endif
# 353 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
template< bool Drop> __attribute__((unused)) inline uint64_t 
# 355
awbarrier_arrive_drop(uint64_t *barrier) 
# 356
{int volatile ___ = 1;(void)barrier;
# 358
::exit(___);}
#if 0
# 356
{ 
# 357
return ImplementationChooser< false> ::template awbarrier_arrive_drop< Drop> (barrier); 
# 358
} 
#endif
# 361 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
__attribute__((unused)) inline bool awbarrier_test_wait(uint64_t *barrier, uint64_t token) 
# 362
{int volatile ___ = 1;(void)barrier;(void)token;
# 364
::exit(___);}
#if 0
# 362
{ 
# 363
return ImplementationChooser< false> ::awbarrier_test_wait(barrier, token); 
# 364
} 
#endif
# 366 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_helpers.h"
}}}
# 59 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
typedef uint64_t __mbarrier_t; 
# 60
typedef uint64_t __mbarrier_token_t; 
# 63
static inline uint32_t __mbarrier_maximum_count() 
# 64
{ 
# 65
return ((1 << 14) - 1); 
# 66
} 
# 69
__attribute__((unused)) static inline void __mbarrier_init(__mbarrier_t *barrier, uint32_t expected_count) 
# 70
{int volatile ___ = 1;(void)barrier;(void)expected_count;
# 75 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
::exit(___);}
#if 0
# 70 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
{ 
# 71 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 71, __extension__ __PRETTY_FUNCTION__); 
# 71 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>((expected_count > (0)) && (expected_count <= ((1 << 14) - 1)))) ? (void)0 : __assert_fail("(expected_count > 0 && expected_count <= ((1 << 14) - 1))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 72, __extension__ __PRETTY_FUNCTION__); 
# 72 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 74
nvcuda::experimental::__awbarrier_internal::awbarrier_init(barrier, expected_count); 
# 75
} 
#endif
# 78 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
__attribute__((unused)) static inline void __mbarrier_inval(__mbarrier_t *barrier) 
# 79
{int volatile ___ = 1;(void)barrier;
# 83 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
::exit(___);}
#if 0
# 79 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
{ 
# 80 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 80, __extension__ __PRETTY_FUNCTION__); 
# 80 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 82
nvcuda::experimental::__awbarrier_internal::awbarrier_inval(barrier); 
# 83
} 
#endif
# 86 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
__attribute__((unused)) static inline __mbarrier_token_t __mbarrier_arrive(__mbarrier_t *barrier) 
# 87
{int volatile ___ = 1;(void)barrier;
# 91 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
::exit(___);}
#if 0
# 87 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
{ 
# 88 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 88, __extension__ __PRETTY_FUNCTION__); 
# 88 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 90
return nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop< false> (barrier); 
# 91
} 
#endif
# 94 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
__attribute__((unused)) static inline __mbarrier_token_t __mbarrier_arrive_and_drop(__mbarrier_t *barrier) 
# 95
{int volatile ___ = 1;(void)barrier;
# 99 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
::exit(___);}
#if 0
# 95 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
{ 
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 96, __extension__ __PRETTY_FUNCTION__); 
# 96 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 98
return nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop< true> (barrier); 
# 99
} 
#endif
# 102 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
__attribute__((unused)) static inline bool __mbarrier_test_wait(__mbarrier_t *barrier, __mbarrier_token_t token) 
# 103
{int volatile ___ = 1;(void)barrier;(void)token;
# 107 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
::exit(___);}
#if 0
# 103 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
{ 
# 104 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h", 104, __extension__ __PRETTY_FUNCTION__); 
# 104 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
; 
# 106
return nvcuda::experimental::__awbarrier_internal::awbarrier_test_wait(barrier, token); 
# 107
} 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier_primitives.h"
__attribute__((unused)) static inline uint32_t __mbarrier_token_pending_count(__mbarrier_token_t token) 
# 111
{int volatile ___ = 1;(void)token;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return nvcuda::experimental::__awbarrier_internal::awbarrier_token_pending_count(token); 
# 113
} 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline_primitives.h"
__attribute__((unused)) static inline void __pipeline_arrive_on(__mbarrier_t *barrier) 
# 143
{int volatile ___ = 1;(void)barrier;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
nvcuda::experimental::__pipeline_internal::pipeline_arrive_on(barrier); 
# 145
} 
#endif
# 64 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
namespace nvcuda { namespace experimental { 
# 66
class awbarrier { 
# 68
public: class arrival_token { 
# 70
public: arrival_token() = default;
# 71
~arrival_token() = default;
# 72
inline uint32_t pending_count() const; 
# 74
private: inline arrival_token(uint64_t token); 
# 75
uint64_t token; 
# 76
friend class awbarrier; 
# 77
}; 
# 78
awbarrier() = default;
# 79
awbarrier(const awbarrier &) = delete;
# 80
awbarrier &operator=(const awbarrier &) = delete;
# 81
~awbarrier() = default;
# 83
inline arrival_token arrive(); 
# 84
inline arrival_token arrive_and_drop(); 
# 85
inline bool timed_wait(arrival_token token, uint32_t hint_cycles); 
# 86
inline void wait(arrival_token token); 
# 87
inline void arrive_and_wait(); 
# 88
static constexpr uint32_t max(); 
# 90
private: uint64_t barrier; 
# 91
friend __attribute__((unused)) inline void init(nvcuda::experimental::awbarrier * barrier, uint32_t expected_count); 
# 92
friend __attribute__((unused)) inline void inval(nvcuda::experimental::awbarrier * barrier); 
# 93
friend class pipeline; 
# 94
}; 
# 97
inline uint32_t awbarrier::arrival_token::pending_count() const 
# 98
{int volatile ___ = 1;
# 101
::exit(___);}
#if 0
# 98
{ 
# 99
const uint32_t pending_count = nvcuda::experimental::__awbarrier_internal::awbarrier_token_pending_count(this->token); 
# 100
return (pending_count >> 15); 
# 101
} 
#endif
# 104 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline awbarrier::arrival_token::arrival_token(uint64_t token) : token(token) 
# 106
{int *volatile ___ = 0;(void)token;
# 107
::free(___);}
#if 0
# 106
{ 
# 107
} 
#endif
# 110 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
__attribute__((unused)) inline void init(awbarrier *barrier, uint32_t expected_count) 
# 111
{int volatile ___ = 1;(void)barrier;(void)expected_count;
# 118 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 111 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 112 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 112, __extension__ __PRETTY_FUNCTION__); 
# 112 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 113 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>((expected_count > (0)) && (expected_count <= ((1 << 14) - 1)))) ? (void)0 : __assert_fail("(expected_count > 0 && expected_count <= ((1 << 14) - 1))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 113, __extension__ __PRETTY_FUNCTION__); 
# 113 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 115
const uint32_t init_count = (expected_count << 15) + expected_count; 
# 117
nvcuda::experimental::__awbarrier_internal::awbarrier_init(&(barrier->barrier), init_count); 
# 118
} 
#endif
# 121 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
__attribute__((unused)) inline void inval(awbarrier *barrier) 
# 122
{int volatile ___ = 1;(void)barrier;
# 126 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 122 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(barrier))) ? (void)0 : __assert_fail("(__isShared(barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 123, __extension__ __PRETTY_FUNCTION__); 
# 123 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 125
nvcuda::experimental::__awbarrier_internal::awbarrier_inval(&(barrier->barrier)); 
# 126
} 
#endif
# 129 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline awbarrier::arrival_token awbarrier::arrive() 
# 130
{int volatile ___ = 1;
# 139 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 130 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 131 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(&(this->barrier)))) ? (void)0 : __assert_fail("(__isShared(&this->barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 131, __extension__ __PRETTY_FUNCTION__); 
# 131 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 133
const uint32_t arrive_count = (1 << 15); 
# 134
const uint64_t token = nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop_no_complete< false> (&(this->barrier), arrive_count); 
# 136
(void)nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop< false> (&(this->barrier)); 
# 138
return ((arrival_token)(token)); 
# 139
} 
#endif
# 142 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline awbarrier::arrival_token awbarrier::arrive_and_drop() 
# 143
{int volatile ___ = 1;
# 152 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 143 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 144 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(&(this->barrier)))) ? (void)0 : __assert_fail("(__isShared(&this->barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 144, __extension__ __PRETTY_FUNCTION__); 
# 144 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 146
const uint32_t arrive_count = (1 << 15); 
# 147
const uint64_t token = nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop_no_complete< true> (&(this->barrier), arrive_count); 
# 149
(void)nvcuda::experimental::__awbarrier_internal::awbarrier_arrive_drop< true> (&(this->barrier)); 
# 151
return ((arrival_token)(token)); 
# 152
} 
#endif
# 155 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline bool awbarrier::timed_wait(arrival_token token, uint32_t hint_cycles) 
# 156
{int volatile ___ = 1;(void)token;(void)hint_cycles;
# 185 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 156 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 157
constexpr uint64_t max_busy_wait_cycles = (1024); 
# 158
constexpr uint32_t max_sleep_ns = (1 << 20); 
# 160 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(&(this->barrier)))) ? (void)0 : __assert_fail("(__isShared(&this->barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 160, __extension__ __PRETTY_FUNCTION__); 
# 160 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 162
if (nvcuda::experimental::__awbarrier_internal::awbarrier_test_wait(&(this->barrier), token.token)) { 
# 163
return true; 
# 164
}  
# 166
uint64_t start_cycles = clock64(); 
# 167
uint64_t elapsed_cycles = (0); 
# 168
uint32_t sleep_ns = (32); 
# 169
while (elapsed_cycles < hint_cycles) { 
# 170
if (nvcuda::experimental::__awbarrier_internal::awbarrier_test_wait(&(this->barrier), token.token)) { 
# 171
return true; 
# 172
}  
# 174
if (elapsed_cycles > max_busy_wait_cycles) { 
# 175
__nanosleep(sleep_ns); 
# 176
if (sleep_ns < max_sleep_ns) { 
# 177
sleep_ns *= (2); 
# 178
}  
# 179
}  
# 181
elapsed_cycles = ((clock64()) - start_cycles); 
# 182
}  
# 184
return false; 
# 185
} 
#endif
# 188 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline void awbarrier::wait(arrival_token token) 
# 189
{int volatile ___ = 1;(void)token;
# 193 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 189 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(&(this->barrier)))) ? (void)0 : __assert_fail("(__isShared(&this->barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 190, __extension__ __PRETTY_FUNCTION__); 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 192
while (!this->timed_wait(token, ~0U)) { ; }  
# 193
} 
#endif
# 196 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
inline void awbarrier::arrive_and_wait() 
# 197
{int volatile ___ = 1;
# 201 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
::exit(___);}
#if 0
# 197 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
{ 
# 198 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h" 3
(static_cast< bool>(__isShared(&(this->barrier)))) ? (void)0 : __assert_fail("(__isShared(&this->barrier))", "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h", 198, __extension__ __PRETTY_FUNCTION__); 
# 198 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
; 
# 200
this->wait(this->arrive()); 
# 201
} 
#endif
# 204 "/home/poweruser/junda.feng/anaconda3/include/cuda_awbarrier.h"
constexpr uint32_t awbarrier::max() 
# 205
{ 
# 206
return ((1 << 14) - 1); 
# 207
} 
# 209
}}
# 77 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
namespace cuda { inline namespace __4 { 
# 78
struct __block_scope_barrier_base; 
# 79
}}
# 83
namespace nvcuda { namespace experimental { 
# 85
template< ::size_t N, class T> __attribute__((unused)) inline auto segment(T * ptr)->T (*)[N]; 
# 89
class pipeline { 
# 91
public: pipeline(const pipeline &) = delete;
# 92
pipeline(pipeline &&) = delete;
# 93
pipeline &operator=(const pipeline &) = delete;
# 94
pipeline &operator=(pipeline &&) = delete;
# 96
inline pipeline(); 
# 97
inline ::size_t commit(); 
# 98
inline void commit_and_wait(); 
# 99
inline void wait(::size_t batch); 
# 100
template< unsigned N> inline void wait_prior(); 
# 104
inline void arrive_on(awbarrier & barrier); 
# 105
inline void arrive_on(cuda::__4::__block_scope_barrier_base & barrier); 
# 109
private: ::size_t current_batch; 
# 110
}; 
# 112
template< class T> __attribute__((unused)) inline void memcpy_async(T & dst, const T & src, pipeline & pipe); 
# 116
template< class T, ::size_t DstN, ::size_t SrcN> __attribute__((unused)) inline void memcpy_async(T (* dst)[DstN], const T (* src)[SrcN], pipeline & pipe); 
# 120
template< ::size_t N, class T> __attribute__((unused)) inline auto 
# 122
segment(T *ptr)->T (*)[N] 
# 123
{int volatile ___ = 1;(void)ptr;
# 125
::exit(___);}
#if 0
# 123
{ 
# 124
return (T (*)[N])ptr; 
# 125
} 
#endif
# 128 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline pipeline::pipeline() : current_batch((0)) 
# 130
{int *volatile ___ = 0;
# 131
::free(___);}
#if 0
# 130
{ 
# 131
} 
#endif
# 134 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline ::size_t pipeline::commit() 
# 135
{int volatile ___ = 1;
# 138
::exit(___);}
#if 0
# 135
{ 
# 136
nvcuda::experimental::__pipeline_internal::pipeline_commit(); 
# 137
return (this->current_batch)++; 
# 138
} 
#endif
# 141 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline void pipeline::commit_and_wait() 
# 142
{int volatile ___ = 1;
# 145
::exit(___);}
#if 0
# 142
{ 
# 143
(void)this->pipeline::commit(); 
# 144
this->pipeline::wait_prior< 0U> (); 
# 145
} 
#endif
# 148 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline void pipeline::wait(::size_t batch) 
# 149
{int volatile ___ = 1;(void)batch;
# 163
::exit(___);}
#if 0
# 149
{ 
# 150
const ::size_t prior = ((this->current_batch) > batch) ? (this->current_batch) - batch : (0); 
# 152
switch (prior) { 
# 153
case 0:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 0U> (); break; 
# 154
case 1:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 1U> (); break; 
# 155
case 2:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 2U> (); break; 
# 156
case 3:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 3U> (); break; 
# 157
case 4:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 4U> (); break; 
# 158
case 5:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 5U> (); break; 
# 159
case 6:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 6U> (); break; 
# 160
case 7:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 7U> (); break; 
# 161
default:  nvcuda::experimental::__pipeline_internal::pipeline_wait_prior< 8U> (); break; 
# 162
}  
# 163
} 
#endif
# 165 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
template< unsigned N> inline void 
# 167
pipeline::wait_prior() 
# 168
{int volatile ___ = 1;
# 170
::exit(___);}
#if 0
# 168
{ 
# 169
__pipeline_internal::pipeline_wait_prior< N> (); 
# 170
} 
#endif
# 174 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline void pipeline::arrive_on(awbarrier &barrier) 
# 175
{int volatile ___ = 1;(void)barrier;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
nvcuda::experimental::__pipeline_internal::pipeline_arrive_on(&(barrier.barrier)); 
# 177
} 
#endif
# 180 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
inline void pipeline::arrive_on(cuda::__4::__block_scope_barrier_base &barrier) 
# 181
{int volatile ___ = 1;(void)barrier;
# 183
::exit(___);}
#if 0
# 181
{ 
# 182
nvcuda::experimental::__pipeline_internal::pipeline_arrive_on(reinterpret_cast< uint64_t *>(&barrier)); 
# 183
} 
#endif
# 186 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
template< class T> __attribute__((unused)) inline void 
# 188
memcpy_async(T &dst, const T &src, pipeline &pipe) 
# 189
{int volatile ___ = 1;(void)dst;(void)src;(void)pipe;
# 199 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
::exit(___);}
#if 0
# 189 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
{ 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(&src)) & (__alignof__(T) - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(&src) & (alignof(T) - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h", 190, __extension__ __PRETTY_FUNCTION__); 
# 190 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
; 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(&dst)) & (__alignof__(T) - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(&dst) & (alignof(T) - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h", 191, __extension__ __PRETTY_FUNCTION__); 
# 191 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
; 
# 193
if (__is_trivially_copyable(T)) { 
# 194
__pipeline_internal::pipeline_copy_relaxed< sizeof(T), __alignof__(T)> (reinterpret_cast< void *>(&dst), reinterpret_cast< const void *>(&src)); 
# 196
} else { 
# 197
dst = src; 
# 198
}  
# 199
} 
#endif
# 201 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
template< class T, ::size_t DstN, ::size_t SrcN> __attribute__((unused)) inline void 
# 203
memcpy_async(T (*dst)[DstN], const T (*src)[SrcN], pipeline &pipe) 
# 204
{int volatile ___ = 1;(void)dst;(void)src;(void)pipe;
# 220 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
::exit(___);}
#if 0
# 204 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
{ 
# 205
constexpr ::size_t dst_size = sizeof((*dst)); 
# 206
constexpr ::size_t src_size = sizeof((*src)); 
# 207
static_assert((((dst_size == (4)) || (dst_size == (8))) || (dst_size == (16))), "Unsupported copy size.");
# 208
static_assert((src_size <= dst_size), "Source size must be less than or equal to destination size.");
# 209 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(src)) & (dst_size - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(src) & (dst_size - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h", 209, __extension__ __PRETTY_FUNCTION__); 
# 209 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
; 
# 210 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h" 3
(static_cast< bool>(!((reinterpret_cast< uintptr_t>(dst)) & (dst_size - (1))))) ? (void)0 : __assert_fail("(!(reinterpret_cast<uintptr_t>(dst) & (dst_size - 1)))", "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h", 210, __extension__ __PRETTY_FUNCTION__); 
# 210 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
; 
# 212
if (__is_trivially_copyable(T)) { 
# 213
__pipeline_internal::pipeline_copy_strict< sizeof((*dst)), sizeof((*src))> (reinterpret_cast< void *>(*dst), reinterpret_cast< const void *>(*src)); 
# 215
} else { 
# 216
for (::size_t i = (0); i < DstN; ++i) { 
# 217
((*dst)[i]) = ((i < SrcN) ? (*src)[i] : T()); 
# 218
}  
# 219
}  
# 220
} 
#endif
# 222 "/home/poweruser/junda.feng/anaconda3/include/cuda_pipeline.h"
}}
# 57 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
namespace cooperative_groups { namespace __v1 { 
# 59
namespace details { 
# 61
template< class TyGroup> 
# 62
struct _async_copy_group_supported : public templates::false_type { }; 
# 64
template< unsigned Sz, class TyPar> 
# 65
struct _async_copy_group_supported< thread_block_tile< Sz, TyPar> >  : public templates::true_type { 
# 66
}; 
# 68
template<> struct _async_copy_group_supported< coalesced_group>  : public templates::true_type { }; 
# 70
template<> struct _async_copy_group_supported< thread_block>  : public templates::true_type { }; 
# 72
template< class TyGroup> using async_copy_group_supported = _async_copy_group_supported< remove_qual< TyGroup> > ; 
# 76
template< class TyGroup> 
# 77
struct _async_copy_optimize_tile : public templates::false_type { }; 
# 79
template< class TyPar> 
# 80
struct _async_copy_optimize_tile< thread_block_tile< 1, TyPar> >  : public templates::false_type { 
# 81
}; 
# 83
template< unsigned Sz, class TyPar> 
# 84
struct _async_copy_optimize_tile< thread_block_tile< Sz, TyPar> >  : public templates::true_type { 
# 85
}; 
# 87
template< class TyGroup> using async_copy_optimize_tile = _async_copy_optimize_tile< remove_qual< TyGroup> > ; 
# 91
template< class TyGroup> using enable_tile_optimization = typename templates::enable_if< _async_copy_optimize_tile< remove_qual< TyGroup> > ::value, void *> ::type; 
# 95
template< class TyGroup> using disable_tile_optimization = typename templates::enable_if< !_async_copy_optimize_tile< remove_qual< TyGroup> > ::value, void *> ::type; 
# 100
template< unsigned N> 
# 101
struct _Segment { 
# 102
int _seg[N]; 
# 103
}; 
# 106
template< unsigned N> struct Segment; 
# 109
template<> struct __attribute((aligned(4))) Segment< 1U>  : public _Segment< 1U>  { }; 
# 111
template<> struct __attribute((aligned(8))) Segment< 2U>  : public _Segment< 2U>  { }; 
# 113
template<> struct __attribute((aligned(16))) Segment< 4U>  : public _Segment< 4U>  { }; 
# 116
template< class TyGroup, class TyElem> 
# 117
__attribute((always_inline)) __attribute__((unused)) static inline void inline_copy(TyGroup &group, TyElem *__restrict__ dst, const TyElem *__restrict__ src, ::size_t 
# 118
count) {int volatile ___ = 1;(void)group;(void)dst;(void)src;(void)count;
# 125
::exit(___);}
#if 0
# 118
{ 
# 119
const unsigned rank = group.thread_rank(); 
# 120
const unsigned stride = group.size(); 
# 122
for (::size_t idx = (rank); idx < count; idx += stride) { 
# 123
(dst[idx]) = (src[idx]); 
# 124
}  
# 125
} 
#endif
# 127 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, enable_tile_optimization< TyGroup>   = nullptr> 
# 128
__attribute((always_inline)) __attribute__((unused)) static inline void accelerated_async_copy(TyGroup &group, TyElem *__restrict__ dst, const TyElem *__restrict__ 
# 129
src, ::size_t count) {int volatile ___ = 1;(void)group;(void)dst;(void)src;(void)count;
# 166
::exit(___);}
#if 0
# 129
{ 
# 130
static_assert((async_copy_group_supported< TyGroup> ::value), "Async copy is only supported for groups that represent private shared memory");
# 133
if (count == (0)) { 
# 134
return; 
# 135
}  
# 137
const bool dstIsNotShared = (!__isShared(dst)); 
# 138
const bool srcIsNotGlobal = (!__isGlobal(src)); 
# 140
if (dstIsNotShared || srcIsNotGlobal) { 
# 141
inline_copy(group, dst, src, count); 
# 142
return; 
# 143
}  
# 145
const unsigned stride = group.size(); 
# 146
const unsigned rank = group.thread_rank(); 
# 149
const unsigned subWarpMask = (stride - (1)); 
# 150
const unsigned subwarpCopies = subWarpMask & ((unsigned)count); 
# 151
const unsigned maxSubwarpRank = min(rank, subwarpCopies - (1)); 
# 153
const ::size_t warpCopies = count & (~subWarpMask); 
# 155
for (::size_t idx = (0); idx < warpCopies; idx += stride) { 
# 156
::size_t _srcIdx = rank + idx; 
# 157
::size_t _dstIdx = rank + idx; 
# 158
__pipeline_memcpy_async(dst + _dstIdx, src + _srcIdx, sizeof(TyElem)); 
# 159
}  
# 161
if (subwarpCopies) { 
# 162
::size_t _srcIdx = (warpCopies + maxSubwarpRank); 
# 163
::size_t _dstIdx = (warpCopies + maxSubwarpRank); 
# 164
__pipeline_memcpy_async(dst + _dstIdx, src + _srcIdx, sizeof(TyElem)); 
# 165
}  
# 166
} 
#endif
# 168 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, disable_tile_optimization< TyGroup>   = nullptr> 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline void accelerated_async_copy(TyGroup &group, TyElem *__restrict__ dst, const TyElem *__restrict__ 
# 170
src, ::size_t count) {int volatile ___ = 1;(void)group;(void)dst;(void)src;(void)count;
# 190
::exit(___);}
#if 0
# 170
{ 
# 171
static_assert((async_copy_group_supported< TyGroup> ::value), "Async copy is only supported for groups that represent private shared memory");
# 174
const bool dstIsNotShared = (!__isShared(dst)); 
# 175
const bool srcIsNotGlobal = (!__isGlobal(src)); 
# 177
if (dstIsNotShared || srcIsNotGlobal) { 
# 178
inline_copy(group, dst, src, count); 
# 179
return; 
# 180
}  
# 182
unsigned stride = group.size(); 
# 183
unsigned rank = group.thread_rank(); 
# 185
for (::size_t idx = rank; idx < count; idx += stride) { 
# 186
::size_t _srcIdx = idx; 
# 187
::size_t _dstIdx = idx; 
# 188
__pipeline_memcpy_async(dst + _dstIdx, src + _srcIdx, sizeof(TyElem)); 
# 189
}  
# 190
} 
#endif
# 194 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< unsigned MinAlignment, unsigned MaxAlignment> 
# 195
__attribute((always_inline)) __attribute__((unused)) static inline uint32_t find_best_alignment(void *__restrict__ dst, const void *__restrict__ src) {int volatile ___ = 1;(void)dst;(void)src;
# 212
::exit(___);}
#if 0
# 195
{ 
# 197
uint32_t base1 = (uint32_t)(reinterpret_cast< uintptr_t>(src)); 
# 198
uint32_t base2 = (uint32_t)(reinterpret_cast< uintptr_t>(dst)); 
# 200
uint32_t diff = ((base1 ^ base2) & (MaxAlignment - (1))); 
# 204
uint32_t out = MaxAlignment; 
# 206
#pragma unroll
for (
# 206
uint32_t alignment = (MaxAlignment >> 1); alignment >= MinAlignment; alignment >>= 1) { 
# 207
if (alignment & diff) { 
# 208
out = alignment; }  
# 209
}  
# 211
return out; 
# 212
} 
#endif
# 216 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyType, class TyGroup> 
# 217
__attribute((always_inline)) __attribute__((unused)) static inline void copy_like(const TyGroup &group, void *__restrict__ _dst, const void *__restrict__ _src, ::size_t 
# 218
count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 241
::exit(___);}
#if 0
# 218
{ 
# 219
const char *src = reinterpret_cast< const char *>(_src); 
# 220
char *dst = reinterpret_cast< char *>(_dst); 
# 222
constexpr uint32_t targetAlignment = ((uint32_t)__alignof__(TyType)); 
# 224
uint32_t base = (uint32_t)(reinterpret_cast< uintptr_t>(src)); 
# 225
uint32_t alignOffset = (((~base) + (1)) & (targetAlignment - (1))); 
# 227
inline_copy(group, dst, src, alignOffset); 
# 228
count -= alignOffset; 
# 229
src += alignOffset; 
# 230
dst += alignOffset; 
# 233
::size_t asyncCount = count / sizeof(TyType); 
# 234
accelerated_async_copy(group, reinterpret_cast< TyType *>(dst), reinterpret_cast< const TyType *>(src), asyncCount); 
# 235
asyncCount *= sizeof(TyType); 
# 237
count -= asyncCount; 
# 238
src += asyncCount; 
# 239
dst += asyncCount; 
# 240
inline_copy(group, dst, src, count); 
# 241
} 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< ::size_t AlignHint> 
# 245
struct _memcpy_async_align_dispatch { 
# 246
template< class TyGroup> 
# 247
__attribute((always_inline)) static void copy(TyGroup &group, void *__restrict__ dst, const void *__restrict__ src, ::size_t count) {int volatile ___ = 1;(void)group;(void)dst;(void)src;(void)count;
# 268
::exit(___);}
#if 0
# 247
{ 
# 248
uint32_t alignment = find_best_alignment< AlignHint, 16> (dst, src); 
# 250
switch (alignment) { 
# 251
default:  
# 252
case 1:  
# 253
inline_copy(group, reinterpret_cast< char *>(dst), reinterpret_cast< const char *>(src), count); 
# 254
break; 
# 255
case 2:  
# 256
inline_copy(group, reinterpret_cast< short *>(dst), reinterpret_cast< const short *>(src), count >> 1); 
# 257
break; 
# 258
case 4:  
# 259
copy_like< Segment< 1U> > (group, dst, src, count); 
# 260
break; 
# 261
case 8:  
# 262
copy_like< Segment< 2U> > (group, dst, src, count); 
# 263
break; 
# 264
case 16:  
# 265
copy_like< Segment< 4U> > (group, dst, src, count); 
# 266
break; 
# 267
}  
# 268
} 
#endif
# 269 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}; 
# 273
template<> struct _memcpy_async_align_dispatch< 4UL>  { 
# 274
template< class TyGroup> 
# 275
__attribute((always_inline)) static void copy(TyGroup &group, void *__restrict__ _dst, const void *__restrict__ _src, ::size_t 
# 276
count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 282
::exit(___);}
#if 0
# 276
{ 
# 277
const Segment< 1U>  *src = reinterpret_cast< const Segment< 1U>  *>(_src); 
# 278
Segment< 1U>  *dst = reinterpret_cast< Segment< 1U>  *>(_dst); 
# 281
accelerated_async_copy(group, dst, src, count / sizeof (*dst)); 
# 282
} 
#endif
# 283 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}; 
# 287
template<> struct _memcpy_async_align_dispatch< 8UL>  { 
# 288
template< class TyGroup> 
# 289
__attribute((always_inline)) static void copy(TyGroup &group, void *__restrict__ _dst, const void *__restrict__ _src, ::size_t 
# 290
count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 296
::exit(___);}
#if 0
# 290
{ 
# 291
const Segment< 2U>  *src = reinterpret_cast< const Segment< 2U>  *>(_src); 
# 292
Segment< 2U>  *dst = reinterpret_cast< Segment< 2U>  *>(_dst); 
# 295
accelerated_async_copy(group, dst, src, count / sizeof (*dst)); 
# 296
} 
#endif
# 297 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}; 
# 302
template<> struct _memcpy_async_align_dispatch< 16UL>  { 
# 303
template< class TyGroup> 
# 304
__attribute((always_inline)) static void copy(TyGroup &group, void *__restrict__ _dst, const void *__restrict__ _src, ::size_t 
# 305
count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 311
::exit(___);}
#if 0
# 305
{ 
# 306
const Segment< 4U>  *src = reinterpret_cast< const Segment< 4U>  *>(_src); 
# 307
Segment< 4U>  *dst = reinterpret_cast< Segment< 4U>  *>(_dst); 
# 310
accelerated_async_copy(group, dst, src, count / sizeof (*dst)); 
# 311
} 
#endif
# 312 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}; 
# 315
template< ::size_t Alignment, class TyGroup> 
# 316
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_dispatch_to_aligned_copy(const TyGroup &group, void *__restrict__ _dst, const void *__restrict__ 
# 317
_src, ::size_t count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 320
::exit(___);}
#if 0
# 317
{ 
# 318
static_assert((!(Alignment & (Alignment - (1)))), "Known static alignment dispatch must be a power of 2");
# 319
details::template _memcpy_async_align_dispatch< Alignment> ::copy(group, _dst, _src, count); 
# 320
} 
#endif
# 324 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class Ty> using is_void = templates::is_same< Ty, void> ; 
# 327
template< class Ty> using enable_if_not_void = typename templates::enable_if< !templates::is_same< Ty, void> ::value, void *> ::type; 
# 330
template< class Ty> using enable_if_void = typename templates::enable_if< templates::is_same< Ty, void> ::value, void *> ::type; 
# 333
template< class Ty> using enable_if_integral = typename templates::enable_if< templates::is_integral< Ty> ::value, void *> ::type; 
# 338
template< class TyGroup, template< ::size_t >  class Alignment, ::size_t Hint> 
# 339
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_bytes(const TyGroup &group, void *__restrict__ _dst, const void *__restrict__ 
# 340
_src, const Alignment< Hint>  &count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
constexpr ::size_t _align = ((Hint > (16)) ? 16 : Hint); 
# 343
details::_memcpy_async_dispatch_to_aligned_copy< _align> (group, _dst, _src, (::size_t)count); 
# 344
} 
#endif
# 347 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, class TySize, ::size_t Hint = __alignof__(TyElem), enable_if_not_void< TyElem>  
# 348
 = nullptr, enable_if_integral< TySize>   = nullptr> 
# 349
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_bytes(const TyGroup &group, TyElem *__restrict__ _dst, const TyElem *__restrict__ 
# 350
_src, const TySize &count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 354
::exit(___);}
#if 0
# 350
{ 
# 351
constexpr ::size_t _align = ((Hint > (16)) ? 16 : Hint); 
# 353
details::_memcpy_async_dispatch_to_aligned_copy< _align> (group, _dst, _src, count); 
# 354
} 
#endif
# 357 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, class TySize, enable_if_void< TyElem>   = nullptr, enable_if_integral< TySize>  
# 358
 = nullptr> 
# 359
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_bytes(const TyGroup &group, TyElem *__restrict__ _dst, const TyElem *__restrict__ 
# 360
_src, const TySize &count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 362
::exit(___);}
#if 0
# 360
{ 
# 361
details::_memcpy_async_dispatch_to_aligned_copy< 1> (group, _dst, _src, count); 
# 362
} 
#endif
# 365 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, ::size_t Hint = __alignof__(TyElem)> 
# 366
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_datum(const TyGroup &group, TyElem *__restrict__ dst, const ::size_t dstCount, const TyElem *__restrict__ 
# 367
src, const ::size_t srcCount) {int volatile ___ = 1;(void)group;(void)dst;(void)dstCount;(void)src;(void)srcCount;
# 372
::exit(___);}
#if 0
# 367
{ 
# 368
constexpr unsigned _align = (Hint); 
# 369
const ::size_t totalCount = min(dstCount, srcCount) * sizeof(TyElem); 
# 371
details::_memcpy_async_dispatch_to_aligned_copy< _align> (group, dst, src, totalCount); 
# 372
} 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, template< ::size_t >  class Alignment, ::size_t Hint> 
# 376
__attribute((always_inline)) __attribute__((unused)) static inline void _memcpy_async_datum(const TyGroup &group, TyElem *__restrict__ dst, const Alignment< Hint>  &dstCount, const TyElem *__restrict__ 
# 377
src, const Alignment< Hint>  &srcCount) {int volatile ___ = 1;(void)group;(void)dst;(void)dstCount;(void)src;(void)srcCount;
# 382
::exit(___);}
#if 0
# 377
{ 
# 378
constexpr unsigned _align = (Hint); 
# 379
const ::size_t totalCount = min((::size_t)dstCount, (::size_t)srcCount) * sizeof(TyElem); 
# 381
details::_memcpy_async_dispatch_to_aligned_copy< _align> (group, dst, src, totalCount); 
# 382
} 
#endif
# 384 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}
# 390
template< class TyGroup, class TyElem, class TySizeT> 
# 391
__attribute((always_inline)) __attribute__((unused)) static inline void memcpy_async(const TyGroup &group, TyElem *__restrict__ _dst, const TyElem *__restrict__ _src, const TySizeT &
# 392
count) {int volatile ___ = 1;(void)group;(void)_dst;(void)_src;(void)count;
# 395
::exit(___);}
#if 0
# 392
{ 
# 393
details::_memcpy_async_bytes(group, _dst, _src, count); 
# 394
__pipeline_commit(); 
# 395
} 
#endif
# 402 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem, class DstLayout, class SrcLayout> 
# 403
__attribute((always_inline)) __attribute__((unused)) static inline void memcpy_async(const TyGroup &group, TyElem *__restrict__ dst, const DstLayout &dstLayout, const TyElem *__restrict__ 
# 404
src, const SrcLayout &srcLayout) {int volatile ___ = 1;(void)group;(void)dst;(void)dstLayout;(void)src;(void)srcLayout;
# 407
::exit(___);}
#if 0
# 404
{ 
# 405
details::_memcpy_async_datum(group, dst, dstLayout, src, srcLayout); 
# 406
__pipeline_commit(); 
# 407
} 
#endif
# 410 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< unsigned Stage, class TyGroup> 
# 411
__attribute((always_inline)) __attribute__((unused)) static inline void wait_prior(const TyGroup &group) {int volatile ___ = 1;(void)group;
# 414
::exit(___);}
#if 0
# 411
{ 
# 412
__pipeline_wait_prior(Stage); 
# 413
group.sync(); 
# 414
} 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup> 
# 418
__attribute((always_inline)) __attribute__((unused)) static inline void wait(const TyGroup &group) {int volatile ___ = 1;(void)group;
# 421
::exit(___);}
#if 0
# 418
{ 
# 419
__pipeline_wait_prior(0); 
# 420
group.sync(); 
# 421
} 
#endif
# 427 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup, class TyElem> 
# 428
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void memcpy_async(TyGroup &group, TyElem *dst, ::size_t dstCount, const TyElem *src, ::size_t srcCount, nvcuda::experimental::pipeline &
# 429
pipe) {int volatile ___ = 1;(void)group;(void)dst;(void)dstCount;(void)src;(void)srcCount;(void)pipe;
# 432
::exit(___);}
#if 0
# 429
{ 
# 430
details::_memcpy_async_datum(group, dst, dstCount, src, srcCount); 
# 431
pipe.commit(); 
# 432
} 
#endif
# 435 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< unsigned Stage, class TyGroup> 
# 436
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void wait_prior(TyGroup &group, nvcuda::experimental::pipeline &pipe) {int volatile ___ = 1;(void)group;(void)pipe;
# 439
::exit(___);}
#if 0
# 436
{ 
# 437
pipe.template wait_prior< Stage> (); 
# 438
group.sync(); 
# 439
} 
#endif
# 442 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
template< class TyGroup> 
# 443
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void wait(TyGroup &group, nvcuda::experimental::pipeline &pipe, ::size_t stage) {int volatile ___ = 1;(void)group;(void)pipe;(void)stage;
# 446
::exit(___);}
#if 0
# 443
{ 
# 444
pipe.wait(stage); 
# 445
group.sync(); 
# 446
} 
#endif
# 447 "/home/poweruser/junda.feng/anaconda3/include/cooperative_groups/details/async.h"
}using namespace __v1;}
# 134 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
struct __half; 
# 147 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
struct __half2; 
# 163 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __double2half(const double a); 
# 178 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __float2half(const float a); 
# 193 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __float2half_rn(const float a); 
# 208 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __float2half_rz(const float a); 
# 224 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __float2half_rd(const float a); 
# 240 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __float2half_ru(const float a); 
# 255 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline float __half2float(const __half a); 
# 273 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half2 __float2half2_rn(const float a); 
# 294 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half2 __floats2half2_rn(const float a, const float b); 
# 310 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline float __low2float(const __half2 a); 
# 326 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline float __high2float(const __half2 a); 
# 348 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half2 __float22half2_rn(const float2 a); 
# 364 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline float2 __half22float2(const __half2 a); 
# 380 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rn(const __half h); 
# 396 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline int __half2int_rz(const __half h); 
# 412 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rd(const __half h); 
# 428 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_ru(const __half h); 
# 445 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __int2half_rn(const int i); 
# 461 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rz(const int i); 
# 477 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rd(const int i); 
# 493 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_ru(const int i); 
# 511 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rn(const __half h); 
# 527 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline short __half2short_rz(const __half h); 
# 543 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rd(const __half h); 
# 559 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_ru(const __half h); 
# 577 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __short2half_rn(const short i); 
# 593 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rz(const short i); 
# 609 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rd(const short i); 
# 625 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_ru(const short i); 
# 642 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h); 
# 658 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline unsigned __half2uint_rz(const __half h); 
# 674 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h); 
# 690 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h); 
# 707 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __uint2half_rn(const unsigned i); 
# 723 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i); 
# 739 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i); 
# 755 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i); 
# 773 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h); 
# 790 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline unsigned short __half2ushort_rz(const __half h); 
# 802 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h); 
# 814 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h); 
# 832 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __ushort2half_rn(const unsigned short i); 
# 849 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i); 
# 865 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i); 
# 881 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i); 
# 899 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h); 
# 916 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline unsigned long long __half2ull_rz(const __half h); 
# 932 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h); 
# 948 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h); 
# 966 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __ull2half_rn(const unsigned long long i); 
# 983 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i); 
# 999 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i); 
# 1015 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i); 
# 1033 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h); 
# 1049 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline long long __half2ll_rz(const __half h); 
# 1065 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h); 
# 1081 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h); 
# 1099 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
static inline __half __ll2half_rn(const long long i); 
# 1111 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rz(const long long i); 
# 1127 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i); 
# 1143 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i); 
# 1160 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half htrunc(const __half h); 
# 1175 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hceil(const __half h); 
# 1190 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hfloor(const __half h); 
# 1207 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrint(const __half h); 
# 1224 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h); 
# 1240 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h); 
# 1256 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h); 
# 1274 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h); 
# 1291 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __half2half2(const __half a); 
# 1307 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a); 
# 1327 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b); 
# 1347 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b); 
# 1362 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __high2half(const __half2 a); 
# 1377 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __low2half(const __half2 a); 
# 1394 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline int __hisinf(const __half a); 
# 1412 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b); 
# 1428 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a); 
# 1444 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a); 
# 1461 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half_as_short(const __half h); 
# 1477 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h); 
# 1493 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short_as_half(const short i); 
# 1509 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i); 
# 1528 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width = 32); 
# 1529
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width = 32); 
# 1530
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width = 32); 
# 1531
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width = 32); 
# 1532
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width = 32); 
# 1533
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width = 32); 
# 1534
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width = 32); 
# 1535
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width = 32); 
# 1561 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1586 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1611 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1635 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1660 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1684 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1709 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1733 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1748 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr); 
# 1755
__attribute__((unused)) static inline __half __ldg(const __half *const ptr); 
# 1762
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr); 
# 1769
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr); 
# 1776
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr); 
# 1783
__attribute__((unused)) static inline __half __ldca(const __half *const ptr); 
# 1790
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr); 
# 1797
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr); 
# 1804
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr); 
# 1811
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr); 
# 1818
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr); 
# 1825
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr); 
# 1832
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value); 
# 1839
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value); 
# 1846
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value); 
# 1853
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value); 
# 1860
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value); 
# 1867
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value); 
# 1874
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value); 
# 1881
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value); 
# 1902 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b); 
# 1920 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b); 
# 1938 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b); 
# 1956 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b); 
# 1974 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b); 
# 1992 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b); 
# 2010 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b); 
# 2028 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b); 
# 2046 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b); 
# 2064 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b); 
# 2082 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b); 
# 2100 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b); 
# 2116 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a); 
# 2136 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b); 
# 2156 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b); 
# 2176 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b); 
# 2196 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b); 
# 2217 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b); 
# 2238 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b); 
# 2258 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b); 
# 2275 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a); 
# 2294 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b); 
# 2313 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b); 
# 2333 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b); 
# 2356 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c); 
# 2378 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c); 
# 2397 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a); 
# 2412 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __habs(const __half a); 
# 2432 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b); 
# 2452 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b); 
# 2468 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b); 
# 2488 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b); 
# 2508 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b); 
# 2524 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b); 
# 2544 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b); 
# 2562 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b); 
# 2581 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b); 
# 2600 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b); 
# 2623 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c); 
# 2645 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c); 
# 2663 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hneg(const __half a); 
# 2685 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b); 
# 2707 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b); 
# 2729 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b); 
# 2751 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b); 
# 2773 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b); 
# 2795 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b); 
# 2817 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b); 
# 2839 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b); 
# 2861 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b); 
# 2884 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b); 
# 2906 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b); 
# 2929 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b); 
# 2946 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b); 
# 2963 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b); 
# 2980 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b); 
# 2997 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b); 
# 3014 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b); 
# 3031 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b); 
# 3049 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b); 
# 3067 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b); 
# 3085 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b); 
# 3103 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b); 
# 3121 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b); 
# 3139 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b); 
# 3154 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hisnan(const __half a); 
# 3174 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b); 
# 3193 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b); 
# 3211 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b); 
# 3229 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b); 
# 3251 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c); 
# 3272 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b); 
# 3293 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b); 
# 3313 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b); 
# 3333 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b); 
# 3355 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c); 
# 3375 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c); 
# 3390 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsqrt(const __half a); 
# 3407 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrsqrt(const __half a); 
# 3422 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrcp(const __half a); 
# 3438 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog(const __half a); 
# 3454 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog2(const __half a); 
# 3470 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog10(const __half a); 
# 3487 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp(const __half a); 
# 3504 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp2(const __half a); 
# 3521 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp10(const __half a); 
# 3536 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hcos(const __half a); 
# 3551 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsin(const __half a); 
# 3567 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a); 
# 3584 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a); 
# 3600 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a); 
# 3617 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log(const __half2 a); 
# 3634 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a); 
# 3651 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a); 
# 3668 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a); 
# 3685 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a); 
# 3702 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a); 
# 3718 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a); 
# 3733 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a); 
# 3757 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val); 
# 3779 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.h"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val); 
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
typedef 
# 151
struct __attribute((aligned(2))) { 
# 152
unsigned short x; 
# 153
} __half_raw; 
# 158
typedef 
# 155
struct __attribute((aligned(4))) { 
# 156
unsigned short x; 
# 157
unsigned short y; 
# 158
} __half2_raw; 
# 166
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 179 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
struct __attribute((aligned(2))) __half { 
# 181
protected: unsigned short __x; 
# 185
public: __half() = default;
# 191
__half(const __half_raw &hr) : __x(hr.x) { } 
# 192
__half &operator=(const __half_raw &hr) { (__x) = (hr.x); return *this; } 
# 193
volatile __half &operator=(const __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 194
volatile __half &operator=(const volatile __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 195
operator __half_raw() const { __half_raw ret; (ret.x) = (__x); return ret; } 
# 196
operator __half_raw() const volatile { __half_raw ret; (ret.x) = (__x); return ret; } 
# 201
__half(const float f) { (__x) = (__float2half(f).__x); } 
# 202
__half(const double f) { (__x) = (__double2half(f).__x); } 
# 204
operator float() const { return __half2float(*this); } 
# 205
__half &operator=(const float f) { (__x) = (__float2half(f).__x); return *this; } 
# 208
__half &operator=(const double f) { (__x) = (__double2half(f).__x); return *this; } 
# 214
__half(const short val) { (__x) = (__short2half_rn(val).__x); } 
# 215
__half(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); } 
# 216
__half(const int val) { (__x) = (__int2half_rn(val).__x); } 
# 217
__half(const unsigned val) { (__x) = (__uint2half_rn(val).__x); } 
# 218
__half(const long long val) { (__x) = (__ll2half_rn(val).__x); } 
# 219
__half(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); } 
# 222
operator short() const { return __half2short_rz(*this); } 
# 223
__half &operator=(const short val) { (__x) = (__short2half_rn(val).__x); return *this; } 
# 225
operator unsigned short() const { return __half2ushort_rz(*this); } 
# 226
__half &operator=(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); return *this; } 
# 228
operator int() const { return __half2int_rz(*this); } 
# 229
__half &operator=(const int val) { (__x) = (__int2half_rn(val).__x); return *this; } 
# 231
operator unsigned() const { return __half2uint_rz(*this); } 
# 232
__half &operator=(const unsigned val) { (__x) = (__uint2half_rn(val).__x); return *this; } 
# 234
operator long long() const { return __half2ll_rz(*this); } 
# 235
__half &operator=(const long long val) { (__x) = (__ll2half_rn(val).__x); return *this; } 
# 237
operator unsigned long long() const { return __half2ull_rz(*this); } 
# 238
__half &operator=(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); return *this; } 
# 241
operator bool() const { return ((__x) & 32767U) != 0U; } 
# 244
}; 
# 253 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 253
{ return __hadd(lh, rh); } 
#endif
# 254 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 254
{ return __hsub(lh, rh); } 
#endif
# 255 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator*(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 255
{ return __hmul(lh, rh); } 
#endif
# 256 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator/(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 256
{ return __hdiv(lh, rh); } 
#endif
# 258 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator+=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 258
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 259 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator-=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 259
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 260 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator*=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 260
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 261 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator/=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 261
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 264 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator++(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 264
{ __half_raw one; (one.x) = (15360U); (h += one); return h; } 
#endif
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator--(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 265
{ __half_raw one; (one.x) = (15360U); (h -= one); return h; } 
#endif
# 266 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator++(__half &h, const int ignored) 
# 267
{int volatile ___ = 1;(void)h;(void)ignored;
# 276
::exit(___);}
#if 0
# 267
{ 
# 269
static_cast< void>(ignored); 
# 271
const __half ret = h; 
# 272
__half_raw one; 
# 273
(one.x) = (15360U); 
# 274
(h += one); 
# 275
return ret; 
# 276
} 
#endif
# 277 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator--(__half &h, const int ignored) 
# 278
{int volatile ___ = 1;(void)h;(void)ignored;
# 287
::exit(___);}
#if 0
# 278
{ 
# 280
static_cast< void>(ignored); 
# 282
const __half ret = h; 
# 283
__half_raw one; 
# 284
(one.x) = (15360U); 
# 285
(h -= one); 
# 286
return ret; 
# 287
} 
#endif
# 290 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 290
{ return h; } 
#endif
# 291 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 291
{ return __hneg(h); } 
#endif
# 294 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 294
{ return __heq(lh, rh); } 
#endif
# 295 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 295
{ return __hneu(lh, rh); } 
#endif
# 296 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 296
{ return __hgt(lh, rh); } 
#endif
# 297 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 297
{ return __hlt(lh, rh); } 
#endif
# 298 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 298
{ return __hge(lh, rh); } 
#endif
# 299 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 299
{ return __hle(lh, rh); } 
#endif
# 305 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
struct __attribute((aligned(4))) __half2 { 
# 306
__half x; 
# 307
__half y; 
# 312
__half2() = default;
# 313
__half2(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 314
__half2 &operator=(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 318
__half2(const __half &a, const __half &b) : x(a), y(b) { } 
# 319
__half2(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 320
__half2 &operator=(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 323
__half2(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 324
__half2 &operator=(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 325
operator __half2_raw() const { __half2_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 326
}; 
# 334
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 334
{ return __hadd2(lh, rh); } 
#endif
# 335 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 335
{ return __hsub2(lh, rh); } 
#endif
# 336 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator*(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 336
{ return __hmul2(lh, rh); } 
#endif
# 337 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator/(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 337
{ return __h2div(lh, rh); } 
#endif
# 339 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator+=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 339
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 340 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator-=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 340
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator*=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 341
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 342 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator/=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 342
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 344 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator++(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 344
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hadd2(h, one))); return h; } 
#endif
# 345 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator--(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 345
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hsub2(h, one))); return h; } 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator++(__half2 &h, const int ignored) 
# 347
{int volatile ___ = 1;(void)h;(void)ignored;
# 357
::exit(___);}
#if 0
# 347
{ 
# 349
static_cast< void>(ignored); 
# 351
const __half2 ret = h; 
# 352
__half2_raw one; 
# 353
(one.x) = (15360U); 
# 354
(one.y) = (15360U); 
# 355
(h = (__hadd2(h, one))); 
# 356
return ret; 
# 357
} 
#endif
# 358 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator--(__half2 &h, const int ignored) 
# 359
{int volatile ___ = 1;(void)h;(void)ignored;
# 369
::exit(___);}
#if 0
# 359
{ 
# 361
static_cast< void>(ignored); 
# 363
const __half2 ret = h; 
# 364
__half2_raw one; 
# 365
(one.x) = (15360U); 
# 366
(one.y) = (15360U); 
# 367
(h = (__hsub2(h, one))); 
# 368
return ret; 
# 369
} 
#endif
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 371
{ return h; } 
#endif
# 372 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 372
{ return __hneg2(h); } 
#endif
# 374 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 374
{ return __hbeq2(lh, rh); } 
#endif
# 375 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 375
{ return __hbneu2(lh, rh); } 
#endif
# 376 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 376
{ return __hbgt2(lh, rh); } 
#endif
# 377 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 377
{ return __hblt2(lh, rh); } 
#endif
# 378 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 378
{ return __hbge2(lh, rh); } 
#endif
# 379 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 379
{ return __hble2(lh, rh); } 
#endif
# 392 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
#pragma GCC diagnostic pop
# 400
static inline unsigned short __internal_float2half(const float f, unsigned &sign, unsigned &remainder) 
# 401
{ 
# 402
unsigned x; 
# 403
unsigned u; 
# 404
unsigned result; 
# 406
(void)memcpy(&x, &f, sizeof f); 
# 410
u = (x & 2147483647U); 
# 411
sign = ((x >> 16U) & 32768U); 
# 413
if (u >= 2139095040U) { 
# 414
remainder = 0U; 
# 415
result = ((u == 2139095040U) ? sign | 31744U : 32767U); 
# 416
} else { if (u > 1199566847U) { 
# 417
remainder = 2147483648U; 
# 418
result = (sign | 31743U); 
# 419
} else { if (u >= 947912704U) { 
# 420
remainder = (u << 19U); 
# 421
u -= 939524096U; 
# 422
result = (sign | (u >> 13U)); 
# 423
} else { if (u < 855638017U) { 
# 424
remainder = u; 
# 425
result = sign; 
# 426
} else { 
# 427
const unsigned exponent = u >> 23U; 
# 428
const unsigned shift = 126U - exponent; 
# 429
unsigned mantissa = u & 8388607U; 
# 430
mantissa |= 8388608U; 
# 431
remainder = (mantissa << (32U - shift)); 
# 432
result = (sign | (mantissa >> shift)); 
# 433
result &= 65535U; 
# 434
}  }  }  }  
# 435
return static_cast< unsigned short>(result); 
# 436
} 
# 439
static inline __half __double2half(const double a) 
# 440
{ 
# 446
__half result; 
# 451
unsigned long long absa; 
# 452
unsigned long long ua; 
# 454
(void)memcpy(&ua, &a, sizeof a); 
# 458
absa = (ua & 9223372036854775807ULL); 
# 459
if ((absa >= 4679240012837945344ULL) || (absa <= 4494592428115755008ULL)) 
# 460
{ 
# 463
result = __float2half(static_cast< float>(a)); 
# 464
} else 
# 466
{ 
# 477 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
unsigned long long shifterBits; 
# 478
if (absa >= 4544132024016830464ULL) 
# 479
{ 
# 481
shifterBits = ((ua & 9218868437227405312ULL) + 189151184349560832ULL); 
# 482
} else 
# 484
{ 
# 486
shifterBits = 4733283208366391296ULL; 
# 487
}  
# 489
shifterBits |= 2251799813685248ULL; 
# 490
double shifter; 
# 492
(void)memcpy(&shifter, &shifterBits, sizeof shifterBits); 
# 496
double aShiftRound = a + shifter; 
# 500
unsigned long long aShiftRoundBits; 
# 502
(void)memcpy(&aShiftRoundBits, &aShiftRound, sizeof aShiftRound); 
# 508
aShiftRoundBits &= 9223372036854775807ULL; 
# 511
(void)memcpy(&aShiftRound, &aShiftRoundBits, sizeof aShiftRound); 
# 516
result = __float2half(static_cast< float>(aShiftRound - shifter)); 
# 517
}  
# 519
return result; 
# 521
} 
# 523
static inline __half __float2half(const float a) 
# 524
{ 
# 525
__half val; 
# 529
__half_raw r; 
# 530
unsigned sign = 0U; 
# 531
unsigned remainder = 0U; 
# 532
(r.x) = __internal_float2half(a, sign, remainder); 
# 533
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 534
(r.x)++; 
# 535
}  
# 536
(val = r); 
# 538
return val; 
# 539
} 
# 540
static inline __half __float2half_rn(const float a) 
# 541
{ 
# 542
__half val; 
# 546
__half_raw r; 
# 547
unsigned sign = 0U; 
# 548
unsigned remainder = 0U; 
# 549
(r.x) = __internal_float2half(a, sign, remainder); 
# 550
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 551
(r.x)++; 
# 552
}  
# 553
(val = r); 
# 555
return val; 
# 556
} 
# 557
static inline __half __float2half_rz(const float a) 
# 558
{ 
# 559
__half val; 
# 563
__half_raw r; 
# 564
unsigned sign = 0U; 
# 565
unsigned remainder = 0U; 
# 566
(r.x) = __internal_float2half(a, sign, remainder); 
# 567
(val = r); 
# 569
return val; 
# 570
} 
# 571
static inline __half __float2half_rd(const float a) 
# 572
{ 
# 573
__half val; 
# 577
__half_raw r; 
# 578
unsigned sign = 0U; 
# 579
unsigned remainder = 0U; 
# 580
(r.x) = __internal_float2half(a, sign, remainder); 
# 581
if ((remainder != 0U) && (sign != 0U)) { 
# 582
(r.x)++; 
# 583
}  
# 584
(val = r); 
# 586
return val; 
# 587
} 
# 588
static inline __half __float2half_ru(const float a) 
# 589
{ 
# 590
__half val; 
# 594
__half_raw r; 
# 595
unsigned sign = 0U; 
# 596
unsigned remainder = 0U; 
# 597
(r.x) = __internal_float2half(a, sign, remainder); 
# 598
if ((remainder != 0U) && (sign == 0U)) { 
# 599
(r.x)++; 
# 600
}  
# 601
(val = r); 
# 603
return val; 
# 604
} 
# 605
static inline __half2 __float2half2_rn(const float a) 
# 606
{ 
# 607
__half2 val; 
# 613
(val = __half2(__float2half_rn(a), __float2half_rn(a))); 
# 615
return val; 
# 616
} 
# 617
static inline __half2 __floats2half2_rn(const float a, const float b) 
# 618
{ 
# 619
__half2 val; 
# 631 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(b))); 
# 633
return val; 
# 634
} 
# 637
static inline float __internal_half2float(const unsigned short h) 
# 638
{ 
# 639
unsigned sign = ((static_cast< unsigned>(h)) >> 15U) & 1U; 
# 640
unsigned exponent = ((static_cast< unsigned>(h)) >> 10U) & 31U; 
# 641
unsigned mantissa = ((static_cast< unsigned>(h)) & 1023U) << 13U; 
# 642
float f; 
# 643
if (exponent == 31U) { 
# 645
sign = ((mantissa != 0U) ? sign >> 1U : sign); 
# 646
mantissa = ((mantissa != 0U) ? 8388607U : 0U); 
# 647
exponent = 255U; 
# 648
} else { if (exponent == 0U) { 
# 649
if (mantissa != 0U) { 
# 650
unsigned msb; 
# 651
exponent = 113U; 
# 652
do { 
# 653
msb = (mantissa & 4194304U); 
# 654
mantissa <<= 1U; 
# 655
--exponent; 
# 656
} while (msb == 0U); 
# 657
mantissa &= 8388607U; 
# 658
}  
# 659
} else { 
# 660
exponent += 112U; 
# 661
}  }  
# 662
const unsigned u = ((sign << 31U) | (exponent << 23U)) | mantissa; 
# 664
(void)memcpy(&f, &u, sizeof u); 
# 668
return f; 
# 669
} 
# 672
static inline float __half2float(const __half a) 
# 673
{ 
# 674
float val; 
# 678
val = __internal_half2float(((__half_raw)a).x); 
# 680
return val; 
# 681
} 
# 682
static inline float __low2float(const __half2 a) 
# 683
{ 
# 684
float val; 
# 690
val = __internal_half2float(((__half2_raw)a).x); 
# 692
return val; 
# 693
} 
# 694
static inline float __high2float(const __half2 a) 
# 695
{ 
# 696
float val; 
# 702
val = __internal_half2float(((__half2_raw)a).y); 
# 704
return val; 
# 705
} 
# 711
static inline __half2 make_half2(const __half x, const __half y) 
# 712
{ 
# 713
__half2 t; (t.x) = x; (t.y) = y; return t; 
# 714
} 
# 719
static inline __half2 __float22half2_rn(const float2 a) 
# 720
{ 
# 721
const __half2 val = __floats2half2_rn(a.x, a.y); 
# 722
return val; 
# 723
} 
# 724
static inline float2 __half22float2(const __half2 a) 
# 725
{ 
# 726
float hi_float; 
# 727
float lo_float; 
# 737 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
lo_float = __internal_half2float(((__half2_raw)a).x); 
# 738
hi_float = __internal_half2float(((__half2_raw)a).y); 
# 740
return make_float2(lo_float, hi_float); 
# 741
} 
# 742
__attribute__((unused)) static inline int __half2int_rn(const __half h) 
# 743
{int volatile ___ = 1;(void)h;
# 747
::exit(___);}
#if 0
# 743
{ 
# 744
int i; 
# 745
__asm__("cvt.rni.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 746
return i; 
# 747
} 
#endif
# 748 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline int __half2int_rz(const __half h) 
# 749
{ 
# 750
int i; 
# 754
const float f = __half2float(h); 
# 755
i = (static_cast< int>(f)); 
# 756
const int max_val = ((int)2147483647U); 
# 757
const int min_val = ((int)2147483648U); 
# 758
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 760
if (bits > ((unsigned short)63488U)) { 
# 762
i = 0; 
# 763
} else { if (f > (static_cast< float>(max_val))) { 
# 765
i = max_val; 
# 766
} else { if (f < (static_cast< float>(min_val))) { 
# 768
i = min_val; 
# 769
} else { 
# 771
}  }  }  
# 773
return i; 
# 774
} 
# 775
__attribute__((unused)) static inline int __half2int_rd(const __half h) 
# 776
{int volatile ___ = 1;(void)h;
# 780
::exit(___);}
#if 0
# 776
{ 
# 777
int i; 
# 778
__asm__("cvt.rmi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 779
return i; 
# 780
} 
#endif
# 781 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_ru(const __half h) 
# 782
{int volatile ___ = 1;(void)h;
# 786
::exit(___);}
#if 0
# 782
{ 
# 783
int i; 
# 784
__asm__("cvt.rpi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 785
return i; 
# 786
} 
#endif
# 787 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __int2half_rn(const int i) 
# 788
{ 
# 789
__half h; 
# 797
const float f = static_cast< float>(i); 
# 798
h = __float2half_rn(f); 
# 800
return h; 
# 801
} 
# 802
__attribute__((unused)) static inline __half __int2half_rz(const int i) 
# 803
{int volatile ___ = 1;(void)i;
# 807
::exit(___);}
#if 0
# 803
{ 
# 804
__half h; 
# 805
__asm__("cvt.rz.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 806
return h; 
# 807
} 
#endif
# 808 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_rd(const int i) 
# 809
{int volatile ___ = 1;(void)i;
# 813
::exit(___);}
#if 0
# 809
{ 
# 810
__half h; 
# 811
__asm__("cvt.rm.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 812
return h; 
# 813
} 
#endif
# 814 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_ru(const int i) 
# 815
{int volatile ___ = 1;(void)i;
# 819
::exit(___);}
#if 0
# 815
{ 
# 816
__half h; 
# 817
__asm__("cvt.rp.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 818
return h; 
# 819
} 
#endif
# 821 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rn(const __half h) 
# 822
{int volatile ___ = 1;(void)h;
# 826
::exit(___);}
#if 0
# 822
{ 
# 823
short i; 
# 824
__asm__("cvt.rni.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 825
return i; 
# 826
} 
#endif
# 827 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline short __half2short_rz(const __half h) 
# 828
{ 
# 829
short i; 
# 833
const float f = __half2float(h); 
# 834
i = (static_cast< short>(f)); 
# 835
const short max_val = ((short)32767U); 
# 836
const short min_val = ((short)32768U); 
# 837
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 839
if (bits > ((unsigned short)63488U)) { 
# 841
i = (0); 
# 842
} else { if (f > (static_cast< float>(max_val))) { 
# 844
i = max_val; 
# 845
} else { if (f < (static_cast< float>(min_val))) { 
# 847
i = min_val; 
# 848
} else { 
# 850
}  }  }  
# 852
return i; 
# 853
} 
# 854
__attribute__((unused)) static inline short __half2short_rd(const __half h) 
# 855
{int volatile ___ = 1;(void)h;
# 859
::exit(___);}
#if 0
# 855
{ 
# 856
short i; 
# 857
__asm__("cvt.rmi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 858
return i; 
# 859
} 
#endif
# 860 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_ru(const __half h) 
# 861
{int volatile ___ = 1;(void)h;
# 865
::exit(___);}
#if 0
# 861
{ 
# 862
short i; 
# 863
__asm__("cvt.rpi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 864
return i; 
# 865
} 
#endif
# 866 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __short2half_rn(const short i) 
# 867
{ 
# 868
__half h; 
# 872
const float f = static_cast< float>(i); 
# 873
h = __float2half_rn(f); 
# 875
return h; 
# 876
} 
# 877
__attribute__((unused)) static inline __half __short2half_rz(const short i) 
# 878
{int volatile ___ = 1;(void)i;
# 882
::exit(___);}
#if 0
# 878
{ 
# 879
__half h; 
# 880
__asm__("cvt.rz.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 881
return h; 
# 882
} 
#endif
# 883 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_rd(const short i) 
# 884
{int volatile ___ = 1;(void)i;
# 888
::exit(___);}
#if 0
# 884
{ 
# 885
__half h; 
# 886
__asm__("cvt.rm.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 887
return h; 
# 888
} 
#endif
# 889 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_ru(const short i) 
# 890
{int volatile ___ = 1;(void)i;
# 894
::exit(___);}
#if 0
# 890
{ 
# 891
__half h; 
# 892
__asm__("cvt.rp.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 893
return h; 
# 894
} 
#endif
# 896 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h) 
# 897
{int volatile ___ = 1;(void)h;
# 901
::exit(___);}
#if 0
# 897
{ 
# 898
unsigned i; 
# 899
__asm__("cvt.rni.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 900
return i; 
# 901
} 
#endif
# 902 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline unsigned __half2uint_rz(const __half h) 
# 903
{ 
# 904
unsigned i; 
# 908
const float f = __half2float(h); 
# 909
i = (static_cast< unsigned>(f)); 
# 910
const unsigned max_val = 4294967295U; 
# 911
const unsigned min_val = 0U; 
# 912
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 914
if (bits > ((unsigned short)63488U)) { 
# 916
i = 0U; 
# 917
} else { if (f > (static_cast< float>(max_val))) { 
# 919
i = max_val; 
# 920
} else { if (f < (static_cast< float>(min_val))) { 
# 922
i = min_val; 
# 923
} else { 
# 925
}  }  }  
# 927
return i; 
# 928
} 
# 929
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h) 
# 930
{int volatile ___ = 1;(void)h;
# 934
::exit(___);}
#if 0
# 930
{ 
# 931
unsigned i; 
# 932
__asm__("cvt.rmi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 933
return i; 
# 934
} 
#endif
# 935 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h) 
# 936
{int volatile ___ = 1;(void)h;
# 940
::exit(___);}
#if 0
# 936
{ 
# 937
unsigned i; 
# 938
__asm__("cvt.rpi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 939
return i; 
# 940
} 
#endif
# 941 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __uint2half_rn(const unsigned i) 
# 942
{ 
# 943
__half h; 
# 951
const float f = static_cast< float>(i); 
# 952
h = __float2half_rn(f); 
# 954
return h; 
# 955
} 
# 956
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i) 
# 957
{int volatile ___ = 1;(void)i;
# 961
::exit(___);}
#if 0
# 957
{ 
# 958
__half h; 
# 959
__asm__("cvt.rz.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 960
return h; 
# 961
} 
#endif
# 962 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i) 
# 963
{int volatile ___ = 1;(void)i;
# 967
::exit(___);}
#if 0
# 963
{ 
# 964
__half h; 
# 965
__asm__("cvt.rm.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 966
return h; 
# 967
} 
#endif
# 968 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i) 
# 969
{int volatile ___ = 1;(void)i;
# 973
::exit(___);}
#if 0
# 969
{ 
# 970
__half h; 
# 971
__asm__("cvt.rp.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 972
return h; 
# 973
} 
#endif
# 975 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h) 
# 976
{int volatile ___ = 1;(void)h;
# 980
::exit(___);}
#if 0
# 976
{ 
# 977
unsigned short i; 
# 978
__asm__("cvt.rni.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 979
return i; 
# 980
} 
#endif
# 981 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline unsigned short __half2ushort_rz(const __half h) 
# 982
{ 
# 983
unsigned short i; 
# 987
const float f = __half2float(h); 
# 988
i = (static_cast< unsigned short>(f)); 
# 989
const unsigned short max_val = (65535U); 
# 990
const unsigned short min_val = (0U); 
# 991
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 993
if (bits > ((unsigned short)63488U)) { 
# 995
i = (0U); 
# 996
} else { if (f > (static_cast< float>(max_val))) { 
# 998
i = max_val; 
# 999
} else { if (f < (static_cast< float>(min_val))) { 
# 1001
i = min_val; 
# 1002
} else { 
# 1004
}  }  }  
# 1006
return i; 
# 1007
} 
# 1008
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h) 
# 1009
{int volatile ___ = 1;(void)h;
# 1013
::exit(___);}
#if 0
# 1009
{ 
# 1010
unsigned short i; 
# 1011
__asm__("cvt.rmi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1012
return i; 
# 1013
} 
#endif
# 1014 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h) 
# 1015
{int volatile ___ = 1;(void)h;
# 1019
::exit(___);}
#if 0
# 1015
{ 
# 1016
unsigned short i; 
# 1017
__asm__("cvt.rpi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1018
return i; 
# 1019
} 
#endif
# 1020 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __ushort2half_rn(const unsigned short i) 
# 1021
{ 
# 1022
__half h; 
# 1026
const float f = static_cast< float>(i); 
# 1027
h = __float2half_rn(f); 
# 1029
return h; 
# 1030
} 
# 1031
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i) 
# 1032
{int volatile ___ = 1;(void)i;
# 1036
::exit(___);}
#if 0
# 1032
{ 
# 1033
__half h; 
# 1034
__asm__("cvt.rz.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1035
return h; 
# 1036
} 
#endif
# 1037 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i) 
# 1038
{int volatile ___ = 1;(void)i;
# 1042
::exit(___);}
#if 0
# 1038
{ 
# 1039
__half h; 
# 1040
__asm__("cvt.rm.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1041
return h; 
# 1042
} 
#endif
# 1043 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i) 
# 1044
{int volatile ___ = 1;(void)i;
# 1048
::exit(___);}
#if 0
# 1044
{ 
# 1045
__half h; 
# 1046
__asm__("cvt.rp.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1047
return h; 
# 1048
} 
#endif
# 1050 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h) 
# 1051
{int volatile ___ = 1;(void)h;
# 1055
::exit(___);}
#if 0
# 1051
{ 
# 1052
unsigned long long i; 
# 1053
__asm__("cvt.rni.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1054
return i; 
# 1055
} 
#endif
# 1056 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline unsigned long long __half2ull_rz(const __half h) 
# 1057
{ 
# 1058
unsigned long long i; 
# 1062
const float f = __half2float(h); 
# 1063
i = (static_cast< unsigned long long>(f)); 
# 1064
const unsigned long long max_val = 18446744073709551615ULL; 
# 1065
const unsigned long long min_val = 0ULL; 
# 1066
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 1068
if (bits > ((unsigned short)63488U)) { 
# 1070
i = 9223372036854775808ULL; 
# 1071
} else { if (f > (static_cast< float>(max_val))) { 
# 1073
i = max_val; 
# 1074
} else { if (f < (static_cast< float>(min_val))) { 
# 1076
i = min_val; 
# 1077
} else { 
# 1079
}  }  }  
# 1081
return i; 
# 1082
} 
# 1083
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h) 
# 1084
{int volatile ___ = 1;(void)h;
# 1088
::exit(___);}
#if 0
# 1084
{ 
# 1085
unsigned long long i; 
# 1086
__asm__("cvt.rmi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1087
return i; 
# 1088
} 
#endif
# 1089 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h) 
# 1090
{int volatile ___ = 1;(void)h;
# 1094
::exit(___);}
#if 0
# 1090
{ 
# 1091
unsigned long long i; 
# 1092
__asm__("cvt.rpi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1093
return i; 
# 1094
} 
#endif
# 1095 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __ull2half_rn(const unsigned long long i) 
# 1096
{ 
# 1097
__half h; 
# 1105
const float f = static_cast< float>(i); 
# 1106
h = __float2half_rn(f); 
# 1108
return h; 
# 1109
} 
# 1110
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i) 
# 1111
{int volatile ___ = 1;(void)i;
# 1115
::exit(___);}
#if 0
# 1111
{ 
# 1112
__half h; 
# 1113
__asm__("cvt.rz.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1114
return h; 
# 1115
} 
#endif
# 1116 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i) 
# 1117
{int volatile ___ = 1;(void)i;
# 1121
::exit(___);}
#if 0
# 1117
{ 
# 1118
__half h; 
# 1119
__asm__("cvt.rm.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1120
return h; 
# 1121
} 
#endif
# 1122 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i) 
# 1123
{int volatile ___ = 1;(void)i;
# 1127
::exit(___);}
#if 0
# 1123
{ 
# 1124
__half h; 
# 1125
__asm__("cvt.rp.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1126
return h; 
# 1127
} 
#endif
# 1129 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h) 
# 1130
{int volatile ___ = 1;(void)h;
# 1134
::exit(___);}
#if 0
# 1130
{ 
# 1131
long long i; 
# 1132
__asm__("cvt.rni.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1133
return i; 
# 1134
} 
#endif
# 1135 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline long long __half2ll_rz(const __half h) 
# 1136
{ 
# 1137
long long i; 
# 1141
const float f = __half2float(h); 
# 1142
i = (static_cast< long long>(f)); 
# 1143
const long long max_val = ((long long)9223372036854775807ULL); 
# 1144
const long long min_val = ((long long)9223372036854775808ULL); 
# 1145
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 1147
if (bits > ((unsigned short)63488U)) { 
# 1149
i = min_val; 
# 1150
} else { if (f > (static_cast< float>(max_val))) { 
# 1152
i = max_val; 
# 1153
} else { if (f < (static_cast< float>(min_val))) { 
# 1155
i = min_val; 
# 1156
} else { 
# 1158
}  }  }  
# 1160
return i; 
# 1161
} 
# 1162
__attribute__((unused)) static inline long long __half2ll_rd(const __half h) 
# 1163
{int volatile ___ = 1;(void)h;
# 1167
::exit(___);}
#if 0
# 1163
{ 
# 1164
long long i; 
# 1165
__asm__("cvt.rmi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1166
return i; 
# 1167
} 
#endif
# 1168 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h) 
# 1169
{int volatile ___ = 1;(void)h;
# 1173
::exit(___);}
#if 0
# 1169
{ 
# 1170
long long i; 
# 1171
__asm__("cvt.rpi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1172
return i; 
# 1173
} 
#endif
# 1174 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
static inline __half __ll2half_rn(const long long i) 
# 1175
{ 
# 1176
__half h; 
# 1184
const float f = static_cast< float>(i); 
# 1185
h = __float2half_rn(f); 
# 1187
return h; 
# 1188
} 
# 1189
__attribute__((unused)) static inline __half __ll2half_rz(const long long i) 
# 1190
{int volatile ___ = 1;(void)i;
# 1194
::exit(___);}
#if 0
# 1190
{ 
# 1191
__half h; 
# 1192
__asm__("cvt.rz.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1193
return h; 
# 1194
} 
#endif
# 1195 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i) 
# 1196
{int volatile ___ = 1;(void)i;
# 1200
::exit(___);}
#if 0
# 1196
{ 
# 1197
__half h; 
# 1198
__asm__("cvt.rm.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1199
return h; 
# 1200
} 
#endif
# 1201 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i) 
# 1202
{int volatile ___ = 1;(void)i;
# 1206
::exit(___);}
#if 0
# 1202
{ 
# 1203
__half h; 
# 1204
__asm__("cvt.rp.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1205
return h; 
# 1206
} 
#endif
# 1208 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half htrunc(const __half h) 
# 1209
{int volatile ___ = 1;(void)h;
# 1213
::exit(___);}
#if 0
# 1209
{ 
# 1210
__half r; 
# 1211
__asm__("cvt.rzi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1212
return r; 
# 1213
} 
#endif
# 1214 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hceil(const __half h) 
# 1215
{int volatile ___ = 1;(void)h;
# 1219
::exit(___);}
#if 0
# 1215
{ 
# 1216
__half r; 
# 1217
__asm__("cvt.rpi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1218
return r; 
# 1219
} 
#endif
# 1220 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hfloor(const __half h) 
# 1221
{int volatile ___ = 1;(void)h;
# 1225
::exit(___);}
#if 0
# 1221
{ 
# 1222
__half r; 
# 1223
__asm__("cvt.rmi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1224
return r; 
# 1225
} 
#endif
# 1226 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrint(const __half h) 
# 1227
{int volatile ___ = 1;(void)h;
# 1231
::exit(___);}
#if 0
# 1227
{ 
# 1228
__half r; 
# 1229
__asm__("cvt.rni.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1230
return r; 
# 1231
} 
#endif
# 1233 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h) 
# 1234
{int volatile ___ = 1;(void)h;
# 1242
::exit(___);}
#if 0
# 1234
{ 
# 1235
__half2 val; 
# 1236
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rzi.f16.f16 low, low;\n  cvt.rzi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1241
return val; 
# 1242
} 
#endif
# 1243 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h) 
# 1244
{int volatile ___ = 1;(void)h;
# 1252
::exit(___);}
#if 0
# 1244
{ 
# 1245
__half2 val; 
# 1246
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rpi.f16.f16 low, low;\n  cvt.rpi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1251
return val; 
# 1252
} 
#endif
# 1253 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h) 
# 1254
{int volatile ___ = 1;(void)h;
# 1262
::exit(___);}
#if 0
# 1254
{ 
# 1255
__half2 val; 
# 1256
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rmi.f16.f16 low, low;\n  cvt.rmi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1261
return val; 
# 1262
} 
#endif
# 1263 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h) 
# 1264
{int volatile ___ = 1;(void)h;
# 1272
::exit(___);}
#if 0
# 1264
{ 
# 1265
__half2 val; 
# 1266
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rni.f16.f16 low, low;\n  cvt.rni.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1271
return val; 
# 1272
} 
#endif
# 1273 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b) 
# 1274
{int volatile ___ = 1;(void)a;(void)b;
# 1281
::exit(___);}
#if 0
# 1274
{ 
# 1275
__half2 val; 
# 1276
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1280
return val; 
# 1281
} 
#endif
# 1282 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b) 
# 1283
{int volatile ___ = 1;(void)a;(void)b;
# 1290
::exit(___);}
#if 0
# 1283
{ 
# 1284
__half2 val; 
# 1285
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1289
return val; 
# 1290
} 
#endif
# 1291 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __low2half(const __half2 a) 
# 1292
{int volatile ___ = 1;(void)a;
# 1298
::exit(___);}
#if 0
# 1292
{ 
# 1293
__half ret; 
# 1294
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1297
return ret; 
# 1298
} 
#endif
# 1299 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __hisinf(const __half a) 
# 1300
{int volatile ___ = 1;(void)a;
# 1310
::exit(___);}
#if 0
# 1300
{ 
# 1301
int retval; 
# 1302
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 64512U) { 
# 1303
retval = (-1); 
# 1304
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 31744U) { 
# 1305
retval = 1; 
# 1306
} else { 
# 1307
retval = 0; 
# 1308
}  }  
# 1309
return retval; 
# 1310
} 
#endif
# 1311 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a) 
# 1312
{int volatile ___ = 1;(void)a;
# 1318
::exit(___);}
#if 0
# 1312
{ 
# 1313
__half2 val; 
# 1314
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1317
return val; 
# 1318
} 
#endif
# 1319 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a) 
# 1320
{int volatile ___ = 1;(void)a;
# 1326
::exit(___);}
#if 0
# 1320
{ 
# 1321
__half2 val; 
# 1322
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1325
return val; 
# 1326
} 
#endif
# 1327 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __high2half(const __half2 a) 
# 1328
{int volatile ___ = 1;(void)a;
# 1334
::exit(___);}
#if 0
# 1328
{ 
# 1329
__half ret; 
# 1330
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1333
return ret; 
# 1334
} 
#endif
# 1335 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b) 
# 1336
{int volatile ___ = 1;(void)a;(void)b;
# 1341
::exit(___);}
#if 0
# 1336
{ 
# 1337
__half2 val; 
# 1338
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1340
return val; 
# 1341
} 
#endif
# 1342 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __half2half2(const __half a) 
# 1343
{int volatile ___ = 1;(void)a;
# 1348
::exit(___);}
#if 0
# 1343
{ 
# 1344
__half2 val; 
# 1345
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1347
return val; 
# 1348
} 
#endif
# 1349 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a) 
# 1350
{int volatile ___ = 1;(void)a;
# 1356
::exit(___);}
#if 0
# 1350
{ 
# 1351
__half2 val; 
# 1352
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1355
return val; 
# 1356
} 
#endif
# 1357 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half_as_short(const __half h) 
# 1358
{int volatile ___ = 1;(void)h;
# 1360
::exit(___);}
#if 0
# 1358
{ 
# 1359
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1360
} 
#endif
# 1361 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h) 
# 1362
{int volatile ___ = 1;(void)h;
# 1364
::exit(___);}
#if 0
# 1362
{ 
# 1363
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1364
} 
#endif
# 1365 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short_as_half(const short i) 
# 1366
{int volatile ___ = 1;(void)i;
# 1370
::exit(___);}
#if 0
# 1366
{ 
# 1367
__half h; 
# 1368
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1369
return h; 
# 1370
} 
#endif
# 1371 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i) 
# 1372
{int volatile ___ = 1;(void)i;
# 1376
::exit(___);}
#if 0
# 1372
{ 
# 1373
__half h; 
# 1374
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1375
return h; 
# 1376
} 
#endif
# 1398 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width) 
# 1399
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1404
::exit(___);}
#if 0
# 1399
{ 
# 1400
unsigned warp_size; 
# 1401
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1402
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1403
{ __half2 r; __asm__ volatile("{shfl.idx.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1404
} 
#endif
# 1405 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width) 
# 1406
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1411
::exit(___);}
#if 0
# 1406
{ 
# 1407
unsigned warp_size; 
# 1408
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1409
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1410
{ __half2 r; __asm__ volatile("{shfl.up.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1411
} 
#endif
# 1412 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width) 
# 1413
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1418
::exit(___);}
#if 0
# 1413
{ 
# 1414
unsigned warp_size; 
# 1415
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1416
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1417
{ __half2 r; __asm__ volatile("{shfl.down.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1418
} 
#endif
# 1419 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width) 
# 1420
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1425
::exit(___);}
#if 0
# 1420
{ 
# 1421
unsigned warp_size; 
# 1422
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1423
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1424
{ __half2 r; __asm__ volatile("{shfl.bfly.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1425
} 
#endif
# 1429 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1430
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1435
::exit(___);}
#if 0
# 1430
{ 
# 1431
unsigned warp_size; 
# 1432
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1433
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1434
{ __half2 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1435
} 
#endif
# 1436 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1437
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1442
::exit(___);}
#if 0
# 1437
{ 
# 1438
unsigned warp_size; 
# 1439
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1440
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1441
{ __half2 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1442
} 
#endif
# 1443 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1444
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1449
::exit(___);}
#if 0
# 1444
{ 
# 1445
unsigned warp_size; 
# 1446
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1447
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1448
{ __half2 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1449
} 
#endif
# 1450 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1451
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1456
::exit(___);}
#if 0
# 1451
{ 
# 1452
unsigned warp_size; 
# 1453
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1454
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1455
{ __half2 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1456
} 
#endif
# 1463 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width) 
# 1464
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1468
::exit(___);}
#if 0
# 1464
{ 
# 1465
const __half2 temp1 = __halves2half2(var, var); 
# 1466
const __half2 temp2 = __shfl(temp1, delta, width); 
# 1467
return __low2half(temp2); 
# 1468
} 
#endif
# 1469 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width) 
# 1470
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1474
::exit(___);}
#if 0
# 1470
{ 
# 1471
const __half2 temp1 = __halves2half2(var, var); 
# 1472
const __half2 temp2 = __shfl_up(temp1, delta, width); 
# 1473
return __low2half(temp2); 
# 1474
} 
#endif
# 1475 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width) 
# 1476
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1480
::exit(___);}
#if 0
# 1476
{ 
# 1477
const __half2 temp1 = __halves2half2(var, var); 
# 1478
const __half2 temp2 = __shfl_down(temp1, delta, width); 
# 1479
return __low2half(temp2); 
# 1480
} 
#endif
# 1481 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width) 
# 1482
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1486
::exit(___);}
#if 0
# 1482
{ 
# 1483
const __half2 temp1 = __halves2half2(var, var); 
# 1484
const __half2 temp2 = __shfl_xor(temp1, delta, width); 
# 1485
return __low2half(temp2); 
# 1486
} 
#endif
# 1490 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1491
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1495
::exit(___);}
#if 0
# 1491
{ 
# 1492
const __half2 temp1 = __halves2half2(var, var); 
# 1493
const __half2 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1494
return __low2half(temp2); 
# 1495
} 
#endif
# 1496 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1497
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1501
::exit(___);}
#if 0
# 1497
{ 
# 1498
const __half2 temp1 = __halves2half2(var, var); 
# 1499
const __half2 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1500
return __low2half(temp2); 
# 1501
} 
#endif
# 1502 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1503
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1507
::exit(___);}
#if 0
# 1503
{ 
# 1504
const __half2 temp1 = __halves2half2(var, var); 
# 1505
const __half2 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1506
return __low2half(temp2); 
# 1507
} 
#endif
# 1508 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1509
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1513
::exit(___);}
#if 0
# 1509
{ 
# 1510
const __half2 temp1 = __halves2half2(var, var); 
# 1511
const __half2 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1512
return __low2half(temp2); 
# 1513
} 
#endif
# 1526 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr) 
# 1527
{int volatile ___ = 1;(void)ptr;
# 1531
::exit(___);}
#if 0
# 1527
{ 
# 1528
__half2 ret; 
# 1529
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1530
return ret; 
# 1531
} 
#endif
# 1532 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldg(const __half *const ptr) 
# 1533
{int volatile ___ = 1;(void)ptr;
# 1537
::exit(___);}
#if 0
# 1533
{ 
# 1534
__half ret; 
# 1535
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1536
return ret; 
# 1537
} 
#endif
# 1538 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr) 
# 1539
{int volatile ___ = 1;(void)ptr;
# 1543
::exit(___);}
#if 0
# 1539
{ 
# 1540
__half2 ret; 
# 1541
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1542
return ret; 
# 1543
} 
#endif
# 1544 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr) 
# 1545
{int volatile ___ = 1;(void)ptr;
# 1549
::exit(___);}
#if 0
# 1545
{ 
# 1546
__half ret; 
# 1547
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1548
return ret; 
# 1549
} 
#endif
# 1550 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr) 
# 1551
{int volatile ___ = 1;(void)ptr;
# 1555
::exit(___);}
#if 0
# 1551
{ 
# 1552
__half2 ret; 
# 1553
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1554
return ret; 
# 1555
} 
#endif
# 1556 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldca(const __half *const ptr) 
# 1557
{int volatile ___ = 1;(void)ptr;
# 1561
::exit(___);}
#if 0
# 1557
{ 
# 1558
__half ret; 
# 1559
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1560
return ret; 
# 1561
} 
#endif
# 1562 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr) 
# 1563
{int volatile ___ = 1;(void)ptr;
# 1567
::exit(___);}
#if 0
# 1563
{ 
# 1564
__half2 ret; 
# 1565
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1566
return ret; 
# 1567
} 
#endif
# 1568 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr) 
# 1569
{int volatile ___ = 1;(void)ptr;
# 1573
::exit(___);}
#if 0
# 1569
{ 
# 1570
__half ret; 
# 1571
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1572
return ret; 
# 1573
} 
#endif
# 1574 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr) 
# 1575
{int volatile ___ = 1;(void)ptr;
# 1579
::exit(___);}
#if 0
# 1575
{ 
# 1576
__half2 ret; 
# 1577
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1578
return ret; 
# 1579
} 
#endif
# 1580 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr) 
# 1581
{int volatile ___ = 1;(void)ptr;
# 1585
::exit(___);}
#if 0
# 1581
{ 
# 1582
__half ret; 
# 1583
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1584
return ret; 
# 1585
} 
#endif
# 1586 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr) 
# 1587
{int volatile ___ = 1;(void)ptr;
# 1591
::exit(___);}
#if 0
# 1587
{ 
# 1588
__half2 ret; 
# 1589
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1590
return ret; 
# 1591
} 
#endif
# 1592 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr) 
# 1593
{int volatile ___ = 1;(void)ptr;
# 1597
::exit(___);}
#if 0
# 1593
{ 
# 1594
__half ret; 
# 1595
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1596
return ret; 
# 1597
} 
#endif
# 1598 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value) 
# 1599
{int volatile ___ = 1;(void)ptr;(void)value;
# 1601
::exit(___);}
#if 0
# 1599
{ 
# 1600
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1601
} 
#endif
# 1602 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value) 
# 1603
{int volatile ___ = 1;(void)ptr;(void)value;
# 1605
::exit(___);}
#if 0
# 1603
{ 
# 1604
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1605
} 
#endif
# 1606 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value) 
# 1607
{int volatile ___ = 1;(void)ptr;(void)value;
# 1609
::exit(___);}
#if 0
# 1607
{ 
# 1608
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1609
} 
#endif
# 1610 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value) 
# 1611
{int volatile ___ = 1;(void)ptr;(void)value;
# 1613
::exit(___);}
#if 0
# 1611
{ 
# 1612
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1613
} 
#endif
# 1614 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value) 
# 1615
{int volatile ___ = 1;(void)ptr;(void)value;
# 1617
::exit(___);}
#if 0
# 1615
{ 
# 1616
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1617
} 
#endif
# 1618 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value) 
# 1619
{int volatile ___ = 1;(void)ptr;(void)value;
# 1621
::exit(___);}
#if 0
# 1619
{ 
# 1620
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1621
} 
#endif
# 1622 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value) 
# 1623
{int volatile ___ = 1;(void)ptr;(void)value;
# 1625
::exit(___);}
#if 0
# 1623
{ 
# 1624
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1625
} 
#endif
# 1626 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value) 
# 1627
{int volatile ___ = 1;(void)ptr;(void)value;
# 1629
::exit(___);}
#if 0
# 1627
{ 
# 1628
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1629
} 
#endif
# 1642 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b) 
# 1643
{int volatile ___ = 1;(void)a;(void)b;
# 1645
::exit(___);}
#if 0
# 1643
{ 
# 1644
{ __half2 val; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1645
} 
#endif
# 1646 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b) 
# 1647
{int volatile ___ = 1;(void)a;(void)b;
# 1649
::exit(___);}
#if 0
# 1647
{ 
# 1648
{ __half2 val; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1649
} 
#endif
# 1650 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b) 
# 1651
{int volatile ___ = 1;(void)a;(void)b;
# 1653
::exit(___);}
#if 0
# 1651
{ 
# 1652
{ __half2 val; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1653
} 
#endif
# 1654 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b) 
# 1655
{int volatile ___ = 1;(void)a;(void)b;
# 1657
::exit(___);}
#if 0
# 1655
{ 
# 1656
{ __half2 val; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1657
} 
#endif
# 1658 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b) 
# 1659
{int volatile ___ = 1;(void)a;(void)b;
# 1661
::exit(___);}
#if 0
# 1659
{ 
# 1660
{ __half2 val; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1661
} 
#endif
# 1662 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b) 
# 1663
{int volatile ___ = 1;(void)a;(void)b;
# 1665
::exit(___);}
#if 0
# 1663
{ 
# 1664
{ __half2 val; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1665
} 
#endif
# 1666 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b) 
# 1667
{int volatile ___ = 1;(void)a;(void)b;
# 1669
::exit(___);}
#if 0
# 1667
{ 
# 1668
{ __half2 val; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1669
} 
#endif
# 1670 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b) 
# 1671
{int volatile ___ = 1;(void)a;(void)b;
# 1673
::exit(___);}
#if 0
# 1671
{ 
# 1672
{ __half2 val; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1673
} 
#endif
# 1674 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b) 
# 1675
{int volatile ___ = 1;(void)a;(void)b;
# 1677
::exit(___);}
#if 0
# 1675
{ 
# 1676
{ __half2 val; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1677
} 
#endif
# 1678 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b) 
# 1679
{int volatile ___ = 1;(void)a;(void)b;
# 1681
::exit(___);}
#if 0
# 1679
{ 
# 1680
{ __half2 val; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1681
} 
#endif
# 1682 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b) 
# 1683
{int volatile ___ = 1;(void)a;(void)b;
# 1685
::exit(___);}
#if 0
# 1683
{ 
# 1684
{ __half2 val; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1685
} 
#endif
# 1686 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b) 
# 1687
{int volatile ___ = 1;(void)a;(void)b;
# 1689
::exit(___);}
#if 0
# 1687
{ 
# 1688
{ __half2 val; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1689
} 
#endif
# 1703 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b) 
# 1704
{int volatile ___ = 1;(void)a;(void)b;
# 1706
::exit(___);}
#if 0
# 1704
{ 
# 1705
{ __half2 val; bool retval; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1706
} 
#endif
# 1707 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b) 
# 1708
{int volatile ___ = 1;(void)a;(void)b;
# 1710
::exit(___);}
#if 0
# 1708
{ 
# 1709
{ __half2 val; bool retval; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1710
} 
#endif
# 1711 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b) 
# 1712
{int volatile ___ = 1;(void)a;(void)b;
# 1714
::exit(___);}
#if 0
# 1712
{ 
# 1713
{ __half2 val; bool retval; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1714
} 
#endif
# 1715 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b) 
# 1716
{int volatile ___ = 1;(void)a;(void)b;
# 1718
::exit(___);}
#if 0
# 1716
{ 
# 1717
{ __half2 val; bool retval; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1718
} 
#endif
# 1719 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b) 
# 1720
{int volatile ___ = 1;(void)a;(void)b;
# 1722
::exit(___);}
#if 0
# 1720
{ 
# 1721
{ __half2 val; bool retval; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1722
} 
#endif
# 1723 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b) 
# 1724
{int volatile ___ = 1;(void)a;(void)b;
# 1726
::exit(___);}
#if 0
# 1724
{ 
# 1725
{ __half2 val; bool retval; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1726
} 
#endif
# 1727 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b) 
# 1728
{int volatile ___ = 1;(void)a;(void)b;
# 1730
::exit(___);}
#if 0
# 1728
{ 
# 1729
{ __half2 val; bool retval; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1730
} 
#endif
# 1731 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b) 
# 1732
{int volatile ___ = 1;(void)a;(void)b;
# 1734
::exit(___);}
#if 0
# 1732
{ 
# 1733
{ __half2 val; bool retval; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1734
} 
#endif
# 1735 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b) 
# 1736
{int volatile ___ = 1;(void)a;(void)b;
# 1738
::exit(___);}
#if 0
# 1736
{ 
# 1737
{ __half2 val; bool retval; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1738
} 
#endif
# 1739 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b) 
# 1740
{int volatile ___ = 1;(void)a;(void)b;
# 1742
::exit(___);}
#if 0
# 1740
{ 
# 1741
{ __half2 val; bool retval; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1742
} 
#endif
# 1743 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b) 
# 1744
{int volatile ___ = 1;(void)a;(void)b;
# 1746
::exit(___);}
#if 0
# 1744
{ 
# 1745
{ __half2 val; bool retval; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1746
} 
#endif
# 1747 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b) 
# 1748
{int volatile ___ = 1;(void)a;(void)b;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
{ __half2 val; bool retval; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1750
} 
#endif
# 1763 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b) 
# 1764
{int volatile ___ = 1;(void)a;(void)b;
# 1766
::exit(___);}
#if 0
# 1764
{ 
# 1765
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.eq.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1766
} 
#endif
# 1767 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b) 
# 1768
{int volatile ___ = 1;(void)a;(void)b;
# 1770
::exit(___);}
#if 0
# 1768
{ 
# 1769
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ne.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1770
} 
#endif
# 1771 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b) 
# 1772
{int volatile ___ = 1;(void)a;(void)b;
# 1774
::exit(___);}
#if 0
# 1772
{ 
# 1773
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.le.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1774
} 
#endif
# 1775 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b) 
# 1776
{int volatile ___ = 1;(void)a;(void)b;
# 1778
::exit(___);}
#if 0
# 1776
{ 
# 1777
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ge.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1778
} 
#endif
# 1779 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b) 
# 1780
{int volatile ___ = 1;(void)a;(void)b;
# 1782
::exit(___);}
#if 0
# 1780
{ 
# 1781
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.lt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1782
} 
#endif
# 1783 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b) 
# 1784
{int volatile ___ = 1;(void)a;(void)b;
# 1786
::exit(___);}
#if 0
# 1784
{ 
# 1785
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1786
} 
#endif
# 1787 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b) 
# 1788
{int volatile ___ = 1;(void)a;(void)b;
# 1790
::exit(___);}
#if 0
# 1788
{ 
# 1789
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.equ.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1790
} 
#endif
# 1791 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b) 
# 1792
{int volatile ___ = 1;(void)a;(void)b;
# 1794
::exit(___);}
#if 0
# 1792
{ 
# 1793
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.neu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1794
} 
#endif
# 1795 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b) 
# 1796
{int volatile ___ = 1;(void)a;(void)b;
# 1798
::exit(___);}
#if 0
# 1796
{ 
# 1797
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.leu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1798
} 
#endif
# 1799 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b) 
# 1800
{int volatile ___ = 1;(void)a;(void)b;
# 1802
::exit(___);}
#if 0
# 1800
{ 
# 1801
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.geu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1802
} 
#endif
# 1803 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b) 
# 1804
{int volatile ___ = 1;(void)a;(void)b;
# 1806
::exit(___);}
#if 0
# 1804
{ 
# 1805
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ltu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1806
} 
#endif
# 1807 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b) 
# 1808
{int volatile ___ = 1;(void)a;(void)b;
# 1810
::exit(___);}
#if 0
# 1808
{ 
# 1809
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gtu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1810
} 
#endif
# 1815 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b) 
# 1816
{int volatile ___ = 1;(void)a;(void)b;
# 1818
::exit(___);}
#if 0
# 1816
{ 
# 1817
{ __half2 val; __asm__("{add.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1818
} 
#endif
# 1819 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b) 
# 1820
{int volatile ___ = 1;(void)a;(void)b;
# 1822
::exit(___);}
#if 0
# 1820
{ 
# 1821
{ __half2 val; __asm__("{sub.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1822
} 
#endif
# 1823 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b) 
# 1824
{int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __half2 val; __asm__("{mul.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1826
} 
#endif
# 1827 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b) 
# 1828
{int volatile ___ = 1;(void)a;(void)b;
# 1830
::exit(___);}
#if 0
# 1828
{ 
# 1829
{ __half2 val; __asm__("{add.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1830
} 
#endif
# 1831 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b) 
# 1832
{int volatile ___ = 1;(void)a;(void)b;
# 1834
::exit(___);}
#if 0
# 1832
{ 
# 1833
{ __half2 val; __asm__("{sub.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1834
} 
#endif
# 1835 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b) 
# 1836
{int volatile ___ = 1;(void)a;(void)b;
# 1838
::exit(___);}
#if 0
# 1836
{ 
# 1837
{ __half2 val; __asm__("{mul.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1838
} 
#endif
# 1839 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b) 
# 1840
{int volatile ___ = 1;(void)a;(void)b;
# 1842
::exit(___);}
#if 0
# 1840
{ 
# 1841
{ __half2 val; __asm__("{add.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1842
} 
#endif
# 1843 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b) 
# 1844
{int volatile ___ = 1;(void)a;(void)b;
# 1846
::exit(___);}
#if 0
# 1844
{ 
# 1845
{ __half2 val; __asm__("{sub.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1846
} 
#endif
# 1847 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b) 
# 1848
{int volatile ___ = 1;(void)a;(void)b;
# 1850
::exit(___);}
#if 0
# 1848
{ 
# 1849
{ __half2 val; __asm__("{mul.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1850
} 
#endif
# 1851 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c) 
# 1852
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1854
::exit(___);}
#if 0
# 1852
{ 
# 1853
{ __half2 val; __asm__("{fma.rn.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 1854
} 
#endif
# 1855 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c) 
# 1856
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1858
::exit(___);}
#if 0
# 1856
{ 
# 1857
{ __half2 val; __asm__("{fma.rn.sat.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 1858
} 
#endif
# 1859 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b) {int volatile ___ = 1;(void)a;(void)b;
# 1871
::exit(___);}
#if 0
# 1859
{ 
# 1860
__half ha = __low2half(a); 
# 1861
__half hb = __low2half(b); 
# 1863
const __half v1 = __hdiv(ha, hb); 
# 1865
ha = __high2half(a); 
# 1866
hb = __high2half(b); 
# 1868
const __half v2 = __hdiv(ha, hb); 
# 1870
return __halves2half2(v1, v2); 
# 1871
} 
#endif
# 1875 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b) 
# 1876
{int volatile ___ = 1;(void)a;(void)b;
# 1878
::exit(___);}
#if 0
# 1876
{ 
# 1877
{ __half val; __asm__("{add.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1878
} 
#endif
# 1879 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b) 
# 1880
{int volatile ___ = 1;(void)a;(void)b;
# 1882
::exit(___);}
#if 0
# 1880
{ 
# 1881
{ __half val; __asm__("{sub.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1882
} 
#endif
# 1883 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b) 
# 1884
{int volatile ___ = 1;(void)a;(void)b;
# 1886
::exit(___);}
#if 0
# 1884
{ 
# 1885
{ __half val; __asm__("{mul.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1886
} 
#endif
# 1887 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b) 
# 1888
{int volatile ___ = 1;(void)a;(void)b;
# 1890
::exit(___);}
#if 0
# 1888
{ 
# 1889
{ __half val; __asm__("{add.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1890
} 
#endif
# 1891 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b) 
# 1892
{int volatile ___ = 1;(void)a;(void)b;
# 1894
::exit(___);}
#if 0
# 1892
{ 
# 1893
{ __half val; __asm__("{sub.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1894
} 
#endif
# 1895 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b) 
# 1896
{int volatile ___ = 1;(void)a;(void)b;
# 1898
::exit(___);}
#if 0
# 1896
{ 
# 1897
{ __half val; __asm__("{mul.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1898
} 
#endif
# 1899 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b) 
# 1900
{int volatile ___ = 1;(void)a;(void)b;
# 1902
::exit(___);}
#if 0
# 1900
{ 
# 1901
{ __half val; __asm__("{add.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1902
} 
#endif
# 1903 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b) 
# 1904
{int volatile ___ = 1;(void)a;(void)b;
# 1906
::exit(___);}
#if 0
# 1904
{ 
# 1905
{ __half val; __asm__("{sub.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1906
} 
#endif
# 1907 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b) 
# 1908
{int volatile ___ = 1;(void)a;(void)b;
# 1910
::exit(___);}
#if 0
# 1908
{ 
# 1909
{ __half val; __asm__("{mul.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1910
} 
#endif
# 1911 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c) 
# 1912
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1914
::exit(___);}
#if 0
# 1912
{ 
# 1913
{ __half val; __asm__("{fma.rn.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 1914
} 
#endif
# 1915 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c) 
# 1916
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1918
::exit(___);}
#if 0
# 1916
{ 
# 1917
{ __half val; __asm__("{fma.rn.sat.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 1918
} 
#endif
# 1919 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b) {int volatile ___ = 1;(void)a;(void)b;
# 1941
::exit(___);}
#if 0
# 1919
{ 
# 1920
__half v; 
# 1921
__half abs; 
# 1922
__half den; 
# 1923
(*(reinterpret_cast< unsigned short *>(&den))) = (143U); 
# 1925
float rcp; 
# 1926
const float fa = __half2float(a); 
# 1927
const float fb = __half2float(b); 
# 1929
__asm__("{rcp.approx.ftz.f32 %0, %1;\n}" : "=f" (rcp) : "f" (fb)); 
# 1931
float fv = rcp * fa; 
# 1933
v = __float2half(fv); 
# 1934
(*(reinterpret_cast< unsigned short *>(&abs))) = (static_cast< unsigned short>((static_cast< unsigned>(*(reinterpret_cast< const unsigned short *>(&v)))) & 32767U)); 
# 1935
if (__hlt(abs, den) && (!((*(reinterpret_cast< const unsigned short *>(&abs))) == 0U))) { 
# 1936
const float err = __fmaf_rn(-fb, fv, fa); 
# 1937
fv = __fmaf_rn(rcp, err, fv); 
# 1938
v = __float2half(fv); 
# 1939
}  
# 1940
return v; 
# 1941
} 
#endif
# 1985 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a); 
# 1986
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a); 
# 1987
__attribute__((unused)) static inline __half hsin(const __half a) {int volatile ___ = 1;(void)a;
# 2003
::exit(___);}
#if 0
# 1987
{ 
# 1988
const float sl = __float_simpl_sinf(__half2float(a)); 
# 1989
__half r = __float2half_rn(sl); 
# 1990
__asm__("{\n\t  .reg.b16 i,r,t;     \n\t  mov.b16 r, %0;      \n\t  mov.b16 i, %1;      \n\t  and.b16 t, r, 0x8000U; \n\t  abs.f16 r, r; " "  \n\t  abs.f16 i, i;   \n\t{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X32B3U;\n  mov.b16 ulp,0x0800U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X5CB0U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n  or.b16  r,r,t;      \n\t  mov.b16 %0, r;      \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2002
return r; 
# 2003
} 
#endif
# 2004 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a) {int volatile ___ = 1;(void)a;
# 2021
::exit(___);}
#if 0
# 2004
{ 
# 2005
const float sl = __float_simpl_sinf(__half2float(a.x)); 
# 2006
const float sh = __float_simpl_sinf(__half2float(a.y)); 
# 2007
__half2 r = __floats2half2_rn(sl, sh); 
# 2008
__asm__("{\n\t  .reg.b32 i,r,t;             \n\t  mov.b32 r, %0;              \n\t  mov.b32 i, %1;              \n\t  and.b32 t, r, 0x800" "08000U;   \n\t  abs.f16x2 r, r;   \n\t  abs.f16x2 i, i;   \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X32B332B3U;\n  mov.b32 ulp," "0x08000800U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X5CB05CB0U;\n" "  mov.b32 ulp,0x90009000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  or.b32  r, r, t;            \n\t  mo" "v.b32 %0, r;              \n}\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2020
return r; 
# 2021
} 
#endif
# 2022 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hcos(const __half a) {int volatile ___ = 1;(void)a;
# 2034
::exit(___);}
#if 0
# 2022
{ 
# 2023
const float cl = __float_simpl_cosf(__half2float(a)); 
# 2024
__half r = __float2half_rn(cl); 
# 2025
__asm__("{\n\t  .reg.b16 i,r;        \n\t  mov.b16 r, %0;       \n\t  mov.b16 i, %1;       \n\t  abs.f16 i, i;        \n\t{.reg.b16 spc, " "ulp, p;\n  mov.b16 spc,0X2B7CU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,i, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16 %0, r" ";       \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2033
return r; 
# 2034
} 
#endif
# 2035 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a) {int volatile ___ = 1;(void)a;
# 2048
::exit(___);}
#if 0
# 2035
{ 
# 2036
const float cl = __float_simpl_cosf(__half2float(a.x)); 
# 2037
const float ch = __float_simpl_cosf(__half2float(a.y)); 
# 2038
__half2 r = __floats2half2_rn(cl, ch); 
# 2039
__asm__("{\n\t  .reg.b32 i,r;   \n\t  mov.b32 r, %0;  \n\t  mov.b32 i, %1;  \n\t  abs.f16x2 i, i; \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 s" "pc,0X2B7C2B7CU;\n  mov.b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32 %0, r;  \n}" "\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2047
return r; 
# 2048
} 
#endif
# 2049 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_trig_reduction_kernel(const float a, unsigned *const quadrant) 
# 2050
{int volatile ___ = 1;(void)a;(void)quadrant;
# 2058
::exit(___);}
#if 0
# 2050
{ 
# 2051
const float ar = __fmaf_rn(a, (0.63661975F), (1.2582912E7F)); 
# 2052
const unsigned q = __float_as_uint(ar); 
# 2053
const float j = __fsub_rn(ar, (1.2582912E7F)); 
# 2054
float t = __fmaf_rn(j, -(1.5707963F), a); 
# 2055
t = __fmaf_rn(j, -(7.5497894E-8F), t); 
# 2056
(*quadrant) = q; 
# 2057
return t; 
# 2058
} 
#endif
# 2059 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_sin_cos_kernel(const float x, const unsigned i) 
# 2060
{int volatile ___ = 1;(void)x;(void)i;
# 2098
::exit(___);}
#if 0
# 2060
{ 
# 2061
float z; 
# 2062
const float x2 = x * x; 
# 2063
float a8; 
# 2064
float a6; 
# 2065
float a4; 
# 2066
float a2; 
# 2067
float a1; 
# 2068
float a0; 
# 2070
if ((i & 1U) != 0U) { 
# 2072
a8 = (2.4433157E-5F); 
# 2073
a6 = (-(0.0013887316F)); 
# 2074
a4 = (0.041666646F); 
# 2075
a2 = (-(0.5F)); 
# 2076
a1 = x2; 
# 2077
a0 = (1.0F); 
# 2078
} else 
# 2079
{ 
# 2081
a8 = (-(1.9515296E-4F)); 
# 2082
a6 = (0.008332161F); 
# 2083
a4 = (-(0.16666655F)); 
# 2084
a2 = (0.0F); 
# 2085
a1 = x; 
# 2086
a0 = x; 
# 2087
}  
# 2089
z = __fmaf_rn(a8, x2, a6); 
# 2090
z = __fmaf_rn(z, x2, a4); 
# 2091
z = __fmaf_rn(z, x2, a2); 
# 2092
z = __fmaf_rn(z, a1, a0); 
# 2094
if ((i & 2U) != 0U) { 
# 2095
z = (-z); 
# 2096
}  
# 2097
return z; 
# 2098
} 
#endif
# 2099 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a) 
# 2100
{int volatile ___ = 1;(void)a;
# 2106
::exit(___);}
#if 0
# 2100
{ 
# 2101
float z; 
# 2102
unsigned i; 
# 2103
a = __internal_trig_reduction_kernel(a, &i); 
# 2104
z = __internal_sin_cos_kernel(a, i); 
# 2105
return z; 
# 2106
} 
#endif
# 2107 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a) 
# 2108
{int volatile ___ = 1;(void)a;
# 2114
::exit(___);}
#if 0
# 2108
{ 
# 2109
float z; 
# 2110
unsigned i; 
# 2111
a = __internal_trig_reduction_kernel(a, &i); 
# 2112
z = __internal_sin_cos_kernel(a, (i & 3U) + 1U); 
# 2113
return z; 
# 2114
} 
#endif
# 2116 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp(const __half a) {int volatile ___ = 1;(void)a;
# 2134
::exit(___);}
#if 0
# 2116
{ 
# 2117
__half val; 
# 2118
__asm__("{.reg.b32         f, C, nZ;       \n .reg.b16         h,r;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  mov.b32         C, 0x3fb8aa3bU; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f,f;        \n  cvt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X1F79U;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X25CFU;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC13BU;\n  mov.b16 ul" "p,0x0400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC1EFU;\n  mov.b16 ul" "p,0x0200U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2133
return val; 
# 2134
} 
#endif
# 2135 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2159
::exit(___);}
#if 0
# 2135
{ 
# 2136
__half2 val; 
# 2137
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x3fb8aa3bU; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X1F791F79U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X25CF25CFU;\n  mov.b32 ulp,0x94009400U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC13BC13BU;\n  mov.b32 ulp,0x0400" "0400U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC1EFC1EFU;\n  mov." "b32 ulp,0x02000200U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2158
return val; 
# 2159
} 
#endif
# 2160 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp2(const __half a) {int volatile ___ = 1;(void)a;
# 2173
::exit(___);}
#if 0
# 2160
{ 
# 2161
__half val; 
# 2162
__asm__("{.reg.b32         f, ULP;         \n .reg.b16         r;              \n  mov.b16         r,%1;           \n  cvt.f32.f16     f," "r;            \n  ex2.approx.ftz.f32      f,f;    \n  mov.b32         ULP, 0x33800000U;\n  fma.rn.f32      f,f,ULP,f;      \n  c" "vt.rn.f16.f32      r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2172
return val; 
# 2173
} 
#endif
# 2174 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2191
::exit(___);}
#if 0
# 2174
{ 
# 2175
__half2 val; 
# 2176
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, ULP;    \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  ex2.approx.ftz.f32  fl, fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  mo" "v.b32         ULP, 0x33800000U;\n  fma.rn.f32      fl,fl,ULP,fl;   \n  fma.rn.f32      fu,fu,ULP,fu;   \n  cvt.rn.f16.f32      h" "l, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2190
return val; 
# 2191
} 
#endif
# 2192 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp10(const __half a) {int volatile ___ = 1;(void)a;
# 2211
::exit(___);}
#if 0
# 2192
{ 
# 2193
__half val; 
# 2194
__asm__("{.reg.b16         h,r;            \n .reg.b32         f, C, nZ;       \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  mov.b32         C, 0x40549A78U; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x34DEU;\n  mov.b16 ul" "p,0x9800U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9766U;\n  mov.b16 ul" "p,0x9000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9972U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xA5C4U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBF0AU;\n  mov.b16 ul" "p,0x8100U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2210
return val; 
# 2211
} 
#endif
# 2212 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2237
::exit(___);}
#if 0
# 2212
{ 
# 2213
__half2 val; 
# 2214
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x40549A78U; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x34DE34DEU;\n  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x97669766U;\n  mov.b32 ulp,0x90009000U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x99729972U;\n  mov.b32 ulp,0x1000" "1000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xA5C4A5C4U;\n  mov." "b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBF0A" "BF0AU;\n  mov.b32 ulp,0x81008100U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2236
return val; 
# 2237
} 
#endif
# 2238 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog2(const __half a) {int volatile ___ = 1;(void)a;
# 2251
::exit(___);}
#if 0
# 2238
{ 
# 2239
__half val; 
# 2240
__asm__("{.reg.b16         h, r;           \n .reg.b32         f;              \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "A2E2U;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "BF46U;\n  mov.b16 ulp,0x9400U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2250
return val; 
# 2251
} 
#endif
# 2252 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2269
::exit(___);}
#if 0
# 2252
{ 
# 2253
__half2 val; 
# 2254
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, r, p;   \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  lg2.approx.ftz.f32  fl, fl;     \n  lg2.approx.ftz.f32  fu, fu;     \n  cv" "t.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,0xA2E2A2E2U;\n  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 " "spc, ulp, p;\n  mov.b32 spc,0xBF46BF46U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n" "}\n  mov.b32         %0, r;          \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2268
return val; 
# 2269
} 
#endif
# 2270 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog(const __half a) {int volatile ___ = 1;(void)a;
# 2287
::exit(___);}
#if 0
# 2270
{ 
# 2271
__half val; 
# 2272
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  lg2.approx.ftz.f32  f,f;        \n  mov.b32         C, 0x3f317218U;  \n  mul.f32         f,f,C;          \n  c" "vt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X160DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3BFEU;\n  mov.b16 ulp,0x8010U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3C0BU;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X6051U;\n  mov.b16 ulp,0x1C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2286
return val; 
# 2287
} 
#endif
# 2288 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log(const __half2 a) {int volatile ___ = 1;(void)a;
# 2311
::exit(___);}
#if 0
# 2288
{ 
# 2289
__half2 val; 
# 2290
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X160D160DU;\n  mov.b32 ulp,0x9C009C00U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3BFE3BFEU;\n  mov.b32 ulp," "0x80108010U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3C0B3C0BU;\n" "  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0X60516051U;\n  mov.b32 ulp,0x1C001C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2310
return val; 
# 2311
} 
#endif
# 2312 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog10(const __half a) {int volatile ___ = 1;(void)a;
# 2329
::exit(___);}
#if 0
# 2312
{ 
# 2313
__half val; 
# 2314
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  mov.b32         C, 0x3E9A209BU; \n  mul.f32         f,f,C;          \n  cv" "t.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x338FU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x33F8U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x57E1U;\n  mov.b16 ulp,0x9800U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x719DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2328
return val; 
# 2329
} 
#endif
# 2330 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2353
::exit(___);}
#if 0
# 2330
{ 
# 2331
__half2 val; 
# 2332
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3E9A209BU;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x338F338FU;\n  mov.b32 ulp,0x10001000U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x33F833F8U;\n  mov.b32 ulp," "0x90009000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x57E157E1U;\n" "  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0x719D719DU;\n  mov.b32 ulp,0x9C009C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2352
return val; 
# 2353
} 
#endif
# 2356 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2358
::exit(___);}
#if 0
# 2356
{ 
# 2357
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rcp.approx.ftz.f32   fl, fl;     \n  rcp.approx.ftz.f32   fu, fu;     \n  " "cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2358
} 
#endif
# 2359 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrcp(const __half a) {int volatile ___ = 1;(void)a;
# 2361
::exit(___);}
#if 0
# 2359
{ 
# 2360
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rcp.ap" "prox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2361
} 
#endif
# 2362 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2364
::exit(___);}
#if 0
# 2362
{ 
# 2363
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rsqrt.approx.ftz.f32   fl, fl;     \n  rsqrt.approx.ftz.f32   fu, fu;     " "\n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2364
} 
#endif
# 2365 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2367
::exit(___);}
#if 0
# 2365
{ 
# 2366
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rsqrt." "approx.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2367
} 
#endif
# 2368 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2370
::exit(___);}
#if 0
# 2368
{ 
# 2369
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  sqrt.approx.ftz.f32   fl, fl;     \n  sqrt.approx.ftz.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2370
} 
#endif
# 2371 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2373
::exit(___);}
#if 0
# 2371
{ 
# 2372
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  sqrt.a" "pprox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2373
} 
#endif
# 2376 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a) 
# 2377
{int volatile ___ = 1;(void)a;
# 2382
::exit(___);}
#if 0
# 2377
{ 
# 2378
__half2 r; 
# 2379
__asm__("{set.nan.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2381
return r; 
# 2382
} 
#endif
# 2383 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __half a) 
# 2384
{int volatile ___ = 1;(void)a;
# 2389
::exit(___);}
#if 0
# 2384
{ 
# 2385
__half r; 
# 2386
__asm__("{set.nan.f16.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2388
return (*(reinterpret_cast< const unsigned short *>(&r))) != 0U; 
# 2389
} 
#endif
# 2390 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a) 
# 2391
{int volatile ___ = 1;(void)a;
# 2396
::exit(___);}
#if 0
# 2391
{ 
# 2392
__half2 r; 
# 2393
__asm__("{neg.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2395
return r; 
# 2396
} 
#endif
# 2397 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hneg(const __half a) 
# 2398
{int volatile ___ = 1;(void)a;
# 2403
::exit(___);}
#if 0
# 2398
{ 
# 2399
__half r; 
# 2400
__asm__("{neg.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2402
return r; 
# 2403
} 
#endif
# 2404 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a) 
# 2405
{int volatile ___ = 1;(void)a;
# 2410
::exit(___);}
#if 0
# 2405
{ 
# 2406
__half2 r; 
# 2407
__asm__("{abs.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2409
return r; 
# 2410
} 
#endif
# 2411 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __habs(const __half a) 
# 2412
{int volatile ___ = 1;(void)a;
# 2417
::exit(___);}
#if 0
# 2412
{ 
# 2413
__half r; 
# 2414
__asm__("{abs.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2416
return r; 
# 2417
} 
#endif
# 2419 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c) 
# 2420
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2430
::exit(___);}
#if 0
# 2420
{ 
# 2425
__half real_tmp = __hfma(a.x, b.x, c.x); 
# 2426
__half img_tmp = __hfma(a.x, b.y, c.y); 
# 2427
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2428
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2429
return make_half2(real_tmp, img_tmp); 
# 2430
} 
#endif
# 2437 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b) 
# 2438
{int volatile ___ = 1;(void)a;(void)b;
# 2440
::exit(___);}
#if 0
# 2438
{ 
# 2439
{ __half val; __asm__("{max.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2440
} 
#endif
# 2441 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b) 
# 2442
{int volatile ___ = 1;(void)a;(void)b;
# 2444
::exit(___);}
#if 0
# 2442
{ 
# 2443
{ __half val; __asm__("{min.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2444
} 
#endif
# 2445 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b) 
# 2446
{int volatile ___ = 1;(void)a;(void)b;
# 2448
::exit(___);}
#if 0
# 2446
{ 
# 2447
{ __half val; __asm__("{max.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2448
} 
#endif
# 2449 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b) 
# 2450
{int volatile ___ = 1;(void)a;(void)b;
# 2452
::exit(___);}
#if 0
# 2450
{ 
# 2451
{ __half val; __asm__("{min.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2452
} 
#endif
# 2453 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c) 
# 2454
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2456
::exit(___);}
#if 0
# 2454
{ 
# 2455
{ __half val; __asm__("{fma.rn.relu.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2456
} 
#endif
# 2460 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b) 
# 2461
{int volatile ___ = 1;(void)a;(void)b;
# 2463
::exit(___);}
#if 0
# 2461
{ 
# 2462
{ __half2 val; __asm__("{max.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2463
} 
#endif
# 2464 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b) 
# 2465
{int volatile ___ = 1;(void)a;(void)b;
# 2467
::exit(___);}
#if 0
# 2465
{ 
# 2466
{ __half2 val; __asm__("{min.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2467
} 
#endif
# 2468 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b) 
# 2469
{int volatile ___ = 1;(void)a;(void)b;
# 2471
::exit(___);}
#if 0
# 2469
{ 
# 2470
{ __half2 val; __asm__("{max.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2471
} 
#endif
# 2472 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b) 
# 2473
{int volatile ___ = 1;(void)a;(void)b;
# 2475
::exit(___);}
#if 0
# 2473
{ 
# 2474
{ __half2 val; __asm__("{min.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2475
} 
#endif
# 2476 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c) 
# 2477
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2479
::exit(___);}
#if 0
# 2477
{ 
# 2478
{ __half2 val; __asm__("{fma.rn.relu.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2479
} 
#endif
# 2491 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val) {int volatile ___ = 1;(void)address;(void)val;
# 2497
::exit(___);}
#if 0
# 2491
{ 
# 2492
__half2 r; 
# 2493
__asm__ volatile("{ atom.add.noftz.f16x2 %0,[%1],%2; }\n" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "l" (address), "r" (*(reinterpret_cast< const unsigned *>(&val))) : "memory"); 
# 2496
return r; 
# 2497
} 
#endif
# 2503 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val) {int volatile ___ = 1;(void)address;(void)val;
# 2510
::exit(___);}
#if 0
# 2503
{ 
# 2504
__half r; 
# 2505
__asm__ volatile("{ atom.add.noftz.f16 %0,[%1],%2; }\n" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "l" (address), "h" (*(reinterpret_cast< const unsigned short *>(&val))) : "memory"); 
# 2509
return r; 
# 2510
} 
#endif
# 2536 "/home/poweruser/junda.feng/anaconda3/include/cuda_fp16.hpp"
typedef __half half; 
# 2537
typedef __half2 half2; 
# 2539
typedef __half __nv_half; 
# 2540
typedef __half2 __nv_half2; 
# 2541
typedef __half_raw __nv_half_raw; 
# 2542
typedef __half2_raw __nv_half2_raw; 
# 2543
typedef __half nv_half; 
# 2544
typedef __half2 nv_half2; 
# 128 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
struct __nv_bfloat16; 
# 138 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
struct __nv_bfloat162; 
# 154 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __double2bfloat16(const double a); 
# 169 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16(const float a); 
# 184 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rn(const float a); 
# 199 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rz(const float a); 
# 215 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rd(const float a); 
# 231 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_ru(const float a); 
# 246 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline float __bfloat162float(const __nv_bfloat16 a); 
# 264 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat162 __float2bfloat162_rn(const float a); 
# 285 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b); 
# 301 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline float __low2float(const __nv_bfloat162 a); 
# 317 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline float __high2float(const __nv_bfloat162 a); 
# 339 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a); 
# 355 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline float2 __bfloat1622float2(const __nv_bfloat162 a); 
# 371 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h); 
# 387 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline int __bfloat162int_rz(const __nv_bfloat16 h); 
# 403 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h); 
# 419 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h); 
# 436 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i); 
# 452 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i); 
# 468 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i); 
# 484 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i); 
# 502 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h); 
# 518 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline short __bfloat162short_rz(const __nv_bfloat16 h); 
# 534 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h); 
# 550 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h); 
# 568 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i); 
# 584 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i); 
# 600 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i); 
# 616 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i); 
# 633 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h); 
# 649 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h); 
# 665 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h); 
# 681 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h); 
# 698 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i); 
# 714 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i); 
# 730 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i); 
# 746 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i); 
# 764 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h); 
# 781 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h); 
# 793 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h); 
# 805 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h); 
# 823 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i); 
# 840 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i); 
# 856 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i); 
# 872 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i); 
# 890 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h); 
# 907 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h); 
# 923 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h); 
# 939 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h); 
# 957 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i); 
# 974 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i); 
# 990 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i); 
# 1006 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i); 
# 1024 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h); 
# 1040 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h); 
# 1056 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h); 
# 1072 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h); 
# 1090 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i); 
# 1102 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i); 
# 1118 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i); 
# 1134 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i); 
# 1151 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h); 
# 1166 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h); 
# 1181 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h); 
# 1198 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h); 
# 1215 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h); 
# 1231 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h); 
# 1247 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h); 
# 1265 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h); 
# 1282 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a); 
# 1298 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a); 
# 1318 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1338 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1353 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a); 
# 1368 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a); 
# 1385 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a); 
# 1403 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 1419 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a); 
# 1435 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a); 
# 1452 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h); 
# 1468 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h); 
# 1484 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i); 
# 1500 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i); 
# 1531 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1556 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1581 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1605 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1630 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1654 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1679 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1703 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1716 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr); 
# 1723
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr); 
# 1730
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr); 
# 1737
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr); 
# 1744
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr); 
# 1751
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr); 
# 1758
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr); 
# 1765
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr); 
# 1772
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr); 
# 1779
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr); 
# 1786
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr); 
# 1793
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr); 
# 1801
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1808
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1815
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1822
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1829
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1836
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1843
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1850
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1869 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1887 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1905 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1923 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1941 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1959 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1977 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1995 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2013 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2031 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2049 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2067 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2083 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a); 
# 2103 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2123 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2143 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2163 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2183 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2204 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2224 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2241 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a); 
# 2260 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2279 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2299 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2322 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2344 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2363 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a); 
# 2378 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a); 
# 2398 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2418 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2434 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2454 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2474 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2490 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2510 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2528 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2547 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2566 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2589 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2611 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2629 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a); 
# 2651 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2673 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2695 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2717 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2739 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2761 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2783 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2805 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2827 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2850 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2872 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2895 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2912 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2929 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2946 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2963 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2980 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2997 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3015 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3033 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3051 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3069 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3087 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3105 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3120 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a); 
# 3139 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3158 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3176 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3194 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3216 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 3237 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3258 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3278 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3298 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3320 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3339 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3355 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a); 
# 3372 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a); 
# 3387 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a); 
# 3403 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a); 
# 3419 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a); 
# 3435 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a); 
# 3452 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a); 
# 3469 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a); 
# 3486 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a); 
# 3501 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a); 
# 3516 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a); 
# 3532 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a); 
# 3549 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a); 
# 3565 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a); 
# 3582 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a); 
# 3599 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a); 
# 3616 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a); 
# 3633 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a); 
# 3650 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a); 
# 3667 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a); 
# 3683 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a); 
# 3698 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a); 
# 3717 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val); 
# 3735 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val); 
# 127 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
typedef 
# 125
struct __attribute((aligned(2))) { 
# 126
unsigned short x; 
# 127
} __nv_bfloat16_raw; 
# 132
typedef 
# 129
struct __attribute((aligned(4))) { 
# 130
unsigned short x; 
# 131
unsigned short y; 
# 132
} __nv_bfloat162_raw; 
# 140
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 153 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
struct __attribute((aligned(2))) __nv_bfloat16 { 
# 155
protected: unsigned short __x; 
# 159
public: __nv_bfloat16() = default;
# 165
__nv_bfloat16(const __nv_bfloat16_raw &hr) : __x(hr.x) { } 
# 166
__nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) { (__x) = (hr.x); return *this; } 
# 167
volatile __nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 168
volatile __nv_bfloat16 &operator=(const volatile __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 169
operator __nv_bfloat16_raw() const { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 170
operator __nv_bfloat16_raw() const volatile { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 174
__nv_bfloat16(const float f) { (__x) = (__float2bfloat16(f).__x); } 
# 175
__nv_bfloat16(const double f) { (__x) = (__double2bfloat16(f).__x); } 
# 177
operator float() const { return __bfloat162float(*this); } 
# 178
__nv_bfloat16 &operator=(const float f) { (__x) = (__float2bfloat16(f).__x); return *this; } 
# 181
__nv_bfloat16 &operator=(const double f) { (__x) = (__double2bfloat16(f).__x); return *this; } 
# 187
__nv_bfloat16(short val) { (__x) = (__short2bfloat16_rn(val).__x); } 
# 188
__nv_bfloat16(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); } 
# 189
__nv_bfloat16(int val) { (__x) = (__int2bfloat16_rn(val).__x); } 
# 190
__nv_bfloat16(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); } 
# 191
__nv_bfloat16(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); } 
# 192
__nv_bfloat16(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); } 
# 195
operator short() const { return __bfloat162short_rz(*this); } 
# 196
__nv_bfloat16 &operator=(short val) { (__x) = (__short2bfloat16_rn(val).__x); return *this; } 
# 198
operator unsigned short() const { return __bfloat162ushort_rz(*this); } 
# 199
__nv_bfloat16 &operator=(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); return *this; } 
# 201
operator int() const { return __bfloat162int_rz(*this); } 
# 202
__nv_bfloat16 &operator=(int val) { (__x) = (__int2bfloat16_rn(val).__x); return *this; } 
# 204
operator unsigned() const { return __bfloat162uint_rz(*this); } 
# 205
__nv_bfloat16 &operator=(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); return *this; } 
# 207
operator long long() const { return __bfloat162ll_rz(*this); } 
# 208
__nv_bfloat16 &operator=(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); return *this; } 
# 210
operator unsigned long long() const { return __bfloat162ull_rz(*this); } 
# 211
__nv_bfloat16 &operator=(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); return *this; } 
# 214
operator bool() const { return ((__x) & 32767) != 0; } 
# 217
}; 
# 225
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 225
{ return __hadd(lh, rh); } 
#endif
# 226 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 226
{ return __hsub(lh, rh); } 
#endif
# 227 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator*(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 227
{ return __hmul(lh, rh); } 
#endif
# 228 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator/(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 228
{ return __hdiv(lh, rh); } 
#endif
# 230 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator+=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 230
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 231 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator-=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 231
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 232 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator*=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 232
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 233 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator/=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 233
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 236 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator++(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 236
{ __nv_bfloat16_raw one; (one.x) = (16256); (h += one); return h; } 
#endif
# 237 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator--(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 237
{ __nv_bfloat16_raw one; (one.x) = (16256); (h -= one); return h; } 
#endif
# 238 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator++(__nv_bfloat16 &h, const int ignored) 
# 239
{int volatile ___ = 1;(void)h;(void)ignored;
# 248
::exit(___);}
#if 0
# 239
{ 
# 241
static_cast< void>(ignored); 
# 243
const __nv_bfloat16 ret = h; 
# 244
__nv_bfloat16_raw one; 
# 245
(one.x) = (16256); 
# 246
(h += one); 
# 247
return ret; 
# 248
} 
#endif
# 249 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator--(__nv_bfloat16 &h, const int ignored) 
# 250
{int volatile ___ = 1;(void)h;(void)ignored;
# 259
::exit(___);}
#if 0
# 250
{ 
# 252
static_cast< void>(ignored); 
# 254
const __nv_bfloat16 ret = h; 
# 255
__nv_bfloat16_raw one; 
# 256
(one.x) = (16256); 
# 257
(h -= one); 
# 258
return ret; 
# 259
} 
#endif
# 261 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 261
{ return h; } 
#endif
# 262 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 262
{ return __hneg(h); } 
#endif
# 265 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 265
{ return __heq(lh, rh); } 
#endif
# 266 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 266
{ return __hneu(lh, rh); } 
#endif
# 267 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 267
{ return __hgt(lh, rh); } 
#endif
# 268 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 268
{ return __hlt(lh, rh); } 
#endif
# 269 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 269
{ return __hge(lh, rh); } 
#endif
# 270 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 270
{ return __hle(lh, rh); } 
#endif
# 276 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
struct __attribute((aligned(4))) __nv_bfloat162 { 
# 277
__nv_bfloat16 x; 
# 278
__nv_bfloat16 y; 
# 283
__nv_bfloat162() = default;
# 284
__nv_bfloat162(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 285
__nv_bfloat162 &operator=(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 289
__nv_bfloat162(const __nv_bfloat16 &a, const __nv_bfloat16 &b) : x(a), y(b) { } 
# 290
__nv_bfloat162(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 291
__nv_bfloat162 &operator=(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 294
__nv_bfloat162(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 295
__nv_bfloat162 &operator=(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 296
operator __nv_bfloat162_raw() const { __nv_bfloat162_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 297
}; 
# 304
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 304
{ return __hadd2(lh, rh); } 
#endif
# 305 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 305
{ return __hsub2(lh, rh); } 
#endif
# 306 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator*(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 306
{ return __hmul2(lh, rh); } 
#endif
# 307 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator/(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 307
{ return __h2div(lh, rh); } 
#endif
# 309 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator+=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 309
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 310 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator-=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 310
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 311 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator*=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 311
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 312 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator/=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 312
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 314 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator++(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 314
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hadd2(h, one))); return h; } 
#endif
# 315 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator--(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 315
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hsub2(h, one))); return h; } 
#endif
# 316 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator++(__nv_bfloat162 &h, const int ignored) 
# 317
{int volatile ___ = 1;(void)h;(void)ignored;
# 327
::exit(___);}
#if 0
# 317
{ 
# 319
static_cast< void>(ignored); 
# 321
const __nv_bfloat162 ret = h; 
# 322
__nv_bfloat162_raw one; 
# 323
(one.x) = (16256); 
# 324
(one.y) = (16256); 
# 325
(h = (__hadd2(h, one))); 
# 326
return ret; 
# 327
} 
#endif
# 328 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator--(__nv_bfloat162 &h, const int ignored) 
# 329
{int volatile ___ = 1;(void)h;(void)ignored;
# 339
::exit(___);}
#if 0
# 329
{ 
# 331
static_cast< void>(ignored); 
# 333
const __nv_bfloat162 ret = h; 
# 334
__nv_bfloat162_raw one; 
# 335
(one.x) = (16256); 
# 336
(one.y) = (16256); 
# 337
(h = (__hsub2(h, one))); 
# 338
return ret; 
# 339
} 
#endif
# 340 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 340
{ return h; } 
#endif
# 341 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 341
{ return __hneg2(h); } 
#endif
# 343 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 343
{ return __hbeq2(lh, rh); } 
#endif
# 344 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 344
{ return __hbneu2(lh, rh); } 
#endif
# 345 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 345
{ return __hbgt2(lh, rh); } 
#endif
# 346 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 346
{ return __hblt2(lh, rh); } 
#endif
# 347 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 347
{ return __hbge2(lh, rh); } 
#endif
# 348 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 348
{ return __hble2(lh, rh); } 
#endif
# 361 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
#pragma GCC diagnostic pop
# 368
static inline unsigned short __internal_float2bfloat16(const float f, unsigned &sign, unsigned &remainder) 
# 369
{ 
# 370
unsigned x; 
# 375
(void)memcpy(&x, &f, sizeof f); 
# 380
if ((x & 2147483647U) > 2139095040U) { 
# 381
sign = 0U; 
# 382
remainder = 0U; 
# 383
return static_cast< unsigned short>(32767U); 
# 384
}  
# 385
sign = (x >> 31U); 
# 386
remainder = (x << 16U); 
# 387
return static_cast< unsigned short>(x >> 16U); 
# 388
} 
# 390
static inline __nv_bfloat16 __double2bfloat16(const double x) 
# 391
{ 
# 392
float f = static_cast< float>(x); 
# 393
const double d = static_cast< double>(f); 
# 394
unsigned u; 
# 399
(void)memcpy(&u, &f, sizeof f); 
# 403
bool x_is_not_nan = (u << ((unsigned)1U)) <= ((unsigned)4278190080U); 
# 406
if ((x > (0.0)) && (d > x)) { 
# 407
u--; 
# 408
}  
# 409
if ((x < (0.0)) && (d < x)) { 
# 410
u--; 
# 411
}  
# 412
if ((d != x) && x_is_not_nan) { 
# 413
u |= 1U; 
# 414
}  
# 419
(void)memcpy(&f, &u, sizeof f); 
# 424
return __float2bfloat16(f); 
# 425
} 
# 427
static inline __nv_bfloat16 __float2bfloat16(const float a) 
# 428
{ 
# 429
__nv_bfloat16 val; 
# 433
__nv_bfloat16_raw r; 
# 434
unsigned sign = 0U; 
# 435
unsigned remainder = 0U; 
# 436
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 437
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 438
(r.x)++; 
# 439
}  
# 440
(val = r); 
# 442
return val; 
# 443
} 
# 444
static inline __nv_bfloat16 __float2bfloat16_rn(const float a) 
# 445
{ 
# 446
__nv_bfloat16 val; 
# 450
__nv_bfloat16_raw r; 
# 451
unsigned sign = 0U; 
# 452
unsigned remainder = 0U; 
# 453
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 454
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 455
(r.x)++; 
# 456
}  
# 457
(val = r); 
# 459
return val; 
# 460
} 
# 461
static inline __nv_bfloat16 __float2bfloat16_rz(const float a) 
# 462
{ 
# 463
__nv_bfloat16 val; 
# 467
__nv_bfloat16_raw r; 
# 468
unsigned sign = 0U; 
# 469
unsigned remainder = 0U; 
# 470
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 471
(val = r); 
# 473
return val; 
# 474
} 
# 475
static inline __nv_bfloat16 __float2bfloat16_rd(const float a) 
# 476
{ 
# 477
__nv_bfloat16 val; 
# 478
__nv_bfloat16_raw r; 
# 479
unsigned sign = 0U; 
# 480
unsigned remainder = 0U; 
# 481
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 482
if ((remainder != 0U) && (sign != 0U)) { 
# 483
(r.x)++; 
# 484
}  
# 485
(val = r); 
# 486
return val; 
# 487
} 
# 488
static inline __nv_bfloat16 __float2bfloat16_ru(const float a) 
# 489
{ 
# 490
__nv_bfloat16 val; 
# 491
__nv_bfloat16_raw r; 
# 492
unsigned sign = 0U; 
# 493
unsigned remainder = 0U; 
# 494
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 495
if ((remainder != 0U) && (sign == 0U)) { 
# 496
(r.x)++; 
# 497
}  
# 498
(val = r); 
# 499
return val; 
# 500
} 
# 501
static inline __nv_bfloat162 __float2bfloat162_rn(const float a) 
# 502
{ 
# 503
__nv_bfloat162 val; 
# 509
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(a))); 
# 511
return val; 
# 512
} 
# 513
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b) 
# 514
{ 
# 515
__nv_bfloat162 val; 
# 522
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(b))); 
# 524
return val; 
# 525
} 
# 527
static inline float __internal_bfloat162float(const unsigned short h) 
# 528
{ 
# 529
float f; 
# 533
unsigned u = (static_cast< unsigned>(h)) << 16; 
# 535
(void)memcpy(&f, &u, sizeof f); 
# 540
return f; 
# 541
} 
# 543
static inline float __bfloat162float(const __nv_bfloat16 a) 
# 544
{ 
# 545
return __internal_bfloat162float(((__nv_bfloat16_raw)a).x); 
# 546
} 
# 547
static inline float __low2float(const __nv_bfloat162 a) 
# 548
{ 
# 549
return __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 550
} 
# 552
static inline float __high2float(const __nv_bfloat162 a) 
# 553
{ 
# 554
return __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 555
} 
# 560
static inline __nv_bfloat162 make_bfloat162(const __nv_bfloat16 x, const __nv_bfloat16 y) 
# 561
{ 
# 562
__nv_bfloat162 t; (t.x) = x; (t.y) = y; return t; 
# 563
} 
# 568
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a) 
# 569
{ 
# 570
__nv_bfloat162 val = __floats2bfloat162_rn(a.x, a.y); 
# 571
return val; 
# 572
} 
# 573
static inline float2 __bfloat1622float2(const __nv_bfloat162 a) 
# 574
{ 
# 575
float hi_float; 
# 576
float lo_float; 
# 577
lo_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 578
hi_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 579
return make_float2(lo_float, hi_float); 
# 580
} 
# 581
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h) 
# 582
{int volatile ___ = 1;(void)h;
# 584
::exit(___);}
#if 0
# 582
{ 
# 583
return __float2int_rn(__bfloat162float(h)); 
# 584
} 
#endif
# 585 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline int __bfloat162int_rz(const __nv_bfloat16 h) 
# 586
{ 
# 587
const float f = __bfloat162float(h); 
# 588
int i; 
# 589
i = (static_cast< int>(f)); 
# 591
const int max_val = ((int)2147483647U); 
# 592
const int min_val = ((int)2147483648U); 
# 593
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 595
if (bits > ((unsigned short)65280U)) { 
# 597
i = 0; 
# 598
} else { if (f >= (static_cast< float>(max_val))) { 
# 600
i = max_val; 
# 601
} else { if (f < (static_cast< float>(min_val))) { 
# 603
i = min_val; 
# 604
}  }  }  
# 606
return i; 
# 607
} 
# 608
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h) 
# 609
{int volatile ___ = 1;(void)h;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
return __float2int_rd(__bfloat162float(h)); 
# 611
} 
#endif
# 612 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h) 
# 613
{int volatile ___ = 1;(void)h;
# 615
::exit(___);}
#if 0
# 613
{ 
# 614
return __float2int_ru(__bfloat162float(h)); 
# 615
} 
#endif
# 616 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i) 
# 617
{ 
# 627 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); 
# 628
return __double2bfloat16(d); 
# 630
} 
# 631
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i) 
# 632
{int volatile ___ = 1;(void)i;
# 634
::exit(___);}
#if 0
# 632
{ 
# 633
return __float2bfloat16_rz(__int2float_rz(i)); 
# 634
} 
#endif
# 635 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i) 
# 636
{int volatile ___ = 1;(void)i;
# 638
::exit(___);}
#if 0
# 636
{ 
# 637
return __float2bfloat16_rd(__int2float_rd(i)); 
# 638
} 
#endif
# 639 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i) 
# 640
{int volatile ___ = 1;(void)i;
# 642
::exit(___);}
#if 0
# 640
{ 
# 641
return __float2bfloat16_ru(__int2float_ru(i)); 
# 642
} 
#endif
# 644 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h) 
# 645
{int volatile ___ = 1;(void)h;
# 652
::exit(___);}
#if 0
# 645
{ 
# 646
short val; 
# 647
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 651
return val; 
# 652
} 
#endif
# 653 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline short __bfloat162short_rz(const __nv_bfloat16 h) 
# 654
{ 
# 655
short val; 
# 662
const float f = __bfloat162float(h); 
# 663
val = (static_cast< short>(f)); 
# 664
const short max_val = ((short)32767U); 
# 665
const short min_val = ((short)32768U); 
# 666
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 668
if (bits > ((unsigned short)65280U)) { 
# 670
val = (0); 
# 671
} else { if (f > (static_cast< float>(max_val))) { 
# 673
val = max_val; 
# 674
} else { if (f < (static_cast< float>(min_val))) { 
# 676
val = min_val; 
# 677
}  }  }  
# 679
return val; 
# 680
} 
# 681
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h) 
# 682
{int volatile ___ = 1;(void)h;
# 689
::exit(___);}
#if 0
# 682
{ 
# 683
short val; 
# 684
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 688
return val; 
# 689
} 
#endif
# 690 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h) 
# 691
{int volatile ___ = 1;(void)h;
# 698
::exit(___);}
#if 0
# 691
{ 
# 692
short val; 
# 693
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 697
return val; 
# 698
} 
#endif
# 699 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i) 
# 700
{ 
# 701
const float f = static_cast< float>(i); 
# 702
return __float2bfloat16_rn(f); 
# 703
} 
# 704
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i) 
# 705
{int volatile ___ = 1;(void)i;
# 707
::exit(___);}
#if 0
# 705
{ 
# 706
return __float2bfloat16_rz(__int2float_rz(static_cast< int>(i))); 
# 707
} 
#endif
# 708 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i) 
# 709
{int volatile ___ = 1;(void)i;
# 711
::exit(___);}
#if 0
# 709
{ 
# 710
return __float2bfloat16_rd(__int2float_rd(static_cast< int>(i))); 
# 711
} 
#endif
# 712 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i) 
# 713
{int volatile ___ = 1;(void)i;
# 715
::exit(___);}
#if 0
# 713
{ 
# 714
return __float2bfloat16_ru(__int2float_ru(static_cast< int>(i))); 
# 715
} 
#endif
# 717 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h) 
# 718
{int volatile ___ = 1;(void)h;
# 720
::exit(___);}
#if 0
# 718
{ 
# 719
return __float2uint_rn(__bfloat162float(h)); 
# 720
} 
#endif
# 721 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h) 
# 722
{ 
# 723
const float f = __bfloat162float(h); 
# 724
unsigned i; 
# 725
i = (static_cast< unsigned>(f)); 
# 727
const unsigned max_val = 4294967295U; 
# 728
const unsigned min_val = 0U; 
# 729
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 731
if (bits > ((unsigned short)65280U)) { 
# 733
i = 0U; 
# 734
} else { if (f >= (static_cast< float>(max_val))) { 
# 736
i = max_val; 
# 737
} else { if (f < (static_cast< float>(min_val))) { 
# 739
i = min_val; 
# 740
}  }  }  
# 742
return i; 
# 743
} 
# 744
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h) 
# 745
{int volatile ___ = 1;(void)h;
# 747
::exit(___);}
#if 0
# 745
{ 
# 746
return __float2uint_rd(__bfloat162float(h)); 
# 747
} 
#endif
# 748 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h) 
# 749
{int volatile ___ = 1;(void)h;
# 751
::exit(___);}
#if 0
# 749
{ 
# 750
return __float2uint_ru(__bfloat162float(h)); 
# 751
} 
#endif
# 752 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i) 
# 753
{ 
# 763 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); 
# 764
return __double2bfloat16(d); 
# 766
} 
# 767
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i) 
# 768
{int volatile ___ = 1;(void)i;
# 770
::exit(___);}
#if 0
# 768
{ 
# 769
return __float2bfloat16_rz(__uint2float_rz(i)); 
# 770
} 
#endif
# 771 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i) 
# 772
{int volatile ___ = 1;(void)i;
# 774
::exit(___);}
#if 0
# 772
{ 
# 773
return __float2bfloat16_rd(__uint2float_rd(i)); 
# 774
} 
#endif
# 775 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i) 
# 776
{int volatile ___ = 1;(void)i;
# 778
::exit(___);}
#if 0
# 776
{ 
# 777
return __float2bfloat16_ru(__uint2float_ru(i)); 
# 778
} 
#endif
# 780 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h) 
# 781
{int volatile ___ = 1;(void)h;
# 788
::exit(___);}
#if 0
# 781
{ 
# 782
unsigned short val; 
# 783
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 787
return val; 
# 788
} 
#endif
# 789 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h) 
# 790
{ 
# 791
unsigned short val; 
# 798
const float f = __bfloat162float(h); 
# 799
val = (static_cast< unsigned short>(f)); 
# 800
const unsigned short max_val = (65535U); 
# 801
const unsigned short min_val = (0U); 
# 802
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 804
if (bits > ((unsigned short)65280U)) { 
# 806
val = (0U); 
# 807
} else { if (f > (static_cast< float>(max_val))) { 
# 809
val = max_val; 
# 810
} else { if (f < (static_cast< float>(min_val))) { 
# 812
val = min_val; 
# 813
}  }  }  
# 815
return val; 
# 816
} 
# 817
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h) 
# 818
{int volatile ___ = 1;(void)h;
# 825
::exit(___);}
#if 0
# 818
{ 
# 819
unsigned short val; 
# 820
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 824
return val; 
# 825
} 
#endif
# 826 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h) 
# 827
{int volatile ___ = 1;(void)h;
# 834
::exit(___);}
#if 0
# 827
{ 
# 828
unsigned short val; 
# 829
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 833
return val; 
# 834
} 
#endif
# 835 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i) 
# 836
{ 
# 837
const float f = static_cast< float>(i); 
# 838
return __float2bfloat16_rn(f); 
# 839
} 
# 840
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i) 
# 841
{int volatile ___ = 1;(void)i;
# 843
::exit(___);}
#if 0
# 841
{ 
# 842
return __float2bfloat16_rz(__uint2float_rz(static_cast< unsigned>(i))); 
# 843
} 
#endif
# 844 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i) 
# 845
{int volatile ___ = 1;(void)i;
# 847
::exit(___);}
#if 0
# 845
{ 
# 846
return __float2bfloat16_rd(__uint2float_rd(static_cast< unsigned>(i))); 
# 847
} 
#endif
# 848 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i) 
# 849
{int volatile ___ = 1;(void)i;
# 851
::exit(___);}
#if 0
# 849
{ 
# 850
return __float2bfloat16_ru(__uint2float_ru(static_cast< unsigned>(i))); 
# 851
} 
#endif
# 853 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h) 
# 854
{int volatile ___ = 1;(void)h;
# 856
::exit(___);}
#if 0
# 854
{ 
# 855
return __float2ull_rn(__bfloat162float(h)); 
# 856
} 
#endif
# 857 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h) 
# 858
{ 
# 859
const float f = __bfloat162float(h); 
# 860
unsigned long long i; 
# 861
i = (static_cast< unsigned long long>(f)); 
# 863
const unsigned long long max_val = 18446744073709551615ULL; 
# 864
const unsigned long long min_val = 0ULL; 
# 865
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 867
if (bits > ((unsigned short)65280U)) { 
# 869
i = 9223372036854775808ULL; 
# 870
} else { if (f >= (static_cast< float>(max_val))) { 
# 872
i = max_val; 
# 873
} else { if (f < (static_cast< float>(min_val))) { 
# 875
i = min_val; 
# 876
}  }  }  
# 878
return i; 
# 879
} 
# 880
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h) 
# 881
{int volatile ___ = 1;(void)h;
# 883
::exit(___);}
#if 0
# 881
{ 
# 882
return __float2ull_rd(__bfloat162float(h)); 
# 883
} 
#endif
# 884 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h) 
# 885
{int volatile ___ = 1;(void)h;
# 887
::exit(___);}
#if 0
# 885
{ 
# 886
return __float2ull_ru(__bfloat162float(h)); 
# 887
} 
#endif
# 888 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i) 
# 889
{ 
# 899 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
float f = static_cast< float>(i); 
# 900
const unsigned long long uf = static_cast< unsigned long long>(f); 
# 901
unsigned u; 
# 906
(void)memcpy(&u, &f, sizeof f); 
# 913
if (uf > i) { 
# 914
u--; 
# 915
}  
# 916
if (uf != i) { 
# 917
u |= 1U; 
# 918
}  
# 923
(void)memcpy(&f, &u, sizeof f); 
# 928
return __float2bfloat16_rn(f); 
# 930
} 
# 931
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i) 
# 932
{int volatile ___ = 1;(void)i;
# 934
::exit(___);}
#if 0
# 932
{ 
# 933
return __float2bfloat16_rz(__ull2float_rz(i)); 
# 934
} 
#endif
# 935 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i) 
# 936
{int volatile ___ = 1;(void)i;
# 938
::exit(___);}
#if 0
# 936
{ 
# 937
return __float2bfloat16_rd(__ull2float_rd(i)); 
# 938
} 
#endif
# 939 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i) 
# 940
{int volatile ___ = 1;(void)i;
# 942
::exit(___);}
#if 0
# 940
{ 
# 941
return __float2bfloat16_ru(__ull2float_ru(i)); 
# 942
} 
#endif
# 943 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h) 
# 944
{int volatile ___ = 1;(void)h;
# 946
::exit(___);}
#if 0
# 944
{ 
# 945
return __float2ll_rn(__bfloat162float(h)); 
# 946
} 
#endif
# 947 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h) 
# 948
{ 
# 949
const float f = __bfloat162float(h); 
# 950
long long i; 
# 951
i = (static_cast< long long>(f)); 
# 953
const long long max_val = ((long long)9223372036854775807ULL); 
# 954
const long long min_val = ((long long)9223372036854775808ULL); 
# 955
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 957
if (bits > ((unsigned short)65280U)) { 
# 959
i = min_val; 
# 960
} else { if (f >= (static_cast< float>(max_val))) { 
# 962
i = max_val; 
# 963
} else { if (f < (static_cast< float>(min_val))) { 
# 965
i = min_val; 
# 966
}  }  }  
# 968
return i; 
# 969
} 
# 970
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h) 
# 971
{int volatile ___ = 1;(void)h;
# 973
::exit(___);}
#if 0
# 971
{ 
# 972
return __float2ll_rd(__bfloat162float(h)); 
# 973
} 
#endif
# 974 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h) 
# 975
{int volatile ___ = 1;(void)h;
# 977
::exit(___);}
#if 0
# 975
{ 
# 976
return __float2ll_ru(__bfloat162float(h)); 
# 977
} 
#endif
# 978 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i) 
# 979
{ 
# 989 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
float f = static_cast< float>(i); 
# 990
const long long lf = static_cast< long long>(f); 
# 991
unsigned u; 
# 996
(void)memcpy(&u, &f, sizeof f); 
# 1001
if ((f > (0.0F)) && (lf > i)) { 
# 1002
u--; 
# 1003
}  
# 1004
if ((f < (0.0F)) && (lf < i)) { 
# 1005
u--; 
# 1006
}  
# 1007
if (lf != i) { 
# 1008
u |= 1U; 
# 1009
}  
# 1014
(void)memcpy(&f, &u, sizeof f); 
# 1019
return __float2bfloat16_rn(f); 
# 1021
} 
# 1022
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i) 
# 1023
{int volatile ___ = 1;(void)i;
# 1025
::exit(___);}
#if 0
# 1023
{ 
# 1024
return __float2bfloat16_rz(__ll2float_rz(i)); 
# 1025
} 
#endif
# 1026 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i) 
# 1027
{int volatile ___ = 1;(void)i;
# 1029
::exit(___);}
#if 0
# 1027
{ 
# 1028
return __float2bfloat16_rd(__ll2float_rd(i)); 
# 1029
} 
#endif
# 1030 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i) 
# 1031
{int volatile ___ = 1;(void)i;
# 1033
::exit(___);}
#if 0
# 1031
{ 
# 1032
return __float2bfloat16_ru(__ll2float_ru(i)); 
# 1033
} 
#endif
# 1035 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h) 
# 1036
{int volatile ___ = 1;(void)h;
# 1038
::exit(___);}
#if 0
# 1036
{ 
# 1037
return __float2bfloat16_rz(truncf(__bfloat162float(h))); 
# 1038
} 
#endif
# 1039 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h) 
# 1040
{int volatile ___ = 1;(void)h;
# 1042
::exit(___);}
#if 0
# 1040
{ 
# 1041
return __float2bfloat16_ru(ceilf(__bfloat162float(h))); 
# 1042
} 
#endif
# 1043 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h) 
# 1044
{int volatile ___ = 1;(void)h;
# 1046
::exit(___);}
#if 0
# 1044
{ 
# 1045
return __float2bfloat16_rd(floorf(__bfloat162float(h))); 
# 1046
} 
#endif
# 1047 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h) 
# 1048
{int volatile ___ = 1;(void)h;
# 1050
::exit(___);}
#if 0
# 1048
{ 
# 1049
return __float2bfloat16_rn(rintf(__bfloat162float(h))); 
# 1050
} 
#endif
# 1052 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h) 
# 1053
{int volatile ___ = 1;(void)h;
# 1057
::exit(___);}
#if 0
# 1053
{ 
# 1054
const __nv_bfloat16 low = __float2bfloat16_rz(truncf(__low2float(h))); 
# 1055
const __nv_bfloat16 high = __float2bfloat16_rz(truncf(__high2float(h))); 
# 1056
return __nv_bfloat162(low, high); 
# 1057
} 
#endif
# 1058 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h) 
# 1059
{int volatile ___ = 1;(void)h;
# 1063
::exit(___);}
#if 0
# 1059
{ 
# 1060
const __nv_bfloat16 low = __float2bfloat16_ru(ceilf(__low2float(h))); 
# 1061
const __nv_bfloat16 high = __float2bfloat16_ru(ceilf(__high2float(h))); 
# 1062
return __nv_bfloat162(low, high); 
# 1063
} 
#endif
# 1064 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h) 
# 1065
{int volatile ___ = 1;(void)h;
# 1069
::exit(___);}
#if 0
# 1065
{ 
# 1066
const __nv_bfloat16 low = __float2bfloat16_rd(floorf(__low2float(h))); 
# 1067
const __nv_bfloat16 high = __float2bfloat16_rd(floorf(__high2float(h))); 
# 1068
return __nv_bfloat162(low, high); 
# 1069
} 
#endif
# 1071 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h) 
# 1072
{int volatile ___ = 1;(void)h;
# 1074
::exit(___);}
#if 0
# 1072
{ 
# 1073
return __halves2bfloat162(hrint(__low2bfloat16(h)), hrint(__high2bfloat16(h))); 
# 1074
} 
#endif
# 1075 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1076
{int volatile ___ = 1;(void)a;(void)b;
# 1083
::exit(___);}
#if 0
# 1076
{ 
# 1077
__nv_bfloat162 val; 
# 1078
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1082
return val; 
# 1083
} 
#endif
# 1084 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1085
{int volatile ___ = 1;(void)a;(void)b;
# 1092
::exit(___);}
#if 0
# 1085
{ 
# 1086
__nv_bfloat162 val; 
# 1087
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1091
return val; 
# 1092
} 
#endif
# 1093 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a) 
# 1094
{int volatile ___ = 1;(void)a;
# 1100
::exit(___);}
#if 0
# 1094
{ 
# 1095
__nv_bfloat16 ret; 
# 1096
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1099
return ret; 
# 1100
} 
#endif
# 1101 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a) 
# 1102
{int volatile ___ = 1;(void)a;
# 1112
::exit(___);}
#if 0
# 1102
{ 
# 1103
int retval; 
# 1104
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 65408U) { 
# 1105
retval = (-1); 
# 1106
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 32640U) { 
# 1107
retval = 1; 
# 1108
} else { 
# 1109
retval = 0; 
# 1110
}  }  
# 1111
return retval; 
# 1112
} 
#endif
# 1113 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a) 
# 1114
{int volatile ___ = 1;(void)a;
# 1120
::exit(___);}
#if 0
# 1114
{ 
# 1115
__nv_bfloat162 val; 
# 1116
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1119
return val; 
# 1120
} 
#endif
# 1121 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a) 
# 1122
{int volatile ___ = 1;(void)a;
# 1128
::exit(___);}
#if 0
# 1122
{ 
# 1123
__nv_bfloat162 val; 
# 1124
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1127
return val; 
# 1128
} 
#endif
# 1129 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a) 
# 1130
{int volatile ___ = 1;(void)a;
# 1136
::exit(___);}
#if 0
# 1130
{ 
# 1131
__nv_bfloat16 ret; 
# 1132
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1135
return ret; 
# 1136
} 
#endif
# 1137 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1138
{int volatile ___ = 1;(void)a;(void)b;
# 1143
::exit(___);}
#if 0
# 1138
{ 
# 1139
__nv_bfloat162 val; 
# 1140
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1142
return val; 
# 1143
} 
#endif
# 1144 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a) 
# 1145
{int volatile ___ = 1;(void)a;
# 1150
::exit(___);}
#if 0
# 1145
{ 
# 1146
__nv_bfloat162 val; 
# 1147
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1149
return val; 
# 1150
} 
#endif
# 1151 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a) 
# 1152
{int volatile ___ = 1;(void)a;
# 1158
::exit(___);}
#if 0
# 1152
{ 
# 1153
__nv_bfloat162 val; 
# 1154
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1157
return val; 
# 1158
} 
#endif
# 1159 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h) 
# 1160
{int volatile ___ = 1;(void)h;
# 1162
::exit(___);}
#if 0
# 1160
{ 
# 1161
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1162
} 
#endif
# 1163 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h) 
# 1164
{int volatile ___ = 1;(void)h;
# 1166
::exit(___);}
#if 0
# 1164
{ 
# 1165
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1166
} 
#endif
# 1167 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i) 
# 1168
{int volatile ___ = 1;(void)i;
# 1172
::exit(___);}
#if 0
# 1168
{ 
# 1169
__nv_bfloat16 h; 
# 1170
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1171
return h; 
# 1172
} 
#endif
# 1173 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i) 
# 1174
{int volatile ___ = 1;(void)i;
# 1178
::exit(___);}
#if 0
# 1174
{ 
# 1175
__nv_bfloat16 h; 
# 1176
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1177
return h; 
# 1178
} 
#endif
# 1190 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1191
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1196
::exit(___);}
#if 0
# 1191
{ 
# 1192
unsigned warp_size; 
# 1193
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1194
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1195
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1196
} 
#endif
# 1197 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1198
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1203
::exit(___);}
#if 0
# 1198
{ 
# 1199
unsigned warp_size; 
# 1200
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1201
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1202
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1203
} 
#endif
# 1204 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1205
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1210
::exit(___);}
#if 0
# 1205
{ 
# 1206
unsigned warp_size; 
# 1207
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1208
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1209
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1210
} 
#endif
# 1211 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1212
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1217
::exit(___);}
#if 0
# 1212
{ 
# 1213
unsigned warp_size; 
# 1214
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1215
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1216
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1217
} 
#endif
# 1221 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1222
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1226
::exit(___);}
#if 0
# 1222
{ 
# 1223
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1224
const __nv_bfloat162 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1225
return __low2bfloat16(temp2); 
# 1226
} 
#endif
# 1227 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1228
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1232
::exit(___);}
#if 0
# 1228
{ 
# 1229
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1230
const __nv_bfloat162 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1231
return __low2bfloat16(temp2); 
# 1232
} 
#endif
# 1233 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1234
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1238
::exit(___);}
#if 0
# 1234
{ 
# 1235
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1236
const __nv_bfloat162 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1237
return __low2bfloat16(temp2); 
# 1238
} 
#endif
# 1239 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1240
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1244
::exit(___);}
#if 0
# 1240
{ 
# 1241
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1242
const __nv_bfloat162 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1243
return __low2bfloat16(temp2); 
# 1244
} 
#endif
# 1256 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr) 
# 1257
{int volatile ___ = 1;(void)ptr;
# 1261
::exit(___);}
#if 0
# 1257
{ 
# 1258
__nv_bfloat162 ret; 
# 1259
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1260
return ret; 
# 1261
} 
#endif
# 1262 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr) 
# 1263
{int volatile ___ = 1;(void)ptr;
# 1267
::exit(___);}
#if 0
# 1263
{ 
# 1264
__nv_bfloat16 ret; 
# 1265
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1266
return ret; 
# 1267
} 
#endif
# 1268 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr) 
# 1269
{int volatile ___ = 1;(void)ptr;
# 1273
::exit(___);}
#if 0
# 1269
{ 
# 1270
__nv_bfloat162 ret; 
# 1271
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1272
return ret; 
# 1273
} 
#endif
# 1274 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr) 
# 1275
{int volatile ___ = 1;(void)ptr;
# 1279
::exit(___);}
#if 0
# 1275
{ 
# 1276
__nv_bfloat16 ret; 
# 1277
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1278
return ret; 
# 1279
} 
#endif
# 1280 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr) 
# 1281
{int volatile ___ = 1;(void)ptr;
# 1285
::exit(___);}
#if 0
# 1281
{ 
# 1282
__nv_bfloat162 ret; 
# 1283
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1284
return ret; 
# 1285
} 
#endif
# 1286 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr) 
# 1287
{int volatile ___ = 1;(void)ptr;
# 1291
::exit(___);}
#if 0
# 1287
{ 
# 1288
__nv_bfloat16 ret; 
# 1289
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1290
return ret; 
# 1291
} 
#endif
# 1292 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr) 
# 1293
{int volatile ___ = 1;(void)ptr;
# 1297
::exit(___);}
#if 0
# 1293
{ 
# 1294
__nv_bfloat162 ret; 
# 1295
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1296
return ret; 
# 1297
} 
#endif
# 1298 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr) 
# 1299
{int volatile ___ = 1;(void)ptr;
# 1303
::exit(___);}
#if 0
# 1299
{ 
# 1300
__nv_bfloat16 ret; 
# 1301
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1302
return ret; 
# 1303
} 
#endif
# 1304 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr) 
# 1305
{int volatile ___ = 1;(void)ptr;
# 1309
::exit(___);}
#if 0
# 1305
{ 
# 1306
__nv_bfloat162 ret; 
# 1307
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1308
return ret; 
# 1309
} 
#endif
# 1310 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr) 
# 1311
{int volatile ___ = 1;(void)ptr;
# 1315
::exit(___);}
#if 0
# 1311
{ 
# 1312
__nv_bfloat16 ret; 
# 1313
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1314
return ret; 
# 1315
} 
#endif
# 1316 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr) 
# 1317
{int volatile ___ = 1;(void)ptr;
# 1321
::exit(___);}
#if 0
# 1317
{ 
# 1318
__nv_bfloat162 ret; 
# 1319
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1320
return ret; 
# 1321
} 
#endif
# 1322 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr) 
# 1323
{int volatile ___ = 1;(void)ptr;
# 1327
::exit(___);}
#if 0
# 1323
{ 
# 1324
__nv_bfloat16 ret; 
# 1325
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1326
return ret; 
# 1327
} 
#endif
# 1329 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1330
{int volatile ___ = 1;(void)ptr;(void)value;
# 1332
::exit(___);}
#if 0
# 1330
{ 
# 1331
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1332
} 
#endif
# 1333 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1334
{int volatile ___ = 1;(void)ptr;(void)value;
# 1336
::exit(___);}
#if 0
# 1334
{ 
# 1335
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1336
} 
#endif
# 1337 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1338
{int volatile ___ = 1;(void)ptr;(void)value;
# 1340
::exit(___);}
#if 0
# 1338
{ 
# 1339
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1340
} 
#endif
# 1341 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1342
{int volatile ___ = 1;(void)ptr;(void)value;
# 1344
::exit(___);}
#if 0
# 1342
{ 
# 1343
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1344
} 
#endif
# 1345 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1346
{int volatile ___ = 1;(void)ptr;(void)value;
# 1348
::exit(___);}
#if 0
# 1346
{ 
# 1347
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1348
} 
#endif
# 1349 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1350
{int volatile ___ = 1;(void)ptr;(void)value;
# 1352
::exit(___);}
#if 0
# 1350
{ 
# 1351
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1352
} 
#endif
# 1353 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1354
{int volatile ___ = 1;(void)ptr;(void)value;
# 1356
::exit(___);}
#if 0
# 1354
{ 
# 1355
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1356
} 
#endif
# 1357 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1358
{int volatile ___ = 1;(void)ptr;(void)value;
# 1360
::exit(___);}
#if 0
# 1358
{ 
# 1359
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1360
} 
#endif
# 1381 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1382
{int volatile ___ = 1;(void)a;(void)b;
# 1384
::exit(___);}
#if 0
# 1382
{ 
# 1383
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1384
} 
#endif
# 1385 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1386
{int volatile ___ = 1;(void)a;(void)b;
# 1388
::exit(___);}
#if 0
# 1386
{ 
# 1387
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1388
} 
#endif
# 1389 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1390
{int volatile ___ = 1;(void)a;(void)b;
# 1392
::exit(___);}
#if 0
# 1390
{ 
# 1391
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1392
} 
#endif
# 1393 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1394
{int volatile ___ = 1;(void)a;(void)b;
# 1396
::exit(___);}
#if 0
# 1394
{ 
# 1395
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1396
} 
#endif
# 1397 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1398
{int volatile ___ = 1;(void)a;(void)b;
# 1400
::exit(___);}
#if 0
# 1398
{ 
# 1399
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1400
} 
#endif
# 1401 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1402
{int volatile ___ = 1;(void)a;(void)b;
# 1404
::exit(___);}
#if 0
# 1402
{ 
# 1403
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1404
} 
#endif
# 1405 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1406
{int volatile ___ = 1;(void)a;(void)b;
# 1408
::exit(___);}
#if 0
# 1406
{ 
# 1407
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1408
} 
#endif
# 1409 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1410
{int volatile ___ = 1;(void)a;(void)b;
# 1412
::exit(___);}
#if 0
# 1410
{ 
# 1411
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1412
} 
#endif
# 1413 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1414
{int volatile ___ = 1;(void)a;(void)b;
# 1416
::exit(___);}
#if 0
# 1414
{ 
# 1415
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1416
} 
#endif
# 1417 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1418
{int volatile ___ = 1;(void)a;(void)b;
# 1420
::exit(___);}
#if 0
# 1418
{ 
# 1419
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1420
} 
#endif
# 1421 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1422
{int volatile ___ = 1;(void)a;(void)b;
# 1424
::exit(___);}
#if 0
# 1422
{ 
# 1423
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1424
} 
#endif
# 1425 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1426
{int volatile ___ = 1;(void)a;(void)b;
# 1428
::exit(___);}
#if 0
# 1426
{ 
# 1427
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1428
} 
#endif
# 1443 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1444
{int volatile ___ = 1;(void)a;(void)b;
# 1446
::exit(___);}
#if 0
# 1444
{ 
# 1445
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1446
} 
#endif
# 1447 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1448
{int volatile ___ = 1;(void)a;(void)b;
# 1450
::exit(___);}
#if 0
# 1448
{ 
# 1449
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1450
} 
#endif
# 1451 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1452
{int volatile ___ = 1;(void)a;(void)b;
# 1454
::exit(___);}
#if 0
# 1452
{ 
# 1453
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1454
} 
#endif
# 1455 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1456
{int volatile ___ = 1;(void)a;(void)b;
# 1458
::exit(___);}
#if 0
# 1456
{ 
# 1457
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1458
} 
#endif
# 1459 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1460
{int volatile ___ = 1;(void)a;(void)b;
# 1462
::exit(___);}
#if 0
# 1460
{ 
# 1461
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1462
} 
#endif
# 1463 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1464
{int volatile ___ = 1;(void)a;(void)b;
# 1466
::exit(___);}
#if 0
# 1464
{ 
# 1465
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1466
} 
#endif
# 1467 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1468
{int volatile ___ = 1;(void)a;(void)b;
# 1470
::exit(___);}
#if 0
# 1468
{ 
# 1469
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1470
} 
#endif
# 1471 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1472
{int volatile ___ = 1;(void)a;(void)b;
# 1474
::exit(___);}
#if 0
# 1472
{ 
# 1473
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1474
} 
#endif
# 1475 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1476
{int volatile ___ = 1;(void)a;(void)b;
# 1478
::exit(___);}
#if 0
# 1476
{ 
# 1477
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1478
} 
#endif
# 1479 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1480
{int volatile ___ = 1;(void)a;(void)b;
# 1482
::exit(___);}
#if 0
# 1480
{ 
# 1481
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1482
} 
#endif
# 1483 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1484
{int volatile ___ = 1;(void)a;(void)b;
# 1486
::exit(___);}
#if 0
# 1484
{ 
# 1485
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1486
} 
#endif
# 1487 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1488
{int volatile ___ = 1;(void)a;(void)b;
# 1490
::exit(___);}
#if 0
# 1488
{ 
# 1489
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1490
} 
#endif
# 1504 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1505
{int volatile ___ = 1;(void)a;(void)b;
# 1507
::exit(___);}
#if 0
# 1505
{ 
# 1506
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.eq.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1507
} 
#endif
# 1508 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1509
{int volatile ___ = 1;(void)a;(void)b;
# 1511
::exit(___);}
#if 0
# 1509
{ 
# 1510
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ne.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1511
} 
#endif
# 1512 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1513
{int volatile ___ = 1;(void)a;(void)b;
# 1515
::exit(___);}
#if 0
# 1513
{ 
# 1514
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.le.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1515
} 
#endif
# 1516 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1517
{int volatile ___ = 1;(void)a;(void)b;
# 1519
::exit(___);}
#if 0
# 1517
{ 
# 1518
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ge.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1519
} 
#endif
# 1520 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1521
{int volatile ___ = 1;(void)a;(void)b;
# 1523
::exit(___);}
#if 0
# 1521
{ 
# 1522
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.lt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1523
} 
#endif
# 1524 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1525
{int volatile ___ = 1;(void)a;(void)b;
# 1527
::exit(___);}
#if 0
# 1525
{ 
# 1526
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1527
} 
#endif
# 1528 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1529
{int volatile ___ = 1;(void)a;(void)b;
# 1531
::exit(___);}
#if 0
# 1529
{ 
# 1530
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.equ.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1531
} 
#endif
# 1532 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1533
{int volatile ___ = 1;(void)a;(void)b;
# 1535
::exit(___);}
#if 0
# 1533
{ 
# 1534
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.neu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1535
} 
#endif
# 1536 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1537
{int volatile ___ = 1;(void)a;(void)b;
# 1539
::exit(___);}
#if 0
# 1537
{ 
# 1538
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.leu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1539
} 
#endif
# 1540 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1541
{int volatile ___ = 1;(void)a;(void)b;
# 1543
::exit(___);}
#if 0
# 1541
{ 
# 1542
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.geu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1543
} 
#endif
# 1544 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1545
{int volatile ___ = 1;(void)a;(void)b;
# 1547
::exit(___);}
#if 0
# 1545
{ 
# 1546
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ltu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1547
} 
#endif
# 1548 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1549
{int volatile ___ = 1;(void)a;(void)b;
# 1551
::exit(___);}
#if 0
# 1549
{ 
# 1550
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gtu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1551
} 
#endif
# 1573 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1574
{int volatile ___ = 1;(void)a;(void)b;
# 1581
::exit(___);}
#if 0
# 1574
{ 
# 1575
__nv_bfloat162 val; 
# 1576
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1580
return val; 
# 1581
} 
#endif
# 1582 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1583
{int volatile ___ = 1;(void)a;(void)b;
# 1590
::exit(___);}
#if 0
# 1583
{ 
# 1584
__nv_bfloat162 val; 
# 1585
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1589
return val; 
# 1590
} 
#endif
# 1591 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1592
{int volatile ___ = 1;(void)a;(void)b;
# 1599
::exit(___);}
#if 0
# 1592
{ 
# 1593
__nv_bfloat162 val; 
# 1594
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1598
return val; 
# 1599
} 
#endif
# 1600 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1601
{int volatile ___ = 1;(void)a;(void)b;
# 1608
::exit(___);}
#if 0
# 1601
{ 
# 1602
__nv_bfloat162 val; 
# 1603
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1607
return val; 
# 1608
} 
#endif
# 1609 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1610
{int volatile ___ = 1;(void)a;(void)b;
# 1617
::exit(___);}
#if 0
# 1610
{ 
# 1611
__nv_bfloat162 val; 
# 1612
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1616
return val; 
# 1617
} 
#endif
# 1618 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1619
{int volatile ___ = 1;(void)a;(void)b;
# 1626
::exit(___);}
#if 0
# 1619
{ 
# 1620
__nv_bfloat162 val; 
# 1621
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1625
return val; 
# 1626
} 
#endif
# 1627 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1628
{int volatile ___ = 1;(void)a;(void)b;
# 1638
::exit(___);}
#if 0
# 1628
{ 
# 1629
__nv_bfloat162 val; 
# 1630
__asm__("{.reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f,%1,one,%2;\n  max.bf16x2 f, f, zero" ";\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1637
return val; 
# 1638
} 
#endif
# 1639 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1640
{int volatile ___ = 1;(void)a;(void)b;
# 1651
::exit(___);}
#if 0
# 1640
{ 
# 1641
__nv_bfloat162 val; 
# 1642
__asm__("{.reg .b32 f, one, zero, mone;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mone, 0xbf80bf80U;\n  fma.rn.bf16x2 f" ",%2,mone,%1;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1650
return val; 
# 1651
} 
#endif
# 1652 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1653
{int volatile ___ = 1;(void)a;(void)b;
# 1664
::exit(___);}
#if 0
# 1653
{ 
# 1654
__nv_bfloat162 val; 
# 1655
__asm__("{.reg .b32 f, one, zero, mzero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mzero, 0x80008000U;\n  fma.rn.bf16x2" " f,%1,%2,mzero;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1663
return val; 
# 1664
} 
#endif
# 1665 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 1666
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1671
::exit(___);}
#if 0
# 1666
{ 
# 1667
__nv_bfloat162 val; 
# 1668
__asm__("{fma.rn.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 1670
return val; 
# 1671
} 
#endif
# 1672 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 1673
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1683
::exit(___);}
#if 0
# 1673
{ 
# 1674
__nv_bfloat162 val; 
# 1675
__asm__("{ .reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f, %1, %2, %3;\n  max.bf16x2 f, f, z" "ero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 1682
return val; 
# 1683
} 
#endif
# 1684 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b) {int volatile ___ = 1;(void)a;(void)b;
# 1698
::exit(___);}
#if 0
# 1684
{ 
# 1685
__nv_bfloat16 ha, hb; 
# 1687
ha = __low2bfloat16(a); 
# 1688
hb = __low2bfloat16(b); 
# 1690
const __nv_bfloat16 v1 = __hdiv(ha, hb); 
# 1692
ha = __high2bfloat16(a); 
# 1693
hb = __high2bfloat16(b); 
# 1695
const __nv_bfloat16 v2 = __hdiv(ha, hb); 
# 1697
return __halves2bfloat162(v1, v2); 
# 1698
} 
#endif
# 1713 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1714
{int volatile ___ = 1;(void)a;(void)b;
# 1721
::exit(___);}
#if 0
# 1714
{ 
# 1715
__nv_bfloat16 val; 
# 1716
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1720
return val; 
# 1721
} 
#endif
# 1722 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1723
{int volatile ___ = 1;(void)a;(void)b;
# 1730
::exit(___);}
#if 0
# 1723
{ 
# 1724
__nv_bfloat16 val; 
# 1725
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1729
return val; 
# 1730
} 
#endif
# 1731 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1732
{int volatile ___ = 1;(void)a;(void)b;
# 1739
::exit(___);}
#if 0
# 1732
{ 
# 1733
__nv_bfloat16 val; 
# 1734
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1738
return val; 
# 1739
} 
#endif
# 1740 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1741
{int volatile ___ = 1;(void)a;(void)b;
# 1748
::exit(___);}
#if 0
# 1741
{ 
# 1742
__nv_bfloat16 val; 
# 1743
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1747
return val; 
# 1748
} 
#endif
# 1749 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1750
{int volatile ___ = 1;(void)a;(void)b;
# 1757
::exit(___);}
#if 0
# 1750
{ 
# 1751
__nv_bfloat16 val; 
# 1752
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1756
return val; 
# 1757
} 
#endif
# 1758 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1759
{int volatile ___ = 1;(void)a;(void)b;
# 1766
::exit(___);}
#if 0
# 1759
{ 
# 1760
__nv_bfloat16 val; 
# 1761
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1765
return val; 
# 1766
} 
#endif
# 1767 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1768
{int volatile ___ = 1;(void)a;(void)b;
# 1778
::exit(___);}
#if 0
# 1768
{ 
# 1769
__nv_bfloat16 val; 
# 1770
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, one, %2;\n  max.bf16 f, f, zero;\n " " min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1777
return val; 
# 1778
} 
#endif
# 1779 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1780
{int volatile ___ = 1;(void)a;(void)b;
# 1791
::exit(___);}
#if 0
# 1780
{ 
# 1781
__nv_bfloat16 val; 
# 1782
__asm__("{ .reg .b16 f, one, zero, mone;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mone, 0xbf80U;\n  fma.rn.bf16 f, %2, mon" "e, %1;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1790
return val; 
# 1791
} 
#endif
# 1792 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1793
{int volatile ___ = 1;(void)a;(void)b;
# 1804
::exit(___);}
#if 0
# 1793
{ 
# 1794
__nv_bfloat16 val; 
# 1795
__asm__("{ .reg .b16 f, one, zero, mzero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mzero, 0x8000U;\n  fma.rn.bf16 f, %1, %" "2, mzero;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1803
return val; 
# 1804
} 
#endif
# 1805 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 1806
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1811
::exit(___);}
#if 0
# 1806
{ 
# 1807
__nv_bfloat16 val; 
# 1808
__asm__("{fma.rn.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 1810
return val; 
# 1811
} 
#endif
# 1812 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 1813
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1823
::exit(___);}
#if 0
# 1813
{ 
# 1814
__nv_bfloat16 val; 
# 1815
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, %2, %3;\n  max.bf16 f, f, zero;\n  " "min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 1822
return val; 
# 1823
} 
#endif
# 1824 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b) {int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __nv_bfloat16 val; __asm__("{.reg .b32 a,b,res;\n  mov.b32 a, {0,%1};\n  mov.b32 b, {0,%2};\n  div.rn.f32 res, a, b;\n  cvt.rn.bf16.f32 %0, res;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1826
} 
#endif
# 1858 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsin_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1862
::exit(___);}
#if 0
# 1858
{ 
# 1859
float f = __bfloat162float(a); 
# 1860
f = sinf(f); 
# 1861
return __float2bfloat16_rn(f); 
# 1862
} 
#endif
# 1863 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1865
::exit(___);}
#if 0
# 1863
{ 
# 1864
return __hsin_internal(a); 
# 1865
} 
#endif
# 1866 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1870
::exit(___);}
#if 0
# 1866
{ 
# 1867
const __nv_bfloat16 l = __low2bfloat16(a); 
# 1868
const __nv_bfloat16 h = __high2bfloat16(a); 
# 1869
return __halves2bfloat162(__hsin_internal(l), __hsin_internal(h)); 
# 1870
} 
#endif
# 1871 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hcos_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1875
::exit(___);}
#if 0
# 1871
{ 
# 1872
float f = __bfloat162float(a); 
# 1873
f = cosf(f); 
# 1874
return __float2bfloat16_rn(f); 
# 1875
} 
#endif
# 1876 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1878
::exit(___);}
#if 0
# 1876
{ 
# 1877
return __hcos_internal(a); 
# 1878
} 
#endif
# 1879 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1883
::exit(___);}
#if 0
# 1879
{ 
# 1880
const __nv_bfloat16 l = __low2bfloat16(a); 
# 1881
const __nv_bfloat16 h = __high2bfloat16(a); 
# 1882
return __halves2bfloat162(__hcos_internal(l), __hcos_internal(h)); 
# 1883
} 
#endif
# 1898 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1911
::exit(___);}
#if 0
# 1898
{ 
# 1899
__nv_bfloat16 val; 
# 1900
__asm__("{.reg.b32          f, C;           \n .reg.b16          h,r;            \n  mov.b16          h,%1;           \n  mov.b32        " "  f,{0,h};        \n  mov.b32          C, 0x3fb8aa3cU;  \n  mul.f32          f,f,C;          \n  ex2.approx.f32   f,f;          " "  \n  cvt.rn.bf16.f32 r,f;            \n  mov.b16          %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1910
return val; 
# 1911
} 
#endif
# 1912 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1931
::exit(___);}
#if 0
# 1912
{ 
# 1913
__nv_bfloat162 val; 
# 1914
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  mov.b32         fl, {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x3fb8aa3cU;  \n  m" "ul.f32         fl,fl,C;        \n  mul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      f" "u, fu;     \n  cvt.rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n  mov.b32" "         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1930
return val; 
# 1931
} 
#endif
# 1932 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1934
::exit(___);}
#if 0
# 1932
{ 
# 1933
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  ex2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } ; 
# 1934
} 
#endif
# 1935 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1937
::exit(___);}
#if 0
# 1935
{ 
# 1936
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  ex2.approx.f32   fl, fl;     \n  ex2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } ; 
# 1937
} 
#endif
# 1938 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1952
::exit(___);}
#if 0
# 1938
{ 
# 1939
__nv_bfloat16 val; 
# 1940
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};       \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         f,f,C;          \n  ex2.approx.f32      f, f;       \n  c" "vt.rn.bf16.f32    r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBC95U;\n  mov.b16 ulp,0xbf00U;\n  set.eq.f16.f16 p,%1, s" "pc;\n  fma.rn.bf16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1951
return val; 
# 1952
} 
#endif
# 1953 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1972
::exit(___);}
#if 0
# 1953
{ 
# 1954
__nv_bfloat162 val; 
# 1955
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         fl,fl,C;        \n  m" "ul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      fu, fu;     \n  cvt.rn.bf16.f32    hl" ", fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBC95B" "C95U;\n  mov.b32 ulp,0xbf00bf00U;\n  set.eq.f16x2.f16x2 p,%1, spc;\n  fma.rn.bf16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1971
return val; 
# 1972
} 
#endif
# 1973 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1975
::exit(___);}
#if 0
# 1973
{ 
# 1974
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  lg2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } ; 
# 1975
} 
#endif
# 1976 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1978
::exit(___);}
#if 0
# 1976
{ 
# 1977
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  lg2.approx.f32   fl, fl;     \n  lg2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } ; 
# 1978
} 
#endif
# 1979 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1992
::exit(___);}
#if 0
# 1979
{ 
# 1980
__nv_bfloat16 val; 
# 1981
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  mov.b32         f," "{0,h};        \n  lg2.approx.f32      f,f;        \n  mov.b32         C, 0x3f317218U; \n  mul.f32         f,f,C;          \n  cv" "t.rn.bf16.f32    r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1991
return val; 
# 1992
} 
#endif
# 1993 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2012
::exit(___);}
#if 0
# 1993
{ 
# 1994
__nv_bfloat162 val; 
# 1995
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;     " "    \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2011
return val; 
# 2012
} 
#endif
# 2013 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2026
::exit(___);}
#if 0
# 2013
{ 
# 2014
__nv_bfloat16 val; 
# 2015
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};           \n  lg2.approx.f32      f, f;       \n  mov.b32         C, 0x3E9A209BU;  \n  mul.f32         f,f,C;          \n" "  cvt.rn.bf16.f32    r, f;       \n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2025
return val; 
# 2026
} 
#endif
# 2027 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2046
::exit(___);}
#if 0
# 2027
{ 
# 2028
__nv_bfloat162 val; 
# 2029
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3E9A209BU;      \n  mul.f32         fl,fl" ",C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;    " "     \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2045
return val; 
# 2046
} 
#endif
# 2049 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2051
::exit(___);}
#if 0
# 2049
{ 
# 2050
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rcp.approx.f32   fl, fl;     \n  rcp.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2051
} 
#endif
# 2052 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2054
::exit(___);}
#if 0
# 2052
{ 
# 2053
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rcp.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2054
} 
#endif
# 2055 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2057
::exit(___);}
#if 0
# 2055
{ 
# 2056
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rsqrt.approx.f32   fl, fl;     \n  rsqrt.approx.f32   fu, fu;     \n  cvt." "rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2057
} 
#endif
# 2058 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2060
::exit(___);}
#if 0
# 2058
{ 
# 2059
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rsqrt." "approx.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2060
} 
#endif
# 2061 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2063
::exit(___);}
#if 0
# 2061
{ 
# 2062
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  sqrt.approx.f32   fl, fl;     \n  sqrt.approx.f32   fu, fu;     \n  cvt.rn" ".bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2063
} 
#endif
# 2064 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2066
::exit(___);}
#if 0
# 2064
{ 
# 2065
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  sqrt.a" "pprox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2066
} 
#endif
# 2069 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a) 
# 2070
{int volatile ___ = 1;(void)a;
# 2073
::exit(___);}
#if 0
# 2070
{ 
# 2071
const __nv_bfloat162 b = a; 
# 2072
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n .reg .b16 low,high;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high" "_b, %2, 0xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.nan.f32.f32 low_res, low_a, low_b;\n  set.nan.f3" "2.f32 high_res, high_a, high_b;\n  cvt.rn.bf16.f32 low, low_res;\n  cvt.rn.bf16.f32 high, high_res;\n  mov.b32 %0, {low,high};}\n" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2073
} 
#endif
# 2074 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a) 
# 2075
{int volatile ___ = 1;(void)a;
# 2082
::exit(___);}
#if 0
# 2075
{ 
# 2076
unsigned r; 
# 2077
__asm__("{.reg .b32 a;\n  mov.b32 a, {0,%1};\n  set.nan.f32.f32 %0, a, a;}\n" : "=r" (r) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2081
return r != 0U; 
# 2082
} 
#endif
# 2083 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a) 
# 2084
{int volatile ___ = 1;(void)a;
# 2089
::exit(___);}
#if 0
# 2084
{ 
# 2085
__nv_bfloat162 r; 
# 2086
__asm__("{neg.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2088
return r; 
# 2089
} 
#endif
# 2090 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a) 
# 2091
{int volatile ___ = 1;(void)a;
# 2096
::exit(___);}
#if 0
# 2091
{ 
# 2092
__nv_bfloat16 r; 
# 2093
__asm__("{neg.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2095
return r; 
# 2096
} 
#endif
# 2097 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a) 
# 2098
{int volatile ___ = 1;(void)a;
# 2103
::exit(___);}
#if 0
# 2098
{ 
# 2099
__nv_bfloat162 r; 
# 2100
__asm__("{abs.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2102
return r; 
# 2103
} 
#endif
# 2104 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a) 
# 2105
{int volatile ___ = 1;(void)a;
# 2110
::exit(___);}
#if 0
# 2105
{ 
# 2106
__nv_bfloat16 r; 
# 2107
__asm__("{abs.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2109
return r; 
# 2110
} 
#endif
# 2114 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2115
{int volatile ___ = 1;(void)a;(void)b;
# 2120
::exit(___);}
#if 0
# 2115
{ 
# 2116
__nv_bfloat16 val; 
# 2117
__asm__("{ max.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2119
return val; 
# 2120
} 
#endif
# 2121 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2122
{int volatile ___ = 1;(void)a;(void)b;
# 2127
::exit(___);}
#if 0
# 2122
{ 
# 2123
__nv_bfloat16 val; 
# 2124
__asm__("{ min.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2126
return val; 
# 2127
} 
#endif
# 2128 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2129
{int volatile ___ = 1;(void)a;(void)b;
# 2134
::exit(___);}
#if 0
# 2129
{ 
# 2130
__nv_bfloat16 val; 
# 2131
__asm__("{ max.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2133
return val; 
# 2134
} 
#endif
# 2135 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2136
{int volatile ___ = 1;(void)a;(void)b;
# 2141
::exit(___);}
#if 0
# 2136
{ 
# 2137
__nv_bfloat16 val; 
# 2138
__asm__("{ min.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2140
return val; 
# 2141
} 
#endif
# 2142 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2143
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2148
::exit(___);}
#if 0
# 2143
{ 
# 2144
__nv_bfloat16 val; 
# 2145
__asm__("{ fma.rn.relu.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2147
return val; 
# 2148
} 
#endif
# 2152 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2153
{int volatile ___ = 1;(void)a;(void)b;
# 2158
::exit(___);}
#if 0
# 2153
{ 
# 2154
__nv_bfloat162 val; 
# 2155
__asm__("{ max.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2157
return val; 
# 2158
} 
#endif
# 2159 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2160
{int volatile ___ = 1;(void)a;(void)b;
# 2165
::exit(___);}
#if 0
# 2160
{ 
# 2161
__nv_bfloat162 val; 
# 2162
__asm__("{ min.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2164
return val; 
# 2165
} 
#endif
# 2166 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2167
{int volatile ___ = 1;(void)a;(void)b;
# 2172
::exit(___);}
#if 0
# 2167
{ 
# 2168
__nv_bfloat162 val; 
# 2169
__asm__("{ max.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2171
return val; 
# 2172
} 
#endif
# 2173 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2174
{int volatile ___ = 1;(void)a;(void)b;
# 2179
::exit(___);}
#if 0
# 2174
{ 
# 2175
__nv_bfloat162 val; 
# 2176
__asm__("{ min.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2178
return val; 
# 2179
} 
#endif
# 2180 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2181
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2186
::exit(___);}
#if 0
# 2181
{ 
# 2182
__nv_bfloat162 val; 
# 2183
__asm__("{ fma.rn.relu.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2185
return val; 
# 2186
} 
#endif
# 2188 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2189
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2199
::exit(___);}
#if 0
# 2189
{ 
# 2194
__nv_bfloat16 real_tmp = __hfma(a.x, b.x, c.x); 
# 2195
__nv_bfloat16 img_tmp = __hfma(a.x, b.y, c.y); 
# 2196
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2197
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2198
return make_bfloat162(real_tmp, img_tmp); 
# 2199
} 
#endif
# 2201 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val) 
# 2202
{int volatile ___ = 1;(void)address;(void)val;
# 2211
::exit(___);}
#if 0
# 2202
{ 
# 2203
unsigned *address_as_uint = (unsigned *)address; 
# 2204
unsigned old = *address_as_uint, assumed; 
# 2205
do { 
# 2206
assumed = old; 
# 2207
__nv_bfloat162 new_val = __hadd2(val, *((__nv_bfloat162 *)(&assumed))); 
# 2208
old = atomicCAS(address_as_uint, assumed, *((unsigned *)(&new_val))); 
# 2209
} while (assumed != old); 
# 2210
return *((__nv_bfloat162 *)(&old)); 
# 2211
} 
#endif
# 2213 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val) 
# 2214
{int volatile ___ = 1;(void)address;(void)val;
# 2223
::exit(___);}
#if 0
# 2214
{ 
# 2215
unsigned short *address_as_us = (unsigned short *)address; 
# 2216
unsigned short old = *address_as_us, assumed; 
# 2217
do { 
# 2218
assumed = old; 
# 2219
old = atomicCAS(address_as_us, assumed, __bfloat16_as_ushort(__hadd(val, __ushort_as_bfloat16(assumed)))); 
# 2221
} while (assumed != old); 
# 2222
return __ushort_as_bfloat16(old); 
# 2223
} 
#endif
# 2238 "/home/poweruser/junda.feng/anaconda3/include/cuda_bf16.hpp"
typedef __nv_bfloat16 nv_bfloat16; 
# 2239
typedef __nv_bfloat162 nv_bfloat162; 
# 91 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
namespace nvcuda { 
# 92
namespace wmma { 
# 96
__attribute__((unused)) inline float __float_to_tf32(float in) 
# 97
{int volatile ___ = 1;(void)in;
# 103
::exit(___);}
#if 0
# 97
{ 
# 98
float ret; 
# 99
__asm__("{\n  .reg .b32 __$1;\n   cvt.rna.tf32.f32 __$1, %1;\n   mov.b32 %0, __$1;\n}\n" : "=f" (ret) : "f" (in)); 
# 102
return ret; 
# 103
} 
#endif
# 109 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
struct row_major; 
# 110
struct col_major; 
# 111
struct matrix_a; 
# 112
struct matrix_b; 
# 113
struct accumulator; 
# 116
namespace precision { 
# 117
struct tf32; 
# 118
}
# 121
namespace experimental { 
# 122
namespace precision { 
# 123
struct u4; 
# 124
struct s4; 
# 125
struct b1; 
# 126
}
# 127
enum bmmaBitOp { bmmaBitOpXOR = 1, 
# 129
bmmaBitOpAND
# 131
}; 
# 132
enum bmmaAccumulateOp { bmmaAccumulateOpPOPC = 1}; 
# 133
}
# 139
enum layout_t { 
# 140
mem_row_major, mem_col_major
# 141
}; 
# 143
template< class T> 
# 144
struct helper_traits { 
# 145
typedef T element_type; 
# 146
typedef T storage_element_type; 
# 147
typedef T fill_argument_type; 
# 148
}; 
# 151
template<> struct helper_traits< experimental::precision::u4>  { 
# 152
typedef experimental::precision::u4 element_type; 
# 153
typedef unsigned storage_element_type; 
# 154
typedef unsigned fill_argument_type; 
# 155
}; 
# 157
template<> struct helper_traits< experimental::precision::s4>  { 
# 158
typedef experimental::precision::s4 element_type; 
# 159
typedef int storage_element_type; 
# 160
typedef int fill_argument_type; 
# 161
}; 
# 163
template<> struct helper_traits< experimental::precision::b1>  { 
# 164
typedef experimental::precision::b1 element_type; 
# 165
typedef unsigned storage_element_type; 
# 166
typedef unsigned fill_argument_type; 
# 167
}; 
# 171
template<> struct helper_traits< precision::tf32>  { 
# 172
typedef precision::tf32 element_type; 
# 173
typedef float storage_element_type; 
# 174
typedef float fill_argument_type; 
# 175
}; 
# 182
template< class T, int size, int packed_size = size> 
# 183
struct __attribute((aligned(8))) __frag_base { 
# 186
enum { num_elements = size}; 
# 196 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
enum { num_storage_elements = packed_size}; 
# 199
typedef T element_type; 
# 210 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
typedef typename helper_traits< T> ::storage_element_type storage_element_type; 
# 213
storage_element_type x[num_storage_elements]; 
# 214
}; 
# 216
template< class FragEleType, class StorageType, class ArgType> __attribute__((unused)) static inline StorageType 
# 217
__get_storage_value(ArgType in) {int volatile ___ = 1;(void)in;::exit(___);}
#if 0
# 217
{ return in; } 
#endif
# 222 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::u4, unsigned, unsigned> (unsigned in) 
# 223
{int volatile ___ = 1;(void)in;
# 229
::exit(___);}
#if 0
# 223
{ 
# 226
unsigned val = in & (15); 
# 227
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 229
} 
#endif
# 233 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
template<> __attribute__((unused)) inline int __get_storage_value< experimental::precision::s4, int, int> (int in) 
# 234
{int volatile ___ = 1;(void)in;
# 240
::exit(___);}
#if 0
# 234
{ 
# 237
int val = in & 15; 
# 238
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 240
} 
#endif
# 244 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::b1, unsigned, unsigned> (unsigned in) 
# 245
{int volatile ___ = 1;(void)in;
# 249
::exit(___);}
#if 0
# 245
{ 
# 248
return (in & (1)) ? 4294967295U : (0); 
# 249
} 
#endif
# 252 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
template< class FragEleType, int size, int packed_size> __attribute__((unused)) static inline void 
# 253
fill_fragment(__frag_base< FragEleType, size, packed_size>  &f, const typename helper_traits< FragEleType> ::fill_argument_type &
# 261
in) {int volatile ___ = 1;(void)f;(void)in;
# 270
::exit(___);}
#if 0
# 261
{ 
# 265
typedef typename helper_traits< FragEleType> ::storage_element_type storage_type; 
# 266
storage_type v = __get_storage_value< FragEleType, typename helper_traits< FragEleType> ::storage_element_type> (in); 
# 268
#pragma unroll
for (
# 268
int i = 0; i < (f.num_storage_elements); i++) { 
# 269
((f.x)[i]) = v; }  
# 270
} 
#endif
# 275 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
template< class Use, int m, int n, int k, class T, class Layout = void> class fragment; 
# 280
template<> class fragment< matrix_a, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 281
template<> class fragment< matrix_a, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 282
template<> class fragment< matrix_b, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 283
template<> class fragment< matrix_b, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 284
template<> class fragment< accumulator, 16, 16, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 285
template<> class fragment< accumulator, 16, 16, 16, float>  : public __frag_base< float, 8>  { }; 
# 288
template<> class fragment< matrix_a, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 289
template<> class fragment< matrix_a, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 290
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 291
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 292
template<> class fragment< matrix_b, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 293
template<> class fragment< matrix_b, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 294
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 295
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 296
template<> class fragment< accumulator, 16, 16, 16, int>  : public __frag_base< int, 8>  { }; 
# 300
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 301
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 302
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 303
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 309
template<> class fragment< matrix_a, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 310
template<> class fragment< matrix_a, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 311
template<> class fragment< matrix_b, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 312
template<> class fragment< matrix_b, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 313
template<> class fragment< accumulator, 32, 8, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 314
template<> class fragment< accumulator, 32, 8, 16, float>  : public __frag_base< float, 8>  { }; 
# 317
template<> class fragment< matrix_a, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 318
template<> class fragment< matrix_a, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 319
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 320
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 321
template<> class fragment< matrix_b, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 322
template<> class fragment< matrix_b, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 323
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 324
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 325
template<> class fragment< accumulator, 32, 8, 16, int>  : public __frag_base< int, 8>  { }; 
# 329
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 330
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 331
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 332
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 338
template<> class fragment< matrix_a, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 339
template<> class fragment< matrix_a, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 340
template<> class fragment< matrix_b, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 341
template<> class fragment< matrix_b, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 342
template<> class fragment< accumulator, 8, 32, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 343
template<> class fragment< accumulator, 8, 32, 16, float>  : public __frag_base< float, 8>  { }; 
# 346
template<> class fragment< matrix_a, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 347
template<> class fragment< matrix_a, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 348
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 349
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 350
template<> class fragment< matrix_b, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 351
template<> class fragment< matrix_b, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 352
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 353
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 354
template<> class fragment< accumulator, 8, 32, 16, int>  : public __frag_base< int, 8>  { }; 
# 358
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 359
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 360
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 361
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 368
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 369
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 370
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 371
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 372
template<> class fragment< accumulator, 8, 8, 32, int>  : public __frag_base< int, 2>  { }; 
# 377
template<> class fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 378
template<> class fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 379
template<> class fragment< accumulator, 8, 8, 128, int>  : public __frag_base< int, 2>  { }; 
# 386
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 387
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 388
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 389
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 390
template<> class fragment< accumulator, 16, 16, 8, float>  : public __frag_base< float, 8>  { }; 
# 395
template<> class fragment< matrix_a, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 396
template<> class fragment< matrix_a, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 397
template<> class fragment< matrix_b, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 398
template<> class fragment< matrix_b, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 399
template<> class fragment< accumulator, 8, 8, 4, double>  : public __frag_base< double, 2>  { }; 
# 406
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 407
{ } 
#endif
# 408 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 408
{ } 
#endif
# 409 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 409
{ } 
#endif
# 410 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 410
{ } 
#endif
# 411 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 422
{ } 
#endif
# 426 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 426
{ } 
#endif
# 427 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 429
{ } 
#endif
# 435 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 437
{ } 
#endif
# 438 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 438
{ } 
#endif
# 439 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 440
{ } 
#endif
# 443 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 443
{ } 
#endif
# 444 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 444
{ } 
#endif
# 445 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 445
{ } 
#endif
# 446 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 446
{ } 
#endif
# 447 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 447
{ } 
#endif
# 448 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 448
{ } 
#endif
# 449 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 449
{ } 
#endif
# 450 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 450
{ } 
#endif
# 451 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 451
{ } 
#endif
# 455 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 455
{ } 
#endif
# 456 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 456
{ } 
#endif
# 457 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 457
{ } 
#endif
# 458 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 458
{ } 
#endif
# 464 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 464
{ } 
#endif
# 465 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 465
{ } 
#endif
# 466 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 466
{ } 
#endif
# 467 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 467
{ } 
#endif
# 468 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 468
{ } 
#endif
# 469 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 472
{ } 
#endif
# 473 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 473
{ } 
#endif
# 474 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 474
{ } 
#endif
# 475 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 475
{ } 
#endif
# 476 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 476
{ } 
#endif
# 477 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 477
{ } 
#endif
# 478 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 478
{ } 
#endif
# 479 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 479
{ } 
#endif
# 480 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 480
{ } 
#endif
# 484 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 484
{ } 
#endif
# 485 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 485
{ } 
#endif
# 486 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 486
{ } 
#endif
# 487 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 487
{ } 
#endif
# 494 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 494
{ } 
#endif
# 495 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 495
{ } 
#endif
# 496 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 496
{ } 
#endif
# 497 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 497
{ } 
#endif
# 499 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 32, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 499
{ } 
#endif
# 504 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 504
{ } 
#endif
# 505 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 505
{ } 
#endif
# 506 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 128, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 506
{ } 
#endif
# 515 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 515
{ } 
#endif
# 516 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 516
{ } 
#endif
# 517 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 517
{ } 
#endif
# 518 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 518
{ } 
#endif
# 519 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 8, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 519
{ } 
#endif
# 524 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 524
{ } 
#endif
# 525 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 525
{ } 
#endif
# 526 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 526
{ } 
#endif
# 527 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 527
{ } 
#endif
# 528 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 4, double>  &a, const double *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 528
{ } 
#endif
# 534 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 16, 16, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 534
{ } 
#endif
# 535 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 535
{ } 
#endif
# 537 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 16, 16, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 537
{ } 
#endif
# 543 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 32, 8, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 543
{ } 
#endif
# 544 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 32, 8, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 544
{ } 
#endif
# 546 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 32, 8, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 546
{ } 
#endif
# 552 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 8, 32, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 552
{ } 
#endif
# 553 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 8, 32, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 553
{ } 
#endif
# 555 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 32, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 555
{ } 
#endif
# 562 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 32, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 562
{ } 
#endif
# 567 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 128, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 567
{ } 
#endif
# 575 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 8, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 575
{ } 
#endif
# 580 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(double *p, const fragment< accumulator, 8, 8, 4, double>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 580
{ } 
#endif
# 586 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 586
{ } 
#endif
# 587 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 587
{ } 
#endif
# 588 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 588
{ } 
#endif
# 589 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 589
{ } 
#endif
# 590 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 590
{ } 
#endif
# 591 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 591
{ } 
#endif
# 592 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 592
{ } 
#endif
# 593 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 593
{ } 
#endif
# 594 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 594
{ } 
#endif
# 595 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 595
{ } 
#endif
# 596 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 596
{ } 
#endif
# 597 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 597
{ } 
#endif
# 598 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 598
{ } 
#endif
# 599 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 599
{ } 
#endif
# 600 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 600
{ } 
#endif
# 601 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 601
{ } 
#endif
# 604 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 604
{ } 
#endif
# 605 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 605
{ } 
#endif
# 606 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 606
{ } 
#endif
# 607 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 607
{ } 
#endif
# 608 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 608
{ } 
#endif
# 609 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 609
{ } 
#endif
# 610 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 610
{ } 
#endif
# 611 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 611
{ } 
#endif
# 615 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 615
{ } 
#endif
# 616 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 616
{ } 
#endif
# 617 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 617
{ } 
#endif
# 618 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 618
{ } 
#endif
# 624 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 624
{ } 
#endif
# 625 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 625
{ } 
#endif
# 626 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 626
{ } 
#endif
# 627 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 627
{ } 
#endif
# 628 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 628
{ } 
#endif
# 629 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 629
{ } 
#endif
# 630 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 630
{ } 
#endif
# 631 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 631
{ } 
#endif
# 632 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 632
{ } 
#endif
# 633 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 633
{ } 
#endif
# 634 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 634
{ } 
#endif
# 635 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 635
{ } 
#endif
# 636 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 636
{ } 
#endif
# 637 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 637
{ } 
#endif
# 638 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 638
{ } 
#endif
# 639 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 639
{ } 
#endif
# 642 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 642
{ } 
#endif
# 643 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 643
{ } 
#endif
# 644 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 644
{ } 
#endif
# 645 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 645
{ } 
#endif
# 646 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 646
{ } 
#endif
# 647 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 647
{ } 
#endif
# 648 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 648
{ } 
#endif
# 649 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 649
{ } 
#endif
# 653 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 653
{ } 
#endif
# 654 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 654
{ } 
#endif
# 655 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 655
{ } 
#endif
# 656 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 656
{ } 
#endif
# 662 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 662
{ } 
#endif
# 663 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 663
{ } 
#endif
# 664 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 664
{ } 
#endif
# 665 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 665
{ } 
#endif
# 666 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 666
{ } 
#endif
# 667 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 667
{ } 
#endif
# 668 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 668
{ } 
#endif
# 669 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 669
{ } 
#endif
# 670 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 670
{ } 
#endif
# 671 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 671
{ } 
#endif
# 672 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 672
{ } 
#endif
# 673 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 673
{ } 
#endif
# 674 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 674
{ } 
#endif
# 675 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 675
{ } 
#endif
# 676 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 676
{ } 
#endif
# 677 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 677
{ } 
#endif
# 680 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 680
{ } 
#endif
# 681 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 681
{ } 
#endif
# 682 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 682
{ } 
#endif
# 683 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 683
{ } 
#endif
# 684 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 684
{ } 
#endif
# 685 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 685
{ } 
#endif
# 686 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 686
{ } 
#endif
# 687 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 687
{ } 
#endif
# 691 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 691
{ } 
#endif
# 692 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 692
{ } 
#endif
# 693 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 693
{ } 
#endif
# 694 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 694
{ } 
#endif
# 701 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 701
{ } 
#endif
# 702 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 702
{ } 
#endif
# 708 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void bmma_sync(fragment< accumulator, 8, 8, 128, int>  &d, const fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &b, const fragment< accumulator, 8, 8, 128, int>  &c, experimental::bmmaBitOp = experimental::bmmaBitOpXOR, experimental::bmmaAccumulateOp = experimental::bmmaAccumulateOpPOPC) 
# 710
{int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 710
{ } 
#endif
# 718 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 718
{ } 
#endif
# 719 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 719
{ } 
#endif
# 720 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 720
{ } 
#endif
# 721 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 721
{ } 
#endif
# 726 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 726
{ } 
#endif
# 727 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 727
{ } 
#endif
# 728 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 728
{ } 
#endif
# 729 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 729
{ } 
#endif
# 731 "/home/poweruser/junda.feng/anaconda3/include/crt/mma.h"
}
# 732
}
# 11 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/gemm_i8.cuh"
constexpr bool GEMM_OP_T = true; 
# 12
constexpr bool GEMM_OP_N = false; 
# 14
using namespace nvcuda;
# 15
namespace cg = cooperative_groups;
# 17
namespace kernel { 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

# 20
template< int BLOCK_SIZE_M, int BLOCK_SIZE_N, int BLOCK_SIZE_K, int WARP_SIZE_M, int WARP_SIZE_N, int STAGE, bool NoTransA, bool NoTransB, bool RowMajorC> static void 
# 21
__wrapper__device_stub_GEMMI8TCU(const int8_t *&A, const int8_t *&B, int *&C, int &M, int &N, int &K) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#pragma GCC diagnostic pop

#if 0
# 22
{ 
# 23
auto grid = cg::this_grid(); 
# 24
auto block = cg::this_thread_block(); 
# 25
cooperative_groups::__v1::thread_block_tile< 32>  tile32 = cg::tiled_partition< 32U> (block); 
# 27
int warp_id = tile32.meta_group_rank(); 
# 28
int lane_id = tile32.thread_rank(); 
# 30
constexpr int WARP_SIZE = 32; 
# 31
constexpr int TC_SIZE = 16; 
# 32
constexpr int WAPR_NUM_N = (BLOCK_SIZE_N / WARP_SIZE_N); 
# 33
constexpr int WAPR_NUM_M = (BLOCK_SIZE_M / WARP_SIZE_M); 
# 34
constexpr int WAPR_NUM = (WAPR_NUM_M * WAPR_NUM_N); 
# 36
static_assert(((NoTransA) == GEMM_OP_T), "NoTransA == GEMM_OP_T");
# 37
static_assert(((NoTransB) == GEMM_OP_N), "NoTransB == GEMM_OP_N");
# 38
static_assert(((RowMajorC) == GEMM_OP_T), "RowMajorC == GEMM_OP_T");
# 40
__attribute__((unused)) static int8_t SLB[STAGE * ((BLOCK_SIZE_K * BLOCK_SIZE_M) + (BLOCK_SIZE_K * BLOCK_SIZE_N))]; 
# 42
int8_t *smem_a[2]; 
# 43
int8_t *smem_b[2]; 
# 45
(smem_a[0]) = SLB; 
# 46
(smem_a[1]) = (SLB + (BLOCK_SIZE_K * BLOCK_SIZE_M)); 
# 47
(smem_b[0]) = (SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)); 
# 48
(smem_b[1]) = ((SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)) + (BLOCK_SIZE_K * BLOCK_SIZE_N)); 
# 50
const int BCM = (BLOCK_SIZE_M) * (__device_builtin_variable_blockIdx.y); 
# 51
const int BCN = (BLOCK_SIZE_N) * (__device_builtin_variable_blockIdx.x); 
# 53
const int LDA = (NoTransA ? K : M); 
# 54
const int LDB = (NoTransB ? N : K); 
# 55
const int LDC = (RowMajorC ? N : M); 
# 57
const int WCM = warp_id / WAPR_NUM_N; 
# 58
const int WCN = warp_id % WAPR_NUM_N; 
# 60
const int BLOCK_K_LOOP = K / BLOCK_SIZE_K; 
# 62
const int8_t *BA = (A + (BCM * LDA)); 
# 63
const int8_t *BB = (B + (BCN * LDB)); 
# 64
int *BC = ((C + (BCM * LDC)) + BCN); 
# 65
int *BWC = ((BC + ((WCM * WARP_SIZE_M) * LDC)) + (WCN * WARP_SIZE_N)); 
# 67
constexpr int WARP_M_LOOP = (WARP_SIZE_M / TC_SIZE); 
# 68
constexpr int WARP_N_LOOP = (WARP_SIZE_N / TC_SIZE); 
# 69
constexpr int WARP_K_LOOP = (BLOCK_SIZE_K / TC_SIZE); 
# 71
nvcuda::wmma::fragment< nvcuda::wmma::matrix_a, 16, 16, 16, signed char, nvcuda::wmma::row_major>  frag_a[WARP_M_LOOP][WARP_K_LOOP]; 
# 72
nvcuda::wmma::fragment< nvcuda::wmma::matrix_b, 16, 16, 16, signed char, nvcuda::wmma::col_major>  frag_b[WARP_K_LOOP][WARP_N_LOOP]; 
# 73
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, int>  frag_c[WARP_M_LOOP][WARP_N_LOOP]; 
# 76
#pragma unroll
for (
# 76
int i = 0; i < WARP_M_LOOP; i++) { 
# 78
#pragma unroll
for (
# 78
int j = 0; j < WARP_N_LOOP; j++) { 
# 79
nvcuda::wmma::fill_fragment((frag_c[i])[j], 0); 
# 80
}  
# 81
}  
# 83
constexpr int WARP_SIZE_X = 2; 
# 84
int lane_id_x = lane_id % WARP_SIZE_X; 
# 85
int lane_id_y = lane_id / WARP_SIZE_X; 
# 87
for (int k = 0; k < BLOCK_K_LOOP; k++) { 
# 88
const auto *load_gmem_addr_a = ((BA + (((warp_id * TC_SIZE) + lane_id_y) * LDA)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 89
const auto *load_gmem_addr_b = ((BB + (((warp_id * TC_SIZE) + lane_id_y) * LDB)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 91
int store_smem_addr_a = __cvta_generic_to_shared(((smem_a[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 92
int store_smem_addr_b = __cvta_generic_to_shared(((smem_b[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 94
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_a), "l" (load_gmem_addr_a), "n" (16)); 
# 95
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_b), "l" (load_gmem_addr_b), "n" (16)); 
# 97
__asm__("cp.async.commit_group;\n" : :); 
# 98
__asm__("cp.async.wait_group 0;\n" : :); 
# 99
__syncthreads(); 
# 102
for (int ki = 0; ki < WARP_K_LOOP; ki++) { 
# 103
for (int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 104
nvcuda::wmma::load_matrix_sync((frag_a[yi])[ki], &((smem_a[k % 2])[(((WCM * WARP_SIZE_M) + (yi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 105
for (int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 106
nvcuda::wmma::load_matrix_sync((frag_b[ki])[xi], &((smem_b[k % 2])[(((WCN * WARP_SIZE_N) + (xi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 107
nvcuda::wmma::mma_sync((frag_c[yi])[xi], (frag_a[yi])[ki], (frag_b[ki])[xi], (frag_c[yi])[xi]); 
# 108
}  
# 109
}  }  
# 110
}  
# 114
#pragma unroll
for (
# 114
int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 116
#pragma unroll
for (
# 116
int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 117
nvcuda::wmma::store_matrix_sync((BWC + ((yi * TC_SIZE) * LDC)) + (xi * TC_SIZE), (frag_c[yi])[xi], LDC, wmma::mem_row_major); 
# 118
}  
# 119
}  
# 121
} 
#endif
# 20 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/gemm_i8.cuh"
template< int BLOCK_SIZE_M, int BLOCK_SIZE_N, int BLOCK_SIZE_K, int WARP_SIZE_M, int WARP_SIZE_N, int STAGE, bool NoTransA, bool NoTransB, bool RowMajorC>  __noinline__ void 
# 21
GEMMI8TCU(const int8_t *A, const int8_t *B, int *C, int M, int N, int K) 
# 22
{::kernel::__wrapper__device_stub_GEMMI8TCU<BLOCK_SIZE_M,BLOCK_SIZE_N,BLOCK_SIZE_K,WARP_SIZE_M,WARP_SIZE_N,STAGE,NoTransA,NoTransB,RowMajorC>(A,B,C,M,N,K);
# 121
return;}
#if 0
# 22
{ 
# 23
auto grid = cg::this_grid(); 
# 24
auto block = cg::this_thread_block(); 
# 25
cooperative_groups::__v1::thread_block_tile< 32>  tile32 = cg::tiled_partition< 32U> (block); 
# 27
int warp_id = tile32.meta_group_rank(); 
# 28
int lane_id = tile32.thread_rank(); 
# 30
constexpr int WARP_SIZE = 32; 
# 31
constexpr int TC_SIZE = 16; 
# 32
constexpr int WAPR_NUM_N = (BLOCK_SIZE_N / WARP_SIZE_N); 
# 33
constexpr int WAPR_NUM_M = (BLOCK_SIZE_M / WARP_SIZE_M); 
# 34
constexpr int WAPR_NUM = (WAPR_NUM_M * WAPR_NUM_N); 
# 36
static_assert(((NoTransA) == GEMM_OP_T), "NoTransA == GEMM_OP_T");
# 37
static_assert(((NoTransB) == GEMM_OP_N), "NoTransB == GEMM_OP_N");
# 38
static_assert(((RowMajorC) == GEMM_OP_T), "RowMajorC == GEMM_OP_T");
# 40
__attribute__((unused)) static int8_t SLB[STAGE * ((BLOCK_SIZE_K * BLOCK_SIZE_M) + (BLOCK_SIZE_K * BLOCK_SIZE_N))]; 
# 42
int8_t *smem_a[2]; 
# 43
int8_t *smem_b[2]; 
# 45
(smem_a[0]) = SLB; 
# 46
(smem_a[1]) = (SLB + (BLOCK_SIZE_K * BLOCK_SIZE_M)); 
# 47
(smem_b[0]) = (SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)); 
# 48
(smem_b[1]) = ((SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)) + (BLOCK_SIZE_K * BLOCK_SIZE_N)); 
# 50
const int BCM = (BLOCK_SIZE_M) * (__device_builtin_variable_blockIdx.y); 
# 51
const int BCN = (BLOCK_SIZE_N) * (__device_builtin_variable_blockIdx.x); 
# 53
const int LDA = (NoTransA ? K : M); 
# 54
const int LDB = (NoTransB ? N : K); 
# 55
const int LDC = (RowMajorC ? N : M); 
# 57
const int WCM = warp_id / WAPR_NUM_N; 
# 58
const int WCN = warp_id % WAPR_NUM_N; 
# 60
const int BLOCK_K_LOOP = K / BLOCK_SIZE_K; 
# 62
const int8_t *BA = (A + (BCM * LDA)); 
# 63
const int8_t *BB = (B + (BCN * LDB)); 
# 64
int *BC = ((C + (BCM * LDC)) + BCN); 
# 65
int *BWC = ((BC + ((WCM * WARP_SIZE_M) * LDC)) + (WCN * WARP_SIZE_N)); 
# 67
constexpr int WARP_M_LOOP = (WARP_SIZE_M / TC_SIZE); 
# 68
constexpr int WARP_N_LOOP = (WARP_SIZE_N / TC_SIZE); 
# 69
constexpr int WARP_K_LOOP = (BLOCK_SIZE_K / TC_SIZE); 
# 71
nvcuda::wmma::fragment< nvcuda::wmma::matrix_a, 16, 16, 16, signed char, nvcuda::wmma::row_major>  frag_a[WARP_M_LOOP][WARP_K_LOOP]; 
# 72
nvcuda::wmma::fragment< nvcuda::wmma::matrix_b, 16, 16, 16, signed char, nvcuda::wmma::col_major>  frag_b[WARP_K_LOOP][WARP_N_LOOP]; 
# 73
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, int>  frag_c[WARP_M_LOOP][WARP_N_LOOP]; 
# 76
#pragma unroll
for (
# 76
int i = 0; i < WARP_M_LOOP; i++) { 
# 78
#pragma unroll
for (
# 78
int j = 0; j < WARP_N_LOOP; j++) { 
# 79
nvcuda::wmma::fill_fragment((frag_c[i])[j], 0); 
# 80
}  
# 81
}  
# 83
constexpr int WARP_SIZE_X = 2; 
# 84
int lane_id_x = lane_id % WARP_SIZE_X; 
# 85
int lane_id_y = lane_id / WARP_SIZE_X; 
# 87
for (int k = 0; k < BLOCK_K_LOOP; k++) { 
# 88
const auto *load_gmem_addr_a = ((BA + (((warp_id * TC_SIZE) + lane_id_y) * LDA)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 89
const auto *load_gmem_addr_b = ((BB + (((warp_id * TC_SIZE) + lane_id_y) * LDB)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 91
int store_smem_addr_a = __cvta_generic_to_shared(((smem_a[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 92
int store_smem_addr_b = __cvta_generic_to_shared(((smem_b[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 94
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_a), "l" (load_gmem_addr_a), "n" (16)); 
# 95
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_b), "l" (load_gmem_addr_b), "n" (16)); 
# 97
__asm__("cp.async.commit_group;\n" : :); 
# 98
__asm__("cp.async.wait_group 0;\n" : :); 
# 99
__syncthreads(); 
# 102
for (int ki = 0; ki < WARP_K_LOOP; ki++) { 
# 103
for (int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 104
nvcuda::wmma::load_matrix_sync((frag_a[yi])[ki], &((smem_a[k % 2])[(((WCM * WARP_SIZE_M) + (yi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 105
for (int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 106
nvcuda::wmma::load_matrix_sync((frag_b[ki])[xi], &((smem_b[k % 2])[(((WCN * WARP_SIZE_N) + (xi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 107
nvcuda::wmma::mma_sync((frag_c[yi])[xi], (frag_a[yi])[ki], (frag_b[ki])[xi], (frag_c[yi])[xi]); 
# 108
}  
# 109
}  }  
# 110
}  
# 114
#pragma unroll
for (
# 114
int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 116
#pragma unroll
for (
# 116
int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 117
nvcuda::wmma::store_matrix_sync((BWC + ((yi * TC_SIZE) * LDC)) + (xi * TC_SIZE), (frag_c[yi])[xi], LDC, wmma::mem_row_major); 
# 118
}  
# 119
}  
# 121
} 
#endif

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

# 123 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/gemm_i8.cuh"
template< int BLOCK_SIZE_M, int BLOCK_SIZE_N, int BLOCK_SIZE_K, int WARP_SIZE_M, int WARP_SIZE_N, int STAGE, bool NoTransA, bool NoTransB, bool RowMajorC> static void 
# 124
__wrapper__device_stub_GEMMI8TCU(const int8_t *&A, const int8_t *&B, int8_t *&C, int &M, int &N, int &K) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#pragma GCC diagnostic pop

#if 0
# 125
{ 
# 126
auto grid = cg::this_grid(); 
# 127
auto block = cg::this_thread_block(); 
# 128
cooperative_groups::__v1::thread_block_tile< 32>  tile32 = cg::tiled_partition< 32U> (block); 
# 130
int warp_id = tile32.meta_group_rank(); 
# 131
int lane_id = tile32.thread_rank(); 
# 133
constexpr int WARP_SIZE = 32; 
# 134
constexpr int TC_SIZE = 16; 
# 135
constexpr int WAPR_NUM_N = (BLOCK_SIZE_N / WARP_SIZE_N); 
# 136
constexpr int WAPR_NUM_M = (BLOCK_SIZE_M / WARP_SIZE_M); 
# 137
constexpr int WAPR_NUM = (WAPR_NUM_M * WAPR_NUM_N); 
# 139
static_assert(((NoTransA) == GEMM_OP_T), "NoTransA == GEMM_OP_T");
# 140
static_assert(((NoTransB) == GEMM_OP_N), "NoTransB == GEMM_OP_N");
# 141
static_assert(((RowMajorC) == GEMM_OP_T), "RowMajorC == GEMM_OP_T");
# 143
__attribute__((unused)) static int8_t SLB[STAGE * ((BLOCK_SIZE_K * BLOCK_SIZE_M) + (BLOCK_SIZE_K * BLOCK_SIZE_N))]; 
# 145
int8_t *smem_a[2]; 
# 146
int8_t *smem_b[2]; 
# 148
(smem_a[0]) = SLB; 
# 149
(smem_a[1]) = (SLB + (BLOCK_SIZE_K * BLOCK_SIZE_M)); 
# 150
(smem_b[0]) = (SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)); 
# 151
(smem_b[1]) = ((SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)) + (BLOCK_SIZE_K * BLOCK_SIZE_N)); 
# 153
const int BCM = (BLOCK_SIZE_M) * (__device_builtin_variable_blockIdx.y); 
# 154
const int BCN = (BLOCK_SIZE_N) * (__device_builtin_variable_blockIdx.x); 
# 156
const int LDA = (NoTransA ? K : M); 
# 157
const int LDB = (NoTransB ? N : K); 
# 158
const int LDC = (RowMajorC ? N : M); 
# 160
const int WCM = warp_id / WAPR_NUM_N; 
# 161
const int WCN = warp_id % WAPR_NUM_N; 
# 163
const int BLOCK_K_LOOP = K / BLOCK_SIZE_K; 
# 165
const int8_t *BA = (A + (BCM * LDA)); 
# 166
const int8_t *BB = (B + (BCN * LDB)); 
# 167
int8_t *BC = ((C + (BCM * LDC)) + BCN); 
# 168
int8_t *BWC = ((BC + ((WCM * WARP_SIZE_M) * LDC)) + (WCN * WARP_SIZE_N)); 
# 170
constexpr int WARP_M_LOOP = (WARP_SIZE_M / TC_SIZE); 
# 171
constexpr int WARP_N_LOOP = (WARP_SIZE_N / TC_SIZE); 
# 172
constexpr int WARP_K_LOOP = (BLOCK_SIZE_K / TC_SIZE); 
# 174
nvcuda::wmma::fragment< nvcuda::wmma::matrix_a, 16, 16, 16, signed char, nvcuda::wmma::row_major>  frag_a[WARP_M_LOOP][WARP_K_LOOP]; 
# 175
nvcuda::wmma::fragment< nvcuda::wmma::matrix_b, 16, 16, 16, signed char, nvcuda::wmma::col_major>  frag_b[WARP_K_LOOP][WARP_N_LOOP]; 
# 176
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, int>  frag_c[WARP_M_LOOP][WARP_N_LOOP]; 
# 179
#pragma unroll
for (
# 179
int i = 0; i < WARP_M_LOOP; i++) { 
# 181
#pragma unroll
for (
# 181
int j = 0; j < WARP_N_LOOP; j++) { 
# 182
nvcuda::wmma::fill_fragment((frag_c[i])[j], 0); 
# 183
}  
# 184
}  
# 186
constexpr int WARP_SIZE_X = 2; 
# 187
int lane_id_x = lane_id % WARP_SIZE_X; 
# 188
int lane_id_y = lane_id / WARP_SIZE_X; 
# 190
for (int k = 0; k < BLOCK_K_LOOP; k++) { 
# 191
const auto *load_gmem_addr_a = ((BA + (((warp_id * TC_SIZE) + lane_id_y) * LDA)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 192
const auto *load_gmem_addr_b = ((BB + (((warp_id * TC_SIZE) + lane_id_y) * LDB)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 194
int store_smem_addr_a = __cvta_generic_to_shared(((smem_a[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 195
int store_smem_addr_b = __cvta_generic_to_shared(((smem_b[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 197
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_a), "l" (load_gmem_addr_a), "n" (16)); 
# 198
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_b), "l" (load_gmem_addr_b), "n" (16)); 
# 200
__asm__("cp.async.commit_group;\n" : :); 
# 201
__asm__("cp.async.wait_group 0;\n" : :); 
# 202
__syncthreads(); 
# 205
for (int ki = 0; ki < WARP_K_LOOP; ki++) { 
# 206
for (int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 207
nvcuda::wmma::load_matrix_sync((frag_a[yi])[ki], &((smem_a[k % 2])[(((WCM * WARP_SIZE_M) + (yi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 208
for (int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 209
nvcuda::wmma::load_matrix_sync((frag_b[ki])[xi], &((smem_b[k % 2])[(((WCN * WARP_SIZE_N) + (xi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 210
nvcuda::wmma::mma_sync((frag_c[yi])[xi], (frag_a[yi])[ki], (frag_b[ki])[xi], (frag_c[yi])[xi]); 
# 211
}  
# 212
}  }  
# 213
}  
# 215
int gmem_lane_id_x = lane_id % 4; 
# 216
int gmem_lane_id_y = lane_id / 4; 
# 218
#pragma unroll
for (
# 218
int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 220
#pragma unroll
for (
# 220
int xi = 0; xi < WARP_N_LOOP; xi++) 
# 221
{ 
# 222
int8_t tmp_char[8]; 
# 224
#pragma unroll
for (
# 224
int i = 0; i < 8; i++) { 
# 225
(tmp_char[i]) = (static_cast< int8_t>((((frag_c[yi])[xi]).x)[i])); 
# 226
}  
# 228
for (int tc_yi = 0; tc_yi < 2; tc_yi++) { 
# 229
for (int tc_xi = 0; tc_xi < 2; tc_xi++) { 
# 230
auto *store_gmem_addr = reinterpret_cast< char2 *>((((BWC + ((((yi * TC_SIZE) + ((tc_yi * TC_SIZE) / 2)) + gmem_lane_id_y) * LDC)) + (xi * TC_SIZE)) + ((tc_xi * TC_SIZE) / 2)) + (gmem_lane_id_x * 2)); 
# 231
char2 tmp_char2; 
# 232
(tmp_char2.x) = (tmp_char[((tc_xi * 4) + (tc_yi * 2)) + 0]); 
# 233
(tmp_char2.y) = (tmp_char[((tc_xi * 4) + (tc_yi * 2)) + 1]); 
# 234
(*store_gmem_addr) = tmp_char2; 
# 235
}  
# 236
}  
# 237
}  }  
# 238
} 
#endif
# 123 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/gemm_i8.cuh"
template< int BLOCK_SIZE_M, int BLOCK_SIZE_N, int BLOCK_SIZE_K, int WARP_SIZE_M, int WARP_SIZE_N, int STAGE, bool NoTransA, bool NoTransB, bool RowMajorC>  __noinline__ void 
# 124
GEMMI8TCU(const int8_t *A, const int8_t *B, int8_t *C, int M, int N, int K) 
# 125
{::kernel::__wrapper__device_stub_GEMMI8TCU<BLOCK_SIZE_M,BLOCK_SIZE_N,BLOCK_SIZE_K,WARP_SIZE_M,WARP_SIZE_N,STAGE,NoTransA,NoTransB,RowMajorC>(A,B,C,M,N,K);
# 238
return;}
#if 0
# 125
{ 
# 126
auto grid = cg::this_grid(); 
# 127
auto block = cg::this_thread_block(); 
# 128
cooperative_groups::__v1::thread_block_tile< 32>  tile32 = cg::tiled_partition< 32U> (block); 
# 130
int warp_id = tile32.meta_group_rank(); 
# 131
int lane_id = tile32.thread_rank(); 
# 133
constexpr int WARP_SIZE = 32; 
# 134
constexpr int TC_SIZE = 16; 
# 135
constexpr int WAPR_NUM_N = (BLOCK_SIZE_N / WARP_SIZE_N); 
# 136
constexpr int WAPR_NUM_M = (BLOCK_SIZE_M / WARP_SIZE_M); 
# 137
constexpr int WAPR_NUM = (WAPR_NUM_M * WAPR_NUM_N); 
# 139
static_assert(((NoTransA) == GEMM_OP_T), "NoTransA == GEMM_OP_T");
# 140
static_assert(((NoTransB) == GEMM_OP_N), "NoTransB == GEMM_OP_N");
# 141
static_assert(((RowMajorC) == GEMM_OP_T), "RowMajorC == GEMM_OP_T");
# 143
__attribute__((unused)) static int8_t SLB[STAGE * ((BLOCK_SIZE_K * BLOCK_SIZE_M) + (BLOCK_SIZE_K * BLOCK_SIZE_N))]; 
# 145
int8_t *smem_a[2]; 
# 146
int8_t *smem_b[2]; 
# 148
(smem_a[0]) = SLB; 
# 149
(smem_a[1]) = (SLB + (BLOCK_SIZE_K * BLOCK_SIZE_M)); 
# 150
(smem_b[0]) = (SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)); 
# 151
(smem_b[1]) = ((SLB + ((STAGE * BLOCK_SIZE_K) * BLOCK_SIZE_M)) + (BLOCK_SIZE_K * BLOCK_SIZE_N)); 
# 153
const int BCM = (BLOCK_SIZE_M) * (__device_builtin_variable_blockIdx.y); 
# 154
const int BCN = (BLOCK_SIZE_N) * (__device_builtin_variable_blockIdx.x); 
# 156
const int LDA = (NoTransA ? K : M); 
# 157
const int LDB = (NoTransB ? N : K); 
# 158
const int LDC = (RowMajorC ? N : M); 
# 160
const int WCM = warp_id / WAPR_NUM_N; 
# 161
const int WCN = warp_id % WAPR_NUM_N; 
# 163
const int BLOCK_K_LOOP = K / BLOCK_SIZE_K; 
# 165
const int8_t *BA = (A + (BCM * LDA)); 
# 166
const int8_t *BB = (B + (BCN * LDB)); 
# 167
int8_t *BC = ((C + (BCM * LDC)) + BCN); 
# 168
int8_t *BWC = ((BC + ((WCM * WARP_SIZE_M) * LDC)) + (WCN * WARP_SIZE_N)); 
# 170
constexpr int WARP_M_LOOP = (WARP_SIZE_M / TC_SIZE); 
# 171
constexpr int WARP_N_LOOP = (WARP_SIZE_N / TC_SIZE); 
# 172
constexpr int WARP_K_LOOP = (BLOCK_SIZE_K / TC_SIZE); 
# 174
nvcuda::wmma::fragment< nvcuda::wmma::matrix_a, 16, 16, 16, signed char, nvcuda::wmma::row_major>  frag_a[WARP_M_LOOP][WARP_K_LOOP]; 
# 175
nvcuda::wmma::fragment< nvcuda::wmma::matrix_b, 16, 16, 16, signed char, nvcuda::wmma::col_major>  frag_b[WARP_K_LOOP][WARP_N_LOOP]; 
# 176
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, int>  frag_c[WARP_M_LOOP][WARP_N_LOOP]; 
# 179
#pragma unroll
for (
# 179
int i = 0; i < WARP_M_LOOP; i++) { 
# 181
#pragma unroll
for (
# 181
int j = 0; j < WARP_N_LOOP; j++) { 
# 182
nvcuda::wmma::fill_fragment((frag_c[i])[j], 0); 
# 183
}  
# 184
}  
# 186
constexpr int WARP_SIZE_X = 2; 
# 187
int lane_id_x = lane_id % WARP_SIZE_X; 
# 188
int lane_id_y = lane_id / WARP_SIZE_X; 
# 190
for (int k = 0; k < BLOCK_K_LOOP; k++) { 
# 191
const auto *load_gmem_addr_a = ((BA + (((warp_id * TC_SIZE) + lane_id_y) * LDA)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 192
const auto *load_gmem_addr_b = ((BB + (((warp_id * TC_SIZE) + lane_id_y) * LDB)) + (k * BLOCK_SIZE_K)) + (lane_id_x * 16); 
# 194
int store_smem_addr_a = __cvta_generic_to_shared(((smem_a[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 195
int store_smem_addr_b = __cvta_generic_to_shared(((smem_b[k % 2]) + (((warp_id * TC_SIZE) + lane_id_y) * BLOCK_SIZE_K)) + (lane_id_x * 16)); 
# 197
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_a), "l" (load_gmem_addr_a), "n" (16)); 
# 198
__asm__ volatile("cp.async.ca.shared.global.L2::128B [%0], [%1], %2;\n" : : "r" (store_smem_addr_b), "l" (load_gmem_addr_b), "n" (16)); 
# 200
__asm__("cp.async.commit_group;\n" : :); 
# 201
__asm__("cp.async.wait_group 0;\n" : :); 
# 202
__syncthreads(); 
# 205
for (int ki = 0; ki < WARP_K_LOOP; ki++) { 
# 206
for (int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 207
nvcuda::wmma::load_matrix_sync((frag_a[yi])[ki], &((smem_a[k % 2])[(((WCM * WARP_SIZE_M) + (yi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 208
for (int xi = 0; xi < WARP_N_LOOP; xi++) { 
# 209
nvcuda::wmma::load_matrix_sync((frag_b[ki])[xi], &((smem_b[k % 2])[(((WCN * WARP_SIZE_N) + (xi * TC_SIZE)) * BLOCK_SIZE_K) + (ki * TC_SIZE)]), BLOCK_SIZE_K); 
# 210
nvcuda::wmma::mma_sync((frag_c[yi])[xi], (frag_a[yi])[ki], (frag_b[ki])[xi], (frag_c[yi])[xi]); 
# 211
}  
# 212
}  }  
# 213
}  
# 215
int gmem_lane_id_x = lane_id % 4; 
# 216
int gmem_lane_id_y = lane_id / 4; 
# 218
#pragma unroll
for (
# 218
int yi = 0; yi < WARP_M_LOOP; yi++) { 
# 220
#pragma unroll
for (
# 220
int xi = 0; xi < WARP_N_LOOP; xi++) 
# 221
{ 
# 222
int8_t tmp_char[8]; 
# 224
#pragma unroll
for (
# 224
int i = 0; i < 8; i++) { 
# 225
(tmp_char[i]) = (static_cast< int8_t>((((frag_c[yi])[xi]).x)[i])); 
# 226
}  
# 228
for (int tc_yi = 0; tc_yi < 2; tc_yi++) { 
# 229
for (int tc_xi = 0; tc_xi < 2; tc_xi++) { 
# 230
auto *store_gmem_addr = reinterpret_cast< char2 *>((((BWC + ((((yi * TC_SIZE) + ((tc_yi * TC_SIZE) / 2)) + gmem_lane_id_y) * LDC)) + (xi * TC_SIZE)) + ((tc_xi * TC_SIZE) / 2)) + (gmem_lane_id_x * 2)); 
# 231
char2 tmp_char2; 
# 232
(tmp_char2.x) = (tmp_char[((tc_xi * 4) + (tc_yi * 2)) + 0]); 
# 233
(tmp_char2.y) = (tmp_char[((tc_xi * 4) + (tc_yi * 2)) + 1]); 
# 234
(*store_gmem_addr) = tmp_char2; 
# 235
}  
# 236
}  
# 237
}  }  
# 238
} 
#endif
# 241 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/gemm_i8.cuh"
}
# 18 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
using namespace std;
# 21
template< bool use_tcu, class T> void 
# 22
GEMMI8(cudaStream_t stream, const int8_t *
# 23
A, const int8_t *B, T *C, int 
# 24
M, int N, int K, bool 
# 25
transA, bool transB, bool transC) 
# 26
{ 
# 27
constexpr int BLOCK_M = 256; 
# 28
constexpr int BLOCK_N = 256; 
# 29
constexpr int BLOCK_K = 32; 
# 30
constexpr int WARP_M = 64; 
# 31
constexpr int WARP_N = 64; 
# 32
constexpr int WARP_SIZE = 32; 
# 34
dim3 block(((BLOCK_M / WARP_M) * (BLOCK_N / WARP_N)) * WARP_SIZE, 1, 1); 
# 35
dim3 grid((((N + BLOCK_N) - 1) / BLOCK_N) / 1, ((M + BLOCK_M) - 1) / BLOCK_M); 
# 37
if ((transA == GEMM_OP_T) && (transB == GEMM_OP_N) && (transC == GEMM_OP_T)) { 
# 38
(__cudaPushCallConfiguration(grid, block, 0, stream)) ? (void)0 : kernel::GEMMI8TCU< BLOCK_M, BLOCK_N, BLOCK_K, WARP_M, WARP_N, 2, GEMM_OP_T, GEMM_OP_N, GEMM_OP_T> (A, B, C, M, N, K); }  
# 40
} 
# 43
template< class T> 
# 44
class GEMM { 
# 46
public: GEMM(bool use_tcu, int m, int n, int k, bool transa, bool transb, bool transc) { 
# 47
(this->use_tcu) = use_tcu; 
# 49
(this->M) = m; 
# 50
(this->N) = n; 
# 51
(this->K) = k; 
# 53
(this->len_a) = ((M) * (K)); 
# 54
(this->len_b) = ((N) * (K)); 
# 55
(this->len_c) = ((M) * (N)); 
# 57
(this->trans_a) = transa; 
# 58
(this->trans_b) = transb; 
# 59
(this->trans_c) = transc; 
# 61
(((((((((((((((((((((((((((((((((((((cout << ("compute type=int32"))) << (", "))) << ("input data type=int8"))) << (", "))) << ("output data type="))) << ((std::template is_same< T, int8_t> ::value) ? "int8" : ("int32")))) << (", "))) << ("use_tcu="))) << use_tcu)) << (", "))) << ("M="))) << m)) << (", "))) << ("N="))) << n)) << (", "))) << ("K="))) << k)) << (endl)); 
# 70
generateTestData(); 
# 71
} 
# 73
~GEMM() = default;
# 75
void generateTestData() { 
# 77
const auto random_seed = 2023; 
# 78
std::mt19937 generator(static_cast< unsigned>(random_seed)); 
# 80
((h_mat_A) = std::vector< int8_t> (len_a, 0)); 
# 81
((h_mat_B) = std::vector< int8_t> (len_b, 0)); 
# 82
(h_mat_C) = std::vector< T> (len_c, 0); 
# 83
(h_mat_C_ref) = std::vector< T> (len_c, 0); 
# 85
std::uniform_int_distribution<>  uniform_char_distribution((-127) - 1, 127); 
# 87 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
auto rand_gen = std::bind(uniform_char_distribution, generator); 
# 88
auto const_gen = []() { return 1; } ; 
# 89
auto pattern_gen = []() { static int i = 0; return ((i++) / 32) % 64; } ; 
# 91
generate_n((h_mat_A).begin(), len_a, rand_gen); 
# 92
generate_n((h_mat_B).begin(), len_b, rand_gen); 
# 94
} 
# 97
void testGEMM() { 
# 98
cudaStream_t stream; 
# 99 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaStreamCreate(&stream)))) ? (void)0 : __assert_fail("cudaSuccess==cudaStreamCreate(&stream)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 99, __extension__ __PRETTY_FUNCTION__); 
# 102 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
{ 
# 103
cpuGEMM< float, float, int8_t, T> ((h_mat_A).data(), (h_mat_B).data(), (h_mat_C_ref).data(), M, N, K, len_a, len_b, len_c, 1, static_cast< float>(1), static_cast< float>(0), GEMM_OP_T, GEMM_OP_N, GEMM_OP_T); 
# 107
} 
# 109 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaMalloc(&(d_mat_A), (len_a) * (sizeof(int8_t)))))) ? (void)0 : __assert_fail("cudaSuccess==cudaMalloc(&d_mat_A, len_a * sizeof(int8_t))", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 109, __extension__ __PRETTY_FUNCTION__); 
# 110 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaMalloc(&(d_mat_B), (len_b) * (sizeof(int8_t)))))) ? (void)0 : __assert_fail("cudaSuccess==cudaMalloc(&d_mat_B, len_b * sizeof(int8_t))", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 110, __extension__ __PRETTY_FUNCTION__); 
# 111 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>(cudaSuccess == cudaMalloc(&(d_mat_C), (len_c) * (sizeof(T))))) ? (void)0 : __assert_fail("cudaSuccess==cudaMalloc(&d_mat_C, len_c * sizeof(T))", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 111, __extension__ __PRETTY_FUNCTION__); 
# 113 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaMemcpy(d_mat_A, (h_mat_A).data(), (len_a) * (sizeof(int8_t)), cudaMemcpyHostToDevice)))) ? (void)0 : __assert_fail("cudaSuccess==cudaMemcpy(d_mat_A, h_mat_A.data(), len_a * sizeof(int8_t), cudaMemcpyHostToDevice)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 113, __extension__ __PRETTY_FUNCTION__); 
# 114 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaMemcpy(d_mat_B, (h_mat_B).data(), (len_b) * (sizeof(int8_t)), cudaMemcpyHostToDevice)))) ? (void)0 : __assert_fail("cudaSuccess==cudaMemcpy(d_mat_B, h_mat_B.data(), len_b * sizeof(int8_t), cudaMemcpyHostToDevice)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 114, __extension__ __PRETTY_FUNCTION__); 
# 115 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>(cudaSuccess == cudaMemset(d_mat_C, 0, (len_c) * (sizeof(T))))) ? (void)0 : __assert_fail("cudaSuccess==cudaMemset(d_mat_C, 0, len_c * sizeof(T))", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 115, __extension__ __PRETTY_FUNCTION__); 
# 120 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
float milliseconds = (0.0F); 
# 121
cudaEvent_t start, stop; 
# 122
cudaEventCreate(&start); 
# 123
cudaEventCreate(&stop); 
# 124
cudaEventRecord(start, stream); 
# 126
{ 
# 127
if (use_tcu) { GEMMI8< true, T> (stream, d_mat_A, d_mat_B, d_mat_C, M, N, K, trans_a, trans_b, trans_c); }  
# 128
} 
# 130
cudaEventRecord(stop, stream); 
# 131
cudaEventSynchronize(stop); 
# 132
cudaEventElapsedTime(&milliseconds, start, stop); 
# 134
double flops = ((((static_cast< double>(M)) * (static_cast< double>(N))) * (static_cast< double>(K))) * (2)) * (1.0); 
# 135
double gigaFlops = (flops * ((1.0E-9F))) / (milliseconds / (1000.0F)); 
# 136
double bandWidth = (((static_cast< double>((len_a) + (len_b))) * (sizeof(int8_t))) + ((static_cast< double>(len_c)) * (sizeof(T)))) / ((milliseconds * (1000)) * (1000)); 
# 137
printf("\033[31;47m INT8 GEMM took %.3f ms, %.2f GFlop/s, %.2f GB/s \033[0m\n", milliseconds, gigaFlops, bandWidth); 
# 138 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaDeviceSynchronize()))) ? (void)0 : __assert_fail("cudaSuccess==cudaDeviceSynchronize()", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 138, __extension__ __PRETTY_FUNCTION__); 
# 139 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaEventDestroy(start)))) ? (void)0 : __assert_fail("cudaSuccess==cudaEventDestroy(start)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 139, __extension__ __PRETTY_FUNCTION__); 
# 140 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaEventDestroy(stop)))) ? (void)0 : __assert_fail("cudaSuccess==cudaEventDestroy(stop)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 140, __extension__ __PRETTY_FUNCTION__); 
# 141 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>(cudaSuccess == cudaMemcpy((h_mat_C).data(), d_mat_C, (len_c) * (sizeof(T)), cudaMemcpyDeviceToHost))) ? (void)0 : __assert_fail("cudaSuccess==cudaMemcpy(h_mat_C.data(), d_mat_C, len_c * sizeof(T), cudaMemcpyDeviceToHost)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 141, __extension__ __PRETTY_FUNCTION__); 
# 143 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaFree(d_mat_A)))) ? (void)0 : __assert_fail("cudaSuccess==cudaFree(d_mat_A)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 143, __extension__ __PRETTY_FUNCTION__); 
# 144 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaFree(d_mat_B)))) ? (void)0 : __assert_fail("cudaSuccess==cudaFree(d_mat_B)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 144, __extension__ __PRETTY_FUNCTION__); 
# 145 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>(cudaSuccess == cudaFree(d_mat_C))) ? (void)0 : __assert_fail("cudaSuccess==cudaFree(d_mat_C)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 145, __extension__ __PRETTY_FUNCTION__); 
# 146 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu" 3
(static_cast< bool>((cudaSuccess) == (cudaStreamDestroy(stream)))) ? (void)0 : __assert_fail("cudaSuccess==cudaStreamDestroy(stream)", "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu", 146, __extension__ __PRETTY_FUNCTION__); 
# 148 "/home/poweruser/junda.feng/CUDA-INT8-GEMM/test_gemm_i8.cu"
print_vec((h_mat_C).data(), "h_mat_C: ", 0, 32, N); 
# 149
print_vec((h_mat_C_ref).data(), "h_mat_C_ref: ", 0, 32, N); 
# 151
if ((h_mat_C) == (h_mat_C_ref)) { 
# 152
(((cout << ("test passed !"))) << (endl)); 
# 153
} else { 
# 154
(((cout << ("test failed !"))) << (endl)); 
# 155
}  
# 156
} 
# 160
protected: bool use_tcu; 
# 161
int M, N, K; 
# 162
long long len_a, len_b, len_c; 
# 163
bool trans_a, trans_b, trans_c; 
# 165
std::vector< int8_t>  h_mat_A; 
# 166
std::vector< int8_t>  h_mat_B; 
# 167
std::vector< T>  h_mat_C; 
# 168
std::vector< T>  h_mat_C_ref; 
# 170
int8_t *d_mat_A; 
# 171
int8_t *d_mat_B; 
# 172
T *d_mat_C; 
# 173
}; 
# 176
int main(int argc, char **argv) { 
# 178
int M = 256; 
# 179
int N = 256; 
# 180
int K = 32; 
# 182
bool trans_a = GEMM_OP_T; 
# 183
bool trans_b = GEMM_OP_N; 
# 184
bool trans_c = GEMM_OP_T; 
# 186
bool use_tcu = true; 
# 187
bool output_i8 = true; 
# 189
if (argc > 1) { 
# 190
M = atoi(argv[1]); 
# 191
}  
# 192
if (argc > 2) { 
# 193
N = atoi(argv[2]); 
# 194
}  
# 195
if (argc > 3) { 
# 196
K = atoi(argv[3]); 
# 197
}  
# 198
if (argc > 4) { 
# 199
trans_a = (atoi(argv[4])); 
# 200
}  
# 201
if (argc > 5) { 
# 202
trans_b = (atoi(argv[5])); 
# 203
}  
# 204
if (argc > 6) { 
# 205
trans_c = (atoi(argv[6])); 
# 206
}  
# 207
if (argc > 7) { 
# 208
use_tcu = (atoi(argv[7])); 
# 209
}  
# 210
if (argc > 8) { 
# 211
output_i8 = (atoi(argv[8])); 
# 212
}  
# 214
if (output_i8) 
# 215
{ 
# 216
GEMM< signed char>  gemm(use_tcu, M, N, K, trans_a, trans_b, trans_c); 
# 217
gemm.testGEMM(); 
# 218
} else 
# 219
{ 
# 220
GEMM< int>  gemm(use_tcu, M, N, K, trans_a, trans_b, trans_c); 
# 221
gemm.testGEMM(); 
# 222
}  
# 224
return 0; 
# 225
} 

# 1 "test_gemm_i8.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__7a73785f_15_test_gemm_i8_cu_46d8dfc7
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "test_gemm_i8.cudafe1.stub.c"
#include "test_gemm_i8.cudafe1.stub.c"
# 1 "test_gemm_i8.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
